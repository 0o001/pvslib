(affine_expr_Eval_fnd
 (CacheData_TCC1 0
  (CacheData_TCC1-1 nil 3635095591 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (restrict const-decl "R" restrict nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (CacheData_correct?_TCC1 0
  (CacheData_correct?_TCC1-1 nil 3631623248 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil))
   nil))
 (CacheData_correct?_TCC2 0
  (CacheData_correct?_TCC2-1 nil 3631623248 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (CacheData_correct?_TCC3 0
  (CacheData_correct?_TCC3-1 nil 3631623248 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (length def-decl "nat" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (represents_var? const-decl "bool" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (correct_cache?_TCC1 0
  (correct_cache?_TCC1-1 nil 3631620842 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (last_ol def-decl "T" ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (length def-decl "nat" list_props nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (cache_powvar_correct 0
  (cache_powvar_correct-1 nil 3632133476
   ("" (skolem 1 ("box_" "cache_" "i_"))
    (("" (name "L" "length(cache_)")
      (("" (typepred "i_")
        (("" (generalize-skolem-constants)
          (("" (induct "L_1")
            (("1" (skeep) (("1" (grind) nil nil)) nil)
             ("2" (skolem 1 "j")
              (("2" (flatten)
                (("2" (skeep)
                  (("2" (expand "nth" 1)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (typepred "cache_1")
                          (("1" (expand "correct_cache?")
                            (("1" (lift-if -1)
                              (("1"
                                (split -1)
                                (("1"
                                  (expand "length")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst? -1 :where 2)
                          (("1" (assert)
                            (("1" (split 3)
                              (("1"
                                (expand "length" -1)
                                (("1"
                                  (lift-if -1)
                                  (("1"
                                    (split -1)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" -2)
                                (("2"
                                  (lift-if -2)
                                  (("2"
                                    (split -2)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil)
                           ("3" (typepred "cache_1")
                            (("3" (expand "correct_cache?" -1)
                              (("3"
                                (lift-if -1)
                                (("3"
                                  (split -1)
                                  (("1" (grind) nil nil)
                                   ("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (length def-decl "nat" list_props nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (box_1 skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cache_1 skolem-const-decl "(correct_cache?(box_1))"
     affine_expr_Eval_fnd nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i_1 skolem-const-decl "below(length(cache_1))"
     affine_expr_Eval_fnd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (compatible_pairs_on?_TCC1 0
  (compatible_pairs_on?_TCC1-1 nil 3631905767
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (eval_ac_noise const-decl "real" affine nil))
   nil))
 (compatible_pairs_on?_TCC2 0
  (compatible_pairs_on?_TCC2-1 nil 3631905767 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length def-decl "nat" list_props nil)
    (represents_var? const-decl "bool" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (compatible_pairs_on?_TCC3 0
  (compatible_pairs_on?_TCC3-1 nil 3631905767
   ("" (skeep*)
    (("" (typepred "l")
      (("" (use "cache_powvar_correct")
        (("" (expand "CacheData_correct?")
          (("" (assert)
            (("" (flatten)
              (("" (assert)
                (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cache_powvar_correct formula-decl nil affine_expr_Eval_fnd nil))
   nil))
 (cache_get_TCC1 0
  (cache_get_TCC1-1 nil 3631365124 ("" (termination-tcc) nil nil) nil
   nil))
 (cache_get_TCC2 0
  (cache_get_TCC2-1 nil 3631366154
   ("" (skeep*)
    (("" (inst 1 "0")
      (("1" (expand "nth")
        (("1" (replace -1 :dir RL)
          (("1" (replace -2)
            (("1" (assert) (("1" (apply-extensionality 1) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cache skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd
     nil)
    (length def-decl "nat" list_props nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (cache_get_TCC3 0
  (cache_get_TCC3-1 nil 3631366154 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil))
 (cache_get_TCC4 0
  (cache_get_TCC4-1 nil 3631366154
   ("" (skeep*)
    (("" (typepred "v(t)(re)")
      (("" (assert)
        (("" (skeep)
          (("" (inst 2 "i+1")
            (("1" (replace -3)
              (("1" (expand "nth" 2) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cache skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd
     nil)
    (i skolem-const-decl "below(length(t))" affine_expr_Eval_fnd nil)
    (t skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cache_get_powvar_TCC1 0
  (cache_get_powvar_TCC1-1 nil 3631466640 ("" (subtype-tcc) nil nil)
   nil nil))
 (cache_get_powvar_TCC2 0
  (cache_get_powvar_TCC2-1 nil 3631466640
   ("" (termination-tcc) nil nil) nil nil))
 (cache_get_powvar_TCC3 0
  (cache_get_powvar_TCC3-1 nil 3631466640
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   shostak))
 (cache_get_powvar_TCC4 0
  (cache_get_powvar_TCC4-1 nil 3631466640
   ("" (skeep* :preds? t)
    (("" (typepred "v(t)(re)")
      (("" (assert)
        (("" (flatten)
          (("" (assert)
            (("" (replaces -5)
              (("" (skeep)
                (("" (inst 2 "i+1")
                  (("1" (expand "nth" 2) (("1" (propax) nil nil)) nil)
                   ("2" (typepred "i")
                    (("2" (reveal -1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (t skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd nil)
    (i skolem-const-decl "below(length(t))" affine_expr_Eval_fnd nil)
    (cache skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (cache_get_powvar_TCC5 0
  (cache_get_powvar_TCC5-1 nil 3631466640
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil))
   nil))
 (cache_get_powvar_TCC6 0
  (cache_get_powvar_TCC6-1 nil 3631466640
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (cache_get_powvar_TCC7 0
  (cache_get_powvar_TCC7-1 nil 3631466640
   ("" (skeep* :preds? t)
    (("" (typepred "v(t)(re)")
      (("" (assert)
        (("" (flatten)
          (("" (assert)
            (("" (replaces -6)
              (("" (skeep)
                (("" (inst 2 "i+1")
                  (("1" (expand "nth" 2) (("1" (propax) nil nil)) nil)
                   ("2" (typepred "i")
                    (("2" (reveal -1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (t skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd nil)
    (i skolem-const-decl "below(length(t))" affine_expr_Eval_fnd nil)
    (cache skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (cache_get_powvar_TCC8 0
  (cache_get_powvar_TCC8-1 nil 3631466640
   ("" (skeep*)
    (("" (assert)
      (("" (inst 1 "0") (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (length def-decl "nat" list_props nil)
    (cache skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cache_get_powvar_TCC9 0
  (cache_get_powvar_TCC9-1 nil 3631466640
   ("" (skeep*)
    (("" (assert)
      (("" (inst 2 "0") (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (cache_get_powvar_TCC10 0
  (cache_get_powvar_TCC10-1 nil 3631466640
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "nextresult") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (cache_get_powvar_TCC11 0
  (cache_get_powvar_TCC11-1 nil 3631466640
   ("" (skeep*)
    (("" (assert)
      (("" (inst 2 "0") (("1" (grind) nil nil) ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (length def-decl "nat" list_props nil)
    (cache skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (cache_get_powvar_TCC12 0
  (cache_get_powvar_TCC12-1 nil 3631554556
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "nextresult")
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (skeep)
                (("" (inst 4 "i+1")
                  (("1" (grind) nil nil)
                   ("2" (typepred "i") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (t skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd nil)
    (i skolem-const-decl "below(length(t))" affine_expr_Eval_fnd nil)
    (cache skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   nil))
 (cache_get_powvar_TCC13 0
  (cache_get_powvar_TCC13-1 nil 3631554556
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (cache_powvar_correct_result 0
  (cache_powvar_correct_result-1 nil 3632140157
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (typepred "cache_get_powvar(cache)(re)")
          (("" (assert)
            (("" (flatten)
              (("" (skeep)
                (("" (use "cache_powvar_correct")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cache_get_powvar def-decl "{res: Maybe[CacheData] |
         some?(res) IMPLIES
          powvar?(val(res)`1) AND
           varidx(val(res)`1) = varidx(re) AND
            (EXISTS (i: below(length(cache))): nth(cache, i) = val(res))}"
     affine_expr_Eval_fnd nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cache_powvar_correct formula-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil))
   shostak))
 (RE2AC_TCC1 0
  (RE2AC_TCC1-1 nil 3631293338 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (RE2AC_TCC2 0
  (RE2AC_TCC2-1 nil 3631293338
   ("" (lemma "well_founded_restrict[AffineExpr, RealExpr]")
    (("" (inst?)
      (("" (expand "well_founded?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[AffineExpr])"
     AffineExpr_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded_restrict judgement-tcc nil restrict_order_props nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (RE2AC_TCC3 0
  (RE2AC_TCC3-1 nil 3631293338
   ("" (skeep*)
    (("" (assert)
      (("" (replaces -1)
        (("" (replaces -1)
          (("" (hide -1)
            (("" (assert)
              (("" (split 1)
                (("1" (inst 1 "(:(CONST(opc, opC), opC, null):)")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (typepred "cache")
                  (("2" (expand "compatible_pairs?")
                    (("2" (skeep)
                      (("2" (inst 1 "N")
                        (("2" (assert)
                          (("2" (expand "compatible_pairs_on?")
                            (("2" (skeep)
                              (("2"
                                (case "i=0")
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (grind)
                                      (("1"
                                        (typepred "opC")
                                        (("1"
                                          (grind)
                                          (("1"
                                            (expand "eval_pd_noise")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name "j" "i-1")
                                  (("2"
                                    (case "j< length(cache)")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "cache")
                  (("3" (expand "idxs_bounded")
                    (("3" (skeep)
                      (("3" (case "i=0")
                        (("1" (replaces -1)
                          (("1" (expand "nth")
                            (("1" (typepred "nextfreeidx")
                              (("1"
                                (typepred "opC")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "next_idx")
                                    (("1"
                                      (expand "const_ac")
                                      (("1"
                                        (hide-all-but (1 -1))
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 2)
                          (("2" (assert)
                            (("2" (inst -2 "i-1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (typepred "cache")
                  (("4" (hide -1 -2)
                    (("4" (expand "correct_cache?" 1)
                      (("4" (hide -1)
                        (("4" (expand "CacheData_correct?")
                          (("4" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nth def-decl "T" list_props nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (length def-decl "nat" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (RE2AC_TCC4 0
  (RE2AC_TCC4-2 nil 3632065384
   ("" (skeep*)
    (("" (assert)
      (("" (replaces -1)
        (("" (replaces -1)
          (("" (hide -1)
            (("" (assert)
              (("" (split 1)
                (("1" (inst 1 "(:(CONST(opc, opC), opC, null):)")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (typepred "cache")
                  (("2" (expand "compatible_pairs?")
                    (("2" (skeep)
                      (("2" (inst 1 "N")
                        (("2" (assert)
                          (("2" (expand "compatible_pairs_on?")
                            (("2" (skeep)
                              (("2"
                                (case "i=0")
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (grind)
                                      (("1"
                                        (typepred "opC")
                                        (("1"
                                          (grind)
                                          (("1"
                                            (expand "eval_pd_noise")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name "j" "i-1")
                                  (("2"
                                    (case "j< length(cache)")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "cache")
                  (("3" (expand "idxs_bounded")
                    (("3" (skeep)
                      (("3" (case "i=0")
                        (("1" (replaces -1)
                          (("1" (expand "nth")
                            (("1" (typepred "nextfreeidx")
                              (("1"
                                (typepred "opC")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "next_idx")
                                    (("1"
                                      (expand "const_ac")
                                      (("1"
                                        (hide-all-but (1 -1))
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 2)
                          (("2" (assert)
                            (("2" (inst -3 "i-1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (j skolem-const-decl "int" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (below type-eq-decl nil nat_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (unit adt-constructor-decl "(unit?)" Unit_adt "structures/")
    (unit? adt-recognizer-decl "[Unit -> boolean]" Unit_adt
           "structures/")
    (opc skolem-const-decl "[Unit -> BaseType]" affine_expr_Eval_fnd
     nil)
    (Unit type-decl nil Unit_adt "structures/")
    (const_ac const-decl "AffineCombination" affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (CONST adt-constructor-decl "[[opc: [Unit -> BaseType],
  {af: AffineCombination | af = const_ac(opc(unit))}] ->
   (const?)]" AffineExpr_adt nil)
    (append def-decl "list[T]" list_props nil))
   nil)
  (RE2AC_TCC4-1 nil 3631293338
   ("" (skeep)
    (("" (assert)
      (("" (expand "compatible_pairs?")
        (("" (typepred "cache")
          (("" (expand "compatible_pairs?")
            (("" (skeep)
              (("" (inst 1 "N")
                (("" (assert) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil))
 (RE2AC_TCC5 0
  (RE2AC_TCC5-1 nil 3631294584
   ("" (skeep*)
    (("" (assert)
      (("" (replaces (-1 -2))
        (("" (replace -1)
          (("" (assert)
            (("" (hide -2)
              (("" (split 2)
                (("1" (inst 1 "(:car(result`2):)")
                  (("1" (grind) nil nil)) nil)
                 ("2" (typepred "cache")
                  (("2" (expand "compatible_pairs?")
                    (("2" (skeep)
                      (("2" (inst 1 "N")
                        (("2" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (expand "compatible_pairs_on?")
                            (("2" (skeep :preds? t)
                              (("2"
                                (case "i=0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "nth" 1)
                                    (("1"
                                      (expand
                                       "vars_in_box_compatible?")
                                      (("1"
                                        (expand "eval_ACExpr_Env" 1)
                                        (("1"
                                          (inst -2 "varidx")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replaces -2 :dir RL)
                                              (("1"
                                                (expand "nth_ac" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "nth" 2)
                                  (("2"
                                    (assert)
                                    (("2" (inst -3 "i-1") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "idxs_bounded")
                  (("3" (skeep)
                    (("3" (case "i=0")
                      (("1" (replaces -1)
                        (("1" (expand "nth")
                          (("1" (expand "nth_ac")
                            (("1" (hide -1)
                              (("1"
                                (expand "var_ac")
                                (("1"
                                  (typepred "nextfreeidx")
                                  (("1"
                                    (case "null?(box)")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "cache")
                        (("2" (expand "idxs_bounded")
                          (("2" (inst -2 "i-1")
                            (("1" (expand "nth" 2)
                              (("1" (assert) nil nil)) nil)
                             ("2" (typepred "i")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)) nil))
 (RE2AC_TCC6 0
  (RE2AC_TCC6-1 nil 3631294584 ("" (grind) nil nil)
   ((/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (RE2AC_TCC7 0
  (RE2AC_TCC7-1 nil 3631294584
   ("" (skeep*)
    (("" (replaces -1)
      (("" (replaces -2)
        (("" (assert)
          (("" (split 2)
            (("1" (inst 1 "(:(VARIDX(varidx), ac, null):)")
              (("1" (expand "append") (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil))
              nil)
             ("2" (typepred "cache")
              (("2" (expand "compatible_pairs?")
                (("2" (skeep)
                  (("2" (inst 1 "N")
                    (("2" (assert)
                      (("2" (expand "compatible_pairs_on?" 1)
                        (("2" (skeep)
                          (("2" (case "i=0")
                            (("1" (replaces -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" 1)
                                  (("1"
                                    (expand "eval_ACExpr_Env")
                                    (("1"
                                      (expand
                                       "vars_in_box_compatible?")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replaces -6)
                                            (("1"
                                              (expand "nth_ac")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compatible_pairs_on?")
                              (("2"
                                (expand "nth" 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -2)
              (("3" (typepred "cache")
                (("3" (expand "idxs_bounded" 1)
                  (("3" (skeep)
                    (("3" (case "i=0")
                      (("1" (replaces -1)
                        (("1" (expand "nth" 1)
                          (("1" (typepred "nextfreeidx")
                            (("1" (use "last_idx_box")
                              (("1"
                                (replaces -6)
                                (("1"
                                  (expand "nth_ac")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "idxs_bounded" -2)
                        (("2" (expand "nth" 2)
                          (("2" (assert) (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "correct_cache?")
              (("4" (typepred "cache")
                (("4" (expand "CacheData_correct?")
                  (("4" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (RE2AC_TCC8 0
  (RE2AC_TCC8-1 nil 3631295747 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (RE2AC_TCC9 0
  (RE2AC_TCC9-2 nil 3632065729
   ("" (skeep*)
    (("" (replaces -1)
      (("" (replaces -2)
        (("" (assert)
          (("" (split 2)
            (("1" (inst 1 "(:(VARIDX(varidx), ac, null):)")
              (("1" (expand "append") (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil))
              nil)
             ("2" (typepred "cache")
              (("2" (expand "compatible_pairs?")
                (("2" (skeep)
                  (("2" (inst 1 "N")
                    (("2" (assert)
                      (("2" (expand "compatible_pairs_on?" 1)
                        (("2" (skeep)
                          (("2" (case "i=0")
                            (("1" (replaces -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" 1)
                                  (("1"
                                    (expand "eval_ACExpr_Env")
                                    (("1"
                                      (expand
                                       "vars_in_box_compatible?")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replaces -6)
                                            (("1"
                                              (expand "nth_ac")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compatible_pairs_on?")
                              (("2"
                                (expand "nth" 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -2)
              (("3" (typepred "cache")
                (("3" (expand "idxs_bounded" 1)
                  (("3" (skeep)
                    (("3" (case "i=0")
                      (("1" (replaces -1)
                        (("1" (expand "nth" 1)
                          (("1" (typepred "nextfreeidx")
                            (("1" (use "last_idx_box")
                              (("1"
                                (replaces -6)
                                (("1"
                                  (expand "nth_ac")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "idxs_bounded")
                        (("2" (expand "nth" 2)
                          (("2" (assert) (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (last_idx_box formula-decl nil affine_box nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl
     "below(length(cons((VARIDX(varidx), ac, null), cache)))"
     affine_expr_Eval_fnd nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (ac skolem-const-decl "AffineCombination" affine_expr_Eval_fnd nil)
    (varidx skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" AffineExpr_adt
     nil)
    (append def-decl "list[T]" list_props nil))
   nil)
  (RE2AC_TCC9-1 nil 3631295747 ("" (termination-tcc) nil nil)
   ((var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil))
   nil))
 (RE2AC_TCC10 0
  (RE2AC_TCC10-1 nil 3631295747 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (RE2AC_TCC11 0
  (RE2AC_TCC11-1 nil 3631295747
   ("" (skeep*)
    (("" (typepred "res1")
      (("" (assert)
        (("" (flatten)
          (("" (split 3)
            (("1" (expand "compatible_pairs?")
              (("1" (skeep -3)
                (("1" (inst 1 "N") (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (replace -9 :dir RL) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (RE2AC_TCC12 0
  (RE2AC_TCC12-1 nil 3631295747
   ("" (skeep*)
    (("" (typepred "res1")
      (("" (assert)
        (("" (replaces -5 :dir RL)
          (("" (flatten)
            (("" (assert)
              (("" (expand "compatible_pairs?" 3)
                (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (RE2AC_TCC13 0
  (RE2AC_TCC13-1 nil 3631295747
   ("" (skeep*)
    (("" (replaces -1)
      (("" (typepred "res1")
        (("" (assert)
          (("" (replaces -5 :dir RL)
            (("" (flatten)
              (("" (assert)
                (("" (expand "compatible_pairs?")
                  (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil))
   nil))
 (RE2AC_TCC14 0
  (RE2AC_TCC14-1 nil 3631295747 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil))
 (RE2AC_TCC15 0
  (RE2AC_TCC15-2 nil 3632066118
   ("" (skeep*)
    (("" (replaces -1)
      (("" (typepred "res1")
        (("" (assert)
          (("" (replaces -5 :dir RL)
            (("" (flatten)
              (("" (assert)
                (("" (expand "compatible_pairs?")
                  (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil))
   nil)
  (RE2AC_TCC15-1 nil 3631300447 ("" (grind) nil nil)
   ((var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil))
   nil))
 (RE2AC_TCC16 0
  (RE2AC_TCC16-1 nil 3631300447
   ("" (skeep*)
    (("" (assert)
      (("" (hide -11)
        ((""
          (apply (then (label "result" -10) (label "ac2" -9)
                  (label "cache2" -8) (label "newid2" -7)
                  (label "res2" -6) (label "ac1" -5)
                  (label "cache1" -4) (label "newid1" -3)
                  (label "res1" -2) (label "re" -1)))
          ((""
            (deftactic typepred_res2 nil
             (then (typepred "res2") (replace "cache2" -1 :dir RL)
              (replace "newid2" -1 :dir RL) (assert) (flatten)
              (label "re2" -1) (label "cache2-form" -2) (label "N2" -3)
              (label "newid2-prop" -4) (label "cache2-idxs_bound" -5)))
            ((""
              (deftactic typepred_res1 nil
               (then (typepred "res1") (replace "cache1" -1 :dir RL)
                (replace "newid1" -1 :dir RL) (assert) (flatten)
                (label "re1" -1) (label "cache1-form" -2)
                (label "N1" -3) (label "newid1-prop" -4)
                (label "cache1-idxs_bound" -5)))
              (("" (split 3)
                (("1" (grind) nil nil)
                 ("2" (replaces "result")
                  (("2" (assert)
                    (("2" (typepred_res1)
                      (("2" (typepred_res2)
                        (("2" (skolem "cache2-form" "l2")
                          (("2" (skolem "cache1-form" "l1")
                            (("2" (replace "cache1-form" "cache2-form")
                              (("2"
                                (replace "cache2-form" 3)
                                (("2"
                                  (inst
                                   3
                                   "cons((re, add_ac_ac(ac1, ac2), null)::CacheData, append(l2,l1))")
                                  (("2"
                                    (hide-all-but 3)
                                    (("2"
                                      (expand "append" 1 3)
                                      (("2"
                                        (use "append_assoc[CacheData]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred_res2)
                  (("3" (skolem "N2" "N2")
                    (("3"
                      (with-labels (flatten)
                       (("N2 vars in box comp" "N2 compatible pairs")))
                      (("3" (inst 2 "N2")
                        (("3" (assert)
                          (("3" (expand "compatible_pairs_on?")
                            (("3" (skeep)
                              (("3"
                                (case "i=0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "nth" 2)
                                    (("1"
                                      (replace "result")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "eval_ACExpr_Env" 2)
                                          (("1"
                                            (replaces "re")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "containment_add")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (typepred_res1)
                                                        (("1"
                                                          (replaces
                                                           "re1"
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (skolem
                                                             "N1"
                                                             "N1")
                                                            (("1"
                                                              (with-labels
                                                               (flatten)
                                                               (("N1 vars in box comp"
                                                                 "N1 compatible pairs")))
                                                              (("1"
                                                                (case
                                                                 "FORALL (i: below(length(cache1))):
                                                                                                                        eval_ac_noise(nth(cache1, i)`2, N2) =
                                                                                                                         eval_ac_noise(nth(cache1, i)`2, N1)")
                                                                (("1"
                                                                  (replace
                                                                   "ac1")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "compatible_pairs_on?"
                                                                           "N1 compatible pairs")
                                                                          (("1"
                                                                            (inst
                                                                             "N1 compatible pairs"
                                                                             "0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               "N1 compatible pairs")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "compatible_pairs_on?"
                                                                   "N1 compatible pairs")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       "N1 compatible pairs"
                                                                       "i!1")
                                                                      (("2"
                                                                        (replace
                                                                         "N1 compatible pairs"
                                                                         1)
                                                                        (("2"
                                                                          (skolem
                                                                           "cache2-form"
                                                                           "l2")
                                                                          (("2"
                                                                            (replace
                                                                             "cache2-form"
                                                                             "N2 compatible pairs")
                                                                            (("2"
                                                                              (inst
                                                                               "N2 compatible pairs"
                                                                               "length(l2)+i!1")
                                                                              (("1"
                                                                                (case
                                                                                 "nth(append(l2, cache1), length(l2) + i!1) = nth(cache1, i!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (use
                                                                                     "nth_append[CacheData]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 "cache2-form"
                                                                                 1)
                                                                                (("2"
                                                                                  (use
                                                                                   "length_append[CacheData]")
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         "N2 compatible pairs"
                                                         "0")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           "N2 compatible pairs")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name "j" "i-1")
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "nth" 3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (replace "result")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   "N2 compatible pairs"
                                                   "j")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replaces "result")
                  (("4" (assert)
                    (("4" (typepred_res2)
                      (("4" (typepred_res1) nil nil)) nil))
                    nil))
                  nil)
                 ("5" (replaces "result")
                  (("5" (assert)
                    (("5" (expand "idxs_bounded")
                      (("5" (skeep)
                        (("5" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (use "next_idx_add_ac_ac")
                                (("1"
                                  (expand ">=")
                                  (("1"
                                    (typepred_res2)
                                    (("1"
                                      (typepred_res1)
                                      (("1"
                                        (expand "idxs_bounded")
                                        (("1"
                                          (inst
                                           "cache1-idxs_bound"
                                           "0")
                                          (("1"
                                            (expand
                                             "nth"
                                             "cache1-idxs_bound")
                                            (("1"
                                              (replace "ac1" :dir RL)
                                              (("1"
                                                (inst
                                                 "cache2-idxs_bound"
                                                 "0")
                                                (("1"
                                                  (expand
                                                   "nth"
                                                   "cache2-idxs_bound")
                                                  (("1"
                                                    (replace
                                                     "ac2"
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (hide-all-but
                                                       (3
                                                        "cache2-idxs_bound"
                                                        "newid2-prop"
                                                        "cache1-idxs_bound"
                                                        -11))
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if -4)
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 ">=")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred_res2)
                            (("2" (expand "idxs_bounded")
                              (("2"
                                (inst "cache2-idxs_bound" "i-1")
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
     AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (RE2AC_TCC17 0
  (RE2AC_TCC17-1 nil 3631300447 ("" (termination-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (RE2AC_TCC18 0
  (RE2AC_TCC18-1 nil 3631359170
   ("" (skeep*)
    (("" (assert)
      (("" (hide -11)
        ((""
          (apply (then (label "result" -10) (label "ac2" -9)
                  (label "cache2" -8) (label "newid2" -7)
                  (label "res2" -6) (label "ac1" -5)
                  (label "cache1" -4) (label "newid1" -3)
                  (label "res1" -2) (label "re" -1)))
          ((""
            (deftactic typepred_res2 nil
             (then (typepred "res2") (replace "cache2" -1 :dir RL)
              (replace "newid2" -1 :dir RL) (assert) (flatten)
              (label "re2" -1) (label "cache2-form" -2) (label "N2" -3)
              (label "newid2-prop" -4) (label "cache2-idxs_bound" -5)
              (label "cache2 correct" -6)))
            ((""
              (deftactic typepred_res1 nil
               (then (typepred "res1") (replace "cache1" -1 :dir RL)
                (replace "newid1" -1 :dir RL) (assert) (flatten)
                (label "re1" -1) (label "cache1-form" -2)
                (label "N1" -3) (label "newid1-prop" -4)
                (label "cache1-idxs_bound" -5)
                (label "cache1 correct" -6)))
              (("" (split 3)
                (("1" (grind) nil nil)
                 ("2" (replaces "result")
                  (("2" (assert)
                    (("2" (typepred_res1)
                      (("2" (typepred_res2)
                        (("2" (skolem "cache2-form" "l2")
                          (("2" (skolem "cache1-form" "l1")
                            (("2" (replace "cache1-form" "cache2-form")
                              (("2"
                                (replace "cache2-form" 3)
                                (("2"
                                  (inst
                                   3
                                   "cons((re, add_ac_ac(ac1, ac2), null)::CacheData, append(l2,l1))")
                                  (("1"
                                    (hide-all-but 3)
                                    (("1"
                                      (expand "append" 1 3)
                                      (("1"
                                        (use "append_assoc[CacheData]")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred_res2)
                  (("3" (skolem "N2" "N2")
                    (("3"
                      (with-labels (flatten)
                       (("N2 vars in box comp" "N2 compatible pairs")))
                      (("3" (inst 2 "N2")
                        (("3" (assert)
                          (("3" (expand "compatible_pairs_on?")
                            (("3" (skeep)
                              (("3"
                                (case "i=0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "nth" 2)
                                    (("1"
                                      (replace "result")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "eval_ACExpr_Env" 2)
                                          (("1"
                                            (replaces "re")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "containment_add")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (typepred_res1)
                                                        (("1"
                                                          (replaces
                                                           "re1"
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (skolem
                                                             "N1"
                                                             "N1")
                                                            (("1"
                                                              (with-labels
                                                               (flatten)
                                                               (("N1 vars in box comp"
                                                                 "N1 compatible pairs")))
                                                              (("1"
                                                                (case
                                                                 "FORALL (i: below(length(cache1))):
                                                                                                                                     eval_ac_noise(nth(cache1, i)`2, N2) =
                                                                                                                                      eval_ac_noise(nth(cache1, i)`2, N1)")
                                                                (("1"
                                                                  (replace
                                                                   "ac1")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "compatible_pairs_on?"
                                                                           "N1 compatible pairs")
                                                                          (("1"
                                                                            (inst
                                                                             "N1 compatible pairs"
                                                                             "0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               "N1 compatible pairs")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "compatible_pairs_on?"
                                                                   "N1 compatible pairs")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       "N1 compatible pairs"
                                                                       "i!1")
                                                                      (("2"
                                                                        (replace
                                                                         "N1 compatible pairs"
                                                                         1)
                                                                        (("2"
                                                                          (skolem
                                                                           "cache2-form"
                                                                           "l2")
                                                                          (("2"
                                                                            (replace
                                                                             "cache2-form"
                                                                             "N2 compatible pairs")
                                                                            (("2"
                                                                              (inst
                                                                               "N2 compatible pairs"
                                                                               "length(l2)+i!1")
                                                                              (("1"
                                                                                (case
                                                                                 "nth(append(l2, cache1), length(l2) + i!1) = nth(cache1, i!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (use
                                                                                     "nth_append[CacheData]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 "cache2-form"
                                                                                 1)
                                                                                (("2"
                                                                                  (use
                                                                                   "length_append[CacheData]")
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         "N2 compatible pairs"
                                                         "0")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           "N2 compatible pairs")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name "j" "i-1")
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "nth" 3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (replace "result")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   "N2 compatible pairs"
                                                   "j")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replaces "result")
                  (("4" (assert)
                    (("4" (typepred_res2)
                      (("4" (typepred_res1) nil nil)) nil))
                    nil))
                  nil)
                 ("5" (replaces "result")
                  (("5" (assert)
                    (("5" (expand "idxs_bounded")
                      (("5" (skeep)
                        (("5" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (use "next_idx_add_ac_ac")
                                (("1"
                                  (expand ">=")
                                  (("1"
                                    (typepred_res2)
                                    (("1"
                                      (typepred_res1)
                                      (("1"
                                        (expand "idxs_bounded")
                                        (("1"
                                          (inst
                                           "cache1-idxs_bound"
                                           "0")
                                          (("1"
                                            (expand
                                             "nth"
                                             "cache1-idxs_bound")
                                            (("1"
                                              (replace "ac1" :dir RL)
                                              (("1"
                                                (inst
                                                 "cache2-idxs_bound"
                                                 "0")
                                                (("1"
                                                  (expand
                                                   "nth"
                                                   "cache2-idxs_bound")
                                                  (("1"
                                                    (replace
                                                     "ac2"
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (hide-all-but
                                                       (3
                                                        "cache2-idxs_bound"
                                                        "newid2-prop"
                                                        "cache1-idxs_bound"
                                                        -13))
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if -4)
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 ">=")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred_res2)
                            (("2" (expand "idxs_bounded")
                              (("2"
                                (inst "cache2-idxs_bound" "i-1")
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replaces "result")
                  (("6" (assert)
                    (("6" (expand "correct_cache?" 1)
                      (("6" (typepred_res2)
                        (("6" (assert)
                          (("6" (expand "CacheData_correct?")
                            (("6" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (RE2AC_TCC19 0
  (RE2AC_TCC19-2 nil 3631632051 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil)
  (RE2AC_TCC19-1 nil 3631365124 ("" (termination-tcc) nil nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
     AffineExpr_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/"))
   nil))
 (RE2AC_TCC20 0
  (RE2AC_TCC20-1 nil 3631365124 ("" (termination-tcc) nil nil)
   ((ordered_list? def-decl "bool" ordered_list nil)) nil))
 (RE2AC_TCC21 0
  (RE2AC_TCC21-1 nil 3631365124 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (add_pd_pd const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (add_ac_ac const-decl "AffineCombination" affine nil))
   nil))
 (RE2AC_TCC22 0
  (RE2AC_TCC22-3 nil 3632067579
   ("" (skeep*)
    (("" (assert)
      (("" (hide -11)
        ((""
          (apply (then (label "result" -10) (label "ac2" -9)
                  (label "cache2" -8) (label "newid2" -7)
                  (label "res2" -6) (label "ac1" -5)
                  (label "cache1" -4) (label "newid1" -3)
                  (label "res1" -2) (label "re" -1)))
          ((""
            (deftactic typepred_res2 nil
             (with-labels
              (then (typepred "res2") (replace "cache2" -1 :dir RL)
               (replace "newid2" -1 :dir RL) (assert) (flatten))
              (("cache2 not null" "re2" "cache2-form" "N2"
                "newid2-prop" "cache2-idxs_bound" "UNKNOWN"))))
            ((""
              (deftactic typepred_res1 nil
               (with-labels
                (then (typepred "res1") (replace "cache1" -1 :dir RL)
                 (replace "newid1" -1 :dir RL) (assert) (flatten))
                (("cache1 not null" "re1" "cache1-form" "N1"
                  "newid1-prop" "cache1-idxs_bound" "UNKNOWN"))))
              (("" (split 3)
                (("1" (grind) nil nil)
                 ("2" (replaces "result")
                  (("2" (assert)
                    (("2" (typepred_res1)
                      (("2" (typepred_res2)
                        (("2" (skolem "cache2-form" "l2")
                          (("2" (skolem "cache1-form" "l1")
                            (("2" (replace "cache1-form" "cache2-form")
                              (("2"
                                (replace "cache2-form" 3)
                                (("2"
                                  (inst
                                   3
                                   "cons((re, add_ac_ac(ac1, ac2), null)::CacheData, append(l2,l1))")
                                  (("1"
                                    (hide-all-but 3)
                                    (("1"
                                      (expand "append" 1 3)
                                      (("1"
                                        (use "append_assoc[CacheData]")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred_res2)
                  (("3" (skolem "N2" "N2")
                    (("3"
                      (with-labels (flatten)
                       (("N2 vars in box comp" "N2 compatible pairs")))
                      (("3" (inst 2 "N2")
                        (("3" (assert)
                          (("3" (expand "compatible_pairs_on?")
                            (("3" (skeep)
                              (("3"
                                (case "i=0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "nth" 2)
                                    (("1"
                                      (replace "result")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "eval_ACExpr_Env" 2)
                                          (("1"
                                            (replaces "re")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "containment_add")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (typepred_res1)
                                                        (("1"
                                                          (replaces
                                                           "re1"
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (skolem
                                                             "N1"
                                                             "N1")
                                                            (("1"
                                                              (with-labels
                                                               (flatten)
                                                               (("N1 vars in box comp"
                                                                 "N1 compatible pairs")))
                                                              (("1"
                                                                (case
                                                                 "FORALL (i: below(length(cache1))):
                                                                                                                                                                            eval_ac_noise(nth(cache1, i)`2, N2) =
                                                                                                                                                                             eval_ac_noise(nth(cache1, i)`2, N1)")
                                                                (("1"
                                                                  (replace
                                                                   "ac1")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "compatible_pairs_on?"
                                                                           "N1 compatible pairs")
                                                                          (("1"
                                                                            (inst
                                                                             "N1 compatible pairs"
                                                                             "0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               "N1 compatible pairs")
                                                                              (("1"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "compatible_pairs_on?"
                                                                   "N1 compatible pairs")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       "N1 compatible pairs"
                                                                       "i!1")
                                                                      (("2"
                                                                        (skolem
                                                                         "cache2-form"
                                                                         "l2")
                                                                        (("2"
                                                                          (replace
                                                                           "cache2-form"
                                                                           "N2 compatible pairs")
                                                                          (("2"
                                                                            (inst
                                                                             "N2 compatible pairs"
                                                                             "length(l2)+i!1")
                                                                            (("1"
                                                                              (case
                                                                               "nth(append(l2, cache1), length(l2) + i!1) = nth(cache1, i!1)")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (use
                                                                                   "nth_append[CacheData]")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "length_append[CacheData]")
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "i!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               "cache2-form"
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "length_append[CacheData]")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         "N2 compatible pairs"
                                                         "0")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           "N2 compatible pairs")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name "j" "i-1")
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "nth" 3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (replace "result")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   "N2 compatible pairs"
                                                   "j")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replaces "result")
                  (("4" (assert)
                    (("4" (typepred_res2)
                      (("4" (typepred_res1) nil nil)) nil))
                    nil))
                  nil)
                 ("5" (replaces "result")
                  (("5" (assert)
                    (("5" (expand "idxs_bounded")
                      (("5" (skeep)
                        (("5" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (use "next_idx_add_ac_ac")
                                (("1"
                                  (expand ">=")
                                  (("1"
                                    (typepred_res2)
                                    (("1"
                                      (typepred_res1)
                                      (("1"
                                        (expand "idxs_bounded")
                                        (("1"
                                          (inst
                                           "cache1-idxs_bound"
                                           "0")
                                          (("1"
                                            (expand
                                             "nth"
                                             "cache1-idxs_bound")
                                            (("1"
                                              (replace "ac1" :dir RL)
                                              (("1"
                                                (inst
                                                 "cache2-idxs_bound"
                                                 "0")
                                                (("1"
                                                  (expand
                                                   "nth"
                                                   "cache2-idxs_bound")
                                                  (("1"
                                                    (replace
                                                     "ac2"
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (hide-all-but
                                                       (3
                                                        "cache2-idxs_bound"
                                                        "newid2-prop"
                                                        "cache1-idxs_bound"
                                                        -11))
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if -4)
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 ">=")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred_res2)
                            (("2" (expand "idxs_bounded")
                              (("2"
                                (inst "cache2-idxs_bound" "i-1")
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (next_idx_add_ac_ac formula-decl nil affine nil)
    (i skolem-const-decl
     "below(length(cons((re, add_ac_ac(ac1, ac2), null), cache2)))"
     affine_expr_Eval_fnd nil)
    (ac2 skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (ac1 skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (nth_append formula-decl nil list_more_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_append formula-decl nil list_props nil)
    (cache2 skolem-const-decl "(correct_cache?(box))"
     affine_expr_Eval_fnd nil)
    (i!1 skolem-const-decl "below(length(cache1))" affine_expr_Eval_fnd
     nil)
    (l2 skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cache1 skolem-const-decl "(correct_cache?(box))"
     affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (eval_ac_noise const-decl "real" affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (containment_add formula-decl nil affine nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append_assoc formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (add_pd_pd const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (add_ac_ac const-decl "AffineCombination" affine nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (RE2AC_TCC22-2 nil 3632066368
   ("" (skeep*)
    (("" (assert)
      (("" (hide -11)
        ((""
          (apply (then (label "result" -10) (label "ac2" -9)
                  (label "cache2" -8) (label "newid2" -7)
                  (label "res2" -6) (label "ac1" -5)
                  (label "cache1" -4) (label "newid1" -3)
                  (label "res1" -2) (label "re" -1)))
          ((""
            (deftactic typepred_res2 nil
             (then (typepred "res2") (replace "cache2" -1 :dir RL)
              (replace "newid2" -1 :dir RL) (assert) (flatten)
              (label "re2" -1) (label "cache2-form" -2) (label "N2" -3)
              (label "newid2-prop" -4) (label "cache2-idxs_bound" -5)
              (label "cache2 correct" -6)))
            ((""
              (deftactic typepred_res1 nil
               (then (typepred "res1") (replace "cache1" -1 :dir RL)
                (replace "newid1" -1 :dir RL) (assert) (flatten)
                (label "re1" -1) (label "cache1-form" -2)
                (label "N1" -3) (label "newid1-prop" -4)
                (label "cache1-idxs_bound" -5)
                (label "cache1 correct" -6)))
              (("" (split 3)
                (("1" (grind) nil)
                 ("2" (replaces "result")
                  (("2" (assert)
                    (("2" (typepred_res1)
                      (("2" (typepred_res2)
                        (("2" (skolem "cache2-form" "l2")
                          (("2" (skolem "cache1-form" "l1")
                            (("2" (replace "cache1-form" "cache2-form")
                              (("2"
                                (replace "cache2-form" 3)
                                (("2"
                                  (inst
                                   3
                                   "cons((re, add_ac_ac(ac1, ac2), null)::CacheData, append(l2,l1))")
                                  (("1"
                                    (hide-all-but 3)
                                    (("1"
                                      (expand "append" 1 3)
                                      (("1"
                                        (use "append_assoc[CacheData]")
                                        (("1" (assert) nil)))))))
                                   ("2" (grind) nil)))))))))))))))))))
                 ("3" (typepred_res2)
                  (("3" (skolem "N2" "N2")
                    (("3"
                      (with-labels (flatten)
                       (("N2 vars in box comp" "N2 compatible pairs")))
                      (("3" (inst 2 "N2")
                        (("3" (assert)
                          (("3" (expand "compatible_pairs_on?")
                            (("3" (skeep)
                              (("3"
                                (case "i=0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "nth" 2)
                                    (("1"
                                      (replace "result")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "eval_ACExpr_Env" 2)
                                          (("1"
                                            (replaces "re")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "containment_add")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (typepred_res1)
                                                        (("1"
                                                          (replaces
                                                           "re1"
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (skolem
                                                             "N1"
                                                             "N1")
                                                            (("1"
                                                              (with-labels
                                                               (flatten)
                                                               (("N1 vars in box comp"
                                                                 "N1 compatible pairs")))
                                                              (("1"
                                                                (case
                                                                 "FORALL (i: below(length(cache1))):
                                                                                                                                                               eval_ac_noise(nth(cache1, i)`2, N2) =
                                                                                                                                                                eval_ac_noise(nth(cache1, i)`2, N1)")
                                                                (("1"
                                                                  (replace
                                                                   "ac1")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "compatible_pairs_on?"
                                                                           "N1 compatible pairs")
                                                                          (("1"
                                                                            (inst
                                                                             "N1 compatible pairs"
                                                                             "0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               "N1 compatible pairs")
                                                                              (("1"
                                                                                (flatten)
                                                                                nil)))
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))
                                                                 ("2"
                                                                  (expand
                                                                   "compatible_pairs_on?"
                                                                   "N1 compatible pairs")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       "N1 compatible pairs"
                                                                       "i!1")
                                                                      (("2"
                                                                        (skolem
                                                                         "cache2-form"
                                                                         "l2")
                                                                        (("2"
                                                                          (replace
                                                                           "cache2-form"
                                                                           "N2 compatible pairs")
                                                                          (("2"
                                                                            (inst
                                                                             "N2 compatible pairs"
                                                                             "length(l2)+i!1")
                                                                            (("1"
                                                                              (case
                                                                               "nth(append(l2, cache1), length(l2) + i!1) = nth(cache1, i!1)")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (use
                                                                                   "nth_append[CacheData]")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))
                                                                             ("2"
                                                                              (replace
                                                                               "cache2-form"
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "length_append[CacheData]")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil)))))))))))))))))))))))))))))
                                                       ("2"
                                                        (inst
                                                         "N2 compatible pairs"
                                                         "0")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           "N2 compatible pairs")
                                                          (("1"
                                                            (assert)
                                                            nil)))
                                                         ("2"
                                                          (expand
                                                           "length")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))))))))))))))
                                 ("2"
                                  (name "j" "i-1")
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "nth" 3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (replace "result")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   "N2 compatible pairs"
                                                   "j")
                                                  nil)))))))))))))))))))))))))))))))))
                 ("4" (replaces "result")
                  (("4" (assert)
                    (("4" (typepred_res2)
                      (("4" (typepred_res1) nil)))))))
                 ("5" (replaces "result")
                  (("5" (assert)
                    (("5" (expand "idxs_bounded")
                      (("5" (skeep)
                        (("5" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (use "next_idx_add_ac_ac")
                                (("1"
                                  (expand ">=")
                                  (("1"
                                    (typepred_res2)
                                    (("1"
                                      (typepred_res1)
                                      (("1"
                                        (expand "idxs_bounded")
                                        (("1"
                                          (inst
                                           "cache1-idxs_bound"
                                           "0")
                                          (("1"
                                            (expand
                                             "nth"
                                             "cache1-idxs_bound")
                                            (("1"
                                              (replace "ac1" :dir RL)
                                              (("1"
                                                (inst
                                                 "cache2-idxs_bound"
                                                 "0")
                                                (("1"
                                                  (expand
                                                   "nth"
                                                   "cache2-idxs_bound")
                                                  (("1"
                                                    (replace
                                                     "ac2"
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (hide-all-but
                                                       (3
                                                        "cache2-idxs_bound"
                                                        "newid2-prop"
                                                        "cache1-idxs_bound"
                                                        -13))
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if -4)
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 ">=")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))))))
                                                 ("2"
                                                  (grind)
                                                  nil)))))))
                                           ("2"
                                            (grind)
                                            nil)))))))))))))))))
                           ("2" (typepred_res2)
                            (("2" (expand "idxs_bounded")
                              (("2"
                                (inst "cache2-idxs_bound" "i-1")
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil)))
                                 ("2"
                                  (typepred "i")
                                  (("2" (grind) nil)))))))))))))))))))
                 ("6" (replaces "result")
                  (("6" (assert)
                    (("6" (expand "correct_cache?" 1)
                      (("6" (typepred_res2)
                        (("6" (assert)
                          (("6" (expand "CacheData_correct?")
                            (("6" (propax)
                              nil))))))))))))))))))))))))))
    nil)
   nil nil)
  (RE2AC_TCC22-1 nil 3631365124
   ("" (skeep*)
    (("" (assert)
      (("" (split 1)
        (("1" (grind) nil nil)
         ("2" (replace -4 1)
          (("2" (assert)
            (("2" (inst 1 "(:car(result`2):)") (("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("3" (typepred "cache")
          (("3" (expand "compatible_pairs?")
            (("3" (skeep)
              (("3" (inst 1 "N")
                (("3" (assert)
                  (("3" (replace -8 1)
                    (("3" (assert)
                      (("3" (expand "compatible_pairs_on?")
                        (("3" (skeep)
                          (("3" (expand "nth" 1)
                            (("3" (lift-if 1)
                              (("3"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (typepred "cache_get(cache)(re)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -5 "i!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst -2 "i-1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "i")
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide -5)
          (("4" (replace -4)
            (("4" (assert)
              (("4" (typepred "cache")
                (("4" (expand "idxs_bounded")
                  (("4" (skeep)
                    (("4" (case "i=0")
                      (("1" (replaces -1)
                        (("1" (expand "nth" 1)
                          (("1" (replace -6)
                            (("1" (typepred "cache_get(cache)(re)")
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -4 "i!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -2 "i-1")
                        (("1" (expand "nth" 2) (("1" (assert) nil nil))
                          nil)
                         ("2" (typepred "i") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (replaces -4)
          (("5" (assert)
            (("5" (hide -4)
              (("5" (expand "correct_cache?")
                (("5" (expand "CacheData_correct?")
                  (("5" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Env type-eq-decl nil affine_box nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil))
 (RE2AC_TCC23 0
  (RE2AC_TCC23-1 nil 3631365124 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
     AffineExpr_adt nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (RE2AC_TCC24 0
  (RE2AC_TCC24-1 nil 3631365124 ("" (grind) nil nil)
   ((ordered_list? def-decl "bool" ordered_list nil)) nil))
 (RE2AC_TCC25 0
  (RE2AC_TCC25-1 nil 3631365124 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (RE2AC_TCC26 0
  (RE2AC_TCC26-2 nil 3632067889
   ("" (skeep*)
    (("" (assert)
      (("" (split 1)
        (("1" (grind) nil nil)
         ("2" (replace -4 1)
          (("2" (assert)
            (("2" (inst 1 "(:car(result`2):)") (("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("3" (typepred "cache")
          (("3" (expand "compatible_pairs?")
            (("3" (skeep)
              (("3" (inst 1 "N")
                (("3" (assert)
                  (("3" (replace -8 1)
                    (("3" (assert)
                      (("3" (expand "compatible_pairs_on?")
                        (("3" (skeep)
                          (("3" (expand "nth" 1)
                            (("3" (lift-if 1)
                              (("3"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (typepred "cache_get(cache)(re)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst? :subst ("i" "i!1"))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide -5)
          (("4" (replace -4)
            (("4" (assert)
              (("4" (typepred "cache")
                (("4" (expand "idxs_bounded")
                  (("4" (skeep)
                    (("4" (case "i=0")
                      (("1" (replaces -1)
                        (("1" (expand "nth" 1)
                          (("1" (replace -6)
                            (("1" (typepred "cache_get(cache)(re)")
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst? :subst ("i" "i!1"))
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nth" 2)
                        (("2" (assert)
                          (("2" (inst? :subst ("i" "i-1")) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (cached skolem-const-decl "{res: Maybe[AffineCombination] |
         some?(res) IMPLIES
          (EXISTS (i: below(length(cache))):
             nth(cache, i)`1 = re AND nth(cache, i)`2 = val(res))}"
     affine_expr_Eval_fnd nil)
    (i skolem-const-decl
     "below(length(cons((re, val(cached), null), cache)))"
     affine_expr_Eval_fnd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (cache_get def-decl "{res: Maybe[AffineCombination] |
         some?(res) IMPLIES
          (EXISTS (i: below(length(cache))):
             nth(cache, i)`1 = re AND nth(cache, i)`2 = val(res))}"
     affine_expr_Eval_fnd nil)
    (nth def-decl "T" list_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil))
   nil)
  (RE2AC_TCC26-1 nil 3631365124 ("" (subtype-tcc) nil nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (next_idx const-decl "nat" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/"))
   nil))
 (RE2AC_TCC27 0
  (RE2AC_TCC27-1 nil 3631365124 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
     AffineExpr_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (RE2AC_TCC28 0
  (RE2AC_TCC28-1 nil 3631365124
   ("" (skeep*)
    (("" (typepred "res1")
      (("" (assert)
        (("" (flatten)
          (("" (split 4)
            (("1" (expand "compatible_pairs?")
              (("1" (skeep -3)
                (("1" (inst 1 "N") (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (replace -11 :dir RL)
              (("2" (replace -10 :dir RL) (("2" (propax) nil nil))
                nil))
              nil)
             ("3" (replace -11 :dir RL) (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (RE2AC_TCC29 0
  (RE2AC_TCC29-1 nil 3631365124 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (RE2AC_TCC30 0
  (RE2AC_TCC30-1 nil 3631365124 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (next_idx const-decl "nat" affine nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (RE2AC_TCC31 0
  (RE2AC_TCC31-2 "" 3631566874 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   shostak)
  (RE2AC_TCC31-1 nil 3631365124
   ("" (skeep*)
    (("" (assert)
      (("" (hide -12)
        ((""
          (apply (then (label "result" -11) (label "ac2" -10)
                  (label "cache2" -9) (label "newid2" -8)
                  (label "res2" -7) (label "ac1" -6)
                  (label "cache1" -5) (label "newid1" -4)
                  (label "res1" -3) (label "cached" -2)
                  (label "re" -1)))
          ((""
            (deftactic typepred_res2 nil
             (then (typepred "res2") (replace "cache2" -1 :dir RL)
              (replace "newid2" -1 :dir RL) (assert) (flatten)
              (label "re2" -1) (label "cache2-form" -2) (label "N2" -3)
              (label "newid2-prop" -4) (label "cache2-idxs_bound" -5)))
            ((""
              (deftactic typepred_res1 nil
               (then (typepred "res1") (replace "cache1" -1 :dir RL)
                (replace "newid1" -1 :dir RL) (assert) (flatten)
                (label "re1" -1) (label "cache1-form" -2)
                (label "N1" -3) (label "newid1-prop" -4)
                (label "cache1-idxs_bound" -5)))
              (("" (split 4)
                (("1" (grind) nil nil)
                 ("2" (replaces "result")
                  (("2" (assert)
                    (("2" (typepred_res1)
                      (("2" (typepred_res2)
                        (("2" (skolem "cache2-form" "l2")
                          (("2" (skolem "cache1-form" "l1")
                            (("2" (replace "cache1-form" "cache2-form")
                              (("2"
                                (replace "cache2-form" 3)
                                (("2"
                                  (inst
                                   3
                                   "cons((re, mult_ac_ac(ac1, ac2, newid2)), append(l2,l1))")
                                  (("1"
                                    (hide-all-but 3)
                                    (("1"
                                      (expand "append" 1 3)
                                      (("1"
                                        (use
                                         "append_assoc[[RealExpr, AffineCombination]]")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "next_idx_2")
                                    (("2"
                                      (expand ">=")
                                      (("2"
                                        (expand "idxs_bounded")
                                        (("2"
                                          (inst
                                           "cache1-idxs_bound"
                                           "0")
                                          (("1"
                                            (expand
                                             "nth"
                                             "cache1-idxs_bound")
                                            (("1"
                                              (replace "ac1" :dir RL)
                                              (("1"
                                                (inst
                                                 "cache2-idxs_bound"
                                                 "0")
                                                (("1"
                                                  (expand
                                                   "nth"
                                                   "cache2-idxs_bound")
                                                  (("1"
                                                    (replace
                                                     "ac2"
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (hide-all-but
                                                       (1
                                                        "cache2-idxs_bound"
                                                        "newid2-prop"
                                                        "cache1-idxs_bound"))
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 ">=")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   ">=")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred_res2)
                  (("3" (skolem "N2" "N2")
                    (("3"
                      (with-labels (flatten)
                       (("N2 vars in box comp" "N2 compatible pairs")))
                      (("3"
                        (name "updN2" "upd_noise(N2,
                                        newid2,
                                        mul_noise_value
                                        (ac1,
                                         ac2,
                                         first_noises(N2, newid2)))")
                        (("1" (inst 2 "updN2")
                          (("1" (split 2)
                            (("1" (expand "vars_in_box_compatible?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst "N2 vars in box comp" "i")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "get_noise_by_idx(i, updN2) = get_noise_by_idx(i, N2)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (replace
                                           "N2 vars in box comp"
                                           1
                                           :dir
                                           RL)
                                          (("1"
                                            (expand "var_ac" 1)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "eval_ac_noise"
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (expand_ol)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (expand_ol)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "eval_ac_noise"
                                                     1)
                                                    (("2"
                                                      (use
                                                       "eval_pd_noise_rec_pds_def")
                                                      (("2"
                                                        (expand_ol)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (use
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (use "gnbi_upd_2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred_res1)
                                              (("2"
                                                (typepred
                                                 "nextfreeidx")
                                                (("2"
                                                  (expand
                                                   "last_idx_in_box")
                                                  (("2"
                                                    (replaces -7)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compatible_pairs_on?")
                              (("2"
                                (skeep)
                                (("2"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (replace "result")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "eval_ACExpr_Env"
                                             1)
                                            (("1"
                                              (replaces "re")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "containment_mul")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (typepred_res1)
                                                          (("1"
                                                            (expand
                                                             "next_idx_2")
                                                            (("1"
                                                              (expand
                                                               ">=")
                                                              (("1"
                                                                (expand
                                                                 "idxs_bounded")
                                                                (("1"
                                                                  (inst
                                                                   "cache1-idxs_bound"
                                                                   "0")
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     "cache1-idxs_bound")
                                                                    (("1"
                                                                      (replace
                                                                       "ac1"
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (inst
                                                                         "cache2-idxs_bound"
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           "cache2-idxs_bound")
                                                                          (("1"
                                                                            (replace
                                                                             "ac2"
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (2
                                                                                "cache2-idxs_bound"
                                                                                "newid2-prop"
                                                                                "cache1-idxs_bound"))
                                                                              (("1"
                                                                                (expand
                                                                                 "max")
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         ">=")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           ">=")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "eval_ac_noise(ac1, updN2) = eval_ac_noise(ac1, N2)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (typepred_res1)
                                                              (("1"
                                                                (replaces
                                                                 "re1"
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (skolem
                                                                   "N1"
                                                                   "N1")
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten)
                                                                     (("N1 vars in box comp"
                                                                       "N1 compatible pairs")))
                                                                    (("1"
                                                                      (case
                                                                       "FORALL (i: below(length(cache1))):
                                                                                                                        eval_ac_noise(nth(cache1, i)`2, N2) =
                                                                                                                         eval_ac_noise(nth(cache1, i)`2, N1)")
                                                                      (("1"
                                                                        (replace
                                                                         "ac1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -1)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "compatible_pairs_on?"
                                                                                 "N1 compatible pairs")
                                                                                (("1"
                                                                                  (inst
                                                                                   "N1 compatible pairs"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     "N1 compatible pairs")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "length")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "length")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "compatible_pairs_on?"
                                                                         "N1 compatible pairs")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             "N1 compatible pairs"
                                                                             "i!1")
                                                                            (("2"
                                                                              (replace
                                                                               "N1 compatible pairs"
                                                                               1)
                                                                              (("2"
                                                                                (skolem
                                                                                 "cache2-form"
                                                                                 "l2")
                                                                                (("2"
                                                                                  (replace
                                                                                   "cache2-form"
                                                                                   "N2 compatible pairs")
                                                                                  (("2"
                                                                                    (inst
                                                                                     "N2 compatible pairs"
                                                                                     "length(l2)+i!1")
                                                                                    (("1"
                                                                                      (case
                                                                                       "nth(append(l2, cache1), length(l2) + i!1) = nth(cache1, i!1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (use
                                                                                           "nth_append[[RealExpr, AffineCombination]]")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       "cache2-form"
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "length_append[[RealExpr, AffineCombination]]")
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (replaces
                                                               -1
                                                               1
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (use
                                                                 "eval_upd_no_idxs_ac")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (replace
                                                                       "ac1"
                                                                       -1)
                                                                      (("2"
                                                                        (typepred_res1)
                                                                        (("2"
                                                                          (expand
                                                                           "idxs_bounded"
                                                                           "cache1-idxs_bound")
                                                                          (("2"
                                                                            (expand
                                                                             "idxs_ac")
                                                                            (("2"
                                                                              (inst
                                                                               "cache1-idxs_bound"
                                                                               "0")
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 "cache1-idxs_bound")
                                                                                (("1"
                                                                                  (expand
                                                                                   "next_idx")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     ("cache1-idxs_bound"
                                                                                      -6
                                                                                      "newid2-prop"))
                                                                                    (("1"
                                                                                      (use
                                                                                       "beyond_last_idx_notmember")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (case
                                                           "eval_ac_noise(ac2, updN2) = eval_ac_noise(ac2, N2)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               "N2 compatible pairs"
                                                               "0")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 "N2 compatible pairs")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (replaces
                                                               -1
                                                               1
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (use
                                                                 "eval_upd_no_idxs_ac")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "idxs_bounded"
                                                                       "cache2-idxs_bound")
                                                                      (("2"
                                                                        (expand
                                                                         "idxs_ac")
                                                                        (("2"
                                                                          (inst
                                                                           "cache2-idxs_bound"
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             "cache2-idxs_bound")
                                                                            (("1"
                                                                              (expand
                                                                               "next_idx")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 ("cache2-idxs_bound"
                                                                                  -1))
                                                                                (("1"
                                                                                  (use
                                                                                   "beyond_last_idx_notmember")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           RL)
                                                          (("4"
                                                            (use
                                                             "first_noises_upd")
                                                            (("4"
                                                              (replaces
                                                               -1)
                                                              (("4"
                                                                (use
                                                                 "gnbi_upd")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name "j" "i-1")
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (expand "length")
                                        (("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (replace "result")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     "N2 compatible pairs"
                                                     "j")
                                                    (("2"
                                                      (case
                                                       "eval_ac_noise(nth(cache2, j)`2, updN2) = eval_ac_noise(nth(cache2, j)`2, N2)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replaces
                                                         -3
                                                         1
                                                         :dir
                                                         RL)
                                                        (("2"
                                                          (use
                                                           "eval_upd_no_idxs_ac")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 1)
                                                              (("2"
                                                                (expand
                                                                 "idxs_bounded"
                                                                 "cache2-idxs_bound")
                                                                (("2"
                                                                  (expand
                                                                   "idxs_ac")
                                                                  (("2"
                                                                    (inst
                                                                     "cache2-idxs_bound"
                                                                     "j")
                                                                    (("2"
                                                                      (expand
                                                                       "next_idx")
                                                                      (("2"
                                                                        (hide-all-but
                                                                         ("cache2-idxs_bound"
                                                                          -1))
                                                                        (("2"
                                                                          (use
                                                                           "beyond_last_idx_notmember")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "mul_noise_value_is_Epsilon")
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replaces "result")
                  (("4" (assert)
                    (("4" (typepred_res2)
                      (("4" (typepred_res1)
                        (("4" (hide-all-but (3 -9 -4))
                          (("4" (expand ">=")
                            (("4" (case "nextfreeidx <= newid2")
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (lemma "lt_plus_lt2")
                                  (("1"
                                    (inst
                                     -1
                                     "newid2"
                                     "0"
                                     "1"
                                     "nextfreeidx")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "reals.<=")
                                    (("2"
                                      (expand "total_order?")
                                      (("2"
                                        (expand "partial_order?")
                                        (("2"
                                          (expand "preorder?")
                                          (("2"
                                            (expand "reflexive?")
                                            (("2"
                                              (expand "transitive?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "nextfreeidx"
                                                   "newid1"
                                                   "newid2")
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replaces "result")
                  (("5" (assert)
                    (("5" (expand "idxs_bounded")
                      (("5" (skeep)
                        (("5" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (use "next_idx_mult_ac_ac")
                                (("1"
                                  (expand ">=")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred_res2)
                            (("2" (expand "idxs_bounded")
                              (("2"
                                (inst "cache2-idxs_bound" "i-1")
                                (("1"
                                  (expand "nth" 3)
                                  (("1"
                                    (hide-all-but
                                     (3 "cache2-idxs_bound"))
                                    (("1"
                                      (expand ">=")
                                      (("1"
                                        (lemma "lt_plus_lt2")
                                        (("1"
                                          (inst
                                           -1
                                           "newid2"
                                           "0"
                                           "1"
                                           "next_idx(pd(nth(cache2, i - 1)`2))")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_ol? const-decl "bool" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (first_noises const-decl "Noise" affine nil)
    (gnbi_upd_2 formula-decl nil affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (ac_proj_pd formula-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (eval_upd_no_idxs_ac formula-decl nil affine nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (beyond_last_idx_notmember formula-decl nil affine nil)
    (nth_append formula-decl nil list_more_props nil)
    (first_noises_upd formula-decl nil affine nil)
    (gnbi_upd formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (mul_noise_value_is_Epsilon judgement-tcc nil affine nil)
    (next_idx_mult_ac_ac formula-decl nil affine nil))
   nil))
 (RE2AC_TCC32 0
  (RE2AC_TCC32-2 nil 3632068503
   ("" (skeep*)
    (("" (typepred "res1")
      (("" (assert)
        (("" (flatten)
          (("" (split 4)
            (("1" (expand "compatible_pairs?")
              (("1" (skeep -3)
                (("1" (inst 1 "N") (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (replace -10 :dir RL)
              (("2" (replace -9 :dir RL) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (RE2AC_TCC32-1 nil 3631365124 ("" (grind) nil nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/"))
   nil))
 (RE2AC_TCC33 0
  (RE2AC_TCC33-1 nil 3631466640 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
     AffineExpr_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (RE2AC_TCC34 0
  (RE2AC_TCC34-1 nil 3631466640
   ("" (skeep*) (("" (grind) nil nil)) nil) nil shostak))
 (RE2AC_TCC35 0
  (RE2AC_TCC35-2 nil 3631472540
   ("" (skeep*)
    (("" (assert)
      (("" (expand "null_ol")
        (("" (hide 1)
          (("" (hide -6)
            (("" (split 1)
              (("1" (grind) nil nil)
               ("2" (replace -5 1)
                (("2" (assert)
                  (("2" (inst 1 "(: (re, acRes,null)::CacheData :)")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (replace -5 1)
                (("3" (assert)
                  (("3" (typepred "cache")
                    (("3" (expand "compatible_pairs?")
                      (("3" (skeep)
                        (("3" (inst 1 "N")
                          (("3" (assert)
                            (("3" (expand "compatible_pairs_on?")
                              (("3"
                                (skeep)
                                (("3"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (case "pow=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -4)
                                            (("1"
                                              (replaces -6)
                                              (("1"
                                                (expand "pow_var_ac")
                                                (("1"
                                                  (expand
                                                   "eval_ACExpr_Env")
                                                  (("1"
                                                    (expand
                                                     "eval_ac_noise")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "expt_x0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "pow=1")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (replaces -4)
                                              (("1"
                                                (replaces -6)
                                                (("1"
                                                  (expand
                                                   "eval_ACExpr_Env"
                                                   2)
                                                  (("1"
                                                    (expand
                                                     "pow_var_ac"
                                                     2)
                                                    (("1"
                                                      (lift-if 2)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replaces
                                                             -6)
                                                            (("1"
                                                              (expand
                                                               "eval_ac_noise")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth_ac"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "vars_in_box_compatible?")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "idx")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replaces
                                                                                 -2
                                                                                 1
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (expand
                                                                                   "eval_ac_noise")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth_ac")
                                                                                    (("1"
                                                                                      (case
                                                                                       "pd(var_ac(nth(box, idx), idx)) = null")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "eval_pd_noise_rec_pds_def")
                                                                                          (("1"
                                                                                            (expand_ol)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "vars_in_box_compatible?")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "idx")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replaces
                                                                       -2
                                                                       1
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (replaces
                                                                         -6)
                                                                        (("1"
                                                                          (expand
                                                                           "eval_ac_noise"
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth_ac")
                                                                              (("1"
                                                                                (use
                                                                                 "eval_pd_noise_rec_pds_def")
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     -1)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (case
                                                                                             "eval_pd_noise(cdr(pd(var_ac(nth(box, idx), idx))), N) = 0")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "expt_x1")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "expt_x1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               3)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "cdr(pd(var_ac(nth(box, idx), idx))) = null")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "eval_pd_noise_rec_pds_def")
                                                                                                    (("1"
                                                                                                      (expand_ol)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "vars_in_box_compatible?")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "idx")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replaces
                                                                       -1
                                                                       2
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (expand
                                                                         "eval_ac_noise")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replaces
                                                                             -5)
                                                                            (("2"
                                                                              (expand
                                                                               "nth_ac")
                                                                              (("2"
                                                                                (use
                                                                                 "expt_x1")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (use
                                                                                     "expt_x1")
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "eval_pd_noise_rec_pds_def")
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             -1)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand_ol)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "eval_pd_noise(cdr(pd(var_ac(nth(box, idx), idx))), N) = 0")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                                            (("1"
                                                                                                              (expand_ol)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                                                  (("1"
                                                                                                                    (expand_ol)
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "expt_x0")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "expt_x0")
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "car(pd
                                                                         (var_ac(IF idx = 0 THEN car(box)
                                                                                 ELSE nth(cdr(box), idx - 1)
                                                                                 ENDIF,
                                                                                 idx)))`2")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "/=")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "idx")
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (flatten)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "idx")
                                                                                                                        (("3"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (flatten)
                                                                                                                      (("4"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case
                                                                                                         "cdr(pd(var_ac(nth(box, idx), idx))) = null")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                                            (("1"
                                                                                                              (expand_ol)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (split -5)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (replaces -7 3)
                                              (("2"
                                                (replaces -5 3)
                                                (("2"
                                                  (expand "pow_var_ac")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "eval_ACExpr_Env"
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "eval_ac_noise")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("2"
                                                              (expand_ol)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replaces
                                                                     -5)
                                                                    (("2"
                                                                      (expand
                                                                       "nth_ac")
                                                                      (("2"
                                                                        (expand
                                                                         "vars_in_box_compatible?")
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "idx")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replaces
                                                                               -2
                                                                               3
                                                                               :dir
                                                                               RL)
                                                                              (("2"
                                                                                (expand
                                                                                 "eval_ac_noise")
                                                                                (("2"
                                                                                  (use
                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                  (("2"
                                                                                    (expand_ol)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         3)
                                                                                        (("2"
                                                                                          (split
                                                                                           3)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "nth" 2)
                                    (("2"
                                      (assert)
                                      (("2" (inst -2 "i-1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (replace -5 1)
                (("4" (assert)
                  (("4" (typepred "cache")
                    (("4" (expand "idxs_bounded")
                      (("4" (skeep)
                        (("4" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (replaces -6)
                                (("1"
                                  (use "next_idx_pow_var_ac")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (typepred "nextfreeidx")
                                        (("1"
                                          (replaces -6)
                                          (("1"
                                            (expand "last_idx_in_box")
                                            (("1"
                                              (expand "nth_ac")
                                              (("1"
                                                (expand "var_ac" 1)
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "next_idx")
                                                          (("1"
                                                            (expand
                                                             "last_idx")
                                                            (("1"
                                                              (expand
                                                               "last_ol")
                                                              (("1"
                                                                (reveal
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert)
                              (("2" (inst -2 "i-1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (RE2AC_TCC35-1 nil 3631466640 ("" (subtype-tcc) nil nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (next_idx const-decl "nat" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil))
   nil))
 (RE2AC_TCC36 0
  (RE2AC_TCC36-1 nil 3631466640 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (RE2AC_TCC37 0
  (RE2AC_TCC37-3 nil 3632068879
   ("" (skeep*)
    (("" (expand "next_idx_2")
      (("" (typepred "res2")
        (("" (assert)
          (("" (flatten)
            (("" (replace -14 :dir RL)
              (("" (typepred "res1")
                (("" (assert)
                  (("" (flatten)
                    (("" (replaces -17)
                      (("" (hide-all-but (6 -10 -5 -11))
                        (("" (expand "idxs_bounded")
                          (("" (inst -1 "0")
                            (("1" (inst? :subst ("i" "0"))
                              (("1"
                                (expand "nth")
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil)
                               ("3"
                                (reveal 1)
                                (("3" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (reveal 1) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_idx_2 const-decl "nat" affine nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cache2 skolem-const-decl "(correct_cache?(box))"
     affine_expr_Eval_fnd nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (re1 skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (res1 skolem-const-decl
     "{result: Maybe[[nat, (correct_cache?(box))]] |
         some?(result) IMPLIES
               NOT null?(val(result)`2) AND car(val(result)`2)`1 = re1
           AND EXISTS (l: list[CacheData]): val(result)`2 = append(l, cache)
           AND EXISTS (N: Noise):
                 vars_in_box_compatible?(N)(box)(vs) AND
                  compatible_pairs_on?(box, vs)(N)(val(result)`2)
           AND val(result)`1 >= nextfreeidx
           AND idxs_bounded(val(result)`1)(val(result)`2)}"
     affine_expr_Eval_fnd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil))
   nil)
  (RE2AC_TCC37-2 nil 3631550185 ("" (grind) nil nil)
   ((var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil))
   nil)
  (RE2AC_TCC37-1 nil 3631466640 ("" (grind) nil nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil))
   shostak))
 (RE2AC_TCC38 0
  (RE2AC_TCC38-2 nil 3631567697
   ("" (skeep*)
    (("" (assert)
      (("" (hide -7)
        ((""
          (apply (then (label "re" -1) (label "varac" -2)
                  (label "cached some" -3) (label "pow is cached" -4)
                  (label "cached" -5) (label "result" -6)
                  (label "idx" 1) (label "pow <= 1" 2)
                  (label "varac not single" 3)))
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (split 4)
                  (("1"
                    (inst 1
                     "(: (POWVAR(idx, pow), val(cached)`2, val(cached)`3) :)")
                    (("1" (grind) nil nil)) nil)
                   ("2"
                    (with-labels (typepred "cache")
                     (("cache comp pairs" "cache idx bound")))
                    (("2" (expand "compatible_pairs?")
                      (("2" (skeep)
                        (("2" (inst 1 "N")
                          (("2" (assert)
                            (("2" (expand "compatible_pairs_on?")
                              (("2"
                                (skeep)
                                (("2"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (typepred "cached")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (replaces -3 1 :dir RL)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replaces
                                                     "cache comp pairs")
                                                    (("1"
                                                      (case
                                                       "nth(cache, i!1)`1 = POWVAR(idx, pow)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (reveal
                                                           -3
                                                           "re")
                                                          (("2"
                                                            (replaces
                                                             "re")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    "pow is cached"
                                                                    -1))
                                                                  (("2"
                                                                    (typepred
                                                                     "val(cached)`1")
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst "cache comp pairs" "i-1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "cache")
                    (("3" (expand "idxs_bounded")
                      (("3" (skeep)
                        (("3" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (typepred "cached")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replaces -3 1 :dir RL)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list? def-decl "bool" ordered_list nil)) nil)
  (RE2AC_TCC38-1 nil 3631466640
   ("" (skeep*)
    (("" (assert)
      (("" (hide -7)
        ((""
          (apply (then (label "re" -1) (label "varac" -2)
                  (label "cached some" -3) (label "pow is cached" -4)
                  (label "cached" -5) (label "result" -6)
                  (label "idx" 1) (label "pow <= 1" 2)))
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (split 4)
                  (("1" (typepred "cached") (("1" (assert) nil nil))
                    nil)
                   ("2" (inst 1 "(: val(cached) :)")
                    (("2" (grind) nil nil)) nil)
                   ("3"
                    (with-labels (typepred "cache")
                     (("cache comp pairs" "cache idx bound")))
                    (("3" (expand "compatible_pairs?")
                      (("3" (skeep)
                        (("3" (inst 1 "N")
                          (("3" (assert)
                            (("3" (expand "compatible_pairs_on?")
                              (("3"
                                (skeep)
                                (("3"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (typepred "cached")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (replaces -2 1 :dir RL)
                                                (("1" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst "cache comp pairs" "i-1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (typepred "cache")
                    (("4" (expand "idxs_bounded")
                      (("4" (skeep)
                        (("4" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (typepred "cached")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replaces -2 1 :dir RL)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (RE2AC_TCC39 0
  (RE2AC_TCC39-2 nil 3632069106
   ("" (skeep*)
    (("" (assert)
      (("" (hide 1) (("" (hide -6) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (nth def-decl "T" list_props nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (length def-decl "nat" list_props nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil))
   nil)
  (RE2AC_TCC39-1 nil 3631466640 ("" (grind) nil nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil))
   shostak))
 (RE2AC_TCC40 0
  (RE2AC_TCC40-3 nil 3632069583
   ("" (skeep*)
    (("" (assert)
      (("" (hide -12)
        ((""
          (apply (then (label "result" -11) (label "ac2" -10)
                  (label "cache2" -9) (label "newid2" -8)
                  (label "res2" -7) (label "ac1" -6)
                  (label "cache1" -5) (label "newid1" -4)
                  (label "res1" -3) (label "cached" -2)
                  (label "re" -1)))
          ((""
            (deftactic typepred_res2 nil
             (then (typepred "res2") (replace "cache2" -1 :dir RL)
              (replace "newid2" -1 :dir RL) (assert)
              (with-labels (flatten)
               (("cache2 not null" "re2" "cache2-form" "N2"
                 "newid2-prop" "cache2-idxs_bound")))))
            ((""
              (deftactic typepred_res1 nil
               (then (typepred "res1") (replace "cache1" -1 :dir RL)
                (replace "newid1" -1 :dir RL) (assert)
                (with-labels (flatten)
                 (("cache1 not null" "re1" "cache1-form" "N1"
                   "newid1-prop" "cache1-idxs_bound")))))
              (("" (split 4)
                (("1" (grind) nil nil)
                 ("2" (replaces "result")
                  (("2" (assert)
                    (("2" (typepred_res1)
                      (("2" (typepred_res2)
                        (("2" (skolem "cache2-form" "l2")
                          (("2" (skolem "cache1-form" "l1")
                            (("2" (replace "cache1-form" "cache2-form")
                              (("2"
                                (replace "cache2-form" 3)
                                (("2"
                                  (inst
                                   3
                                   "cons((re, mult_ac_ac(ac1, ac2, newid2), null)::CacheData, append(l2,l1))")
                                  (("1"
                                    (hide-all-but 3)
                                    (("1"
                                      (expand "append" 1 3)
                                      (("1"
                                        (use "append_assoc[CacheData]")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3"
                                    (expand "next_idx_2")
                                    (("3"
                                      (expand ">=")
                                      (("3"
                                        (expand "idxs_bounded")
                                        (("3"
                                          (inst
                                           "cache1-idxs_bound"
                                           "0")
                                          (("1"
                                            (expand
                                             "nth"
                                             "cache1-idxs_bound")
                                            (("1"
                                              (replace "ac1" :dir RL)
                                              (("1"
                                                (inst
                                                 "cache2-idxs_bound"
                                                 "0")
                                                (("1"
                                                  (expand
                                                   "nth"
                                                   "cache2-idxs_bound")
                                                  (("1"
                                                    (replace
                                                     "ac2"
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (hide-all-but
                                                       (1
                                                        "cache2-idxs_bound"
                                                        "newid2-prop"
                                                        "cache1-idxs_bound"))
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 ">=")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   ">=")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 4))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred_res2)
                  (("3" (skolem "N2" "N2")
                    (("3"
                      (with-labels (flatten)
                       (("N2 vars in box comp" "N2 compatible pairs")))
                      (("3"
                        (name "updN2" "upd_noise(N2,
                                                                   newid2,
                                                                   mul_noise_value
                                                                   (ac1,
                                                                    ac2,
                                                                    first_noises(N2, newid2)))")
                        (("1" (inst 2 "updN2")
                          (("1" (split 2)
                            (("1" (expand "vars_in_box_compatible?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst "N2 vars in box comp" "i")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "get_noise_by_idx(i, updN2) = get_noise_by_idx(i, N2)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (replace
                                           "N2 vars in box comp"
                                           1
                                           :dir
                                           RL)
                                          (("1"
                                            (expand "var_ac" 1)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "eval_ac_noise"
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (expand_ol)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (expand_ol)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "eval_ac_noise"
                                                     1)
                                                    (("2"
                                                      (use
                                                       "eval_pd_noise_rec_pds_def")
                                                      (("2"
                                                        (expand_ol)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (use
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (use "gnbi_upd_2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred_res1)
                                              (("2"
                                                (typepred
                                                 "nextfreeidx")
                                                (("2"
                                                  (expand
                                                   "last_idx_in_box")
                                                  (("2"
                                                    (replaces -7)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compatible_pairs_on?")
                              (("2"
                                (skeep)
                                (("2"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (replace "result")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "eval_ACExpr_Env"
                                             1)
                                            (("1"
                                              (replaces "re")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "containment_mul")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (typepred_res1)
                                                          (("1"
                                                            (expand
                                                             "next_idx_2")
                                                            (("1"
                                                              (expand
                                                               ">=")
                                                              (("1"
                                                                (expand
                                                                 "idxs_bounded")
                                                                (("1"
                                                                  (inst
                                                                   "cache1-idxs_bound"
                                                                   "0")
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     "cache1-idxs_bound")
                                                                    (("1"
                                                                      (replace
                                                                       "ac1"
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (inst
                                                                         "cache2-idxs_bound"
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           "cache2-idxs_bound")
                                                                          (("1"
                                                                            (replace
                                                                             "ac2"
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (2
                                                                                "cache2-idxs_bound"
                                                                                "newid2-prop"
                                                                                "cache1-idxs_bound"))
                                                                              (("1"
                                                                                (expand
                                                                                 "max")
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         ">=")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           ">=")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "eval_ac_noise(ac1, updN2) = eval_ac_noise(ac1, N2)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (typepred_res1)
                                                              (("1"
                                                                (replaces
                                                                 "re1"
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (skolem
                                                                   "N1"
                                                                   "N1")
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten)
                                                                     (("N1 vars in box comp"
                                                                       "N1 compatible pairs")))
                                                                    (("1"
                                                                      (case
                                                                       "FORALL (i: below(length(cache1))):
                                                                                                                                                                                 eval_ac_noise(nth(cache1, i)`2, N2) =
                                                                                                                                                                                  eval_ac_noise(nth(cache1, i)`2, N1)")
                                                                      (("1"
                                                                        (replace
                                                                         "ac1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -1)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "compatible_pairs_on?"
                                                                                 "N1 compatible pairs")
                                                                                (("1"
                                                                                  (inst
                                                                                   "N1 compatible pairs"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "length")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "length")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "compatible_pairs_on?"
                                                                         "N1 compatible pairs")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             "N1 compatible pairs"
                                                                             "i!1")
                                                                            (("2"
                                                                              (skolem
                                                                               "cache2-form"
                                                                               "l2")
                                                                              (("2"
                                                                                (replace
                                                                                 "cache2-form"
                                                                                 "N2 compatible pairs")
                                                                                (("2"
                                                                                  (inst
                                                                                   "N2 compatible pairs"
                                                                                   "length(l2)+i!1")
                                                                                  (("1"
                                                                                    (case
                                                                                     "nth(append(l2, cache1), length(l2) + i!1) = nth(cache1, i!1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "nth_append[CacheData]")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (use
                                                                                           "length_append[CacheData]")
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "i!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     "cache2-form"
                                                                                     1)
                                                                                    (("2"
                                                                                      (use
                                                                                       "length_append[[RealExpr, AffineCombination]]")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (use
                                                                                             "length_append[CacheData]")
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (replaces
                                                               -1
                                                               1
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (use
                                                                 "eval_upd_no_idxs_ac")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (replace
                                                                       "ac1"
                                                                       -1)
                                                                      (("2"
                                                                        (typepred_res1)
                                                                        (("2"
                                                                          (expand
                                                                           "idxs_bounded"
                                                                           "cache1-idxs_bound")
                                                                          (("2"
                                                                            (expand
                                                                             "idxs_ac")
                                                                            (("2"
                                                                              (inst
                                                                               "cache1-idxs_bound"
                                                                               "0")
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 "cache1-idxs_bound")
                                                                                (("1"
                                                                                  (expand
                                                                                   "next_idx")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     ("cache1-idxs_bound"
                                                                                      -6
                                                                                      "newid2-prop"))
                                                                                    (("1"
                                                                                      (use
                                                                                       "beyond_last_idx_notmember")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (case
                                                           "eval_ac_noise(ac2, updN2) = eval_ac_noise(ac2, N2)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               "N2 compatible pairs"
                                                               "0")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 "N2 compatible pairs")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (replaces
                                                               -1
                                                               1
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (use
                                                                 "eval_upd_no_idxs_ac")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "idxs_bounded"
                                                                       "cache2-idxs_bound")
                                                                      (("2"
                                                                        (expand
                                                                         "idxs_ac")
                                                                        (("2"
                                                                          (inst
                                                                           "cache2-idxs_bound"
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             "cache2-idxs_bound")
                                                                            (("1"
                                                                              (expand
                                                                               "next_idx")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 ("cache2-idxs_bound"
                                                                                  -1))
                                                                                (("1"
                                                                                  (use
                                                                                   "beyond_last_idx_notmember")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           RL)
                                                          (("4"
                                                            (use
                                                             "first_noises_upd")
                                                            (("4"
                                                              (replaces
                                                               -1)
                                                              (("4"
                                                                (use
                                                                 "gnbi_upd")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name "j" "i-1")
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (expand "length" -1)
                                        (("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (replace "result")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     "N2 compatible pairs"
                                                     "j")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (case
                                                         "eval_ac_noise(nth(cache2, j)`2, updN2) = eval_ac_noise(nth(cache2, j)`2, N2)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "pow_var_compatible?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (case
                                                                           "get_noise_by_idx(nth(nth(cache2, j)`3, i!1), updN2) = get_noise_by_idx(nth(nth(cache2, j)`3, i!1), N2)")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (case
                                                                               "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache2, j)`1))),
                                                                  0)`1,
                                                              updN2) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache2, j)`1))),
                                                                  0)`1,
                                                              N2)")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 3)
                                                                                (("2"
                                                                                  (expand
                                                                                   "updN2")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "gnbi_upd_2")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1
                                                                                       :where
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "res1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "nextfreeidx")
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    "newid2-prop"
                                                                                                    -5
                                                                                                    "newid1"
                                                                                                    "newid2"
                                                                                                    -7
                                                                                                    -13))
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     "newid1")
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       "newid2")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -3
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "last_idx_box")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "next_idx")
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "olidx_car_last[nzBaseType]")
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "NOT null?(pd(nth_ac(box, varidx(nth(cache2, j)`1))))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "last_idx")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       ">=")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         ">")
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "last_ol(pd(nth_ac(box, varidx(nth(cache2, j)`1))))`1 < nextfreeidx")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -3
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "car_ol(pd(nth_ac(box, varidx(nth(cache2, j)`1))))`1 < nextfreeidx")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -2
                                                                                                                                 -3)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "car_ol")
                                                                                                                                  (("1"
                                                                                                                                    (replaces
                                                                                                                                     -3)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "val(res1)`1 < nextfreeidx")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (1
                                                                                                                                          "newid2-prop"
                                                                                                                                          -1))
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "val(res1)`1 = val(res2)`1")
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (case
                                                                                                                                             "val(res1)`1 < val(res2)`1")
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                -2
                                                                                                                                                2))
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "transitive?[real](<)")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "transitive?")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1
                                                                                                                                                     :where
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1
                                                                                                                                                       :where
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "length")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "updN2"
                                                                             1)
                                                                            (("2"
                                                                              (hide
                                                                               3)
                                                                              (("2"
                                                                                (use
                                                                                 "gnbi_upd_2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "i!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "idxs_bounded")
                                                                                      (("2"
                                                                                        (inst
                                                                                         "cache2-idxs_bound"
                                                                                         "j")
                                                                                        (("2"
                                                                                          (use
                                                                                           "cache_powvar_correct")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "CacheData_correct?")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "next_idx_pow_var_ac")
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -4
                                                                                                               "cache2-idxs_bound")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 "cache2-idxs_bound")
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   ("cache2-idxs_bound"
                                                                                                                    -5
                                                                                                                    -6))
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "i!1 = opn(nth(cache2, j)`1) - 2")
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             ">=")
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "both_sides_plus_le1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "i!1 < opn(nth(cache2, j)`1) - 2")
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         (-2
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -2
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             ">=")
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_ol[nat,<]")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "nth(cache2, j)`3"
                                                                                                                                 "opn(nth(cache2, j)`1) - 2"
                                                                                                                                 "i!1")
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "nth(nth(cache2, j)`3, opn(nth(cache2, j)`1) - 2) < nth(nth(cache2, j)`3, i!1)")
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     "cache2-idxs_bound")
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -3)
                                                                                                                                      (("1"
                                                                                                                                        (name-replace
                                                                                                                                         "A"
                                                                                                                                         "nth(nth(cache2, j)`3, opn(nth(cache2, j)`1) - 2)")
                                                                                                                                        (("1"
                                                                                                                                          (name-replace
                                                                                                                                           "B"
                                                                                                                                           "nth(nth(cache2, j)`3, i!1)")
                                                                                                                                          (("1"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces
                                                           -3
                                                           1
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (use
                                                             "eval_upd_no_idxs_ac")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "idxs_bounded"
                                                                   "cache2-idxs_bound")
                                                                  (("2"
                                                                    (expand
                                                                     "idxs_ac")
                                                                    (("2"
                                                                      (inst
                                                                       "cache2-idxs_bound"
                                                                       "j")
                                                                      (("2"
                                                                        (expand
                                                                         "next_idx")
                                                                        (("2"
                                                                          (hide-all-but
                                                                           ("cache2-idxs_bound"
                                                                            -1))
                                                                          (("2"
                                                                            (use
                                                                             "beyond_last_idx_notmember")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "mul_noise_value_is_Epsilon")
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replaces "result")
                  (("4" (assert)
                    (("4" (typepred_res2)
                      (("4" (typepred_res1)
                        (("4"
                          (hide-all-but
                           (3 "newid2-prop" "newid1-prop"))
                          (("4" (expand ">=")
                            (("4" (case "nextfreeidx <= newid2")
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (lemma "lt_plus_lt2")
                                  (("1"
                                    (inst
                                     -1
                                     "newid2"
                                     "0"
                                     "1"
                                     "nextfreeidx")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "reals.<=")
                                    (("2"
                                      (expand "total_order?")
                                      (("2"
                                        (expand "partial_order?")
                                        (("2"
                                          (expand "preorder?")
                                          (("2"
                                            (expand "reflexive?")
                                            (("2"
                                              (expand "transitive?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "nextfreeidx"
                                                   "newid1"
                                                   "newid2")
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replaces "result")
                  (("5" (assert)
                    (("5" (expand "idxs_bounded")
                      (("5" (skeep)
                        (("5" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (use "next_idx_mult_ac_ac")
                                (("1"
                                  (expand ">=")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred_res2)
                            (("2" (expand "idxs_bounded")
                              (("2"
                                (inst "cache2-idxs_bound" "i-1")
                                (("1"
                                  (expand "nth" 3)
                                  (("1"
                                    (hide-all-but
                                     (3 "cache2-idxs_bound"))
                                    (("1"
                                      (expand ">=")
                                      (("1"
                                        (lemma "lt_plus_lt2")
                                        (("1"
                                          (inst
                                           -1
                                           "newid2"
                                           "0"
                                           "1"
                                           "next_idx(pd(nth(cache2, i - 1)`2))")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (next_idx_mult_ac_ac formula-decl nil affine nil)
    (i skolem-const-decl
     "below(length(cons((re, mult_ac_ac(ac1, ac2, newid2), null), cache2)))"
     affine_expr_Eval_fnd nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (lt_plus_lt2 formula-decl nil real_props nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (total_order? const-decl "bool" orders nil)
    (mul_noise_value_is_Epsilon judgement-tcc nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (gnbi_upd formula-decl nil affine nil)
    (first_noises_upd formula-decl nil affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (l2 skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd nil)
    (i!1 skolem-const-decl "below(length(cache1))" affine_expr_Eval_fnd
     nil)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil list_more_props nil)
    (beyond_last_idx_notmember formula-decl nil affine nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (eval_upd_no_idxs_ac formula-decl nil affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (updN2 skolem-const-decl "{N_: Noise |
         (null_ol?(N2) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = newid2)) AND
          (NOT null_ol?(N2) IMPLIES
            null_ol?(N_) OR
             ((newid2 < car_ol(N2)`1 AND car_ol(N_)`1 = newid2) OR
               (newid2 > car_ol(N2)`1 AND car_ol(N_)`1 = car_ol(N2)`1) OR
                car_ol(N_)`1 >= min(car_ol(N2)`1, newid2)))}"
     affine_expr_Eval_fnd nil)
    (last_idx_box formula-decl nil affine_box nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (transitive? const-decl "bool" relations nil)
    (cache_powvar_correct formula-decl nil affine_expr_Eval_fnd nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (represents_var? const-decl "bool" affine nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (nth_ol formula-decl nil ordered_list nil)
    (i!1 skolem-const-decl "below(opn(nth(cache2, j)`1) - 1)"
     affine_expr_Eval_fnd nil)
    (j skolem-const-decl "int" affine_expr_Eval_fnd nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ac_proj_pd formula-decl nil affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (gnbi_upd_2 formula-decl nil affine nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first_noises const-decl "Noise" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (car_ol const-decl "T" ordered_list nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (newid2 skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (nzBaseType type-eq-decl nil affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (ac1 skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (ac2 skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append_assoc formula-decl nil list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (cache1 skolem-const-decl "(correct_cache?(box))"
     affine_expr_Eval_fnd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (cache2 skolem-const-decl "(correct_cache?(box))"
     affine_expr_Eval_fnd nil)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (RE2AC_TCC40-2 nil 3632069241
   ("" (skeep*)
    (("" (assert)
      (("" (hide -12)
        ((""
          (apply (then (label "result" -11) (label "ac2" -10)
                  (label "cache2" -9) (label "newid2" -8)
                  (label "res2" -7) (label "ac1" -6)
                  (label "cache1" -5) (label "newid1" -4)
                  (label "res1" -3) (label "cached" -2)
                  (label "re" -1)))
          ((""
            (deftactic typepred_res2 nil
             (then (typepred "res2") (replace "cache2" -1 :dir RL)
              (replace "newid2" -1 :dir RL) (assert) (flatten)
              (label "re2" -1) (label "cache2-form" -2) (label "N2" -3)
              (label "newid2-prop" -4) (label "cache2-idxs_bound" -5)
              (label "cache2 correct" -6)))
            ((""
              (deftactic typepred_res1 nil
               (then (typepred "res1") (replace "cache1" -1 :dir RL)
                (replace "newid1" -1 :dir RL) (assert) (flatten)
                (label "re1" -1) (label "cache1-form" -2)
                (label "N1" -3) (label "newid1-prop" -4)
                (label "cache1-idxs_bound" -5)
                (label "cache1 correct" -6)))
              (("" (split 4)
                (("1" (grind) nil)
                 ("2" (replaces "result")
                  (("2" (assert)
                    (("2" (typepred_res1)
                      (("2" (typepred_res2)
                        (("2" (skolem "cache2-form" "l2")
                          (("2" (skolem "cache1-form" "l1")
                            (("2" (replace "cache1-form" "cache2-form")
                              (("2"
                                (replace "cache2-form" 3)
                                (("2"
                                  (inst
                                   3
                                   "cons((re, mult_ac_ac(ac1, ac2, newid2), null)::CacheData, append(l2,l1))")
                                  (("1"
                                    (hide-all-but 3)
                                    (("1"
                                      (expand "append" 1 3)
                                      (("1"
                                        (use "append_assoc[CacheData]")
                                        (("1" (assert) nil)))))))
                                   ("2" (grind) nil)
                                   ("3"
                                    (expand "next_idx_2")
                                    (("3"
                                      (expand ">=")
                                      (("3"
                                        (expand "idxs_bounded")
                                        (("3"
                                          (inst
                                           "cache1-idxs_bound"
                                           "0")
                                          (("1"
                                            (expand
                                             "nth"
                                             "cache1-idxs_bound")
                                            (("1"
                                              (replace "ac1" :dir RL)
                                              (("1"
                                                (inst
                                                 "cache2-idxs_bound"
                                                 "0")
                                                (("1"
                                                  (expand
                                                   "nth"
                                                   "cache2-idxs_bound")
                                                  (("1"
                                                    (replace
                                                     "ac2"
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (hide-all-but
                                                       (1
                                                        "cache2-idxs_bound"
                                                        "newid2-prop"
                                                        "cache1-idxs_bound"))
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 ">=")
                                                                (("1"
                                                                  (propax)
                                                                  nil)))))
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   ">=")
                                                                  (("2"
                                                                    (grind)
                                                                    nil)))))))))))))))))))
                                                 ("2"
                                                  (grind)
                                                  nil)))))))
                                           ("2"
                                            (hide-all-but (1 4))
                                            (("2"
                                              (grind)
                                              nil)))))))))))))))))))))))))))))
                 ("3" (typepred_res2)
                  (("3" (skolem "N2" "N2")
                    (("3"
                      (with-labels (flatten)
                       (("N2 vars in box comp" "N2 compatible pairs")))
                      (("3"
                        (name "updN2" "upd_noise(N2,
                                                                   newid2,
                                                                   mul_noise_value
                                                                   (ac1,
                                                                    ac2,
                                                                    first_noises(N2, newid2)))")
                        (("1" (inst 2 "updN2")
                          (("1" (split 2)
                            (("1" (expand "vars_in_box_compatible?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst "N2 vars in box comp" "i")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "get_noise_by_idx(i, updN2) = get_noise_by_idx(i, N2)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (replace
                                           "N2 vars in box comp"
                                           1
                                           :dir
                                           RL)
                                          (("1"
                                            (expand "var_ac" 1)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "eval_ac_noise"
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("1"
                                                                (expand_ol)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (expand_ol)
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))))))))))))))))))))))))))))))
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "eval_ac_noise"
                                                     1)
                                                    (("2"
                                                      (use
                                                       "eval_pd_noise_rec_pds_def")
                                                      (("2"
                                                        (expand_ol)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (use
                                                               "eval_pd_noise_rec_pds_def")
                                                              (("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))))))))))))))))
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil)))))
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (use "gnbi_upd_2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred_res1)
                                              (("2"
                                                (typepred
                                                 "nextfreeidx")
                                                (("2"
                                                  (expand
                                                   "last_idx_in_box")
                                                  (("2"
                                                    (replaces -7)
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))))))))))))))))
                             ("2" (expand "compatible_pairs_on?")
                              (("2"
                                (skeep)
                                (("2"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (replace "result")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "eval_ACExpr_Env"
                                             1)
                                            (("1"
                                              (replaces "re")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "containment_mul")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (typepred_res1)
                                                          (("1"
                                                            (expand
                                                             "next_idx_2")
                                                            (("1"
                                                              (expand
                                                               ">=")
                                                              (("1"
                                                                (expand
                                                                 "idxs_bounded")
                                                                (("1"
                                                                  (inst
                                                                   "cache1-idxs_bound"
                                                                   "0")
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     "cache1-idxs_bound")
                                                                    (("1"
                                                                      (replace
                                                                       "ac1"
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (inst
                                                                         "cache2-idxs_bound"
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           "cache2-idxs_bound")
                                                                          (("1"
                                                                            (replace
                                                                             "ac2"
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (2
                                                                                "cache2-idxs_bound"
                                                                                "newid2-prop"
                                                                                "cache1-idxs_bound"))
                                                                              (("1"
                                                                                (expand
                                                                                 "max")
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         ">=")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil)))))
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           ">=")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil)))))))))))))))))))
                                                                         ("2"
                                                                          (grind)
                                                                          nil)))))))
                                                                   ("2"
                                                                    (grind)
                                                                    nil)))))))))))
                                                         ("2"
                                                          (case
                                                           "eval_ac_noise(ac1, updN2) = eval_ac_noise(ac1, N2)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (typepred_res1)
                                                              (("1"
                                                                (replaces
                                                                 "re1"
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (skolem
                                                                   "N1"
                                                                   "N1")
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten)
                                                                     (("N1 vars in box comp"
                                                                       "N1 compatible pairs")))
                                                                    (("1"
                                                                      (case
                                                                       "FORALL (i: below(length(cache1))):
                                                                                                                                                                                 eval_ac_noise(nth(cache1, i)`2, N2) =
                                                                                                                                                                                  eval_ac_noise(nth(cache1, i)`2, N1)")
                                                                      (("1"
                                                                        (replace
                                                                         "ac1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -1)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "compatible_pairs_on?"
                                                                                 "N1 compatible pairs")
                                                                                (("1"
                                                                                  (inst
                                                                                   "N1 compatible pairs"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil)))))
                                                                                   ("2"
                                                                                    (expand
                                                                                     "length")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil)))))))))))
                                                                           ("2"
                                                                            (expand
                                                                             "length")
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))))))
                                                                       ("2"
                                                                        (expand
                                                                         "compatible_pairs_on?"
                                                                         "N1 compatible pairs")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             "N1 compatible pairs"
                                                                             "i!1")
                                                                            (("2"
                                                                              (skolem
                                                                               "cache2-form"
                                                                               "l2")
                                                                              (("2"
                                                                                (replace
                                                                                 "cache2-form"
                                                                                 "N2 compatible pairs")
                                                                                (("2"
                                                                                  (inst
                                                                                   "N2 compatible pairs"
                                                                                   "length(l2)+i!1")
                                                                                  (("1"
                                                                                    (case
                                                                                     "nth(append(l2, cache1), length(l2) + i!1) = nth(cache1, i!1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil)))))))
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "nth_append[CacheData]")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))))))
                                                                                   ("2"
                                                                                    (replace
                                                                                     "cache2-form"
                                                                                     1)
                                                                                    (("2"
                                                                                      (use
                                                                                       "length_append[[RealExpr, AffineCombination]]")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (use
                                                                                             "length_append[CacheData]")
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))))))))))))))))))))))
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (replaces
                                                               -1
                                                               1
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (use
                                                                 "eval_upd_no_idxs_ac")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (replace
                                                                       "ac1"
                                                                       -1)
                                                                      (("2"
                                                                        (typepred_res1)
                                                                        (("2"
                                                                          (expand
                                                                           "idxs_bounded"
                                                                           "cache1-idxs_bound")
                                                                          (("2"
                                                                            (expand
                                                                             "idxs_ac")
                                                                            (("2"
                                                                              (inst
                                                                               "cache1-idxs_bound"
                                                                               "0")
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 "cache1-idxs_bound")
                                                                                (("1"
                                                                                  (expand
                                                                                   "next_idx")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     ("cache1-idxs_bound"
                                                                                      -7
                                                                                      "newid2-prop"))
                                                                                    (("1"
                                                                                      (use
                                                                                       "beyond_last_idx_notmember")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))
                                                                               ("2"
                                                                                (grind)
                                                                                nil)))))))))))))))))))))))
                                                         ("3"
                                                          (case
                                                           "eval_ac_noise(ac2, updN2) = eval_ac_noise(ac2, N2)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               "N2 compatible pairs"
                                                               "0")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 "N2 compatible pairs")
                                                                (("1"
                                                                  (assert)
                                                                  nil)))
                                                               ("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (replaces
                                                               -1
                                                               1
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (use
                                                                 "eval_upd_no_idxs_ac")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "idxs_bounded"
                                                                       "cache2-idxs_bound")
                                                                      (("2"
                                                                        (expand
                                                                         "idxs_ac")
                                                                        (("2"
                                                                          (inst
                                                                           "cache2-idxs_bound"
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             "cache2-idxs_bound")
                                                                            (("1"
                                                                              (expand
                                                                               "next_idx")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 ("cache2-idxs_bound"
                                                                                  -1))
                                                                                (("1"
                                                                                  (use
                                                                                   "beyond_last_idx_notmember")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))))))))
                                                                           ("2"
                                                                            (grind)
                                                                            nil)))))))))))))))))))
                                                         ("4"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           RL)
                                                          (("4"
                                                            (use
                                                             "first_noises_upd")
                                                            (("4"
                                                              (replaces
                                                               -1)
                                                              (("4"
                                                                (use
                                                                 "gnbi_upd")
                                                                nil)))))))))))))))))))))))))))))
                                   ("2"
                                    (name "j" "i-1")
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (expand "length" -1)
                                        (("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (replace "result")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     "N2 compatible pairs"
                                                     "j")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (case
                                                         "eval_ac_noise(nth(cache2, j)`2, updN2) = eval_ac_noise(nth(cache2, j)`2, N2)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "pow_var_compatible?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (case
                                                                           "get_noise_by_idx(nth(nth(cache2, j)`3, i!1), updN2) = get_noise_by_idx(nth(nth(cache2, j)`3, i!1), N2)")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (case
                                                                               "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache2, j)`1))),
                                                                  0)`1,
                                                              updN2) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache2, j)`1))),
                                                                  0)`1,
                                                              N2)")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 3)
                                                                                (("2"
                                                                                  (expand
                                                                                   "updN2")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "gnbi_upd_2")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -1
                                                                                       :where
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "res1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "nextfreeidx")
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    "newid2-prop"
                                                                                                    -5
                                                                                                    "newid1"
                                                                                                    "newid2"
                                                                                                    -8
                                                                                                    -13))
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     "newid1")
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       "newid2")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -3
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "last_idx_box")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "next_idx")
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "olidx_car_last[nzBaseType]")
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "NOT null?(pd(nth_ac(box, varidx(nth(cache2, j)`1))))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "last_idx")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       ">=")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         ">")
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "last_ol(pd(nth_ac(box, varidx(nth(cache2, j)`1))))`1 < nextfreeidx")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -3
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "car_ol(pd(nth_ac(box, varidx(nth(cache2, j)`1))))`1 < nextfreeidx")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -2
                                                                                                                                 -3)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "car_ol")
                                                                                                                                  (("1"
                                                                                                                                    (replaces
                                                                                                                                     -3)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "val(res1)`1 < nextfreeidx")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (1
                                                                                                                                          -4
                                                                                                                                          -1))
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "val(res1)`1 = val(res2)`1")
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (case
                                                                                                                                             "val(res1)`1 < val(res2)`1")
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               (-1
                                                                                                                                                -2
                                                                                                                                                2))
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "transitive?[real](<)")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "transitive?")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1
                                                                                                                                                     :where
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1
                                                                                                                                                       :where
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil)))))))
                                                                                                                                                 ("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil)))))
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil)))))))))))))))
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil)))))
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil)))))))))))
                                                                                                                 ("2"
                                                                                                                  (reveal
                                                                                                                   -14)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -2))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "length")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))
                                                                           ("2"
                                                                            (expand
                                                                             "updN2"
                                                                             1)
                                                                            (("2"
                                                                              (hide
                                                                               3)
                                                                              (("2"
                                                                                (use
                                                                                 "gnbi_upd_2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "i!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "idxs_bounded")
                                                                                      (("2"
                                                                                        (inst
                                                                                         "cache2-idxs_bound"
                                                                                         "j")
                                                                                        (("2"
                                                                                          (use
                                                                                           "cache_powvar_correct")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "CacheData_correct?")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "next_idx_pow_var_ac")
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil)))
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -4
                                                                                                           "cache2-idxs_bound")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             "cache2-idxs_bound")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               ("cache2-idxs_bound"
                                                                                                                -5
                                                                                                                -6))
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "nth_ol[nat,<]")
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -3)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     ">=")
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "nth(nth(cache2, j)`3, opn(nth(cache2, j)`1) - 2) < newid2")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (name-replace
                                                                                                                             "A"
                                                                                                                             "nth(nth(cache2, j)`3, opn(nth(cache2, j)`1) - 2)")
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "tri_unique_lt1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil)))))))
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                         ("2"
                                                          (replaces
                                                           -3
                                                           1
                                                           :dir
                                                           RL)
                                                          (("2"
                                                            (use
                                                             "eval_upd_no_idxs_ac")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "idxs_bounded"
                                                                   "cache2-idxs_bound")
                                                                  (("2"
                                                                    (expand
                                                                     "idxs_ac")
                                                                    (("2"
                                                                      (inst
                                                                       "cache2-idxs_bound"
                                                                       "j")
                                                                      (("2"
                                                                        (expand
                                                                         "next_idx")
                                                                        (("2"
                                                                          (hide-all-but
                                                                           ("cache2-idxs_bound"
                                                                            -1))
                                                                          (("2"
                                                                            (use
                                                                             "beyond_last_idx_notmember")
                                                                            (("2"
                                                                              (assert)
                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                         ("2" (use "mul_noise_value_is_Epsilon")
                          (("2" (flatten)
                            (("2" (assert) nil)))))))))))))
                 ("4" (replaces "result")
                  (("4" (assert)
                    (("4" (typepred_res2)
                      (("4" (typepred_res1)
                        (("4"
                          (hide-all-but
                           (3 "newid2-prop" "newid1-prop"))
                          (("4" (expand ">=")
                            (("4" (case "nextfreeidx <= newid2")
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (lemma "lt_plus_lt2")
                                  (("1"
                                    (inst
                                     -1
                                     "newid2"
                                     "0"
                                     "1"
                                     "nextfreeidx")
                                    (("1" (assert) nil)))))))
                               ("2"
                                (hide 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "reals.<=")
                                    (("2"
                                      (expand "total_order?")
                                      (("2"
                                        (expand "partial_order?")
                                        (("2"
                                          (expand "preorder?")
                                          (("2"
                                            (expand "reflexive?")
                                            (("2"
                                              (expand "transitive?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "nextfreeidx"
                                                   "newid1"
                                                   "newid2")
                                                  (("2"
                                                    (split -1)
                                                    (("1" (propax) nil)
                                                     ("2" (propax) nil)
                                                     ("3"
                                                      (propax)
                                                      nil)))))))))))))))))))))))))))))))))))))
                 ("5" (replaces "result")
                  (("5" (assert)
                    (("5" (expand "idxs_bounded")
                      (("5" (skeep)
                        (("5" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (use "next_idx_mult_ac_ac")
                                (("1"
                                  (expand ">=")
                                  (("1" (propax) nil)))))))))
                           ("2" (typepred_res2)
                            (("2" (expand "idxs_bounded")
                              (("2"
                                (inst "cache2-idxs_bound" "i-1")
                                (("1"
                                  (expand "nth" 3)
                                  (("1"
                                    (hide-all-but
                                     (3 "cache2-idxs_bound"))
                                    (("1"
                                      (expand ">=")
                                      (("1"
                                        (lemma "lt_plus_lt2")
                                        (("1"
                                          (inst
                                           -1
                                           "newid2"
                                           "0"
                                           "1"
                                           "next_idx(pd(nth(cache2, i - 1)`2))")
                                          (("1" (assert) nil)))))))))))
                                 ("2"
                                  (typepred "i")
                                  (("2" (grind) nil)))))))))))))))))))
                 ("6" (replaces "result")
                  (("6" (assert)
                    (("6" (expand "correct_cache?" 1)
                      (("6" (typepred_res2)
                        (("6" (assert)
                          (("6" (expand "CacheData_correct?")
                            (("6" (propax)
                              nil))))))))))))))))))))))))))
    nil)
   nil nil)
  (RE2AC_TCC40-1 nil 3631466640 ("" (grind))
   ((var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (ordered_list? def-decl "bool" ordered_list nil))
   nil))
 (RE2AC_TCC41 0
  (RE2AC_TCC41-1 nil 3631466640
   ("" (skeep*)
    (("" (assert)
      (("" (expand "null_ol")
        (("" (hide 1)
          (("" (hide -6)
            (("" (split 1)
              (("1" (grind) nil nil)
               ("2" (replace -5 1)
                (("2" (assert)
                  (("2" (inst 1 "(: (re, acRes,null)::CacheData :)")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (replace -5 1)
                (("3" (assert)
                  (("3" (typepred "cache")
                    (("3" (expand "compatible_pairs?")
                      (("3" (skeep)
                        (("3" (inst 1 "N")
                          (("3" (assert)
                            (("3" (expand "compatible_pairs_on?")
                              (("3"
                                (skeep)
                                (("3"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (case "pow=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -5)
                                            (("1"
                                              (replaces -7)
                                              (("1"
                                                (expand "pow_var_ac")
                                                (("1"
                                                  (expand
                                                   "eval_ACExpr_Env"
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "eval_ac_noise")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "expt_x0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "pow_var_compatible?"
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "pow=1")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (replaces -5)
                                              (("1"
                                                (replaces -7)
                                                (("1"
                                                  (expand
                                                   "eval_ACExpr_Env"
                                                   2)
                                                  (("1"
                                                    (expand
                                                     "pow_var_ac"
                                                     2)
                                                    (("1"
                                                      (lift-if 2)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replaces
                                                             -7)
                                                            (("1"
                                                              (expand
                                                               "eval_ac_noise")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth_ac"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "vars_in_box_compatible?")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "idx")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replaces
                                                                                 -2
                                                                                 1
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (expand
                                                                                   "eval_ac_noise")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth_ac")
                                                                                    (("1"
                                                                                      (case
                                                                                       "pd(var_ac(nth(box, idx), idx)) = null")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "eval_pd_noise_rec_pds_def")
                                                                                          (("1"
                                                                                            (expand_ol)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "pow_var_compatible?")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "ordered_list?")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "vars_in_box_compatible?")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "idx")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replaces
                                                                       -2
                                                                       1
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (replaces
                                                                         -7)
                                                                        (("1"
                                                                          (expand
                                                                           "eval_ac_noise"
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth_ac")
                                                                              (("1"
                                                                                (use
                                                                                 "eval_pd_noise_rec_pds_def")
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     -1)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (case
                                                                                             "eval_pd_noise(cdr(pd(var_ac(nth(box, idx), idx))), N) = 0")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "expt_x1")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "expt_x1")
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -1
                                                                                                         :where
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "pow_var_compatible?")
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               3)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "cdr(pd(var_ac(nth(box, idx), idx))) = null")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "eval_pd_noise_rec_pds_def")
                                                                                                    (("1"
                                                                                                      (expand_ol)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (typepred
                                                                                               "pd(var_ac(nth[Interval](box, idx), idx))")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "ordered_list?"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "ordered_list?")
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (expand
                                                                                               "length")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "vars_in_box_compatible?")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "idx")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replaces
                                                                       -1
                                                                       2
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (expand
                                                                         "eval_ac_noise")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replaces
                                                                             -6)
                                                                            (("2"
                                                                              (expand
                                                                               "nth_ac")
                                                                              (("2"
                                                                                (use
                                                                                 "expt_x1")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (use
                                                                                     "expt_x1")
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "eval_pd_noise_rec_pds_def")
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             -1)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand_ol)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "eval_pd_noise(cdr(pd(var_ac(nth(box, idx), idx))), N) = 0")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                                            (("1"
                                                                                                              (expand_ol)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                                                  (("1"
                                                                                                                    (expand_ol)
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "expt_x0")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "ordered_list?")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "expt_x0")
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "car(pd
                                                                                             (var_ac(IF idx = 0 THEN car(box)
                                                                                                     ELSE nth(cdr(box), idx - 1)
                                                                                                     ENDIF,
                                                                                                     idx)))`2")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "/=")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "idx")
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (flatten)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "idx")
                                                                                                                        (("3"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (flatten)
                                                                                                                      (("4"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (use
                                                                                                               "expt_x0")
                                                                                                              (("3"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (typepred
                                                                                                                     "car(pd
                                                                                                                 (var_ac(IF idx = 0 THEN car(box)
                                                                                                                         ELSE nth(cdr(box), idx - 1)
                                                                                                                         ENDIF,
                                                                                                                         idx)))`2")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "/=")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "idx")
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (flatten)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "idx")
                                                                                                                        (("3"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (flatten)
                                                                                                                      (("4"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case
                                                                                                         "cdr(pd(var_ac(nth(box, idx), idx))) = null")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                                            (("1"
                                                                                                              (expand_ol)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (typepred
                                                                                                         "pd(var_ac(nth[Interval](box, idx), idx))")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "ordered_list?"
                                                                                                           -1)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "ordered_list?")
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (expand
                                                                                                         "length")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (split -6)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (replaces -8 3)
                                              (("2"
                                                (replaces -6 3)
                                                (("2"
                                                  (expand "pow_var_ac")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "eval_ACExpr_Env"
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "eval_ac_noise")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("2"
                                                              (expand_ol)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replaces
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "nth_ac")
                                                                      (("2"
                                                                        (expand
                                                                         "vars_in_box_compatible?")
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "idx")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replaces
                                                                               -2
                                                                               3
                                                                               :dir
                                                                               RL)
                                                                              (("2"
                                                                                (expand
                                                                                 "eval_ac_noise")
                                                                                (("2"
                                                                                  (use
                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                  (("2"
                                                                                    (expand_ol)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         3)
                                                                                        (("2"
                                                                                          (split
                                                                                           3)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "pow_var_compatible?")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "nth" 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst -2 "i-1")
                                        (("2"
                                          (typepred "i")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (replace -5 1)
                (("4" (assert)
                  (("4" (typepred "cache")
                    (("4" (expand "idxs_bounded")
                      (("4" (skeep)
                        (("4" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (replaces -7)
                                (("1"
                                  (use "next_idx_pow_var_ac")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (typepred "nextfreeidx")
                                        (("1"
                                          (replaces -7)
                                          (("1"
                                            (expand "last_idx_in_box")
                                            (("1"
                                              (expand "nth_ac")
                                              (("1"
                                                (expand "var_ac" 1)
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "next_idx")
                                                          (("1"
                                                            (expand
                                                             "last_idx")
                                                            (("1"
                                                              (expand
                                                               "last_ol")
                                                              (("1"
                                                                (reveal
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert)
                              (("2" (inst -2 "i-1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (replaces -5)
                (("5" (assert)
                  (("5" (expand "correct_cache?")
                    (("5" (expand "CacheData_correct?")
                      (("5" (replaces -1)
                        (("5" (reveal 1)
                          (("5" (assert)
                            (("5" (split -1)
                              (("1"
                                (expand "length" 2 1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (RE2AC_TCC42 0
  (RE2AC_TCC42-2 nil 3631569740
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (represents_var? const-decl "bool" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (RE2AC_TCC42-1 nil 3631466640 ("" (subtype-tcc) nil nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (next_idx const-decl "nat" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (idxs_ac const-decl "list[nat]" affine nil))
   shostak))
 (RE2AC_TCC43 0
  (RE2AC_TCC43-1 nil 3631466640 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (RE2AC_TCC44 0
  (RE2AC_TCC44-1 nil 3631466640
   ("" (skeep*)
    (("" (assert)
      (("" (hide -7)
        ((""
          (apply (then (label "re" -1) (label "varac" -2)
                  (label "cached some" -3) (label "pow is cached" -4)
                  (label "cached" -5) (label "result" -6)
                  (label "idx" 1) (label "pow <= 1" 2)
                  (label "varac not single" 3)))
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (split 4)
                  (("1"
                    (inst 1
                     "(: (POWVAR(idx, pow), val(cached)`2, val(cached)`3) :)")
                    (("1" (grind) nil nil)) nil)
                   ("2"
                    (with-labels (typepred "cache")
                     (("cache comp pairs" "cache idx bound"
                       "cache correct" "UNKNOWN")))
                    (("2" (expand "compatible_pairs?")
                      (("2" (skeep)
                        (("2" (inst 1 "N")
                          (("2" (assert)
                            (("2" (expand "compatible_pairs_on?")
                              (("2"
                                (skeep)
                                (("2"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (typepred "cached")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (replaces -3 1 :dir RL)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replaces
                                                     "cache comp pairs")
                                                    (("1"
                                                      (case
                                                       "nth(cache, i!1)`1 = POWVAR(idx, pow)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               "pow is cached")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (reveal
                                                           -3
                                                           "re")
                                                          (("2"
                                                            (replaces
                                                             "re")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (reveal
                                                                   -2)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (typepred
                                                                       "cached")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (reveal
                                                                             "re")
                                                                            (("2"
                                                                              (replace
                                                                               "re"
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -2
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     "pow is cached"
                                                                                     1
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (apply-extensionality)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst "cache comp pairs" "i-1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "cache")
                    (("3" (expand "idxs_bounded")
                      (("3" (skeep)
                        (("3" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (typepred "cached")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replaces -3 1 :dir RL)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (typepred "cache")
                    (("4" (expand "correct_cache?" 1)
                      (("4" (expand "CacheData_correct?")
                        (("4" (typepred "cached")
                          (("4" (assert)
                            (("4" (flatten)
                              (("4"
                                (use "cache_powvar_correct_result")
                                (("4"
                                  (assert)
                                  (("4"
                                    (replace "cached" -1 :dir RL)
                                    (("4"
                                      (expand "CacheData_correct?")
                                      (("4"
                                        (flatten)
                                        (("4"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal "re")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal "re")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (RE2AC_TCC45 0
  (RE2AC_TCC45-1 nil 3631466640
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (null_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (last_ol def-decl "T" ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (length def-decl "nat" list_props nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (RE2AC_TCC46 0
  (RE2AC_TCC46-2 nil 3632070867
   ("" (skeep*)
    (("" (assert)
      (("" (expand "null_ol")
        (("" (hide 1)
          (("" (hide -6)
            (("" (split 1)
              (("1" (grind) nil nil)
               ("2" (replace -5 1)
                (("2" (assert)
                  (("2" (inst 1 "(: (re, acRes,null)::CacheData :)")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (replace -5 1)
                (("3" (assert)
                  (("3" (typepred "cache")
                    (("3" (expand "compatible_pairs?")
                      (("3" (skeep)
                        (("3" (inst 1 "N")
                          (("3" (assert)
                            (("3" (expand "compatible_pairs_on?")
                              (("3"
                                (skeep)
                                (("3"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (case "pow=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -5)
                                            (("1"
                                              (replaces -7)
                                              (("1"
                                                (expand "pow_var_ac")
                                                (("1"
                                                  (expand
                                                   "eval_ACExpr_Env"
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "eval_ac_noise")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (expand_ol)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "expt_x0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "pow_var_compatible?"
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "pow=1")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (replaces -5)
                                              (("1"
                                                (replaces -7)
                                                (("1"
                                                  (expand
                                                   "eval_ACExpr_Env"
                                                   2)
                                                  (("1"
                                                    (expand
                                                     "pow_var_ac"
                                                     2)
                                                    (("1"
                                                      (lift-if 2)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replaces
                                                             -7)
                                                            (("1"
                                                              (expand
                                                               "eval_ac_noise"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth_ac"
                                                                         1)
                                                                        (("1"
                                                                          (with-labels
                                                                           (expand
                                                                            "vars_in_box_compatible?")
                                                                           (("vars in box")))
                                                                          (("1"
                                                                            (inst
                                                                             "vars in box"
                                                                             "idx")
                                                                            (("1"
                                                                              (with-labels
                                                                               (flatten
                                                                                "vars in box")
                                                                               (("eval varac is vs"
                                                                                 "when sing interval")))
                                                                              (("1"
                                                                                (replaces
                                                                                 "eval varac is vs"
                                                                                 1
                                                                                 :dir
                                                                                 RL)
                                                                                (("1"
                                                                                  (expand
                                                                                   "eval_ac_noise"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth_ac"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (case
                                                                                       "pd(var_ac(nth(box, idx), idx)) = null")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "eval_pd_noise_rec_pds_def")
                                                                                          (("1"
                                                                                            (expand_ol)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "pow_var_compatible?")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "ordered_list?")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (with-labels
                                                                 (expand
                                                                  "vars_in_box_compatible?")
                                                                 (("vars in box")))
                                                                (("1"
                                                                  (inst
                                                                   "vars in box"
                                                                   "idx")
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten
                                                                      "vars in box")
                                                                     (("eval varac is vs"
                                                                       "when sing interval")))
                                                                    (("1"
                                                                      (replaces
                                                                       "eval varac is vs"
                                                                       1
                                                                       :dir
                                                                       RL)
                                                                      (("1"
                                                                        (replaces
                                                                         -7)
                                                                        (("1"
                                                                          (expand
                                                                           "eval_ac_noise"
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth_ac"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth_ac"
                                                                                 (1
                                                                                  -1))
                                                                                (("1"
                                                                                  (use
                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                  (("1"
                                                                                    (expand_ol)
                                                                                    (("1"
                                                                                      (lift-if
                                                                                       -1)
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (case
                                                                                               "eval_pd_noise(cdr(pd(var_ac(nth(box, idx), idx))), N) = 0")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "expt_x1")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "expt_x1")
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1
                                                                                                           :where
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "pow_var_compatible?")
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "cdr(pd(var_ac(nth(box, idx), idx))) = null")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "eval_pd_noise_rec_pds_def")
                                                                                                      (("1"
                                                                                                        (expand_ol)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (typepred
                                                                                                 "pd(var_ac(nth[Interval](box, idx), idx))")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "ordered_list?"
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "ordered_list?")
                                                                                                      (("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (expand
                                                                                                 "length")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (with-labels
                                                                 (expand
                                                                  "vars_in_box_compatible?")
                                                                 (("vars in box")))
                                                                (("2"
                                                                  (inst
                                                                   "vars in box"
                                                                   "idx")
                                                                  (("2"
                                                                    (with-labels
                                                                     (flatten
                                                                      "vars in box")
                                                                     (("eval varac is vs"
                                                                       "when sing interval")))
                                                                    (("2"
                                                                      (replaces
                                                                       "eval varac is vs"
                                                                       2
                                                                       :dir
                                                                       RL)
                                                                      (("2"
                                                                        (expand
                                                                         "eval_ac_noise"
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replaces
                                                                             -6)
                                                                            (("2"
                                                                              (expand
                                                                               "nth_ac"
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "expt_x1")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (use
                                                                                     "expt_x1")
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "eval_pd_noise_rec_pds_def")
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             -1)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand_ol)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "eval_pd_noise(cdr(pd(var_ac(nth(box, idx), idx))), N) = 0")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                                            (("1"
                                                                                                              (expand_ol)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                                                  (("1"
                                                                                                                    (expand_ol)
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "expt_x0")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "ordered_list?")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (use
                                                                                                               "expt_x0")
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "car(pd
                                                                                                                 (var_ac(IF idx = 0 THEN car(box)
                                                                                                                         ELSE nth(cdr(box), idx - 1)
                                                                                                                         ENDIF,
                                                                                                                         idx)))`2")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "/=")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (typepred
                                                                                                                       "idx")
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (flatten)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "idx")
                                                                                                                        (("3"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (flatten)
                                                                                                                      (("4"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("5"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (use
                                                                                                               "expt_x0")
                                                                                                              (("3"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (typepred
                                                                                                                     "car(pd
                                                                                                                                     (var_ac(IF idx = 0 THEN car(box)
                                                                                                                                             ELSE nth(cdr(box), idx - 1)
                                                                                                                                             ENDIF,
                                                                                                                                             idx)))`2")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "/=")
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "idx")
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (flatten)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "idx")
                                                                                                                        (("3"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (flatten)
                                                                                                                      (("4"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("5"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (case
                                                                                                         "cdr(pd(var_ac(nth(box, idx), idx))) = null")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                                            (("1"
                                                                                                              (expand_ol)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (typepred
                                                                                                         "pd(var_ac(nth[Interval](box, idx), idx))")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "ordered_list?"
                                                                                                           -1)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "ordered_list?")
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (expand
                                                                                                         "length")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (split -6)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (replaces -8 3)
                                              (("2"
                                                (replaces -6 3)
                                                (("2"
                                                  (expand "pow_var_ac")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "eval_ACExpr_Env"
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "eval_ac_noise")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("2"
                                                              (expand_ol)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replaces
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "nth_ac")
                                                                      (("2"
                                                                        (with-labels
                                                                         (expand
                                                                          "vars_in_box_compatible?")
                                                                         (("vars in box")))
                                                                        (("2"
                                                                          (inst
                                                                           "vars in box"
                                                                           "idx")
                                                                          (("2"
                                                                            (with-labels
                                                                             (flatten
                                                                              "vars in box")
                                                                             (("eval varac is vs"
                                                                               "when sing interval")))
                                                                            (("2"
                                                                              (replaces
                                                                               "eval varac is vs"
                                                                               3
                                                                               :dir
                                                                               RL)
                                                                              (("2"
                                                                                (expand
                                                                                 "eval_ac_noise"
                                                                                 3)
                                                                                (("2"
                                                                                  (use
                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                  (("2"
                                                                                    (expand_ol)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lift-if
                                                                                         3)
                                                                                        (("2"
                                                                                          (split
                                                                                           3)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "pow_var_compatible?")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "nth" 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "i")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (replace -5 1)
                (("4" (assert)
                  (("4" (typepred "cache")
                    (("4" (expand "idxs_bounded")
                      (("4" (skeep)
                        (("4" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (replaces -7)
                                (("1"
                                  (use "next_idx_pow_var_ac")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (typepred "nextfreeidx")
                                        (("1"
                                          (replaces -7)
                                          (("1"
                                            (expand "last_idx_in_box")
                                            (("1"
                                              (expand "nth_ac")
                                              (("1"
                                                (expand "var_ac" 1)
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "next_idx")
                                                          (("1"
                                                            (expand
                                                             "last_idx")
                                                            (("1"
                                                              (expand
                                                               "last_ol")
                                                              (("1"
                                                                (reveal
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert)
                              (("2"
                                (inst? :subst ("i" "i-1"))
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (eval_pd_noise def-decl "real" affine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (idx skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzBaseType type-eq-decl nil affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (represents_var? const-decl "bool" affine nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (last_ol def-decl "T" ordered_list nil)
    (null_ol const-decl "ordered_list" ordered_list nil))
   nil)
  (RE2AC_TCC46-1 nil 3631466640
   ("" (skeep*)
    (("" (use "cache_powvar_correct_result")
      (("" (assert)
        (("" (replace -6 -1 :dir RL)
          (("" (expand "CacheData_correct?")
            (("" (typepred "cached")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (flatten)
                      (("" (split -5)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -8)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (idxs_pd def-decl "list[nat]" affine nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= car(idxs)}"
     affine_pow nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (C const-decl "posnat" binomial "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (last_ol def-decl "T" ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil))
   nil))
 (RE2AC_TCC47 0
  (RE2AC_TCC47-1 nil 3631466640
   ("" (skeep*)
    (("" (assert)
      (("" (hide -10)
        ((""
          (apply (then (label "re" -1) (label "varac" -2)
                  (label "cached some" -3)
                  (label "pow < cached pow" -4) (label "cached" -5)
                  (label "idxs" -6) (label "pownoises" -7)
                  (label "acRes" -8) (label "result" -9)
                  (label "idx" 1) (label "pow <= 1" 2)
                  (label "no single value" 3) (label "no cv 0" 4)))
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (split 5)
                  (("1"
                    (inst 1
                     "(: (POWVAR(idx, pow), acRes, pownoises) :)")
                    (("1" (grind) nil nil)) nil)
                   ("2"
                    (with-labels (typepred "cache")
                     (("cache compatible pairs" "cache idxs bound"
                       "cache correct" "UNKNOWN")))
                    (("2"
                      (expand "compatible_pairs?"
                              "cache compatible pairs")
                      (("2" (skeep)
                        (("2" (inst 1 "N")
                          (("2" (assert)
                            (("2" (expand "compatible_pairs_on?" 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (expand "compatible_pairs_on?")
                                        (("1"
                                          (typepred "cached")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (with-labels
                                               (flatten -1)
                                               (("cached`1 is powvar"
                                                 "cached`1 varidx"
                                                 "cached cache idx"
                                                 "UNKNOWN")))
                                              (("1"
                                                (skeep
                                                 "cached cache idx")
                                                (("1"
                                                  (inst
                                                   "cache compatible pairs"
                                                   "i!1")
                                                  (("1"
                                                    (use
                                                     "cache_powvar_correct_result")
                                                    (("1"
                                                      (with-labels
                                                       (assert)
                                                       ("cached is correct"
                                                        "UNKNOWN"))
                                                      (("1"
                                                        (replace
                                                         "cached"
                                                         "cached is correct"
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (expand
                                                           "CacheData_correct?")
                                                          (("1"
                                                            (with-labels
                                                             (flatten
                                                              -1)
                                                             (("cached idx in box"
                                                               "cached cond ok"
                                                               "cached`2 is powvarac"
                                                               "UNKNOWN")))
                                                            (("1"
                                                              (split
                                                               "cached cond ok")
                                                              (("1"
                                                                (replace
                                                                 "cached cache idx"
                                                                 "cached`2 is powvarac"
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (flatten
                                                                   -8)
                                                                  (("1"
                                                                    (replace
                                                                     "cached`2 is powvarac"
                                                                     -8)
                                                                    (("1"
                                                                      (replace
                                                                       "acRes"
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         "varac"
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           "cached cache idx"
                                                                           "cached`1 varidx"
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (replace
                                                                             "cached`1 varidx"
                                                                             "cached is correct")
                                                                            (("1"
                                                                              (reveal
                                                                               "re")
                                                                              (("1"
                                                                                (replace
                                                                                 "re"
                                                                                 "cached is correct")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     "cached cache idx"
                                                                                     "pownoises"
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (replace
                                                                                       "pownoises"
                                                                                       "cached is correct"
                                                                                       :dir
                                                                                       RL)
                                                                                      (("1"
                                                                                        (case
                                                                                         "nth(cache, i!1)`1 = POWVAR(idx, opn(nth(cache, i!1)`1))")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "eval_ACExpr_Env")
                                                                                            (("1"
                                                                                              (use
                                                                                               "powvarac_ind_on_pow")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "pow")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "pow_var_compatible?")
                                                                                                      (("1"
                                                                                                        (skeep)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           "cached is correct"
                                                                                                           "i!2")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (1
                                                                                            "cached`1 is powvar"
                                                                                            "cached`1 varidx"
                                                                                            "re"
                                                                                            "cached cache idx"))
                                                                                          (("2"
                                                                                            (replaces
                                                                                             "cached cache idx"
                                                                                             :dir
                                                                                             RL)
                                                                                            (("2"
                                                                                              (replaces
                                                                                               "re")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (apply-extensionality)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 "cached`1 varidx"
                                                                 "cached cond ok")
                                                                (("2"
                                                                  (replace
                                                                   "varac"
                                                                   "no single value")
                                                                  (("2"
                                                                    (reveal
                                                                     "re")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       ("no single value"
                                                                        "cached cond ok"
                                                                        "re"))
                                                                      (("2"
                                                                        (replaces
                                                                         "re")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand
                                     "compatible_pairs_on?"
                                     "cache compatible pairs")
                                    (("2"
                                      (inst
                                       "cache compatible pairs"
                                       "i-1")
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "idxs_bounded")
                    (("3" (skeep)
                      (("3" (case "i=0")
                        (("1" (replaces -1)
                          (("1" (expand "nth" 1)
                            (("1" (replaces "acRes")
                              (("1"
                                (with-labels
                                 (typepred "cache")
                                 (("cache compatible pairs"
                                   "cache idxs bound"
                                   "cache correct"
                                   "UNKNOWN")))
                                (("1"
                                  (expand
                                   "idxs_bounded"
                                   "cache idxs bound")
                                  (("1"
                                    (typepred "cached")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (with-labels
                                         (flatten)
                                         (("cached`1 is powvar"
                                           "cached`1 varidx"
                                           "cached cache idx"
                                           "UNKNOWN")))
                                        (("1"
                                          (skeep "cached cache idx")
                                          (("1"
                                            (inst
                                             "cache idxs bound"
                                             "i!1")
                                            (("1"
                                              (use
                                               "cache_powvar_correct_result")
                                              (("1"
                                                (with-labels
                                                 (assert)
                                                 ("cached is correct"
                                                  "UNKNOWN"))
                                                (("1"
                                                  (replace
                                                   "cached"
                                                   "cached is correct"
                                                   :dir
                                                   RL)
                                                  (("1"
                                                    (expand
                                                     "CacheData_correct?")
                                                    (("1"
                                                      (with-labels
                                                       (flatten)
                                                       (("cached idx in box"
                                                         "cached cond ok"
                                                         "cached`2 is powvarac"
                                                         "UNKNOWN")))
                                                      (("1"
                                                        (split
                                                         "cached cond ok")
                                                        (("1"
                                                          (replace
                                                           "cached cache idx"
                                                           "cached`2 is powvarac"
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (replace
                                                             "cached`2 is powvarac"
                                                             "cache idxs bound")
                                                            (("1"
                                                              (replace
                                                               "cached cache idx"
                                                               "pownoises"
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (replace
                                                                 "pownoises"
                                                                 "cache idxs bound"
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (replace
                                                                   "cached cache idx"
                                                                   "cached`1 varidx"
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (replace
                                                                     "cached`1 varidx"
                                                                     "cache idxs bound")
                                                                    (("1"
                                                                      (reveal
                                                                       "re")
                                                                      (("1"
                                                                        (replace
                                                                         "re"
                                                                         "cache idxs bound")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             "next_idx_pow_var_ac")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (use
                                                                                 "next_idx_pow_var_ac")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     1)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lift-if
                                                                                         "cache idxs bound")
                                                                                        (("2"
                                                                                          (split
                                                                                           "cache idxs bound")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               (3
                                                                                                "cache idxs bound"
                                                                                                "pow < cached pow"
                                                                                                "cached cache idx"))
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 "cached cache idx"
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   ">")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     ">=")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "nth_ol[nat,<]")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           "cached`1 varidx"
                                                           "cached cond ok")
                                                          (("2"
                                                            (replace
                                                             "varac"
                                                             "no single value")
                                                            (("2"
                                                              (reveal
                                                               "re")
                                                              (("2"
                                                                (hide-all-but
                                                                 ("no single value"
                                                                  "cached cond ok"
                                                                  "re"))
                                                                (("2"
                                                                  (replaces
                                                                   "re")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 2)
                          (("2" (assert)
                            (("2"
                              (with-labels (typepred "cache")
                               (("cache compatible pairs"
                                 "cache idxs bound"
                                 "cache correct"
                                 "UNKNOWN")))
                              (("2"
                                (expand
                                 "idxs_bounded"
                                 "cache idxs bound")
                                (("2"
                                  (inst "cache idxs bound" "i-1")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (expand "correct_cache?" 1)
                    (("4" (expand "CacheData_correct?")
                      (("4"
                        (with-labels (typepred "cache")
                         (("cache compatible pairs" "cache idxs bound"
                           "cache correct" "UNKNOWN")))
                        (("4" (typepred "cached")
                          (("4" (assert)
                            (("4"
                              (with-labels (flatten)
                               (("cached`1 is powvar"
                                 "cached`1 varidx"
                                 "cached cache idx"
                                 "UNKNOWN")))
                              (("4"
                                (skeep "cached cache idx")
                                (("4"
                                  (use "cache_powvar_correct_result")
                                  (("4"
                                    (with-labels
                                     (assert)
                                     ("cached is correct" "UNKNOWN"))
                                    (("4"
                                      (replace
                                       "cached"
                                       "cached is correct"
                                       :dir
                                       RL)
                                      (("4"
                                        (expand "CacheData_correct?")
                                        (("4"
                                          (with-labels
                                           (flatten)
                                           (("cached idx in box"
                                             "cached cond ok"
                                             "cached`2 is powvarac"
                                             "UNKNOWN")))
                                          (("4"
                                            (split "cached cond ok")
                                            (("1"
                                              (replace
                                               "pownoises"
                                               "cached cond ok"
                                               :dir
                                               RL)
                                              (("1"
                                                (replace
                                                 "cached`1 varidx"
                                                 "cached cond ok")
                                                (("1"
                                                  (reveal "re")
                                                  (("1"
                                                    (replace
                                                     "re"
                                                     "cached cond ok")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten
                                                         "cached cond ok")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace
                                               "cached`1 varidx"
                                               "cached cond ok")
                                              (("2"
                                                (replace
                                                 "varac"
                                                 "no single value")
                                                (("2"
                                                  (reveal "re")
                                                  (("2"
                                                    (hide-all-but
                                                     ("no single value"
                                                      "cached cond ok"
                                                      "re"))
                                                    (("2"
                                                      (replaces "re")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (RE2AC_TCC48 0
  (RE2AC_TCC48-1 nil 3631466640 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (RE2AC_TCC49 0
  (RE2AC_TCC49-1 nil 3631466640
   ("" (skeep*)
    (("" (assert)
      ((""
        (apply (then (label "re" -1) (label "varac" -2)
                (label "cached some" -3) (label "pow is cached" -4)
                (label "cached" -5) (label "result" -6) (label "idx" 1)
                (label "pow <= 1" 2) (label "varac not single" 3)))
        (("" (replaces "re")
          (("" (replaces "result")
            (("" (assert)
              (("" (typepred "cache")
                (("" (expand "correct_cache?" 4)
                  (("" (expand "CacheData_correct?")
                    (("" (typepred "cached")
                      (("" (assert)
                        (("" (flatten)
                          (("" (use "cache_powvar_correct_result")
                            (("" (assert)
                              ((""
                                (replace "cached" -1 :dir RL)
                                ((""
                                  (expand "CacheData_correct?")
                                  ((""
                                    (flatten)
                                    ((""
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal "re")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal "re")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (last_ol def-decl "T" ordered_list nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (cache_powvar_correct_result formula-decl nil affine_expr_Eval_fnd
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil))
 (RE2AC_TCC50 0
  (RE2AC_TCC50-2 nil 3632073429
   ("" (skeep*)
    (("" (assert)
      (("" (hide -7)
        ((""
          (apply (then (label "re" -1) (label "varac" -2)
                  (label "cached some" -3) (label "pow is cached" -4)
                  (label "cached" -5) (label "result" -6)
                  (label "idx" 1) (label "pow <= 1" 2)
                  (label "varac not single" 3)))
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (split 4)
                  (("1"
                    (inst 1
                     "(: (POWVAR(idx, pow), val(cached)`2, val(cached)`3) :)")
                    (("1" (grind) nil nil)) nil)
                   ("2"
                    (with-labels (typepred "cache")
                     (("cache comp pairs" "cache idx bound"
                       "cache correct" "UNKNOWN")))
                    (("2" (expand "compatible_pairs?")
                      (("2" (skeep)
                        (("2" (inst 1 "N")
                          (("2" (assert)
                            (("2" (expand "compatible_pairs_on?")
                              (("2"
                                (skeep)
                                (("2"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (typepred "cached")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (replaces -3 1 :dir RL)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replaces
                                                     "cache comp pairs")
                                                    (("1"
                                                      (case
                                                       "nth(cache, i!1)`1 = POWVAR(idx, pow)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               "pow is cached")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (reveal
                                                           -3
                                                           "re")
                                                          (("2"
                                                            (replaces
                                                             "re")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (reveal
                                                                   -2)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (typepred
                                                                       "cached")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (reveal
                                                                             "re")
                                                                            (("2"
                                                                              (replace
                                                                               "re"
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -2
                                                                                   1
                                                                                   :dir
                                                                                   RL)
                                                                                  (("2"
                                                                                    (replaces
                                                                                     "pow is cached"
                                                                                     1
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (apply-extensionality)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst? :subst ("i" "i-1"))
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (typepred "i")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "cache")
                    (("3" (expand "idxs_bounded")
                      (("3" (skeep)
                        (("3" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (typepred "cached")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replaces -3 1 :dir RL)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert) (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (length def-decl "nat" list_props nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (AffineExpr_POWVAR_extensionality formula-decl nil AffineExpr_adt
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl
     "below(length(cons((POWVAR(idx, pow), val(cached)`2, val(cached)`3), cache)))"
     affine_expr_Eval_fnd nil)
    (cached skolem-const-decl "{res: Maybe[CacheData] |
         some?(res) IMPLIES
          powvar?(val(res)`1) AND
           varidx(val(res)`1) = varidx(re) AND
            (EXISTS (i: below(length(cache))): nth(cache, i) = val(res))}"
     affine_expr_Eval_fnd nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (pow skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (idx skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil)
  (RE2AC_TCC50-1 nil 3631466640
   ("" (skeep*)
    ((""
      (apply (then (label "re" -1) (label "varac" -2)
              (label "cached some" -3) (label "cached" -4)
              (label "idxs" -5) (label "pownoises" -6)
              (label "newoff" -7) (label "nwidxs" -8) (label "idx" 1)
              (label "pow <= 1" 2) (label "varac not single value" 3)
              (label "cv not 0" 4) (label "not in cache 2" 5)
              (label "not in cache 1" 6)))
      ((""
        (with-labels (split "not in cache 1")
         (("pow gt opn cached`1")))
        ((""
          (with-labels (split "not in cache 2")
           (("pow gt opn cached`1")))
          (("1" (expand "/=") (("1" (propax) nil nil)) nil)
           ("2" (replaces "nwidxs" 7)
            (("2" (split 7)
              (("1" (use "cache_powvar_correct_result")
                (("1" (with-labels (assert) (("cached correct")))
                  (("1" (replace "cached" "cached correct" :dir RL)
                    (("1"
                      (expand "CacheData_correct?" "cached correct")
                      (("1" (typepred "cached")
                        (("1" (assert)
                          (("1"
                            (with-labels (flatten)
                             (("cached`1 is powvar" "cached`1 varidx"
                               "cached cache idx" "UNKNOWN")))
                            (("1" (assert)
                              (("1"
                                (with-labels
                                 (flatten)
                                 (("cached idx in box"
                                   "cached cond ok"
                                   "cached`2 is powvarac"
                                   "UNKNOWN")))
                                (("1"
                                  (split "cached cond ok")
                                  (("1"
                                    (name
                                     "nwidxs2"
                                     "append_ol[nat,<](pownoises, nats(nextfreeidx, newoff - 1))")
                                    (("1"
                                      (typepred "nwidxs2")
                                      (("1"
                                        (expand "append_ol")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "appendable_ol?")
                                      (("2" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace
                                     "cached`1 varidx"
                                     "cached cond ok")
                                    (("2"
                                      (hide-all-but
                                       ("varac"
                                        "varac not single value"
                                        "cached cond ok"
                                        "re"))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil))
 (RE2AC_TCC51 0
  (RE2AC_TCC51-1 nil 3631466640
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (represents_var? const-decl "bool" affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (RE2AC_TCC52 0
  (RE2AC_TCC52-3 nil 3632073759
   ("" (skeep*)
    (("" (use "cache_powvar_correct_result")
      (("" (assert)
        (("" (replace -6 -1 :dir RL)
          (("" (expand "CacheData_correct?")
            (("" (typepred "cached")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (flatten)
                      (("" (split -5)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (replaces -8)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cache_powvar_correct_result formula-decl nil affine_expr_Eval_fnd
     nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= car(idxs)}"
     affine_pow nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (C const-decl "posnat" binomial "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (last_ol def-decl "T" ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)
  (RE2AC_TCC52-2 nil 3631553433
   ("" (skeep*)
    ((""
      (apply (then (label "re" -1) (label "varac" -2)
              (label "cached some" -3) (label "cached" -4)
              (label "idxs" -5) (label "pownoises" -6)
              (label "newoff" -7) (label "nwidxs" -8) (label "idx" 1)
              (label "pow <= 1" 2) (label "varac not single value" 3)
              (label "cv not 0" 4) (label "not in cache 2" 5)
              (label "not in cache 1" 6)))
      ((""
        (with-labels (split "not in cache 1")
         (("pow gt opn cached`1")))
        ((""
          (with-labels (split "not in cache 2")
           (("pow gt opn cached`1")))
          (("1" (expand "/=") (("1" (propax) nil nil)) nil)
           ("2" (replaces "nwidxs" 7)
            (("2" (split 7)
              (("1" (use "cache_powvar_correct_result")
                (("1" (with-labels (assert) (("cached correct")))
                  (("1" (replace "cached" "cached correct" :dir RL)
                    (("1"
                      (expand "CacheData_correct?" "cached correct")
                      (("1" (typepred "cached")
                        (("1" (assert)
                          (("1"
                            (with-labels (flatten)
                             (("cached`1 is powvar" "cached`1 varidx"
                               "cached cache idx" "UNKNOWN")))
                            (("1" (assert)
                              (("1"
                                (with-labels
                                 (flatten)
                                 (("cached idx in box"
                                   "cached cond ok"
                                   "cached`2 is powvarac"
                                   "UNKNOWN")))
                                (("1"
                                  (split "cached cond ok")
                                  (("1"
                                    (split "cached correct")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (name
                                         "nwidxs2"
                                         "append_ol[nat,<](take[nat](pownoises, opn(val(cached)`1) - 2+1), nats(nextfreeidx, newoff - 1))")
                                        (("1"
                                          (typepred "nwidxs2")
                                          (("1"
                                            (expand "append_ol")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "appendable_ol?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (case
                                               "last_ol[nat,<](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) = nth(pownoises,  opn(val[CacheData](cached)`1) - 2)")
                                              (("1"
                                                (replaces -1 3)
                                                (("1"
                                                  (case
                                                   "first_ol[nat,<](nats(nextfreeidx, newoff - 1)) = nextfreeidx")
                                                  (("1"
                                                    (replaces -1 3)
                                                    (("1"
                                                      (with-labels
                                                       (typepred
                                                        "cache")
                                                       (("cache compatible pairs"
                                                         "cache idxs bounded"
                                                         "cache correct"
                                                         "UNKNOWN")))
                                                      (("1"
                                                        (expand
                                                         "idxs_bounded"
                                                         "cache idxs bounded")
                                                        (("1"
                                                          (skeep
                                                           "cached cache idx")
                                                          (("1"
                                                            (replace
                                                             "pownoises"
                                                             1)
                                                            (("1"
                                                              (replace
                                                               "cached cache idx"
                                                               1
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (inst
                                                                 "cache idxs bounded"
                                                                 "i")
                                                                (("1"
                                                                  (replace
                                                                   "cached cache idx"
                                                                   "cached`2 is powvarac"
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (replace
                                                                     "cached`2 is powvarac"
                                                                     "cache idxs bounded")
                                                                    (("1"
                                                                      (use
                                                                       "next_idx_pow_var_ac")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (lift-if
                                                                           "cache idxs bounded")
                                                                          (("1"
                                                                            (split
                                                                             "cache idxs bounded")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 ">=")
                                                                                (("2"
                                                                                  (replace
                                                                                   "pownoises"
                                                                                   4)
                                                                                  (("2"
                                                                                    (replace
                                                                                     "cached cache idx"
                                                                                     4
                                                                                     :dir
                                                                                     RL)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       ("cache idxs bounded"
                                                                                        4))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1
                                                      3
                                                      "cached correct"
                                                      "pow gt opn cached`1"))
                                                    (("2"
                                                      (replaces -2 1)
                                                      (("2"
                                                        (expand
                                                         "nats"
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (expand
                                                                   "first_ol")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "last_take_nth[nat,<]")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (assert) nil nil)
                                               ("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use "take_ol[nat,<]")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (replace
                                     "cached`1 varidx"
                                     "cached cond ok")
                                    (("2"
                                      (hide-all-but
                                       ("varac"
                                        "varac not single value"
                                        "cached cond ok"
                                        "re"))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (split 1)
                      (("1" (use "length_append[nat]")
                        (("1" (replaces -1)
                          (("1"
                            (typepred "nats(nextfreeidx, newoff - 1)")
                            (("1" (replaces -4 2)
                              (("1"
                                (use "length_take[nat]")
                                (("1"
                                  (replaces -1 2)
                                  (("1"
                                    (case
                                     "length(pownoises) > opn(val(cached)`1) - 2")
                                    (("1"
                                      (expand "min" 2)
                                      (("1"
                                        (lift-if 2)
                                        (("1"
                                          (case
                                           "length(pownoises) = opn(val(cached)`1) - 1")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace "pownoises" 1)
                                      (("2"
                                        (with-labels
                                         (typepred "cache")
                                         (("cache compatible pairs"
                                           "cache idxs bounded"
                                           "cache correct"
                                           "UNKNOWN")))
                                        (("2"
                                          (use
                                           "cache_powvar_correct_result")
                                          (("2"
                                            (with-labels
                                             (assert)
                                             (("cached correct")))
                                            (("2"
                                              (replace
                                               "cached"
                                               "cached correct"
                                               :dir
                                               RL)
                                              (("2"
                                                (expand
                                                 "CacheData_correct?"
                                                 "cached correct")
                                                (("2"
                                                  (typepred "cached")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (with-labels
                                                       (flatten)
                                                       (("cached`1 is powvar"
                                                         "cached`1 varidx"
                                                         "cached cache idx"
                                                         "UNKNOWN")))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (with-labels
                                                           (flatten)
                                                           (("cached idx in box"
                                                             "cached cond ok"
                                                             "cached`2 is powvarac"
                                                             "UNKNOWN")))
                                                          (("2"
                                                            (replace
                                                             "cached`1 varidx"
                                                             "cached cond ok")
                                                            (("2"
                                                              (hide-all-but
                                                               ("varac"
                                                                "varac not single value"
                                                                "cached cond ok"
                                                                "re"))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace "pownoises" 2)
                          (("2"
                            (with-labels (typepred "cache")
                             (("cache compatible pairs"
                               "cache idxs bounded" "cache correct"
                               "UNKNOWN")))
                            (("2" (use "cache_powvar_correct_result")
                              (("2"
                                (with-labels
                                 (assert)
                                 (("cached correct")))
                                (("2"
                                  (replace
                                   "cached"
                                   "cached correct"
                                   :dir
                                   RL)
                                  (("2"
                                    (expand
                                     "CacheData_correct?"
                                     "cached correct")
                                    (("2"
                                      (typepred "cached")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (with-labels
                                           (flatten)
                                           (("cached`1 is powvar"
                                             "cached`1 varidx"
                                             "cached cache idx"
                                             "UNKNOWN")))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (with-labels
                                               (flatten)
                                               (("cached idx in box"
                                                 "cached cond ok"
                                                 "cached`2 is powvarac"
                                                 "UNKNOWN")))
                                              (("2"
                                                (replace
                                                 "cached`1 varidx"
                                                 "cached cond ok")
                                                (("2"
                                                  (split
                                                   "cached cond ok")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replaces
                                                       "varac"
                                                       2)
                                                      (("1"
                                                        (replace
                                                         "re"
                                                         "cached cond ok")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "car[nat]
                         (append(take[nat](val(cached)`3, opn(val(cached)`1) - 2 + 1),
                                 nats(nextfreeidx, newoff - 1))) = car(val(cached)`3)")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "take"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "append"
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     ("varac"
                                                      "varac not single value"
                                                      "cached cond ok"
                                                      "re"))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (typepred "nats(nextfreeidx, newoff - 1)")
                        (("1" (replace -4 2)
                          (("1" (replace "newoff" 2)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "nats" 2)
                          (("2" (replace "newoff" 2)
                            (("2" (lift-if 2)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace "varac" 1)
                                      (("1"
                                        (typepred "nextfreeidx")
                                        (("1"
                                          (use "last_idx_box")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand_ol)
                                    (("2"
                                      (replace "varac" 2)
                                      (("2"
                                        (typepred "nextfreeidx")
                                        (("2"
                                          (use "last_idx_box")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((take_ol formula-decl nil ordered_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (represents_var? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (last_take_nth formula-decl nil ordered_list nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (take def-decl "list[T]" list_more_props nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (length_take formula-decl nil list_more_props nil)
    (last_idx_box formula-decl nil affine_box nil))
   nil)
  (RE2AC_TCC52-1 nil 3631466640
   ("" (skeep*)
    (("" (replaces -7) (("" (replaces -4) (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (RE2AC_TCC53 0
  (RE2AC_TCC53-2 nil 3631546337
   ("" (skeep*)
    (("" (assert)
      ((""
        (apply (then (label "re" -1) (label "varac" -2)
                (label "cached some" -3) (label "pow < cached pow" -4)
                (label "cached" -5) (label "idxs" -6)
                (label "pownoises" -7) (label "acRes" -8)
                (label "result" -9) (label "idx" 1)
                (label "pow <= 1" 2) (label "no single value" 3)
                (label "no cv 0" 4)))
        (("" (hide 5)
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (expand "correct_cache?" 5)
                  (("" (expand "CacheData_correct?")
                    ((""
                      (with-labels (typepred "cache")
                       (("cache compatible pairs" "cache idxs bound"
                         "cache correct" "UNKNOWN")))
                      (("" (typepred "cached")
                        (("" (assert)
                          ((""
                            (with-labels (flatten)
                             (("cached`1 is powvar" "cached`1 varidx"
                               "cached cache idx" "UNKNOWN")))
                            (("" (skeep "cached cache idx")
                              ((""
                                (use "cache_powvar_correct_result")
                                ((""
                                  (with-labels
                                   (assert)
                                   ("cached is correct" "UNKNOWN"))
                                  ((""
                                    (replace
                                     "cached"
                                     "cached is correct"
                                     :dir
                                     RL)
                                    ((""
                                      (expand "CacheData_correct?")
                                      ((""
                                        (with-labels
                                         (flatten)
                                         (("cached idx in box"
                                           "cached cond ok"
                                           "cached`2 is powvarac"
                                           "UNKNOWN")))
                                        ((""
                                          (split "cached cond ok")
                                          (("1"
                                            (replace
                                             "pownoises"
                                             "cached cond ok"
                                             :dir
                                             RL)
                                            (("1"
                                              (replace
                                               "cached`1 varidx"
                                               "cached cond ok")
                                              (("1"
                                                (reveal "re")
                                                (("1"
                                                  (replace
                                                   "re"
                                                   "cached cond ok")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten
                                                       "cached cond ok")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace
                                             "cached`1 varidx"
                                             "cached cond ok")
                                            (("2"
                                              (replace
                                               "varac"
                                               "no single value")
                                              (("2"
                                                (reveal "re")
                                                (("2"
                                                  (hide-all-but
                                                   ("no single value"
                                                    "cached cond ok"
                                                    "re"))
                                                  (("2"
                                                    (replaces "re")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (cache_powvar_correct_result formula-decl nil affine_expr_Eval_fnd
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil))
   nil)
  (RE2AC_TCC53-1 nil 3631466640
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil))
   shostak))
 (RE2AC_TCC54 0
  (RE2AC_TCC54-4 nil 3632074082
   ("" (skeep*)
    (("" (assert)
      (("" (hide -10)
        ((""
          (apply (then (label "re" -1) (label "varac" -2)
                  (label "cached some" -3)
                  (label "pow < cached pow" -4) (label "cached" -5)
                  (label "idxs" -6) (label "pownoises" -7)
                  (label "acRes" -8) (label "result" -9)
                  (label "idx" 1) (label "pow <= 1" 2)
                  (label "no single value" 3) (label "no cv 0" 4)))
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (split 5)
                  (("1"
                    (inst 1
                     "(: (POWVAR(idx, pow), acRes, pownoises) :)")
                    (("1" (grind) nil nil)) nil)
                   ("2"
                    (with-labels (typepred "cache")
                     (("cache correct" "cache compatible pairs"
                       "cache idxs bound" "UNKNOWN")))
                    (("2"
                      (expand "compatible_pairs?"
                              "cache compatible pairs")
                      (("2"
                        (with-labels (skeep "cache compatible pairs")
                         (("vars in box" "compatible on")))
                        (("2" (inst 1 "N")
                          (("2" (assert)
                            (("2" (expand "compatible_pairs_on?" 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (expand "compatible_pairs_on?")
                                        (("1"
                                          (typepred "cached")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (with-labels
                                               (flatten -1)
                                               (("cached`1 is powvar"
                                                 "cached`1 varidx"
                                                 "cached cache idx"
                                                 "UNKNOWN")))
                                              (("1"
                                                (skeep
                                                 "cached cache idx")
                                                (("1"
                                                  (inst
                                                   "compatible on"
                                                   "i!1")
                                                  (("1"
                                                    (use
                                                     "cache_powvar_correct_result")
                                                    (("1"
                                                      (with-labels
                                                       (assert -1)
                                                       ("cached is correct"
                                                        "UNKNOWN"))
                                                      (("1"
                                                        (replace
                                                         "cached"
                                                         "cached is correct"
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (expand
                                                           "CacheData_correct?")
                                                          (("1"
                                                            (with-labels
                                                             (assert
                                                              (-1
                                                               "cached`1 is powvar"))
                                                             ("cached is correct"
                                                              "UNKNOWN"))
                                                            (("1"
                                                              (with-labels
                                                               (flatten
                                                                "cached is correct")
                                                               (("cached idx in box"
                                                                 "cached cond ok"
                                                                 "cached`2 is powvarac"
                                                                 "UNKNOWN")))
                                                              (("1"
                                                                (split
                                                                 "cached cond ok")
                                                                (("1"
                                                                  (replace
                                                                   "cached cache idx"
                                                                   "cached`2 is powvarac"
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (with-labels
                                                                     (flatten
                                                                      "compatible on")
                                                                     (("eval cache"
                                                                       "cache if powvar"
                                                                       "UNKNOWN")))
                                                                    (("1"
                                                                      (replace
                                                                       "cached`2 is powvarac"
                                                                       "eval cache")
                                                                      (("1"
                                                                        (replace
                                                                         "acRes"
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           "varac"
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             "cached cache idx"
                                                                             "cached`1 varidx"
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (reveal
                                                                               "re")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   "cached cache idx"
                                                                                   "pownoises"
                                                                                   :dir
                                                                                   RL)
                                                                                  (("1"
                                                                                    (replace
                                                                                     "pownoises"
                                                                                     "eval cache"
                                                                                     :dir
                                                                                     RL)
                                                                                    (("1"
                                                                                      (case
                                                                                       "nth(cache, i!1)`1 = POWVAR(idx, opn(nth(cache, i!1)`1))")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "eval_ACExpr_Env")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "containment_pow_var_ac")
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "containment_pow_var_ac")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "vars_in_box_compatible?")
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         "vars in box")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth_ac")
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         "pownoises")
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             "cached cond ok")
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "cached")
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       "re"
                                                                                                                       "cached cond ok")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           ("cached cond ok"
                                                                                                                            -4
                                                                                                                            "cached cache idx"))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "next_idx")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "last_idx")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 ">=")
                                                                                                                                (("1"
                                                                                                                                  (use
                                                                                                                                   "notmember_ol_nat")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         "olidx_car_last[nzBaseType]")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "car_ol")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "pow_var_compatible?")
                                                                                                      (("3"
                                                                                                        (skeep)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           "cache if powvar"
                                                                                                           "i!2")
                                                                                                          (("3"
                                                                                                            (replace
                                                                                                             "pownoises"
                                                                                                             "cache if powvar"
                                                                                                             :dir
                                                                                                             RL)
                                                                                                            (("3"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "pow_var_compatible?")
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     "cache if powvar"
                                                                                                     "i!2")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       "pownoises"
                                                                                                       "cache if powvar"
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          "cached`1 is powvar"
                                                                                          "cached`1 varidx"
                                                                                          "re"
                                                                                          "cached cache idx"))
                                                                                        (("2"
                                                                                          (replaces
                                                                                           "cached cache idx"
                                                                                           :dir
                                                                                           RL)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             "re")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (apply-extensionality)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   "cached`1 varidx"
                                                                   "cached cond ok")
                                                                  (("2"
                                                                    (replace
                                                                     "varac"
                                                                     "no single value")
                                                                    (("2"
                                                                      (reveal
                                                                       "re")
                                                                      (("2"
                                                                        (hide-all-but
                                                                         ("no single value"
                                                                          "cached cond ok"
                                                                          "re"))
                                                                        (("2"
                                                                          (replaces
                                                                           "re")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand
                                     "compatible_pairs_on?"
                                     "compatible on")
                                    (("2"
                                      (inst "compatible on" "i-1")
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "idxs_bounded")
                    (("3" (skeep)
                      (("3" (case "i=0")
                        (("1" (replaces -1)
                          (("1" (expand "nth" 1)
                            (("1" (replaces "acRes")
                              (("1"
                                (with-labels
                                 (typepred "cache")
                                 (("cache correct"
                                   "cache compatible pairs"
                                   "cache idxs bound"
                                   "UNKNOWN")))
                                (("1"
                                  (expand
                                   "idxs_bounded"
                                   "cache idxs bound")
                                  (("1"
                                    (typepred "cached")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (with-labels
                                         (flatten -1)
                                         (("cached`1 is powvar"
                                           "cached`1 varidx"
                                           "cached cache idx"
                                           "UNKNOWN")))
                                        (("1"
                                          (skeep "cached cache idx")
                                          (("1"
                                            (inst
                                             "cache idxs bound"
                                             "i!1")
                                            (("1"
                                              (use
                                               "cache_powvar_correct_result")
                                              (("1"
                                                (with-labels
                                                 (assert
                                                  (-1 "cache correct"))
                                                 ("cached is correct"
                                                  "UNKNOWN"))
                                                (("1"
                                                  (replace
                                                   "cached"
                                                   "cached is correct"
                                                   :dir
                                                   RL)
                                                  (("1"
                                                    (expand
                                                     "CacheData_correct?")
                                                    (("1"
                                                      (assert
                                                       ("cached is correct"
                                                        "cached`1 is powvar"))
                                                      (("1"
                                                        (with-labels
                                                         (flatten)
                                                         (("cached idx in box"
                                                           "cached cond ok"
                                                           "cached`2 is powvarac"
                                                           "UNKNOWN")))
                                                        (("1"
                                                          (split
                                                           "cached cond ok")
                                                          (("1"
                                                            (replace
                                                             "cached cache idx"
                                                             "cached`2 is powvarac"
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (replace
                                                               "cached`2 is powvarac"
                                                               "cache idxs bound")
                                                              (("1"
                                                                (replace
                                                                 "cached cache idx"
                                                                 "pownoises"
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (replace
                                                                   "pownoises"
                                                                   "cache idxs bound"
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (replace
                                                                     "cached cache idx"
                                                                     "cached`1 varidx"
                                                                     :dir
                                                                     RL)
                                                                    (("1"
                                                                      (replace
                                                                       "cached`1 varidx"
                                                                       "cache idxs bound")
                                                                      (("1"
                                                                        (reveal
                                                                         "re")
                                                                        (("1"
                                                                          (replace
                                                                           "re"
                                                                           "cache idxs bound")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "next_idx_pow_var_ac")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (use
                                                                                   "next_idx_pow_var_ac")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("1"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lift-if
                                                                                           "cache idxs bound")
                                                                                          (("2"
                                                                                            (split
                                                                                             "cache idxs bound")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (with-labels
                                                                                               (flatten
                                                                                                "cache idxs bound")
                                                                                               (("already knonwn"
                                                                                                 "already knonwn"
                                                                                                 "cache idxs bound"
                                                                                                 "UNKNOWN")))
                                                                                              (("2"
                                                                                                (split
                                                                                                 "cache idxs bound")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (with-labels
                                                                                                   (flatten
                                                                                                    "cache idxs bound")
                                                                                                   (("opn not 1"
                                                                                                     "cache idxs bound"
                                                                                                     "UNKNOWN")))
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (4
                                                                                                        "cache idxs bound"
                                                                                                        "pow < cached pow"
                                                                                                        "cached cache idx"))
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         "cached cache idx"
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           ">")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ">=")
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "nth_ol[nat,<]")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             "cached`1 varidx"
                                                             "cached cond ok")
                                                            (("2"
                                                              (replace
                                                               "varac"
                                                               "no single value")
                                                              (("2"
                                                                (reveal
                                                                 "re")
                                                                (("2"
                                                                  (hide-all-but
                                                                   ("no single value"
                                                                    "cached cond ok"
                                                                    "re"))
                                                                  (("2"
                                                                    (replaces
                                                                     "re")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 2)
                          (("2" (assert)
                            (("2"
                              (with-labels (typepred "cache")
                               (("cache correct"
                                 "cache compatible pairs"
                                 "cache idxs bound"
                                 "UNKNOWN")))
                              (("2"
                                (expand
                                 "idxs_bounded"
                                 "cache idxs bound")
                                (("2"
                                  (inst "cache idxs bound" "i-1")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (below type-eq-decl nil nat_types nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (last_idx const-decl "int" indexed_list nil)
    (notmember_ol_nat formula-decl nil affine_pow nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member def-decl "bool" list_props nil)
    (last_ol def-decl "T" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (next_idx const-decl "nat" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (represents_var? const-decl "bool" affine nil)
    (containment_pow_var_ac formula-decl nil affine_pow nil)
    (AffineExpr_POWVAR_extensionality formula-decl nil AffineExpr_adt
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cache_powvar_correct_result formula-decl nil affine_expr_Eval_fnd
     nil)
    (idx skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (pow skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (acRes skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (pownoises skolem-const-decl
     "ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]"
     affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (i skolem-const-decl
     "below(length(cons((POWVAR(idx, pow), acRes, pownoises), cache)))"
     affine_expr_Eval_fnd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nth_ol formula-decl nil ordered_list nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= car(idxs)}"
     affine_pow nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (C const-decl "posnat" binomial "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil)
  (RE2AC_TCC54-3 nil 3632063087
   ("" (skeep*)
    (("" (assert)
      ((""
        (apply (then (label "re" -1) (label "varac" -2)
                (label "cached some" -3) (label "cached" -4)
                (label "idxs" -5) (label "pownoises" -6)
                (label "newoff" -7) (label "nwidxs" -8)
                (label "acRes" -9) (label "result" -10) (label "idx" 1)
                (label "pow <= 1" 2) (label "varac not single value" 3)
                (label "cv not 0" 4) (label "pow gt opn" 5)
                (label "opw gt opn" 6)))
        (("" (hide -11)
          (("" (replaces "result")
            (("" (assert)
              (("" (split 7)
                (("1" (inst 1 "(:(re, acRes, nwidxs):)")
                  (("1" (expand "append" 1) (("1" (grind) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (lift-if "nwidxs")
                  (("2" (split nwidxs)
                    (("1"
                      (with-labels (flatten "nwidxs")
                       (("opn >= 2" "nwidxs")))
                      (("1"
                        (with-labels (typepred "cache")
                         (("cache comp pairs" "cache idxs bound"
                           "cache correct" "UNKNOWN")))
                        (("1" (expand "compatible_pairs?")
                          (("1"
                            (with-labels (skeep "cache comp pairs")
                             (("N vars in box" "cache comp pairs on"
                               "UNKNOWN")))
                            (("1"
                              (inst 1
                               "upd_noise_burst(N, nats(nextfreeidx, newoff - 1), LAMBDA(i:nat): (get_noise_by_idx(nth(pd(varac),0)`1, N)^(i+2)))")
                              (("1"
                                (split 1)
                                (("1"
                                  (expand "vars_in_box_compatible?")
                                  (("1"
                                    (skolem 1 "k")
                                    (("1"
                                      (inst "N vars in box" "k")
                                      (("1"
                                        (with-labels
                                         (flatten "N vars in box")
                                         (("eval box is vs"
                                           "single intervals in box"
                                           "UNKNOWN")))
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (replace
                                             "eval box is vs"
                                             1
                                             :dir
                                             RL)
                                            (("1"
                                              (expand "var_ac" 1)
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "eval_ac_noise"
                                                       2)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand_ol)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (expand_ol)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "nextfreeidx")
                                                                                    (("1"
                                                                                      (use
                                                                                       "gnbi_updb_2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (use
                                                                                             "member_nats")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "k")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "nextfreeidx")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last_idx_in_box")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          "varac not single value"))
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (use
                                                                                               "power_Epsilon_is_Epsilon")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                "varac not single value"))
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (use
                                                                                     "power_Epsilon_is_Epsilon")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "eval_ac_noise"
                                                       1)
                                                      (("2"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand_ol)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (use
                                                                         "power_Epsilon_is_Epsilon")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace
                                                 "single intervals in box"
                                                 1
                                                 :dir
                                                 RL
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (use "gnbi_updb_2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (replaces
                                                         "nwidxs"
                                                         -1)
                                                        (("1"
                                                          (use
                                                           "member_nats")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "k")
                                                                (("1"
                                                                  (typepred
                                                                   "nextfreeidx")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1
                                                      "varac not single value"))
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (use
                                                           "power_Epsilon_is_Epsilon")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "compatible_pairs_on?")
                                  (("2"
                                    (skolem 1 "k")
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (expand
                                               "eval_ACExpr_Env"
                                               1)
                                              (("1"
                                                (replaces "acRes")
                                                (("1"
                                                  (typepred "cached")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (with-labels
                                                       (flatten -1)
                                                       (("cached powvar"
                                                         "cached idx re"
                                                         "cached cache idx"
                                                         "UNKNOWN")))
                                                      (("1"
                                                        (skolem
                                                         "cached cache idx"
                                                         "i")
                                                        (("1"
                                                          (inst
                                                           "cache comp pairs on"
                                                           "i")
                                                          (("1"
                                                            (with-labels
                                                             (flatten)
                                                             (("cache eval"
                                                               "cache if powvar"
                                                               "UNKNOWN")))
                                                            (("1"
                                                              (replace
                                                               "cached cache idx")
                                                              (("1"
                                                                (expand
                                                                 "eval_ACExpr_Env"
                                                                 "cache eval")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "cache_powvar_correct")
                                                                    (("1"
                                                                      (replace
                                                                       "cached cache idx")
                                                                      (("1"
                                                                        (expand
                                                                         "CacheData_correct?")
                                                                        (("1"
                                                                          (with-labels
                                                                           (flatten
                                                                            -1)
                                                                           (("chached varidx < box"
                                                                             "cached cond ok"
                                                                             "cached as AC"
                                                                             "UNKNOWN")))
                                                                          (("1"
                                                                            (replace
                                                                             "cached as AC"
                                                                             "cache eval")
                                                                            (("1"
                                                                              (replace
                                                                               "re")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   "cached idx re")
                                                                                  (("1"
                                                                                    (replace
                                                                                     "varac"
                                                                                     1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "powvarac_ext_on_pow")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "N"
                                                                                         "opn(val(cached)`1)"
                                                                                         "nth_ac(box, idx)"
                                                                                         "vs(idx)"
                                                                                         "val(cached)`3"
                                                                                         "nextfreeidx")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "pow")
                                                                                            (("1"
                                                                                              (replace
                                                                                               "nwidxs"
                                                                                               1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 "pownoises"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "nextfreeidx")
                                                                                          (("2"
                                                                                            (use
                                                                                             "last_idx_box")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               "cache comp pairs on"
                                               "k-1")
                                              (("2"
                                                (with-labels
                                                 (flatten
                                                  "cache comp pairs on")
                                                 (("cache eval"
                                                   "cache if powvar"
                                                   "UNKNOWN")))
                                                (("2"
                                                  (replace
                                                   "cache eval"
                                                   2
                                                   :dir
                                                   RL)
                                                  (("2"
                                                    (use
                                                     "eval_updb_no_idxs")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (use
                                                             "member_nats")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "idxs_bounded"
                                                                   "cache idxs bound")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "idxs_ac")
                                                                      (("1"
                                                                        (use
                                                                         "beyond_last_idx_notmember")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "next_idx")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"))
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (use
                                                           "power_Epsilon_is_Epsilon")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "length")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"))
                                                      (("3"
                                                        (expand
                                                         "length")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "nth" (-1 -2))
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (typepred "cached")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (with-labels
                                                       (flatten -1)
                                                       (("cached powvar"
                                                         "cached idx re"
                                                         "cached in cache")))
                                                      (("1"
                                                        (skolem
                                                         "cached in cache"
                                                         "j")
                                                        (("1"
                                                          (inst
                                                           "cache comp pairs on"
                                                           "j")
                                                          (("1"
                                                            (with-labels
                                                             (flatten
                                                              "cache comp pairs on")
                                                             (("cached eval noise vs"
                                                               "cached N compatible")))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "powvar_comp_noise_extension")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N"
                                                                   "opn(val(cached)`1)"
                                                                   "opn(re)"
                                                                   "varac"
                                                                   "nextfreeidx"
                                                                   "pownoises")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       "varac"
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         "cached in cache"
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (replace
                                                                           "pownoises"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             "cached idx re"
                                                                             "cached N compatible")
                                                                            (("1"
                                                                              (replace
                                                                               "re"
                                                                               "cached N compatible")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   "re"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       "re"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     "varac"
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "nextfreeidx")
                                                                      (("2"
                                                                        (use
                                                                         "last_idx_box")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (replaces
                                                                     "re"
                                                                     1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst
                                             "cache comp pairs on"
                                             "k-1")
                                            (("1"
                                              (expand "nth" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "nth"
                                                     (-1 -2))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "pow_var_compatible?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (skolem
                                                             2
                                                             "i")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 "cache comp pairs on"
                                                                 "i")
                                                                (("1"
                                                                  (case
                                                                   "get_noise_by_idx(nth(nth(cache, k - 1)`3, i),
                                                                 upd_noise_burst(N,
                                                                                 nats(nextfreeidx, newoff - 1),
                                                                                 LAMBDA
                                                                                 (i: nat):
                                                                                 (get_noise_by_idx
                                                                                  (car(pd(varac))`1, N)
                                                                                  ^
                                                                                  (2 + i)))) = get_noise_by_idx(nth(nth(cache, k - 1)`3, i),N)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                                                                          0)`1,
                                                                      upd_noise_burst(N,
                                                                                      nats(nextfreeidx, newoff - 1),
                                                                                      LAMBDA
                                                                                      (i: nat):
                                                                                      (get_noise_by_idx
                                                                                       (car(pd(varac))`1, N)
                                                                                       ^
                                                                                       (2 + i))))
                                                      ^ (2 + i) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                                                                          0)`1,
                                                                      N)
                                                      ^ (2 + i)")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "gnbi_updb_2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             1)
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (use
                                                                                 "member_nats")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "nextfreeidx")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth_ac"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "idxs_bounded")
                                                                                            (("1"
                                                                                              (inst
                                                                                               "cache idxs bound"
                                                                                               "k-1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "next_idx")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "somevidx"
                                                                                                   "varidx(nth(cache, k - 1)`1)")
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "last_idx_box")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "next_idx")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "last_idx")
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "olidx_car_last[nzBaseType]")
                                                                                                                (("1"
                                                                                                                  (expand_ol)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     -4
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth_ac")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  -7))
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (use
                                                                                 "power_Epsilon_is_Epsilon")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("3"
                                                                            (expand
                                                                             "length")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (use
                                                                       "gnbi_updb_2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (use
                                                                             "member_nats")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst
                                                                                       "cache idxs bound"
                                                                                       "k-1")
                                                                                      (("1"
                                                                                        (use
                                                                                         "cache_powvar_correct")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "CacheData_correct?")
                                                                                          (("1"
                                                                                            (with-labels
                                                                                             (flatten
                                                                                              -1)
                                                                                             (("cache_k-1`3 length"
                                                                                               "cache_k-1`3 precond hold"
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "UNKNOWN")))
                                                                                            (("1"
                                                                                              (replace
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "cache idxs bound")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "next_idx_pow_var_ac")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1
                                                                                                   :where
                                                                                                   "cache idxs bound")
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "i")
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -2
                                                                                                              "cache_k-1`3 length"))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "length")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           "cache idxs bound")
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                -6
                                                                                                                "cache idxs bound"))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 ">=")
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "nth_ol[nat,<]")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  "varac not single value"))
                                                                                (("2"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("3"
                                                                          (expand
                                                                           "length")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (use
                                                                           "power_Epsilon_is_Epsilon")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "length")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("4"
                                                                      (expand
                                                                       "length")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "k")
                                              (("2"
                                                (hide-all-but (-1 1 2))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but
                                 (1 "varac not single value"))
                                (("2"
                                  (skeep)
                                  (("2"
                                    (use "power_Epsilon_is_Epsilon")
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (with-labels (flatten "nwidxs")
                       (("cached opn < 2" "nwidxs" "UNKNOWN")))
                      (("2"
                        (with-labels (typepred "cache")
                         (("cache comp pairs" "cache idxs bound"
                           "correct cache" "UNKNOWN")))
                        (("2" (expand "compatible_pairs?")
                          (("2"
                            (with-labels (skeep "cache comp pairs")
                             (("N vars in box" "cache comp pairs on"
                               "UNKNOWN")))
                            (("2"
                              (inst 2
                               "upd_noise_burst(N, nats(nextfreeidx, newoff - 1), LAMBDA(i:nat): (get_noise_by_idx(nth(pd(varac),0)`1, N)^(i+2)))")
                              (("1"
                                (split 2)
                                (("1"
                                  (expand "vars_in_box_compatible?")
                                  (("1"
                                    (skolem 1 "k")
                                    (("1"
                                      (inst "N vars in box" "k")
                                      (("1"
                                        (with-labels
                                         (flatten "N vars in box")
                                         (("eval box is vs"
                                           "single intervals in box"
                                           "UNKNOWN")))
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (replace
                                             "eval box is vs"
                                             1
                                             :dir
                                             RL)
                                            (("1"
                                              (expand "var_ac" 1)
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "eval_ac_noise"
                                                       2)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand_ol)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (expand_ol)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "nextfreeidx")
                                                                                    (("1"
                                                                                      (use
                                                                                       "gnbi_updb_2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (use
                                                                                             "member_nats")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "k")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "nextfreeidx")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last_idx_in_box")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          "varac not single value"))
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (use
                                                                                               "power_Epsilon_is_Epsilon")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                "varac not single value"))
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (use
                                                                                     "power_Epsilon_is_Epsilon")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "eval_ac_noise"
                                                       1)
                                                      (("2"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand_ol)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (use
                                                                         "power_Epsilon_is_Epsilon")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces
                                                 "single intervals in box"
                                                 1
                                                 :dir
                                                 RL)
                                                (("2"
                                                  (use "gnbi_updb_2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (replaces
                                                         "nwidxs"
                                                         -1)
                                                        (("1"
                                                          (use
                                                           "member_nats")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "k")
                                                                (("1"
                                                                  (typepred
                                                                   "nextfreeidx")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1
                                                      "varac not single value"))
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (use
                                                           "power_Epsilon_is_Epsilon")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "compatible_pairs_on?")
                                  (("2"
                                    (skolem 1 "k")
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (expand
                                               "eval_ACExpr_Env"
                                               1)
                                              (("1"
                                                (replaces "acRes")
                                                (("1"
                                                  (lemma
                                                   "containment_pow_var_ac")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "upd_noise_burst(N,
                                                                nats(nextfreeidx, newoff - 1),
                                                                LAMBDA
                                                                (i: nat):
                                                                (get_noise_by_idx(car(pd(varac))`1, N)
                                                                 ^
                                                                 (2 + i)))"
                                                     "vs(varidx(re))"
                                                     "varac"
                                                     "pow"
                                                     "nwidxs")
                                                    (("1"
                                                      (replace "re" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           "re"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "vars_in_box_compatible?")
                                                                  (("1"
                                                                    (inst
                                                                     "N vars in box"
                                                                     "idx")
                                                                    (("1"
                                                                      (replace
                                                                       "varac"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth_ac"
                                                                         1)
                                                                        (("1"
                                                                          (with-labels
                                                                           (flatten
                                                                            "N vars in box")
                                                                           (("box eval"
                                                                             "box sing int"
                                                                             "UNKNOWN")))
                                                                          (("1"
                                                                            (replace
                                                                             "box eval"
                                                                             1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (use
                                                                               "eval_updb_no_idxs")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     1
                                                                                     "j")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (use
                                                                                         "member_nats")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "nextfreeidx")
                                                                                              (("1"
                                                                                                (use
                                                                                                 "last_idx_box")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  "varac not single value"))
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (use
                                                                                     "power_Epsilon_is_Epsilon")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (reveal
                                                                                       "varac")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         "varac")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth_ac")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  "varac not single value"
                                                                                  "varac"))
                                                                                (("3"
                                                                                  (replaces
                                                                                   "varac")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "nth_ac")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "length")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replaces
                                                                     "nwidxs"
                                                                     -1)
                                                                    (("2"
                                                                      (use
                                                                       "member_nats")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replaces
                                                                             "varac")
                                                                            (("2"
                                                                              (typepred
                                                                               "nextfreeidx")
                                                                              (("2"
                                                                                (use
                                                                                 "last_idx_box")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (use
                                                                   "pow_var_compatible_noise")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replaces
                                                                     "varac")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("2"
                                                        (replaces
                                                         "varac")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (use
                                                             "power_Epsilon_is_Epsilon")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("3"
                                                        (replaces
                                                         "varac")
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               "cache comp pairs on"
                                               "k-1")
                                              (("2"
                                                (with-labels
                                                 (flatten
                                                  "cache comp pairs on")
                                                 (("eval cache"
                                                   "cache if powvar"
                                                   "UNKNOWN")))
                                                (("2"
                                                  (replaces
                                                   "eval cache"
                                                   2
                                                   :dir
                                                   RL)
                                                  (("2"
                                                    (use
                                                     "eval_updb_no_idxs")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (skolem
                                                           1
                                                           "i")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (use
                                                               "member_nats")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "idxs_bounded")
                                                                    (("1"
                                                                      (inst
                                                                       "cache idxs bound"
                                                                       "k-1")
                                                                      (("1"
                                                                        (expand
                                                                         "next_idx")
                                                                        (("1"
                                                                          (lemma
                                                                           "beyond_last_idx_notmember")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "i"
                                                                             "pd(nth(cache, k - 1)`2)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "idxs_ac")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("2"
                                                        (replaces
                                                         "varac")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (use
                                                             "power_Epsilon_is_Epsilon")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("3"
                                                        (replaces
                                                         "varac")
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (replace "re" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "pow_var_compatible_noise")
                                                  (("1"
                                                    (replaces "nwidxs")
                                                    (("1"
                                                      (replaces
                                                       "varac")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 "cache comp pairs on"
                                                 "k-1")
                                                (("2"
                                                  (with-labels
                                                   (flatten
                                                    "cache comp pairs on")
                                                   (("eval cache"
                                                     "cache if powvar"
                                                     "UNKNOWN")))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "pow_var_compatible?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skolem
                                                             2
                                                             "j")
                                                            (("2"
                                                              (inst
                                                               "cache if powvar"
                                                               "j")
                                                              (("2"
                                                                (case
                                                                 "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                                                                  0)`1,
                                                              upd_noise_burst(N,
                                                                              nats(nextfreeidx, newoff - 1),
                                                                              LAMBDA
                                                                              (i: nat):
                                                                              (get_noise_by_idx
                                                                               (car(pd(varac))`1, N)
                                                                               ^
                                                                               (2 + i)))) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                                                                  0)`1,
                                                              N)")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (case
                                                                     "get_noise_by_idx(nth(nth(cache, k - 1)`3, j),
                                                                 upd_noise_burst(N,
                                                                                 nats(nextfreeidx, newoff - 1),
                                                                                 LAMBDA
                                                                                 (i: nat):
                                                                                 (get_noise_by_idx
                                                                                  (car(pd(varac))`1, N)
                                                                                  ^
                                                                                  (2 + i)))) = get_noise_by_idx(nth(nth(cache, k - 1)`3, j),
                                                                 N)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (use
                                                                         "gnbi_updb_2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             1)
                                                                            (("1"
                                                                              (use
                                                                               "member_nats")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (use
                                                                                         "cache_powvar_correct")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "CacheData_correct?")
                                                                                          (("1"
                                                                                            (with-labels
                                                                                             (flatten
                                                                                              -1)
                                                                                             (("cache_k-1`3 length"
                                                                                               "cache_k-1`3 precond hold"
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "UNKNOWN")))
                                                                                            (("1"
                                                                                              (replace
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "cache idxs bound")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "next_idx_pow_var_ac")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1
                                                                                                   :where
                                                                                                   "cache idxs bound")
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replaces
                                                                                                           -1
                                                                                                           "cache idxs bound")
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "j")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                -5
                                                                                                                "cache idxs bound"))
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "nth_ol[nat,<]")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "length")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("3"
                                                                            (expand
                                                                             "length")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (use
                                                                     "gnbi_updb_2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (use
                                                                           "member_nats")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (typepred
                                                                                 "nextfreeidx")
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth_ac"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst
                                                                                       "cache idxs bound"
                                                                                       "k-1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "next_idx")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "somevidx"
                                                                                           "varidx(nth(cache, k - 1)`1)")
                                                                                          (("1"
                                                                                            (use
                                                                                             "last_idx_box")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "next_idx")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "last_idx")
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "olidx_car_last[nzBaseType]")
                                                                                                        (("1"
                                                                                                          (expand_ol)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -4
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth_ac")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          -8))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        "varac not single value"))
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (use
                                                                             "power_Epsilon_is_Epsilon")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide-all-but
                                                                       (1
                                                                        "varac not single value"))
                                                                      (("3"
                                                                        (expand
                                                                         "length")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (use
                                                                       "power_Epsilon_is_Epsilon")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("4"
                                                                    (expand
                                                                     "length")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but
                                 (1 "varac not single value"))
                                (("2"
                                  (skeep)
                                  (("2"
                                    (use "power_Epsilon_is_Epsilon")
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace "newoff" 1)
                  (("3" (expand ">=")
                    (("3"
                      (case "nextfreeidx - opn(val(cached)`1) + pow = nextfreeidx + (pow - opn(val(cached)`1))")
                      (("1" (replaces -1)
                        (("1" (case "0 < pow - opn(val(cached)`1)")
                          (("1" (hide-all-but (1 -1))
                            (("1"
                              (name-replace "A"
                               "pow - opn(val(cached)`1)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace "newoff" 1)
                  (("4" (expand "idxs_bounded" 1)
                    (("4" (skeep)
                      (("4" (case "i=0")
                        (("1" (replaces -1)
                          (("1" (expand "nth" 1)
                            (("1" (replace "acRes" 1)
                              (("1"
                                (use "next_idx_pow_var_ac")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace "varac" 1)
                                          (("1"
                                            (typepred "nextfreeidx")
                                            (("1"
                                              (use "last_idx_box")
                                              (("1"
                                                (case
                                                 "nextfreeidx - opn(val(cached)`1) + pow = nextfreeidx + (pow - opn(val(cached)`1))")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "0 < pow - opn(val(cached)`1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -2 -3 1))
                                                      (("1"
                                                        (name-replace
                                                         "A"
                                                         "pow - opn(val(cached)`1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace "nwidxs" 2)
                                          (("2"
                                            (lift-if 2)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case
                                                   "pow - 1 = opn(val(cached)`1)")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     1
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "nth(append(take[nat](pownoises, pow - 2),
                                                     nats(nextfreeidx, newoff - 1)),
                                              pow - 2) = nextfreeidx")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (use
                                                             "nth_append[nat]")
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               1)
                                                              (("1"
                                                                (use
                                                                 "length_take[nat]")
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (case
                                                                             "length(pownoises) = pow - 2")
                                                                            (("1"
                                                                              (replaces
                                                                               -1
                                                                               2)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "length(pownoises) > opn(val(cached)`1) - 2")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 "pownoises"
                                                                                 1)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "cached")
                                                                                  (("2"
                                                                                    (use
                                                                                     "cache_powvar_correct_result")
                                                                                    (("2"
                                                                                      (with-labels
                                                                                       (typepred
                                                                                        "cache")
                                                                                       (("cache compatible pairs"
                                                                                         "cache idxs bounded"
                                                                                         "cache correct"
                                                                                         "UNKNOWN")))
                                                                                      (("2"
                                                                                        (with-labels
                                                                                         (assert)
                                                                                         (("cached correct")))
                                                                                        (("2"
                                                                                          (replace
                                                                                           "cached"
                                                                                           "cached correct"
                                                                                           :dir
                                                                                           RL)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "CacheData_correct?"
                                                                                             "cached correct")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "cached")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         "varac"
                                                                                                         "varac not single value")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           "cached correct")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             "re"
                                                                                                             "cached correct")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "length_take[nat]")
                                                              (("2"
                                                                (replaces
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "nth_append[nat]")
                                                    (("1"
                                                      (replaces -1 2)
                                                      (("1"
                                                        (case
                                                         "nth(nats(nextfreeidx, newoff - 1),
                                                 pow - 2 - length(take[nat](pownoises, opn(val(cached)`1) - 1))) = newoff -1 ")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           2)
                                                          (("1"
                                                            (replace
                                                             "newoff"
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "length(take[nat](pownoises, opn(val(cached)`1) - 1)) = opn(val(cached)`1) - 1")
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replaces
                                                               "newoff"
                                                               1)
                                                              (("1"
                                                                (typepred
                                                                 "nats(nextfreeidx, nextfreeidx - opn(val(cached)`1) + pow - 1)")
                                                                (("1"
                                                                  (inst?
                                                                   -5)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "length_take[nat]")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "min"
                                                                 1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replaces
                                                                         "pownoises"
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "cache_powvar_correct_result")
                                                                          (("2"
                                                                            (with-labels
                                                                             (typepred
                                                                              "cache")
                                                                             (("cache compatible pairs"
                                                                               "cache idxs bounded"
                                                                               "cache correct"
                                                                               "UNKNOWN")))
                                                                            (("2"
                                                                              (with-labels
                                                                               (assert)
                                                                               (("cached correct")))
                                                                              (("2"
                                                                                (expand
                                                                                 "CacheData_correct?"
                                                                                 "cached correct")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "cached")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             "cached"
                                                                                             "cached correct"
                                                                                             :dir
                                                                                             RL)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               "cached correct")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 "re"
                                                                                                 "cached correct")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (case
                                                           "length[nat](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) = opn(val[CacheData](cached)`1) - 1")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "length_take[nat]")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "min"
                                                                 1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replaces
                                                                         "pownoises"
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "cache_powvar_correct_result")
                                                                          (("2"
                                                                            (with-labels
                                                                             (typepred
                                                                              "cache")
                                                                             (("cache compatible pairs"
                                                                               "cache idxs bounded"
                                                                               "cache correct"
                                                                               "UNKNOWN")))
                                                                            (("2"
                                                                              (with-labels
                                                                               (assert)
                                                                               (("cached correct")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "length[nat](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) = opn(val[CacheData](cached)`1) - 1")
                                                      (("1"
                                                        (replaces -1 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "length_take[nat]")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "min"
                                                               1)
                                                              (("1"
                                                                (lift-if
                                                                 1)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replaces
                                                                       "pownoises"
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "cache_powvar_correct_result")
                                                                        (("2"
                                                                          (with-labels
                                                                           (typepred
                                                                            "cache")
                                                                           (("cache compatible pairs"
                                                                             "cache idxs bounded"
                                                                             "cache correct"
                                                                             "UNKNOWN")))
                                                                          (("2"
                                                                            (with-labels
                                                                             (assert)
                                                                             (("cached correct")))
                                                                            (("2"
                                                                              (expand
                                                                               "CacheData_correct?"
                                                                               "cached correct")
                                                                              (("2"
                                                                                (typepred
                                                                                 "cached")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (replace
                                                                                           "cached"
                                                                                           "cached correct"
                                                                                           :dir
                                                                                           RL)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2
                                                                                             "cached correct")
                                                                                            (("2"
                                                                                              (replace
                                                                                               "re"
                                                                                               "cached correct")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace "newoff" 2)
                                                  (("2"
                                                    (typepred
                                                     "nats(nextfreeidx, nextfreeidx - opn(val(cached)`1) + pow - 1)")
                                                    (("2"
                                                      (inst? -5)
                                                      (("2"
                                                        (replaces -5 3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (with-labels (typepred "cache")
                           (("cache compatible pairs"
                             "cache idxs bounded" "cache correct"
                             "UNKNOWN")))
                          (("2"
                            (expand "idxs_bounded"
                                    "cache idxs bounded")
                            (("2" (expand "nth" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst "cache idxs bounded" "i-1")
                                  (("2"
                                    (expand ">=")
                                    (("2"
                                      (case
                                       "nextfreeidx - opn(val(cached)`1) + pow = nextfreeidx + (pow - opn(val(cached)`1))")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "0 < pow - opn(val(cached)`1)")
                                          (("1"
                                            (hide-all-but
                                             (-1
                                              2
                                              "cache idxs bounded"))
                                            (("1"
                                              (name-replace
                                               "A"
                                               "pow - opn(val(cached)`1)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "correct_cache?")
                  (("5" (expand "CacheData_correct?")
                    (("5" (replace "re" 1)
                      (("5" (assert)
                        (("5" (lift-if "nwidxs")
                          (("5" (split "nwidxs")
                            (("1" (flatten)
                              (("1"
                                (replace -2 1)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (use "length_append[nat]")
                                    (("1"
                                      (replaces -1 1)
                                      (("1"
                                        (typepred
                                         "nats(nextfreeidx, newoff - 1)")
                                        (("1"
                                          (replaces -4 2)
                                          (("1"
                                            (case
                                             "length[nat](take[nat](pownoises, opn(val(cached)`1) - 1)) = opn(val(cached)`1) - 1")
                                            (("1"
                                              (replaces -1 2)
                                              (("1"
                                                (replace "newoff" 2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "length_take[nat]")
                                              (("1"
                                                (replaces -1 1)
                                                (("1"
                                                  (expand "min")
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace
                                                           "pownoises")
                                                          (("2"
                                                            (with-labels
                                                             (typepred
                                                              "cache")
                                                             (("cache compatible pairs"
                                                               "cache idxs bounded"
                                                               "cache correct"
                                                               "UNKNOWN")))
                                                            (("2"
                                                              (use
                                                               "cache_powvar_correct_result")
                                                              (("2"
                                                                (with-labels
                                                                 (assert)
                                                                 (("cached correct")))
                                                                (("2"
                                                                  (replace
                                                                   "cached"
                                                                   "cached correct"
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (expand
                                                                     "CacheData_correct?"
                                                                     "cached correct")
                                                                    (("2"
                                                                      (typepred
                                                                       "cached")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 "cached correct")
                                                                                (("2"
                                                                                  (replace
                                                                                   "re"
                                                                                   "cached correct")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case
                                       "car(append(take[nat](pownoises, opn(val(cached)`1) - 1),
                                           nats(nextfreeidx, newoff - 1))) = car(pownoises)")
                                      (("1"
                                        (replaces -1 2)
                                        (("1"
                                          (with-labels
                                           (typepred "cache")
                                           (("cache compatible pairs"
                                             "cache idxs bounded"
                                             "cache correct"
                                             "UNKNOWN")))
                                          (("1"
                                            (use
                                             "cache_powvar_correct_result")
                                            (("1"
                                              (with-labels
                                               (assert)
                                               (("cached correct")))
                                              (("1"
                                                (replace
                                                 "cached"
                                                 "cached correct"
                                                 :dir
                                                 RL)
                                                (("1"
                                                  (expand
                                                   "CacheData_correct?"
                                                   "cached correct")
                                                  (("1"
                                                    (typepred "cached")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (split
                                                               "cached correct")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     "cached correct")
                                                                    (("1"
                                                                      (replace
                                                                       "re"
                                                                       "cached correct")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "length")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 "varac"
                                                                 "varac not single value")
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   "cached correct")
                                                                  (("2"
                                                                    (replace
                                                                     "re"
                                                                     "cached correct")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "append" 1)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "take" -1)
                                                (("1"
                                                  (case
                                                   "length(pownoises) >= opn(val(cached)`1) - 1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (replace
                                                       "pownoises"
                                                       1)
                                                      (("2"
                                                        (with-labels
                                                         (typepred
                                                          "cache")
                                                         (("cache compatible pairs"
                                                           "cache idxs bounded"
                                                           "cache correct"
                                                           "UNKNOWN")))
                                                        (("2"
                                                          (use
                                                           "cache_powvar_correct_result")
                                                          (("2"
                                                            (with-labels
                                                             (assert)
                                                             (("cached correct")))
                                                            (("2"
                                                              (replace
                                                               "cached"
                                                               "cached correct"
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (expand
                                                                 "CacheData_correct?"
                                                                 "cached correct")
                                                                (("2"
                                                                  (typepred
                                                                   "cached")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replace
                                                                             "varac"
                                                                             "varac not single value")
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               "cached correct")
                                                                              (("2"
                                                                                (replace
                                                                                 "re"
                                                                                 "cached correct")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "take" 2)
                                                  (("2"
                                                    (case
                                                     "length(pownoises) >= opn(val(cached)`1) - 1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replace
                                                       "pownoises"
                                                       1)
                                                      (("2"
                                                        (with-labels
                                                         (typepred
                                                          "cache")
                                                         (("cache compatible pairs"
                                                           "cache idxs bounded"
                                                           "cache correct"
                                                           "UNKNOWN")))
                                                        (("2"
                                                          (use
                                                           "cache_powvar_correct_result")
                                                          (("2"
                                                            (with-labels
                                                             (assert)
                                                             (("cached correct")))
                                                            (("2"
                                                              (replace
                                                               "cached"
                                                               "cached correct"
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (expand
                                                                 "CacheData_correct?"
                                                                 "cached correct")
                                                                (("2"
                                                                  (typepred
                                                                   "cached")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replace
                                                                             "varac"
                                                                             "varac not single value")
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               "cached correct")
                                                                              (("2"
                                                                                (replace
                                                                                 "re"
                                                                                 "cached correct")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (replace "pownoises" 1)
                                        (("3"
                                          (with-labels
                                           (typepred "cache")
                                           (("cache compatible pairs"
                                             "cache idxs bounded"
                                             "cache correct"
                                             "UNKNOWN")))
                                          (("3"
                                            (use
                                             "cache_powvar_correct_result")
                                            (("3"
                                              (with-labels
                                               (assert)
                                               (("cached correct")))
                                              (("3"
                                                (replace
                                                 "cached"
                                                 "cached correct"
                                                 :dir
                                                 RL)
                                                (("3"
                                                  (expand
                                                   "CacheData_correct?"
                                                   "cached correct")
                                                  (("3"
                                                    (typepred "cached")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (split
                                                               "cached correct")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 "varac"
                                                                 "varac not single value")
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   "cached correct")
                                                                  (("2"
                                                                    (replace
                                                                     "re"
                                                                     "cached correct")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4" (assert) nil nil)
                                       ("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 2)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (typepred
                                     "nats(nextfreeidx, newoff - 1)")
                                    (("1"
                                      (replace -4 2)
                                      (("1"
                                        (replace "newoff" 2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (typepred
                                       "nats(nextfreeidx, newoff - 1)")
                                      (("1"
                                        (inst -5 "0")
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (replace -5 3)
                                            (("1"
                                              (typepred "nextfreeidx")
                                              (("1"
                                                (use "last_idx_box")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -4 1)
                                          (("2"
                                            (replace "newoff" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_take formula-decl nil list_more_props nil)
    (nth_append formula-decl nil list_more_props nil)
    (take def-decl "list[T]" list_more_props nil)
    (containment_pow_var_ac formula-decl nil affine_pow nil)
    (pow_var_compatible_noise formula-decl nil affine_pow nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (SingInterval? const-decl "bool" affine nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= car(idxs)}"
     affine_pow nil)
    (C const-decl "posnat" binomial "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (beyond_last_idx_notmember formula-decl nil affine nil)
    (eval_updb_no_idxs formula-decl nil affine nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (last_idx_box formula-decl nil affine_box nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (represents_var? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (next_idx const-decl "nat" affine nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (nth_ol formula-decl nil ordered_list nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (powvar_comp_noise_extension formula-decl nil affine_pow nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (gnbi_updb_2 formula-decl nil affine nil)
    (member_nats formula-decl nil affine_pow nil)
    (power_Epsilon_is_Epsilon formula-decl nil affine_pow nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (ordered_list type-eq-decl nil ordered_list nil))
   nil)
  (RE2AC_TCC54-2 nil 3631477806
   ("" (skeep*)
    (("" (assert)
      ((""
        (apply (then (label "re" -1) (label "varac" -2)
                (label "cached some" -3) (label "cached" -4)
                (label "idxs" -5) (label "pownoises" -6)
                (label "newoff" -7) (label "nwidxs" -8)
                (label "acRes" -9) (label "result" -10) (label "idx" 1)
                (label "pow <= 1" 2) (label "varac not single value" 3)
                (label "cv not 0" 4) (label "pow gt opn" 5)
                (label "opw gt opn" 6)))
        (("" (hide -11)
          (("" (replaces "result")
            (("" (assert)
              (("" (split 7)
                (("1" (inst 1 "(:(re, acRes, nwidxs):)")
                  (("1" (expand "append" 1) (("1" (grind) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (lift-if "nwidxs")
                  (("2" (split nwidxs)
                    (("1"
                      (with-labels (flatten "nwidxs")
                       (("opn >= 2" "nwidxs")))
                      (("1"
                        (with-labels (typepred "cache")
                         (("cache comp pairs" "cache idxs bound"
                           "UNKNOWN")))
                        (("1" (expand "compatible_pairs?")
                          (("1"
                            (with-labels (skeep "cache comp pairs")
                             (("N vars in box" "cache comp pairs on"
                               "UNKNOWN")))
                            (("1"
                              (inst 1
                               "upd_noise_burst(N, nats(nextfreeidx, newoff - 1), LAMBDA(i:nat): (get_noise_by_idx(nth(pd(varac),0)`1, N)^(i+2)))")
                              (("1"
                                (split 1)
                                (("1"
                                  (expand "vars_in_box_compatible?")
                                  (("1"
                                    (skolem 1 "k")
                                    (("1"
                                      (inst "N vars in box" "k")
                                      (("1"
                                        (with-labels
                                         (flatten "N vars in box")
                                         (("eval box is vs"
                                           "single intervals in box"
                                           "UNKNOWN")))
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (replace
                                             "eval box is vs"
                                             1
                                             :dir
                                             RL)
                                            (("1"
                                              (expand "var_ac" 1)
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "eval_ac_noise"
                                                       2)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand_ol)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (expand_ol)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "nextfreeidx")
                                                                                    (("1"
                                                                                      (use
                                                                                       "gnbi_updb_2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (use
                                                                                             "member_nats")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "k")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "nextfreeidx")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last_idx_in_box")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          "varac not single value"))
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (use
                                                                                               "power_Epsilon_is_Epsilon")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                "varac not single value"))
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (use
                                                                                     "power_Epsilon_is_Epsilon")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "eval_ac_noise"
                                                       1)
                                                      (("2"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand_ol)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (use
                                                                         "power_Epsilon_is_Epsilon")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces
                                                 "single intervals in box"
                                                 1
                                                 :dir
                                                 RL)
                                                (("2"
                                                  (use "gnbi_updb_2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (replaces
                                                         "nwidxs"
                                                         -1)
                                                        (("1"
                                                          (use
                                                           "member_nats")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "k")
                                                                (("1"
                                                                  (typepred
                                                                   "nextfreeidx")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1
                                                      "varac not single value"))
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (use
                                                           "power_Epsilon_is_Epsilon")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "compatible_pairs_on?")
                                  (("2"
                                    (skolem 1 "k")
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (expand
                                               "eval_ACExpr_Env"
                                               1)
                                              (("1"
                                                (replaces "acRes")
                                                (("1"
                                                  (typepred "cached")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (with-labels
                                                       (flatten -1)
                                                       (("cached powvar"
                                                         "cached idx re"
                                                         "cached cache idx"
                                                         "UNKNOWN")))
                                                      (("1"
                                                        (skolem
                                                         "cached cache idx"
                                                         "i")
                                                        (("1"
                                                          (inst
                                                           "cache comp pairs on"
                                                           "i")
                                                          (("1"
                                                            (with-labels
                                                             (flatten)
                                                             (("cache eval"
                                                               "cache if powvar"
                                                               "UNKNOWN")))
                                                            (("1"
                                                              (replace
                                                               "cached cache idx")
                                                              (("1"
                                                                (expand
                                                                 "eval_ACExpr_Env"
                                                                 "cache eval")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "cache_powvar_correct")
                                                                    (("1"
                                                                      (replace
                                                                       "cached cache idx")
                                                                      (("1"
                                                                        (expand
                                                                         "CacheData_correct?")
                                                                        (("1"
                                                                          (with-labels
                                                                           (flatten
                                                                            -1)
                                                                           (("chached varidx < box"
                                                                             "cached cond ok"
                                                                             "cached as AC"
                                                                             "UNKNOWN")))
                                                                          (("1"
                                                                            (replace
                                                                             "cached as AC"
                                                                             "cache eval")
                                                                            (("1"
                                                                              (replace
                                                                               "re")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   "cached idx re")
                                                                                  (("1"
                                                                                    (replace
                                                                                     "varac"
                                                                                     1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "powvarac_ext_on_pow")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "N"
                                                                                         "opn(val(cached)`1)"
                                                                                         "nth_ac(box, idx)"
                                                                                         "vs(idx)"
                                                                                         "val(cached)`3"
                                                                                         "nextfreeidx")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "pow")
                                                                                            (("1"
                                                                                              (replace
                                                                                               "nwidxs"
                                                                                               1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 "pownoises"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "nextfreeidx")
                                                                                          (("2"
                                                                                            (use
                                                                                             "last_idx_box")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               "cache comp pairs on"
                                               "k-1")
                                              (("2"
                                                (with-labels
                                                 (flatten
                                                  "cache comp pairs on")
                                                 (("cache eval"
                                                   "cache if powvar"
                                                   "UNKNOWN")))
                                                (("2"
                                                  (replace
                                                   "cache eval"
                                                   2
                                                   :dir
                                                   RL)
                                                  (("2"
                                                    (use
                                                     "eval_updb_no_idxs")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (use
                                                             "member_nats")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "idxs_bounded"
                                                                   "cache idxs bound")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (expand
                                                                       "idxs_ac")
                                                                      (("1"
                                                                        (use
                                                                         "beyond_last_idx_notmember")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "next_idx")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"))
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (use
                                                           "power_Epsilon_is_Epsilon")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "length")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"))
                                                      (("3"
                                                        (expand
                                                         "length")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (typepred "cached")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (with-labels
                                                       (flatten -1)
                                                       (("cached powvar"
                                                         "cached idx re"
                                                         "cached in cache")))
                                                      (("1"
                                                        (skolem
                                                         "cached in cache"
                                                         "j")
                                                        (("1"
                                                          (inst
                                                           "cache comp pairs on"
                                                           "j")
                                                          (("1"
                                                            (with-labels
                                                             (flatten
                                                              "cache comp pairs on")
                                                             (("cached eval noise vs"
                                                               "cached N compatible")))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "powvar_comp_noise_extension")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "N"
                                                                   "opn(val(cached)`1)"
                                                                   "opn(re)"
                                                                   "varac"
                                                                   "nextfreeidx"
                                                                   "pownoises")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       "varac"
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         "cached in cache"
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (replace
                                                                           "pownoises"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             "cached idx re"
                                                                             "cached N compatible")
                                                                            (("1"
                                                                              (replace
                                                                               "re"
                                                                               "cached N compatible")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   "re"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       "re"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     "varac"
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "nextfreeidx")
                                                                      (("2"
                                                                        (use
                                                                         "last_idx_box")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (replaces
                                                                     "re"
                                                                     1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst
                                             "cache comp pairs on"
                                             "k-1")
                                            (("1"
                                              (expand "nth" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "nth" -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "pow_var_compatible?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (skolem
                                                             2
                                                             "i")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 "cache comp pairs on"
                                                                 "i")
                                                                (("1"
                                                                  (case
                                                                   "get_noise_by_idx(nth(nth(cache, k - 1)`3, i),
                       upd_noise_burst(N,
                                       nats(nextfreeidx, newoff - 1),
                                       LAMBDA
                                       (i: nat):
                                       (get_noise_by_idx
                                        (car(pd(varac))`1, N)
                                        ^
                                        (2 + i)))) = get_noise_by_idx(nth(nth(cache, k - 1)`3, i),N)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                            0)`1,
                        upd_noise_burst(N,
                                        nats(nextfreeidx, newoff - 1),
                                        LAMBDA
                                        (i: nat):
                                        (get_noise_by_idx
                                         (car(pd(varac))`1, N)
                                         ^
                                         (2 + i))))
        ^ (2 + i) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                            0)`1,
                        N)
        ^ (2 + i)")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "gnbi_updb_2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             1)
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (use
                                                                                 "member_nats")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "nextfreeidx")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth_ac"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "idxs_bounded")
                                                                                            (("1"
                                                                                              (inst
                                                                                               "cache idxs bound"
                                                                                               "k-1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "next_idx")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "somevidx"
                                                                                                   "varidx(nth(cache, k - 1)`1)")
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "last_idx_box")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "next_idx")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "last_idx")
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "olidx_car_last[nzBaseType]")
                                                                                                                (("1"
                                                                                                                  (expand_ol)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     -4
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth_ac")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  -6))
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (use
                                                                                 "power_Epsilon_is_Epsilon")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("3"
                                                                            (expand
                                                                             "length")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (use
                                                                       "gnbi_updb_2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (use
                                                                             "member_nats")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst
                                                                                       "cache idxs bound"
                                                                                       "k-1")
                                                                                      (("1"
                                                                                        (use
                                                                                         "cache_powvar_correct")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "CacheData_correct?")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4
                                                                                               "cache idxs bound")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "next_idx_pow_var_ac")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1
                                                                                                   :where
                                                                                                   "cache idxs bound")
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "i")
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -2
                                                                                                              -5))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "length")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           "cache idxs bound")
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                -7
                                                                                                                "cache idxs bound"))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 ">=")
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "nth_ol[nat,<]")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  "varac not single value"))
                                                                                (("2"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("3"
                                                                          (expand
                                                                           "length")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (use
                                                                           "power_Epsilon_is_Epsilon")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "length")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("4"
                                                                      (expand
                                                                       "length")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "k")
                                              (("2"
                                                (hide-all-but (-1 1 2))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but
                                 (1 "varac not single value"))
                                (("2"
                                  (skeep)
                                  (("2"
                                    (use "power_Epsilon_is_Epsilon")
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (with-labels (flatten "nwidxs")
                       (("cached opn < 2" "nwidxs" "UNKNOWN")))
                      (("2"
                        (with-labels (typepred "cache")
                         (("cache comp pairs" "cache idxs bound"
                           "correct cache" "UNKNOWN")))
                        (("2" (expand "compatible_pairs?")
                          (("2"
                            (with-labels (skeep "cache comp pairs")
                             (("N vars in box" "cache comp pairs on"
                               "UNKNOWN")))
                            (("2"
                              (inst 2
                               "upd_noise_burst(N, nats(nextfreeidx, newoff - 1), LAMBDA(i:nat): (get_noise_by_idx(nth(pd(varac),0)`1, N)^(i+2)))")
                              (("1"
                                (split 2)
                                (("1"
                                  (expand "vars_in_box_compatible?")
                                  (("1"
                                    (skolem 1 "k")
                                    (("1"
                                      (inst "N vars in box" "k")
                                      (("1"
                                        (with-labels
                                         (flatten "N vars in box")
                                         (("eval box is vs"
                                           "single intervals in box"
                                           "UNKNOWN")))
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (replace
                                             "eval box is vs"
                                             1
                                             :dir
                                             RL)
                                            (("1"
                                              (expand "var_ac" 1)
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "eval_ac_noise"
                                                       2)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand_ol)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (expand_ol)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "nextfreeidx")
                                                                                    (("1"
                                                                                      (use
                                                                                       "gnbi_updb_2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (use
                                                                                             "member_nats")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "k")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "nextfreeidx")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last_idx_in_box")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          "varac not single value"))
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (use
                                                                                               "power_Epsilon_is_Epsilon")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                "varac not single value"))
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (use
                                                                                     "power_Epsilon_is_Epsilon")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "eval_ac_noise"
                                                       1)
                                                      (("2"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand_ol)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (use
                                                                         "power_Epsilon_is_Epsilon")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces
                                                 "single intervals in box"
                                                 1
                                                 :dir
                                                 RL)
                                                (("2"
                                                  (use "gnbi_updb_2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (replaces
                                                         "nwidxs"
                                                         -1)
                                                        (("1"
                                                          (use
                                                           "member_nats")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "k")
                                                                (("1"
                                                                  (typepred
                                                                   "nextfreeidx")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1
                                                      "varac not single value"))
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (use
                                                           "power_Epsilon_is_Epsilon")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "compatible_pairs_on?")
                                  (("2"
                                    (skolem 1 "k")
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (expand
                                               "eval_ACExpr_Env"
                                               1)
                                              (("1"
                                                (replaces "acRes")
                                                (("1"
                                                  (lemma
                                                   "containment_pow_var_ac")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "upd_noise_burst(N,
                                    nats(nextfreeidx, newoff - 1),
                                    LAMBDA
                                    (i: nat):
                                    (get_noise_by_idx(car(pd(varac))`1, N)
                                     ^
                                     (2 + i)))"
                                                     "vs(varidx(re))"
                                                     "varac"
                                                     "pow"
                                                     "nwidxs")
                                                    (("1"
                                                      (replace "re" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           "re"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "vars_in_box_compatible?")
                                                                  (("1"
                                                                    (inst
                                                                     "N vars in box"
                                                                     "idx")
                                                                    (("1"
                                                                      (replace
                                                                       "varac"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth_ac"
                                                                         1)
                                                                        (("1"
                                                                          (with-labels
                                                                           (flatten
                                                                            "N vars in box")
                                                                           (("box eval"
                                                                             "box sing int"
                                                                             "UNKNOWN")))
                                                                          (("1"
                                                                            (replace
                                                                             "box eval"
                                                                             1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (use
                                                                               "eval_updb_no_idxs")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     1
                                                                                     "j")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (use
                                                                                         "member_nats")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "nextfreeidx")
                                                                                              (("1"
                                                                                                (use
                                                                                                 "last_idx_box")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  "varac not single value"))
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (use
                                                                                     "power_Epsilon_is_Epsilon")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (reveal
                                                                                       "varac")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         "varac")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth_ac")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  "varac not single value"
                                                                                  "varac"))
                                                                                (("3"
                                                                                  (replaces
                                                                                   "varac")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "nth_ac")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "length")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replaces
                                                                     "nwidxs"
                                                                     -1)
                                                                    (("2"
                                                                      (use
                                                                       "member_nats")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replaces
                                                                             "varac")
                                                                            (("2"
                                                                              (typepred
                                                                               "nextfreeidx")
                                                                              (("2"
                                                                                (use
                                                                                 "last_idx_box")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (use
                                                                   "pow_var_compatible_noise")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replaces
                                                                     "varac")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("2"
                                                        (replaces
                                                         "varac")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (use
                                                             "power_Epsilon_is_Epsilon")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("3"
                                                        (replaces
                                                         "varac")
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               "cache comp pairs on"
                                               "k-1")
                                              (("2"
                                                (with-labels
                                                 (flatten
                                                  "cache comp pairs on")
                                                 (("eval cache"
                                                   "cache if powvar"
                                                   "UNKNOWN")))
                                                (("2"
                                                  (replaces
                                                   "eval cache"
                                                   2
                                                   :dir
                                                   RL)
                                                  (("2"
                                                    (use
                                                     "eval_updb_no_idxs")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (skolem
                                                           1
                                                           "i")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (use
                                                               "member_nats")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "idxs_bounded")
                                                                    (("1"
                                                                      (inst
                                                                       "cache idxs bound"
                                                                       "k-1")
                                                                      (("1"
                                                                        (expand
                                                                         "next_idx")
                                                                        (("1"
                                                                          (lemma
                                                                           "beyond_last_idx_notmember")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "i"
                                                                             "pd(nth(cache, k - 1)`2)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "idxs_ac")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("2"
                                                        (replaces
                                                         "varac")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (use
                                                             "power_Epsilon_is_Epsilon")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("3"
                                                        (replaces
                                                         "varac")
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (replace "re" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "pow_var_compatible_noise")
                                                  (("1"
                                                    (replaces "nwidxs")
                                                    (("1"
                                                      (replaces
                                                       "varac")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 "cache comp pairs on"
                                                 "k-1")
                                                (("2"
                                                  (with-labels
                                                   (flatten
                                                    "cache comp pairs on")
                                                   (("eval cache"
                                                     "cache if powvar"
                                                     "UNKNOWN")))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "pow_var_compatible?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skolem
                                                             2
                                                             "j")
                                                            (("2"
                                                              (inst
                                                               "cache if powvar"
                                                               "j")
                                                              (("2"
                                                                (case
                                                                 "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                            0)`1,
                        upd_noise_burst(N,
                                        nats(nextfreeidx, newoff - 1),
                                        LAMBDA
                                        (i: nat):
                                        (get_noise_by_idx
                                         (car(pd(varac))`1, N)
                                         ^
                                         (2 + i)))) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                            0)`1,
                        N)")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (case
                                                                     "get_noise_by_idx(nth(nth(cache, k - 1)`3, j),
                       upd_noise_burst(N,
                                       nats(nextfreeidx, newoff - 1),
                                       LAMBDA
                                       (i: nat):
                                       (get_noise_by_idx
                                        (car(pd(varac))`1, N)
                                        ^
                                        (2 + i)))) = get_noise_by_idx(nth(nth(cache, k - 1)`3, j),
                       N)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (use
                                                                         "gnbi_updb_2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             1)
                                                                            (("1"
                                                                              (use
                                                                               "member_nats")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (use
                                                                                         "cache_powvar_correct")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "CacheData_correct?")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4
                                                                                               "cache idxs bound")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "next_idx_pow_var_ac")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1
                                                                                                   :where
                                                                                                   "cache idxs bound")
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replaces
                                                                                                           -1
                                                                                                           "cache idxs bound")
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "j")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-1
                                                                                                                -6
                                                                                                                "cache idxs bound"))
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "nth_ol[nat,<]")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "length")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("3"
                                                                            (expand
                                                                             "length")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (use
                                                                     "gnbi_updb_2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (use
                                                                           "member_nats")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (typepred
                                                                                 "nextfreeidx")
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth_ac"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst
                                                                                       "cache idxs bound"
                                                                                       "k-1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "next_idx")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "somevidx"
                                                                                           "varidx(nth(cache, k - 1)`1)")
                                                                                          (("1"
                                                                                            (use
                                                                                             "last_idx_box")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "next_idx")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "last_idx")
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "olidx_car_last[nzBaseType]")
                                                                                                        (("1"
                                                                                                          (expand_ol)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -4
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth_ac")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          -7))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        "varac not single value"))
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (use
                                                                             "power_Epsilon_is_Epsilon")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide-all-but
                                                                       (1
                                                                        "varac not single value"))
                                                                      (("3"
                                                                        (expand
                                                                         "length")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (use
                                                                       "power_Epsilon_is_Epsilon")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("4"
                                                                    (expand
                                                                     "length")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but
                                 (1 "varac not single value"))
                                (("2"
                                  (skeep)
                                  (("2"
                                    (use "power_Epsilon_is_Epsilon")
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace "newoff" 1)
                  (("3" (expand ">=")
                    (("3"
                      (case "nextfreeidx - opn(val(cached)`1) + pow = nextfreeidx + (pow - opn(val(cached)`1))")
                      (("1" (replaces -1)
                        (("1" (case "0 < pow - opn(val(cached)`1)")
                          (("1" (hide-all-but (1 -1))
                            (("1"
                              (name-replace "A"
                               "pow - opn(val(cached)`1)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace "newoff" 1)
                  (("4" (expand "idxs_bounded" 1)
                    (("4" (skeep)
                      (("4" (case "i=0")
                        (("1" (replaces -1)
                          (("1" (expand "nth" 1)
                            (("1" (replace "acRes" 1)
                              (("1"
                                (use "next_idx_pow_var_ac")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace "varac" 1)
                                          (("1"
                                            (typepred "nextfreeidx")
                                            (("1"
                                              (use "last_idx_box")
                                              (("1"
                                                (case
                                                 "nextfreeidx - opn(val(cached)`1) + pow = nextfreeidx + (pow - opn(val(cached)`1))")
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (case
                                                     "0 < pow - opn(val(cached)`1)")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 -2 -3 1))
                                                      (("1"
                                                        (name-replace
                                                         "A"
                                                         "pow - opn(val(cached)`1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace "nwidxs" 2)
                                          (("2"
                                            (lift-if 2)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case
                                                   "pow - 1 = opn(val(cached)`1)")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     1
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "nth(append(take[nat](pownoises, pow - 2),
                   nats(nextfreeidx, newoff - 1)),
            pow - 2) = nextfreeidx")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (use
                                                             "nth_append[nat]")
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               1)
                                                              (("1"
                                                                (use
                                                                 "length_take[nat]")
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (case
                                                                             "length(pownoises) = pow - 2")
                                                                            (("1"
                                                                              (replaces
                                                                               -1
                                                                               2)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "length(pownoises) > opn(val(cached)`1) - 2")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 "pownoises"
                                                                                 1)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "cached")
                                                                                  (("2"
                                                                                    (use
                                                                                     "cache_powvar_correct_result")
                                                                                    (("2"
                                                                                      (with-labels
                                                                                       (typepred
                                                                                        "cache")
                                                                                       (("cache compatible pairs"
                                                                                         "cache idxs bounded"
                                                                                         "cache correct"
                                                                                         "UNKNOWN")))
                                                                                      (("2"
                                                                                        (with-labels
                                                                                         (assert)
                                                                                         (("cached correct")))
                                                                                        (("2"
                                                                                          (replace
                                                                                           "cached"
                                                                                           "cached correct"
                                                                                           :dir
                                                                                           RL)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "CacheData_correct?"
                                                                                             "cached correct")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "cached")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         "varac"
                                                                                                         "varac not single value")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           "cached correct")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             "re"
                                                                                                             "cached correct")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "length_take[nat]")
                                                              (("2"
                                                                (replaces
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "nth_append[nat]")
                                                    (("1"
                                                      (replaces -1 2)
                                                      (("1"
                                                        (case
                                                         "nth(nats(nextfreeidx, newoff - 1),
           pow - 2 - length(take[nat](pownoises, opn(val(cached)`1) - 1))) = newoff -1 ")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           2)
                                                          (("1"
                                                            (replace
                                                             "newoff"
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "length(take[nat](pownoises, opn(val(cached)`1) - 1)) = opn(val(cached)`1) - 1")
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replaces
                                                               "newoff"
                                                               1)
                                                              (("1"
                                                                (typepred
                                                                 "nats(nextfreeidx, nextfreeidx - opn(val(cached)`1) + pow - 1)")
                                                                (("1"
                                                                  (inst?
                                                                   -5)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "length_take[nat]")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "min"
                                                                 1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replaces
                                                                         "pownoises"
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "cache_powvar_correct_result")
                                                                          (("2"
                                                                            (with-labels
                                                                             (typepred
                                                                              "cache")
                                                                             (("cache compatible pairs"
                                                                               "cache idxs bounded"
                                                                               "cache correct"
                                                                               "UNKNOWN")))
                                                                            (("2"
                                                                              (with-labels
                                                                               (assert)
                                                                               (("cached correct")))
                                                                              (("2"
                                                                                (expand
                                                                                 "CacheData_correct?"
                                                                                 "cached correct")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "cached")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             "cached"
                                                                                             "cached correct"
                                                                                             :dir
                                                                                             RL)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               "cached correct")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 "re"
                                                                                                 "cached correct")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (case
                                                           "length[nat](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) = opn(val[CacheData](cached)`1) - 1")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "length_take[nat]")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "min"
                                                                 1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replaces
                                                                         "pownoises"
                                                                         1)
                                                                        (("2"
                                                                          (use
                                                                           "cache_powvar_correct_result")
                                                                          (("2"
                                                                            (with-labels
                                                                             (typepred
                                                                              "cache")
                                                                             (("cache compatible pairs"
                                                                               "cache idxs bounded"
                                                                               "cache correct"
                                                                               "UNKNOWN")))
                                                                            (("2"
                                                                              (with-labels
                                                                               (assert)
                                                                               (("cached correct")))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "length[nat](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) = opn(val[CacheData](cached)`1) - 1")
                                                      (("1"
                                                        (replaces -1 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "length_take[nat]")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "min"
                                                               1)
                                                              (("1"
                                                                (lift-if
                                                                 1)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (replaces
                                                                       "pownoises"
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "cache_powvar_correct_result")
                                                                        (("2"
                                                                          (with-labels
                                                                           (typepred
                                                                            "cache")
                                                                           (("cache compatible pairs"
                                                                             "cache idxs bounded"
                                                                             "cache correct"
                                                                             "UNKNOWN")))
                                                                          (("2"
                                                                            (with-labels
                                                                             (assert)
                                                                             (("cached correct")))
                                                                            (("2"
                                                                              (expand
                                                                               "CacheData_correct?"
                                                                               "cached correct")
                                                                              (("2"
                                                                                (typepred
                                                                                 "cached")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (replace
                                                                                           "cached"
                                                                                           "cached correct"
                                                                                           :dir
                                                                                           RL)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2
                                                                                             "cached correct")
                                                                                            (("2"
                                                                                              (replace
                                                                                               "re"
                                                                                               "cached correct")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace "newoff" 2)
                                                  (("2"
                                                    (typepred
                                                     "nats(nextfreeidx, nextfreeidx - opn(val(cached)`1) + pow - 1)")
                                                    (("2"
                                                      (inst? -5)
                                                      (("2"
                                                        (replaces -5 3)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (with-labels (typepred "cache")
                           (("cache compatible pairs"
                             "cache idxs bounded" "cache correct"
                             "UNKNOWN")))
                          (("2"
                            (expand "idxs_bounded"
                                    "cache idxs bounded")
                            (("2" (expand "nth" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst "cache idxs bounded" "i-1")
                                  (("2"
                                    (expand ">=")
                                    (("2"
                                      (case
                                       "nextfreeidx - opn(val(cached)`1) + pow = nextfreeidx + (pow - opn(val(cached)`1))")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "0 < pow - opn(val(cached)`1)")
                                          (("1"
                                            (hide-all-but
                                             (-1
                                              2
                                              "cache idxs bounded"))
                                            (("1"
                                              (name-replace
                                               "A"
                                               "pow - opn(val(cached)`1)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "correct_cache?")
                  (("5" (expand "CacheData_correct?")
                    (("5" (replace "re" 1)
                      (("5" (assert)
                        (("5" (lift-if "nwidxs")
                          (("5" (split "nwidxs")
                            (("1" (flatten)
                              (("1"
                                (replace -2 1)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (use "length_append[nat]")
                                    (("1"
                                      (replaces -1 1)
                                      (("1"
                                        (typepred
                                         "nats(nextfreeidx, newoff - 1)")
                                        (("1"
                                          (replaces -4 2)
                                          (("1"
                                            (case
                                             "length[nat](take[nat](pownoises, opn(val(cached)`1) - 1)) = opn(val(cached)`1) - 1")
                                            (("1"
                                              (replaces -1 2)
                                              (("1"
                                                (replace "newoff" 2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "length_take[nat]")
                                              (("1"
                                                (replaces -1 1)
                                                (("1"
                                                  (expand "min")
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace
                                                           "pownoises")
                                                          (("2"
                                                            (with-labels
                                                             (typepred
                                                              "cache")
                                                             (("cache compatible pairs"
                                                               "cache idxs bounded"
                                                               "cache correct"
                                                               "UNKNOWN")))
                                                            (("2"
                                                              (use
                                                               "cache_powvar_correct_result")
                                                              (("2"
                                                                (with-labels
                                                                 (assert)
                                                                 (("cached correct")))
                                                                (("2"
                                                                  (replace
                                                                   "cached"
                                                                   "cached correct"
                                                                   :dir
                                                                   RL)
                                                                  (("2"
                                                                    (expand
                                                                     "CacheData_correct?"
                                                                     "cached correct")
                                                                    (("2"
                                                                      (typepred
                                                                       "cached")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 "cached correct")
                                                                                (("2"
                                                                                  (replace
                                                                                   "re"
                                                                                   "cached correct")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case
                                       "car(append(take[nat](pownoises, opn(val(cached)`1) - 1),
                 nats(nextfreeidx, newoff - 1))) = car(pownoises)")
                                      (("1"
                                        (replaces -1 2)
                                        (("1"
                                          (with-labels
                                           (typepred "cache")
                                           (("cache compatible pairs"
                                             "cache idxs bounded"
                                             "cache correct"
                                             "UNKNOWN")))
                                          (("1"
                                            (use
                                             "cache_powvar_correct_result")
                                            (("1"
                                              (with-labels
                                               (assert)
                                               (("cached correct")))
                                              (("1"
                                                (replace
                                                 "cached"
                                                 "cached correct"
                                                 :dir
                                                 RL)
                                                (("1"
                                                  (expand
                                                   "CacheData_correct?"
                                                   "cached correct")
                                                  (("1"
                                                    (typepred "cached")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (split
                                                               "cached correct")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     "cached correct")
                                                                    (("1"
                                                                      (replace
                                                                       "re"
                                                                       "cached correct")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "length")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 "varac"
                                                                 "varac not single value")
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   "cached correct")
                                                                  (("2"
                                                                    (replace
                                                                     "re"
                                                                     "cached correct")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "append" 1)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "take" -1)
                                                (("1"
                                                  (case
                                                   "length(pownoises) >= opn(val(cached)`1) - 1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -1)
                                                    (("2"
                                                      (replace
                                                       "pownoises"
                                                       1)
                                                      (("2"
                                                        (with-labels
                                                         (typepred
                                                          "cache")
                                                         (("cache compatible pairs"
                                                           "cache idxs bounded"
                                                           "cache correct"
                                                           "UNKNOWN")))
                                                        (("2"
                                                          (use
                                                           "cache_powvar_correct_result")
                                                          (("2"
                                                            (with-labels
                                                             (assert)
                                                             (("cached correct")))
                                                            (("2"
                                                              (replace
                                                               "cached"
                                                               "cached correct"
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (expand
                                                                 "CacheData_correct?"
                                                                 "cached correct")
                                                                (("2"
                                                                  (typepred
                                                                   "cached")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replace
                                                                             "varac"
                                                                             "varac not single value")
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               "cached correct")
                                                                              (("2"
                                                                                (replace
                                                                                 "re"
                                                                                 "cached correct")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "take" 2)
                                                  (("2"
                                                    (case
                                                     "length(pownoises) >= opn(val(cached)`1) - 1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replace
                                                       "pownoises"
                                                       1)
                                                      (("2"
                                                        (with-labels
                                                         (typepred
                                                          "cache")
                                                         (("cache compatible pairs"
                                                           "cache idxs bounded"
                                                           "cache correct"
                                                           "UNKNOWN")))
                                                        (("2"
                                                          (use
                                                           "cache_powvar_correct_result")
                                                          (("2"
                                                            (with-labels
                                                             (assert)
                                                             (("cached correct")))
                                                            (("2"
                                                              (replace
                                                               "cached"
                                                               "cached correct"
                                                               :dir
                                                               RL)
                                                              (("2"
                                                                (expand
                                                                 "CacheData_correct?"
                                                                 "cached correct")
                                                                (("2"
                                                                  (typepred
                                                                   "cached")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replace
                                                                             "varac"
                                                                             "varac not single value")
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               "cached correct")
                                                                              (("2"
                                                                                (replace
                                                                                 "re"
                                                                                 "cached correct")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (replace "pownoises" 1)
                                        (("3"
                                          (with-labels
                                           (typepred "cache")
                                           (("cache compatible pairs"
                                             "cache idxs bounded"
                                             "cache correct"
                                             "UNKNOWN")))
                                          (("3"
                                            (use
                                             "cache_powvar_correct_result")
                                            (("3"
                                              (with-labels
                                               (assert)
                                               (("cached correct")))
                                              (("3"
                                                (replace
                                                 "cached"
                                                 "cached correct"
                                                 :dir
                                                 RL)
                                                (("3"
                                                  (expand
                                                   "CacheData_correct?"
                                                   "cached correct")
                                                  (("3"
                                                    (typepred "cached")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (split
                                                               "cached correct")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 "varac"
                                                                 "varac not single value")
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   "cached correct")
                                                                  (("2"
                                                                    (replace
                                                                     "re"
                                                                     "cached correct")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4" (assert) nil nil)
                                       ("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 2)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (typepred
                                     "nats(nextfreeidx, newoff - 1)")
                                    (("1"
                                      (replace -4 2)
                                      (("1"
                                        (replace "newoff" 2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (typepred
                                       "nats(nextfreeidx, newoff - 1)")
                                      (("1"
                                        (inst -5 "0")
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (replace -5 3)
                                            (("1"
                                              (typepred "nextfreeidx")
                                              (("1"
                                                (use "last_idx_box")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -4 1)
                                          (("2"
                                            (replace "newoff" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordered_list type-eq-decl nil ordered_list nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (power_Epsilon_is_Epsilon formula-decl nil affine_pow nil)
    (member_nats formula-decl nil affine_pow nil)
    (gnbi_updb_2 formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (powvar_comp_noise_extension formula-decl nil affine_pow nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (nth_ol formula-decl nil ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (represents_var? const-decl "bool" affine nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (last_idx_box formula-decl nil affine_box nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (eval_updb_no_idxs formula-decl nil affine nil)
    (beyond_last_idx_notmember formula-decl nil affine nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (nzBaseType type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (factorial def-decl "posnat" factorial "ints/")
    (C const-decl "posnat" binomial "reals/")
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= car(idxs)}"
     affine_pow nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (SingInterval? const-decl "bool" affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (pow_var_compatible_noise formula-decl nil affine_pow nil)
    (containment_pow_var_ac formula-decl nil affine_pow nil)
    (take def-decl "list[T]" list_more_props nil)
    (nth_append formula-decl nil list_more_props nil)
    (length_take formula-decl nil list_more_props nil))
   nil)
  (RE2AC_TCC54-1 nil 3631466640 ("" (cases-tcc) nil nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (next_idx const-decl "nat" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil))
   shostak))
 (RE2AC_TCC55 0
  (RE2AC_TCC55-1 nil 3631554556 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_idx const-decl "nat" affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (RE2AC_TCC56 0
  (RE2AC_TCC56-1 nil 3631622080 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (RE2AC_TCC57 0
  (RE2AC_TCC57-2 nil 3631793678
   ("" (skeep*)
    (("" (replaces -5)
      (("" (typepred "nats(nextfreeidx, newoff - 1)")
        (("1" (replaces -4)
          (("1" (split 8)
            (("1" (replaces -8) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (expand "car_ol")
                (("2" (replaces -3)
                  (("2" (expand "next_idx")
                    (("2" (use "last_idx_box")
                      (("2" (replaces -6)
                        (("2" (expand "next_idx")
                          (("2" (typepred "nextfreeidx")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replaces -4) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car_ol const-decl "T" ordered_list nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil)
  (RE2AC_TCC57-1 nil 3631622080 ("" (subtype-tcc) nil nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil))
   nil))
 (RE2AC_TCC58 0
  (RE2AC_TCC58-1 nil 3631622080
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (represents_var? const-decl "bool" affine nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (RE2AC_TCC59 0
  (RE2AC_TCC59-4 nil 3632075985
   ("" (skeep*)
    ((""
      (apply (then (label "re" -1) (label "varac" -2)
              (label "cached some" -3) (label "cached" -4)
              (label "idxs" -5) (label "pownoises" -6)
              (label "newoff" -7) (label "nwidxs" -8) (label "idx" 1)
              (label "pow <= 1" 2) (label "varac not single value" 3)
              (label "cv not 0" 4) (label "not in cache 2" 5)
              (label "not in cache 1" 6)))
      ((""
        (with-labels (split "not in cache 1")
         (("pow gt opn cached`1")))
        ((""
          (with-labels (split "not in cache 2")
           (("pow gt opn cached`1")))
          (("1" (expand "/=") (("1" (propax) nil nil)) nil)
           ("2" (replaces "nwidxs" 7)
            (("2" (split 7)
              (("1" (use "cache_powvar_correct_result")
                (("1" (with-labels (assert) (("cached correct")))
                  (("1" (replace "cached" "cached correct" :dir RL)
                    (("1"
                      (expand "CacheData_correct?" "cached correct")
                      (("1" (typepred "cached")
                        (("1" (assert)
                          (("1"
                            (with-labels (flatten)
                             (("cached`1 is powvar" "cached`1 varidx"
                               "cached cache idx" "UNKNOWN")))
                            (("1" (assert)
                              (("1"
                                (with-labels
                                 (flatten)
                                 (("cached idx in box"
                                   "cached cond ok"
                                   "cached`2 is powvarac"
                                   "UNKNOWN")))
                                (("1"
                                  (split "cached cond ok")
                                  (("1"
                                    (split "cached correct")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (name
                                         "nwidxs2"
                                         "append_ol[nat,<](take[nat](pownoises, opn(val(cached)`1) - 2+1), nats(nextfreeidx, newoff - 1))")
                                        (("1"
                                          (typepred "nwidxs2")
                                          (("1"
                                            (expand "append_ol")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "appendable_ol?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (case
                                               "last_ol[nat,<](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) = nth(pownoises,  opn(val[CacheData](cached)`1) - 2)")
                                              (("1"
                                                (replaces -1 3)
                                                (("1"
                                                  (case
                                                   "first_ol[nat,<](nats(nextfreeidx, newoff - 1)) = nextfreeidx")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     3
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (with-labels
                                                       (typepred
                                                        "cache")
                                                       (("cache compatible pairs"
                                                         "cache idxs bounded"
                                                         "cache correct"
                                                         "UNKNOWN")))
                                                      (("1"
                                                        (skeep
                                                         "cached cache idx")
                                                        (("1"
                                                          (hide 4)
                                                          (("1"
                                                            (replace
                                                             "pownoises"
                                                             1)
                                                            (("1"
                                                              (replace
                                                               "cached cache idx"
                                                               1
                                                               :dir
                                                               RL)
                                                              (("1"
                                                                (replace
                                                                 "cached cache idx"
                                                                 "cached`2 is powvarac"
                                                                 :dir
                                                                 RL)
                                                                (("1"
                                                                  (expand
                                                                   "idxs_bounded")
                                                                  (("1"
                                                                    (expand
                                                                     "nth_ac")
                                                                    (("1"
                                                                      (replace
                                                                       "pownoises")
                                                                      (("1"
                                                                        (inst
                                                                         "cache correct"
                                                                         "i")
                                                                        (("1"
                                                                          (replace
                                                                           "cached`2 is powvarac")
                                                                          (("1"
                                                                            (use
                                                                             "next_idx_pow_var_ac")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1
                                                      3
                                                      "cached correct"
                                                      "pow gt opn cached`1"))
                                                    (("2"
                                                      (replaces -2 1)
                                                      (("2"
                                                        (expand
                                                         "nats"
                                                         1)
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (expand
                                                                   "first_ol")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "last_take_nth[nat,<]")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (assert) nil nil)
                                               ("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use "take_ol[nat,<]")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (replace
                                     "cached`1 varidx"
                                     "cached cond ok")
                                    (("2"
                                      (hide-all-but
                                       ("varac"
                                        "varac not single value"
                                        "cached cond ok"
                                        "re"))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (split 1)
                      (("1" (use "length_append[nat]")
                        (("1" (replaces -1)
                          (("1"
                            (typepred "nats(nextfreeidx, newoff - 1)")
                            (("1" (replaces -4 2)
                              (("1"
                                (use "length_take[nat]")
                                (("1"
                                  (replaces -1 2)
                                  (("1"
                                    (case
                                     "length(pownoises) > opn(val(cached)`1) - 2")
                                    (("1"
                                      (expand "min" 2)
                                      (("1"
                                        (lift-if 2)
                                        (("1"
                                          (case
                                           "length(pownoises) = opn(val(cached)`1) - 1")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace "pownoises" 1)
                                      (("2"
                                        (with-labels
                                         (typepred "cache")
                                         (("cache compatible pairs"
                                           "cache idxs bounded"
                                           "cache correct"
                                           "UNKNOWN")))
                                        (("2"
                                          (use
                                           "cache_powvar_correct_result")
                                          (("2"
                                            (with-labels
                                             (assert)
                                             (("cached correct")))
                                            (("2"
                                              (replace
                                               "cached"
                                               "cached correct"
                                               :dir
                                               RL)
                                              (("2"
                                                (expand
                                                 "CacheData_correct?"
                                                 "cached correct")
                                                (("2"
                                                  (typepred "cached")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (with-labels
                                                       (flatten)
                                                       (("cached`1 is powvar"
                                                         "cached`1 varidx"
                                                         "cached cache idx"
                                                         "UNKNOWN")))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (with-labels
                                                           (flatten)
                                                           (("cached idx in box"
                                                             "cached cond ok"
                                                             "cached`2 is powvarac"
                                                             "UNKNOWN")))
                                                          (("2"
                                                            (replace
                                                             "cached`1 varidx"
                                                             "cached cond ok")
                                                            (("2"
                                                              (hide-all-but
                                                               ("varac"
                                                                "varac not single value"
                                                                "cached cond ok"
                                                                "re"))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil) ("3" (assert) nil nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replace "pownoises" 2)
                          (("2"
                            (with-labels (typepred "cache")
                             (("cache compatible pairs"
                               "cache idxs bounded" "cache correct"
                               "UNKNOWN")))
                            (("2" (use "cache_powvar_correct_result")
                              (("2"
                                (with-labels
                                 (assert)
                                 (("cached correct")))
                                (("2"
                                  (replace
                                   "cached"
                                   "cached correct"
                                   :dir
                                   RL)
                                  (("2"
                                    (expand
                                     "CacheData_correct?"
                                     "cached correct")
                                    (("2"
                                      (typepred "cached")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (with-labels
                                           (flatten)
                                           (("cached`1 is powvar"
                                             "cached`1 varidx"
                                             "cached cache idx"
                                             "UNKNOWN")))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (with-labels
                                               (flatten)
                                               (("cached idx in box"
                                                 "cached cond ok"
                                                 "cached`2 is powvarac"
                                                 "UNKNOWN")))
                                              (("2"
                                                (replace
                                                 "cached`1 varidx"
                                                 "cached cond ok")
                                                (("2"
                                                  (split
                                                   "cached cond ok")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replaces
                                                       "varac"
                                                       2)
                                                      (("1"
                                                        (replace
                                                         "re"
                                                         "cached cond ok")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "car[nat]
                                          (append(take[nat](val(cached)`3, opn(val(cached)`1) - 2 + 1),
                                                  nats(nextfreeidx, newoff - 1))) = car(val(cached)`3)")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "take"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "append"
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     ("varac"
                                                      "varac not single value"
                                                      "cached cond ok"
                                                      "re"))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (typepred "nats(nextfreeidx, newoff - 1)")
                        (("1" (replace -4 2)
                          (("1" (replace "newoff" 2)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "nats" 2)
                          (("2" (replace "newoff" 2)
                            (("2" (lift-if 2)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace "varac" 1)
                                      (("1"
                                        (typepred "nextfreeidx")
                                        (("1"
                                          (use "last_idx_box")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand_ol)
                                    (("2"
                                      (replace "varac" 2)
                                      (("2"
                                        (typepred "nextfreeidx")
                                        (("2"
                                          (use "last_idx_box")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (take_ol formula-decl nil ordered_list nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last_ol def-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (last_idx const-decl "int" indexed_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Noise type-eq-decl nil affine nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (next_idx const-decl "nat" affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (represents_var? const-decl "bool" affine nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (cached skolem-const-decl "{res: Maybe[CacheData] |
         some?(res) IMPLIES
          powvar?(val(res)`1) AND
           varidx(val(res)`1) = varidx(re) AND
            (EXISTS (i: below(length(cache))): nth(cache, i) = val(res))}"
     affine_expr_Eval_fnd nil)
    (pownoises skolem-const-decl
     "ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]"
     affine_expr_Eval_fnd nil)
    (last_take_nth formula-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (take def-decl "list[T]" list_more_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (<= const-decl "bool" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (cache_powvar_correct_result formula-decl nil affine_expr_Eval_fnd
     nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (length_take formula-decl nil list_more_props nil)
    (newoff skolem-const-decl "int" affine_expr_Eval_fnd nil)
    (length_append formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (last_idx_box formula-decl nil affine_box nil))
   nil)
  (RE2AC_TCC59-3 nil 3632063218
   ("" (skeep*)
    (("" (assert)
      (("" (hide -8)
        ((""
          (apply (then (label "re" -1) (label "varac" -2)
                  (label "cached" -3) (label "newoff" -4)
                  (label "nwidxs" -5) (label "acRes" -6)
                  (label "result" -7) (label "idx" 1)
                  (label "pow <= 1" 2)
                  (label "varac not single value" 3)
                  (label "not in cache 3" 4) (label "not in cache 2" 5)
                  (label "not in cache 1" 6)))
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (split 7)
                  (("1"
                    (inst 1 "(: (POWVAR(idx, pow), acRes, nwidxs) :)")
                    (("1" (grind) nil nil)) nil)
                   ("2"
                    (with-labels (typepred "cache")
                     (("cache comp pairs" "cache idxs bound"
                       "cache correct" "UNKNOWN")))
                    (("2" (expand "compatible_pairs?")
                      (("2"
                        (with-labels (skeep "cache comp pairs")
                         (("N vars in box" "cache comp pairs on"
                           "UNKNOWN")))
                        (("2"
                          (inst 1
                           "upd_noise_burst(N, nwidxs, LAMBDA(i:nat): (get_noise_by_idx(nth(pd(varac),0)`1, N)^(i+2)))")
                          (("1" (split 1)
                            (("1" (expand "vars_in_box_compatible?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst "N vars in box" "i_1")
                                  (("1"
                                    (with-labels
                                     (flatten)
                                     (("eval box is vs"
                                       "single intervals in box"
                                       "UNKNOWN")))
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (replace
                                         "eval box is vs"
                                         1
                                         :dir
                                         RL)
                                        (("1"
                                          (expand "var_ac" 1)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "eval_ac_noise"
                                                   2)
                                                  (("1"
                                                    (use
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand_ol)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (expand_ol)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (use
                                                                         "eval_pd_noise_rec_pds_def")
                                                                        (("1"
                                                                          (expand_ol)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (typepred
                                                                                 "nextfreeidx")
                                                                                (("1"
                                                                                  (use
                                                                                   "gnbi_updb_2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         "nwidxs"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "member_nats")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "i_1")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "nextfreeidx")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "last_idx_in_box")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             "newoff"
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                "pow <= 1"))
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      "varac not single value"))
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "power_Epsilon_is_Epsilon")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (use
                                                                                 "power_Epsilon_is_Epsilon")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (use
                                                                           "power_Epsilon_is_Epsilon")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "eval_ac_noise"
                                                   1)
                                                  (("2"
                                                    (use
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand_ol)
                                                        (("2"
                                                          (replaces
                                                           -1
                                                           1)
                                                          (("2"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (expand_ol)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                "varac not single value"))
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "power_Epsilon_is_Epsilon")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replaces
                                             "single intervals in box"
                                             1
                                             :dir
                                             RL)
                                            (("2"
                                              (use "gnbi_updb_2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (replaces
                                                     "nwidxs"
                                                     -1)
                                                    (("1"
                                                      (use
                                                       "member_nats")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (typepred
                                                             "i_1")
                                                            (("1"
                                                              (typepred
                                                               "nextfreeidx")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces
                                                         "newoff"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1
                                                  "varac not single value"))
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "power_Epsilon_is_Epsilon")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compatible_pairs_on?")
                              (("2"
                                (skeep 1)
                                (("2"
                                  (case "i_1=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (expand "eval_ACExpr_Env" 1)
                                        (("1"
                                          (expand
                                           "vars_in_box_compatible?")
                                          (("1"
                                            (inst
                                             "N vars in box"
                                             "idx")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace
                                                 "N vars in box"
                                                 1
                                                 :dir
                                                 RL)
                                                (("1"
                                                  (replace "acRes" 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (use
                                                       "containment_pow_var_ac")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (replaces
                                                               "varac")
                                                              (("1"
                                                                (expand
                                                                 "nth_ac")
                                                                (("1"
                                                                  (use
                                                                   "eval_updb_no_idxs")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (skolem
                                                                         1
                                                                         "k")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (use
                                                                             "idxs_ac_var_ac")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   "nwidxs"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "member_nats")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "nextfreeidx")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replaces
                                                                                       "newoff"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (use
                                                                           "power_Epsilon_is_Epsilon")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (replaces
                                                                 "nwidxs"
                                                                 -1)
                                                                (("2"
                                                                  (use
                                                                   "member_nats")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (typepred
                                                                         "nextfreeidx")
                                                                        (("1"
                                                                          (expand
                                                                           "last_idx_in_box")
                                                                          (("1"
                                                                            (expand
                                                                             ">")
                                                                            (("1"
                                                                              (replaces
                                                                               "varac")
                                                                              (("1"
                                                                                (use
                                                                                 "last_idx_box")
                                                                                (("1"
                                                                                  (expand
                                                                                   ">=")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "next_idx")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "last_idx")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "last_ol")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replaces
                                                                     "newoff"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (use
                                                               "pow_var_compatible_noise")
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1
                                                          "varac not single value"))
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (use
                                                               "power_Epsilon_is_Epsilon")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (1
                                                          "varac not single value"))
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "pow_var_compatible_noise")
                                                      (("1"
                                                        (replace
                                                         "varac"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     "cache comp pairs on"
                                     "i_1 -1 ")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replaces
                                             "cache comp pairs on"
                                             2
                                             :dir
                                             RL)
                                            (("1"
                                              (split 2)
                                              (("1"
                                                (use
                                                 "eval_updb_no_idxs")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "idxs_bounded")
                                                        (("2"
                                                          (inst
                                                           "cache idxs bound"
                                                           "i_1 - 1")
                                                          (("2"
                                                            (expand
                                                             "idxs_ac")
                                                            (("2"
                                                              (expand
                                                               "next_idx")
                                                              (("2"
                                                                (use
                                                                 "beyond_last_idx_notmember")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replaces
                                                                     "nwidxs"
                                                                     -1)
                                                                    (("2"
                                                                      (use
                                                                       "member_nats")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (replaces
                                                                         "newoff"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (1
                                                    "varac not single value"))
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "power_Epsilon_is_Epsilon")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but
                                                   (1
                                                    "varac not single value"))
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "pow_var_compatible?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (case
                                                               "get_noise_by_idx(nth(nth(cache, i_1 - 1)`3, i_2),
                                                             upd_noise_burst(N,
                                                                             nwidxs,
                                                                             LAMBDA
                                                                             (i: nat):
                                                                             (get_noise_by_idx
                                                                              (car(pd(varac))`1, N)
                                                                              ^
                                                                              (2 + i)))) = get_noise_by_idx(nth(nth(cache, i_1 - 1)`3, i_2),
                                                             N)")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, i_1 - 1)`1))),
                                                                      0)`1,
                                                                  upd_noise_burst(N,
                                                                                  nwidxs,
                                                                                  LAMBDA
                                                                                  (i: nat):
                                                                                  (get_noise_by_idx
                                                                                   (car(pd(varac))`1, N)
                                                                                   ^
                                                                                   (2 + i)))) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, i_1 - 1)`1))),
                                                                      0)`1,
                                                                  N)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (use
                                                                       "gnbi_updb_2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             "nwidxs"
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (use
                                                                                 "member_nats")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "last_idx_box")
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "next_idx")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "last_idx")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT null?(pd(nth_ac(box, varidx(nth(cache, i_1 - 1)`1))))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "olidx_car_last[nzBaseType]")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "nextfreeidx")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "car_ol")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   "newoff"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (use
                                                                             "power_Epsilon_is_Epsilon")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("3"
                                                                          (expand
                                                                           "length")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (use
                                                                   "gnbi_updb_2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         "cache comp pairs on")
                                                                        (("1"
                                                                          (replace
                                                                           "nwidxs"
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "member_nats")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst?
                                                                                       "cache idxs bound")
                                                                                      (("1"
                                                                                        (use
                                                                                         "cache_powvar_correct")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "CacheData_correct?")
                                                                                          (("1"
                                                                                            (with-labels
                                                                                             (flatten
                                                                                              -1)
                                                                                             (("cache_k-1`3 length"
                                                                                               "cache_k-1`3 precond hold"
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "UNKNOWN")))
                                                                                            (("1"
                                                                                              (replace
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "cache idxs bound")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "next_idx_pow_var_ac")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1
                                                                                                   :where
                                                                                                   "cache idxs bound")
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           "cache idxs bound")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ">=")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-5
                                                                                                                1
                                                                                                                "cache idxs bound"))
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "nth_ol[nat,<]")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replaces
                                                                               "newoff")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (use
                                                                         "power_Epsilon_is_Epsilon")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "length")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("3"
                                                                      (expand
                                                                       "length")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 (1
                                                                  "varac not single value"))
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (use
                                                                     "power_Epsilon_is_Epsilon")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide-all-but
                                                                 (1
                                                                  "varac not single value"))
                                                                (("4"
                                                                  (expand
                                                                   "length")
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i_1")
                                      (("2"
                                        (hide-all-but (-1 1 2))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (hide-all-but (1 "varac not single value"))
                            (("2" (skeep)
                              (("2"
                                (assert)
                                (("2"
                                  (use "power_Epsilon_is_Epsilon")
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replaces "newoff")
                    (("3" (expand ">=")
                      (("3" (hide-all-but (1 "pow <= 1"))
                        (("3"
                          (case "nextfreeidx - 1 + pow = nextfreeidx + (pow - 1)")
                          (("1" (replaces -1)
                            (("1" (case "1<=(pow - 1)")
                              (("1"
                                (name-replace "A" "pow-1")
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (typepred "cache")
                    (("4" (expand "idxs_bounded")
                      (("4" (skeep)
                        (("4" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (replaces "acRes")
                                (("1"
                                  (use "next_idx_pow_var_ac")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (lift-if 1)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (typepred "nwidxs")
                                            (("1"
                                              (case "length(nwidxs)=0")
                                              (("1" (assert) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (replaces "newoff")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand ">=")
                                                (("2"
                                                  (replaces "nwidxs")
                                                  (("2"
                                                    (typepred
                                                     "nats(nextfreeidx, nextfreeidx - 2 + pow)")
                                                    (("2"
                                                      (inst -5 "pow-2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2"
                                  (replaces "newoff")
                                  (("2"
                                    (hide-all-but (2 -2 "pow <= 1"))
                                    (("2"
                                      (case
                                       "nextfreeidx - 1 + pow = nextfreeidx + (pow - 1)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case "1<=(pow - 1)")
                                          (("1"
                                            (name-replace "A" "pow-1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (expand "correct_cache?")
                    (("5" (expand "CacheData_correct?")
                      (("5" (flatten)
                        (("5" (typepred "nextfreeidx")
                          (("5" (replaces "nwidxs" 2)
                            (("5" (expand "nats" 2)
                              (("5"
                                (lift-if 2)
                                (("5"
                                  (split 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replaces -1 1 :dir RL)
                                        (("1"
                                          (use "last_idx_box")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand_ol)
                                      (("2"
                                        (use "last_idx_box")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (containment_pow_var_ac formula-decl nil affine_pow nil)
    (represents_var? const-decl "bool" affine nil)
    (eval_updb_no_idxs formula-decl nil affine nil)
    (idxs_ac_var_ac formula-decl nil affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (last_idx const-decl "int" indexed_list nil)
    (SingInterval? const-decl "bool" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (last_ol def-decl "T" ordered_list nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx_box formula-decl nil affine_box nil)
    (pow_var_compatible_noise formula-decl nil affine_pow nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (beyond_last_idx_notmember formula-decl nil affine nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= car(idxs)}"
     affine_pow nil)
    (C const-decl "posnat" binomial "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (nth_ol formula-decl nil ordered_list nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (gnbi_updb_2 formula-decl nil affine nil)
    (member_nats formula-decl nil affine_pow nil)
    (power_Epsilon_is_Epsilon formula-decl nil affine_pow nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil))
   nil)
  (RE2AC_TCC59-2 nil 3631872861
   ("" (skeep*)
    (("" (assert)
      (("" (hide -8)
        ((""
          (apply (then (label "re" -1) (label "varac" -2)
                  (label "cached" -3) (label "newoff" -4)
                  (label "nwidxs" -5) (label "acRes" -6)
                  (label "result" -7) (label "idx" 1)
                  (label "pow <= 1" 2)
                  (label "varac not single value" 3)
                  (label "not in cache 3" 4) (label "not in cache 2" 5)
                  (label "not in cache 1" 6)))
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (split 7)
                  (("1"
                    (inst 1 "(: (POWVAR(idx, pow), acRes, nwidxs) :)")
                    (("1" (grind) nil nil)) nil)
                   ("2"
                    (with-labels (typepred "cache")
                     (("cache comp pairs" "cache idxs bound"
                       "UNKNOWN")))
                    (("2" (expand "compatible_pairs?")
                      (("2"
                        (with-labels (skeep "cache comp pairs")
                         (("N vars in box" "cache comp pairs on"
                           "UNKNOWN")))
                        (("2"
                          (inst 1
                           "upd_noise_burst(N, nwidxs, LAMBDA(i:nat): (get_noise_by_idx(nth(pd(varac),0)`1, N)^(i+2)))")
                          (("1" (split 1)
                            (("1" (expand "vars_in_box_compatible?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst "N vars in box" "i_1")
                                  (("1"
                                    (with-labels
                                     (flatten)
                                     (("eval box is vs"
                                       "single intervals in box"
                                       "UNKNOWN")))
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (replace
                                         "eval box is vs"
                                         1
                                         :dir
                                         RL)
                                        (("1"
                                          (expand "var_ac" 1)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "eval_ac_noise"
                                                   2)
                                                  (("1"
                                                    (use
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand_ol)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (expand_ol)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (use
                                                                         "eval_pd_noise_rec_pds_def")
                                                                        (("1"
                                                                          (expand_ol)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (typepred
                                                                                 "nextfreeidx")
                                                                                (("1"
                                                                                  (use
                                                                                   "gnbi_updb_2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         "nwidxs"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "member_nats")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "i_1")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "nextfreeidx")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "last_idx_in_box")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             "newoff"
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                "pow <= 1"))
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      "varac not single value"))
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "power_Epsilon_is_Epsilon")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (use
                                                                                 "power_Epsilon_is_Epsilon")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (use
                                                                           "power_Epsilon_is_Epsilon")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "eval_ac_noise"
                                                   1)
                                                  (("2"
                                                    (use
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand_ol)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (expand_ol)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                "varac not single value"))
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "power_Epsilon_is_Epsilon")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replaces
                                             "single intervals in box"
                                             1
                                             :dir
                                             RL)
                                            (("2"
                                              (use "gnbi_updb_2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (replaces
                                                     "nwidxs"
                                                     -1)
                                                    (("1"
                                                      (use
                                                       "member_nats")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (typepred
                                                             "i_1")
                                                            (("1"
                                                              (typepred
                                                               "nextfreeidx")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces
                                                         "newoff"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1
                                                  "varac not single value"))
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "power_Epsilon_is_Epsilon")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compatible_pairs_on?")
                              (("2"
                                (skeep 1)
                                (("2"
                                  (case "i_1=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (expand "eval_ACExpr_Env" 1)
                                        (("1"
                                          (expand
                                           "vars_in_box_compatible?")
                                          (("1"
                                            (inst
                                             "N vars in box"
                                             "idx")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace
                                                 "N vars in box"
                                                 1
                                                 :dir
                                                 RL)
                                                (("1"
                                                  (replace "acRes" 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (use
                                                       "containment_pow_var_ac")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (replaces
                                                               "varac")
                                                              (("1"
                                                                (expand
                                                                 "nth_ac")
                                                                (("1"
                                                                  (use
                                                                   "eval_updb_no_idxs")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (skolem
                                                                         1
                                                                         "k")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (use
                                                                             "idxs_ac_var_ac")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   "nwidxs"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "member_nats")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "nextfreeidx")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replaces
                                                                                       "newoff"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (use
                                                                           "power_Epsilon_is_Epsilon")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (replaces
                                                                 "nwidxs"
                                                                 -1)
                                                                (("2"
                                                                  (use
                                                                   "member_nats")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (typepred
                                                                         "nextfreeidx")
                                                                        (("1"
                                                                          (expand
                                                                           "last_idx_in_box")
                                                                          (("1"
                                                                            (expand
                                                                             ">")
                                                                            (("1"
                                                                              (replaces
                                                                               "varac")
                                                                              (("1"
                                                                                (use
                                                                                 "last_idx_box")
                                                                                (("1"
                                                                                  (expand
                                                                                   ">=")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "next_idx")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "last_idx")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "last_ol")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replaces
                                                                     "newoff"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (use
                                                               "pow_var_compatible_noise")
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1
                                                          "varac not single value"))
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (use
                                                               "power_Epsilon_is_Epsilon")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (1
                                                          "varac not single value"))
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "pow_var_compatible_noise")
                                                      (("1"
                                                        (replace
                                                         "varac"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     "cache comp pairs on"
                                     "i_1 -1 ")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replaces
                                             "cache comp pairs on"
                                             2
                                             :dir
                                             RL)
                                            (("1"
                                              (split 2)
                                              (("1"
                                                (use
                                                 "eval_updb_no_idxs")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "idxs_bounded")
                                                        (("2"
                                                          (inst
                                                           "cache idxs bound"
                                                           "i_1 - 1")
                                                          (("2"
                                                            (expand
                                                             "idxs_ac")
                                                            (("2"
                                                              (expand
                                                               "next_idx")
                                                              (("2"
                                                                (use
                                                                 "beyond_last_idx_notmember")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replaces
                                                                     "nwidxs"
                                                                     -1)
                                                                    (("2"
                                                                      (use
                                                                       "member_nats")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (replaces
                                                                         "newoff"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (1
                                                    "varac not single value"))
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "power_Epsilon_is_Epsilon")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but
                                                   (1
                                                    "varac not single value"))
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "pow_var_compatible?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (case
                                                               "get_noise_by_idx(nth(nth(cache, i_1 - 1)`3, i_2),
                       upd_noise_burst(N,
                                       nwidxs,
                                       LAMBDA
                                       (i: nat):
                                       (get_noise_by_idx
                                        (car(pd(varac))`1, N)
                                        ^
                                        (2 + i)))) = get_noise_by_idx(nth(nth(cache, i_1 - 1)`3, i_2),
                       N)")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, i_1 - 1)`1))),
                            0)`1,
                        upd_noise_burst(N,
                                        nwidxs,
                                        LAMBDA
                                        (i: nat):
                                        (get_noise_by_idx
                                         (car(pd(varac))`1, N)
                                         ^
                                         (2 + i)))) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, i_1 - 1)`1))),
                            0)`1,
                        N)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (use
                                                                       "gnbi_updb_2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             "nwidxs"
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (use
                                                                                 "member_nats")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "last_idx_box")
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "next_idx")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "last_idx")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT null?(pd(nth_ac(box, varidx(nth(cache, i_1 - 1)`1))))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "olidx_car_last[nzBaseType]")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "nextfreeidx")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "car_ol")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   "newoff"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (use
                                                                             "power_Epsilon_is_Epsilon")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("3"
                                                                          (expand
                                                                           "length")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (use
                                                                   "gnbi_updb_2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         "cache comp pairs on")
                                                                        (("1"
                                                                          (replace
                                                                           "nwidxs"
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "member_nats")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst?
                                                                                       "cache idxs bound")
                                                                                      (("1"
                                                                                        (use
                                                                                         "cache_powvar_correct")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "CacheData_correct?")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4
                                                                                               "cache idxs bound")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "next_idx_pow_var_ac")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1
                                                                                                   :where
                                                                                                   "cache idxs bound")
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           "cache idxs bound")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ">=")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-6
                                                                                                                1
                                                                                                                "cache idxs bound"))
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "nth_ol[nat,<]")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replaces
                                                                               "newoff")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (use
                                                                         "power_Epsilon_is_Epsilon")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "length")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("3"
                                                                      (expand
                                                                       "length")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 (1
                                                                  "varac not single value"))
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (use
                                                                     "power_Epsilon_is_Epsilon")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide-all-but
                                                                 (1
                                                                  "varac not single value"))
                                                                (("4"
                                                                  (expand
                                                                   "length")
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i_1")
                                      (("2"
                                        (hide-all-but (-1 1 2))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (hide-all-but (1 "varac not single value"))
                            (("2" (skeep)
                              (("2"
                                (assert)
                                (("2"
                                  (use "power_Epsilon_is_Epsilon")
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replaces "newoff")
                    (("3" (expand ">=")
                      (("3" (hide-all-but (1 "pow <= 1"))
                        (("3"
                          (case "nextfreeidx - 1 + pow = nextfreeidx + (pow - 1)")
                          (("1" (replaces -1)
                            (("1" (case "1<=(pow - 1)")
                              (("1"
                                (name-replace "A" "pow-1")
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (typepred "cache")
                    (("4" (expand "idxs_bounded")
                      (("4" (skeep)
                        (("4" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (replaces "acRes")
                                (("1"
                                  (use "next_idx_pow_var_ac")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (lift-if 1)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (typepred "nwidxs")
                                            (("1"
                                              (case "length(nwidxs)=0")
                                              (("1" (assert) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (replaces "newoff")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand ">=")
                                                (("2"
                                                  (replaces "nwidxs")
                                                  (("2"
                                                    (typepred
                                                     "nats(nextfreeidx, nextfreeidx - 2 + pow)")
                                                    (("2"
                                                      (inst -5 "pow-2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2"
                                  (replaces "newoff")
                                  (("2"
                                    (hide-all-but (2 -2 "pow <= 1"))
                                    (("2"
                                      (case
                                       "nextfreeidx - 1 + pow = nextfreeidx + (pow - 1)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case "1<=(pow - 1)")
                                          (("1"
                                            (name-replace "A" "pow-1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (expand "correct_cache?")
                    (("5" (expand "CacheData_correct?")
                      (("5" (flatten)
                        (("5" (typepred "nextfreeidx")
                          (("5" (replaces "nwidxs" 2)
                            (("5" (expand "nats" 2)
                              (("5"
                                (lift-if 2)
                                (("5"
                                  (split 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replaces -1 1 :dir RL)
                                        (("1"
                                          (use "last_idx_box")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand_ol)
                                      (("2"
                                        (use "last_idx_box")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Env type-eq-decl nil affine_box nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (power_Epsilon_is_Epsilon formula-decl nil affine_pow nil)
    (member_nats formula-decl nil affine_pow nil)
    (gnbi_updb_2 formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (nth_ol formula-decl nil ordered_list nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= car(idxs)}"
     affine_pow nil)
    (C const-decl "posnat" binomial "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (olidx_car_last formula-decl nil indexed_list nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (beyond_last_idx_notmember formula-decl nil affine nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (pow_var_compatible_noise formula-decl nil affine_pow nil)
    (last_idx_box formula-decl nil affine_box nil)
    (next_idx const-decl "nat" affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (idxs_ac_var_ac formula-decl nil affine nil)
    (eval_updb_no_idxs formula-decl nil affine nil)
    (represents_var? const-decl "bool" affine nil)
    (containment_pow_var_ac formula-decl nil affine_pow nil)
    (nzBaseType type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil))
   nil)
  (RE2AC_TCC59-1 nil 3631622080
   ("" (skeep*) (("" (postpone) nil nil)) nil) nil nil))
 (RE2AC_TCC60 0
  (RE2AC_TCC60-1 nil 3631872799
   ("" (skeep*)
    (("" (assert)
      ((""
        (apply (then (label "re" -1) (label "varac" -2)
                (label "cached some" -3) (label "cached" -4)
                (label "idxs" -5) (label "pownoises" -6)
                (label "newoff" -7) (label "nwidxs" -8)
                (label "acRes" -9) (label "result" -10) (label "idx" 1)
                (label "pow <= 1" 2) (label "varac not single value" 3)
                (label "cv not 0" 4) (label "pow gt opn" 5)
                (label "opw gt opn" 6)))
        (("" (replaces "result")
          (("" (assert)
            (("" (split 7)
              (("1" (expand "every")
                (("1" (split 1)
                  (("1" (replace "nwidxs" 1)
                    (("1"
                      (with-labels (typepred "cache")
                       (("cache correct" "cache compatible pairs"
                         "cache idxs bound" "UNKNOWN")))
                      (("1" (use "cache_powvar_correct_result")
                        (("1"
                          (with-labels (assert (-1 "cache correct"))
                           (("cached correct")))
                          (("1"
                            (replace "cached" "cached correct" :dir RL)
                            (("1"
                              (expand "CacheData_correct?"
                                      "cached correct")
                              (("1"
                                (typepred "cached")
                                (("1"
                                  (assert)
                                  (("1"
                                    (with-labels
                                     (flatten)
                                     (("cached`1 is powvar"
                                       "cached`1 varidx"
                                       "cached cache idx"
                                       "UNKNOWN")))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (with-labels
                                         (flatten "cached correct")
                                         (("cached idx in box"
                                           "cached cond ok"
                                           "cached`2 is powvarac"
                                           "UNKNOWN")))
                                        (("1"
                                          (split "cached cond ok")
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (name
                                                 "nwidxs2"
                                                 "append_ol[nat,<](take[nat](pownoises, opn(val(cached)`1) - 2+1), nats(nextfreeidx, newoff - 1))")
                                                (("1"
                                                  (typepred "nwidxs2")
                                                  (("1"
                                                    (expand
                                                     "append_ol")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "appendable_ol?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (case
                                                       "last_ol[nat,<](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) = nth(pownoises,  opn(val[CacheData](cached)`1) - 2)")
                                                      (("1"
                                                        (replaces -1 3)
                                                        (("1"
                                                          (case
                                                           "first_ol[nat,<](nats(nextfreeidx, newoff - 1)) = nextfreeidx")
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             3)
                                                            (("1"
                                                              (skeep
                                                               "cached cache idx")
                                                              (("1"
                                                                (replace
                                                                 "pownoises"
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   "cached cache idx"
                                                                   1
                                                                   :dir
                                                                   RL)
                                                                  (("1"
                                                                    (expand
                                                                     "idxs_bounded"
                                                                     "cache idxs bound")
                                                                    (("1"
                                                                      (inst
                                                                       "cache idxs bound"
                                                                       "i")
                                                                      (("1"
                                                                        (replace
                                                                         "cached cache idx"
                                                                         "cached`2 is powvarac"
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (replace
                                                                           "cached`2 is powvarac"
                                                                           "cache idxs bound")
                                                                          (("1"
                                                                            (use
                                                                             "next_idx_pow_var_ac")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (lift-if
                                                                                 "cache idxs bound")
                                                                                (("1"
                                                                                  (split
                                                                                   "cache idxs bound")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       "varac"
                                                                                       "varac not single value")
                                                                                      (("1"
                                                                                        (replace
                                                                                         "cached cache idx"
                                                                                         "cache idxs bound")
                                                                                        (("1"
                                                                                          (replace
                                                                                           "cached`1 varidx"
                                                                                           "cache idxs bound")
                                                                                          (("1"
                                                                                            (replace
                                                                                             "re")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (with-labels
                                                                                     (flatten
                                                                                      "cache idxs bound")
                                                                                     (("opn not 0"
                                                                                       "varac not single value"
                                                                                       "cache idxs bound"
                                                                                       "UNKNOWN")))
                                                                                    (("2"
                                                                                      (split
                                                                                       "cache idxs bound")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (with-labels
                                                                                         (flatten
                                                                                          "cache idxs bound")
                                                                                         (("opn not 1"
                                                                                           "cache idxs bound"
                                                                                           "UNKNOWN")))
                                                                                        (("2"
                                                                                          (expand
                                                                                           ">=")
                                                                                          (("2"
                                                                                            (replace
                                                                                             "pownoises"
                                                                                             6)
                                                                                            (("2"
                                                                                              (replace
                                                                                               "cached cache idx"
                                                                                               6
                                                                                               :dir
                                                                                               RL)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 ("cache idxs bound"
                                                                                                  6))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1
                                                              3
                                                              5
                                                              -1
                                                              "pow gt opn"
                                                              "opw gt opn"))
                                                            (("2"
                                                              (expand
                                                               "nats"
                                                               1)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand_ol)
                                                                      (("2"
                                                                        (expand
                                                                         "first_ol")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (use
                                                             "last_take_nth[nat,<]")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "last_take_nth[nat,<]")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3" (assert) nil nil)
                                                 ("4"
                                                  (use
                                                   "take_ol[nat,<]")
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (replace
                                             "cached`1 varidx"
                                             "cached cond ok")
                                            (("2"
                                              (hide-all-but
                                               ("varac"
                                                "varac not single value"
                                                "cached cond ok"
                                                "re"))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred "cache")
                      (("2" (generalize "cache" "cache")
                        (("2" (induct "cache")
                          (("1" (grind) nil nil)
                           ("2" (skolem 1 ("h" "t"))
                            (("2" (flatten)
                              (("2"
                                (expand "every" 1)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (typepred "h`3")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (expand "correct_cache?" -1)
                                      (("2" (flatten) nil nil))
                                      nil)
                                     ("3"
                                      (expand "compatible_pairs?")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst?)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand
                                               "compatible_pairs_on?")
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (expand "nth" -3)
                                                  (("3"
                                                    (inst -3 "i+1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "idxs_bounded")
                                      (("4"
                                        (skeep)
                                        (("4"
                                          (expand "nth" -3)
                                          (("4"
                                            (inst -3 "i+1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "i")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand "correct_cache?" -1)
                                      (("5" (flatten) nil nil))
                                      nil)
                                     ("6"
                                      (expand "compatible_pairs?")
                                      (("6"
                                        (skeep)
                                        (("6"
                                          (inst?)
                                          (("6"
                                            (assert)
                                            (("6"
                                              (expand
                                               "compatible_pairs_on?")
                                              (("6"
                                                (skeep)
                                                (("6"
                                                  (expand "nth" -3)
                                                  (("6"
                                                    (inst -3 "i+1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("7"
                                      (expand "idxs_bounded")
                                      (("7"
                                        (skeep)
                                        (("7"
                                          (expand "nth" -3)
                                          (("7"
                                            (inst -3 "i+1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "i")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "correct_cache?")
                (("2" (expand "CacheData_correct?")
                  (("2" (replace "re" 1)
                    (("2" (assert)
                      (("2" (lift-if "nwidxs")
                        (("2" (split "nwidxs")
                          (("1"
                            (with-labels (flatten "nwidxs")
                             (("opn >= 2" "nwidxs")))
                            (("1" (replace "nwidxs" 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (use "length_append[nat]")
                                  (("1"
                                    (replaces -1 1)
                                    (("1"
                                      (with-labels
                                       (typepred
                                        "nats(nextfreeidx, newoff - 1)")
                                       (("nats list[nat]"
                                         "nats ol"
                                         "nats not null"
                                         "nats car"
                                         "nats length"
                                         "nats i")
                                        ("newoff >= 1")))
                                      (("1"
                                        (replaces "nats length" 2)
                                        (("1"
                                          (case
                                           "length[nat](take[nat](pownoises, opn(val(cached)`1) - 1)) = opn(val(cached)`1) - 1")
                                          (("1"
                                            (replaces -1 2)
                                            (("1"
                                              (replace "newoff" 2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "length_take[nat]")
                                            (("1"
                                              (replaces -1 1)
                                              (("1"
                                                (expand "min")
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (replace
                                                         "pownoises")
                                                        (("2"
                                                          (with-labels
                                                           (typepred
                                                            "cache")
                                                           (("cache correct"
                                                             "cache compatible pairs"
                                                             "cache idxs bounded"
                                                             "UNKNOWN")))
                                                          (("2"
                                                            (use
                                                             "cache_powvar_correct_result")
                                                            (("2"
                                                              (with-labels
                                                               (assert
                                                                -1)
                                                               (("cached correct")))
                                                              (("2"
                                                                (replace
                                                                 "cached"
                                                                 "cached correct"
                                                                 :dir
                                                                 RL)
                                                                (("2"
                                                                  (expand
                                                                   "CacheData_correct?"
                                                                   "cached correct")
                                                                  (("2"
                                                                    (typepred
                                                                     "cached")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               "cached correct")
                                                                              (("2"
                                                                                (replace
                                                                                 "re"
                                                                                 "cached correct")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (case
                                     "car(append(take[nat](pownoises, opn(val(cached)`1) - 1),
                                                        nats(nextfreeidx, newoff - 1))) = car(pownoises)")
                                    (("1"
                                      (replaces -1 2)
                                      (("1"
                                        (with-labels
                                         (typepred "cache")
                                         (("cache correct"
                                           "cache compatible pairs"
                                           "cache idxs bounded"
                                           "UNKNOWN")))
                                        (("1"
                                          (use
                                           "cache_powvar_correct_result")
                                          (("1"
                                            (with-labels
                                             (assert -1)
                                             (("cached correct")))
                                            (("1"
                                              (replace
                                               "cached"
                                               "cached correct"
                                               :dir
                                               RL)
                                              (("1"
                                                (expand
                                                 "CacheData_correct?"
                                                 "cached correct")
                                                (("1"
                                                  (typepred "cached")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (split
                                                             "cached correct")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   "cached correct")
                                                                  (("1"
                                                                    (replace
                                                                     "re"
                                                                     "cached correct")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "length")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               "varac"
                                                               "varac not single value")
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 "cached correct")
                                                                (("2"
                                                                  (replace
                                                                   "re"
                                                                   "cached correct")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" 1)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "take" -1)
                                              (("1"
                                                (case
                                                 "length(pownoises) >= opn(val(cached)`1) - 1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (replace
                                                     "pownoises"
                                                     1)
                                                    (("2"
                                                      (with-labels
                                                       (typepred
                                                        "cache")
                                                       (("cache correct"
                                                         "cache compatible pairs"
                                                         "cache idxs bounded"
                                                         "UNKNOWN")))
                                                      (("2"
                                                        (use
                                                         "cache_powvar_correct_result")
                                                        (("2"
                                                          (with-labels
                                                           (assert)
                                                           (("cached correct")))
                                                          (("2"
                                                            (replace
                                                             "cached"
                                                             "cached correct"
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (expand
                                                               "CacheData_correct?"
                                                               "cached correct")
                                                              (("2"
                                                                (typepred
                                                                 "cached")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           "varac"
                                                                           "varac not single value")
                                                                          (("2"
                                                                            (replace
                                                                             -2
                                                                             "cached correct")
                                                                            (("2"
                                                                              (replace
                                                                               "re"
                                                                               "cached correct")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "take" 2)
                                                (("2"
                                                  (case
                                                   "length(pownoises) >= opn(val(cached)`1) - 1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replace
                                                     "pownoises"
                                                     1)
                                                    (("2"
                                                      (with-labels
                                                       (typepred
                                                        "cache")
                                                       (("cache correct"
                                                         "cache compatible pairs"
                                                         "cache idxs bounded"
                                                         "UNKNOWN")))
                                                      (("2"
                                                        (use
                                                         "cache_powvar_correct_result")
                                                        (("2"
                                                          (with-labels
                                                           (assert)
                                                           (("cached correct")))
                                                          (("2"
                                                            (replace
                                                             "cached"
                                                             "cached correct"
                                                             :dir
                                                             RL)
                                                            (("2"
                                                              (expand
                                                               "CacheData_correct?"
                                                               "cached correct")
                                                              (("2"
                                                                (typepred
                                                                 "cached")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           "varac"
                                                                           "varac not single value")
                                                                          (("2"
                                                                            (replace
                                                                             -2
                                                                             "cached correct")
                                                                            (("2"
                                                                              (replace
                                                                               "re"
                                                                               "cached correct")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (replace "pownoises" 1)
                                      (("3"
                                        (with-labels
                                         (typepred "cache")
                                         (("cache correct"
                                           "cache compatible pairs"
                                           "cache idxs bounded"
                                           "UNKNOWN")))
                                        (("3"
                                          (use
                                           "cache_powvar_correct_result")
                                          (("3"
                                            (with-labels
                                             (assert)
                                             (("cached correct")))
                                            (("3"
                                              (replace
                                               "cached"
                                               "cached correct"
                                               :dir
                                               RL)
                                              (("3"
                                                (expand
                                                 "CacheData_correct?"
                                                 "cached correct")
                                                (("3"
                                                  (typepred "cached")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (split
                                                             "cached correct")
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               "varac"
                                                               "varac not single value")
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 "cached correct")
                                                                (("2"
                                                                  (replace
                                                                   "re"
                                                                   "cached correct")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4" (assert) nil nil)
                                     ("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (replace -1 2)
                              (("2"
                                (split 2)
                                (("1"
                                  (typepred
                                   "nats(nextfreeidx, newoff - 1)")
                                  (("1"
                                    (replace -4 2)
                                    (("1"
                                      (replace "newoff" 2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred
                                     "nats(nextfreeidx, newoff - 1)")
                                    (("1"
                                      (inst -5 "0")
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (replace -5 3)
                                          (("1"
                                            (typepred "nextfreeidx")
                                            (("1"
                                              (use "last_idx_box")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -4 1)
                                        (("2"
                                          (replace "newoff" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (replaces "newoff")
                (("3" (hide-all-but (1 "pow gt opn" "opw gt opn"))
                  (("3" (case "opn(val(cached)`1) < pow")
                    (("1" (hide "pow gt opn" "opw gt opn")
                      (("1"
                        (case "nextfreeidx - opn(val(cached)`1) + pow = nextfreeidx + (pow - opn(val(cached)`1))")
                        (("1" (replaces -1)
                          (("1" (case "0 <= pow - opn(val(cached)`1)")
                            (("1"
                              (name-replace "A"
                               "pow - opn(val(cached)`1)")
                              (("1" (assert) nil nil)) nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (take_ol formula-decl nil ordered_list nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last_ol def-decl "T" ordered_list nil)
    (first_ol const-decl "T" ordered_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (next_idx const-decl "nat" affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (represents_var? const-decl "bool" affine nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (cached skolem-const-decl "{res: Maybe[CacheData] |
         some?(res) IMPLIES
          powvar?(val(res)`1) AND
           varidx(val(res)`1) = varidx(re) AND
            (EXISTS (i: below(length(cache))): nth(cache, i) = val(res))}"
     affine_expr_Eval_fnd nil)
    (pownoises skolem-const-decl
     "ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]"
     affine_expr_Eval_fnd nil)
    (last_take_nth formula-decl nil ordered_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (appendable_ol? const-decl "bool" ordered_list nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (take def-decl "list[T]" list_more_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (<= const-decl "bool" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cache_powvar_correct_result formula-decl nil affine_expr_Eval_fnd
     nil)
    (list_induction formula-decl nil list_adt nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx const-decl "int" indexed_list nil)
    (i skolem-const-decl "below(length(t))" affine_expr_Eval_fnd nil)
    (i skolem-const-decl "below(length(t))" affine_expr_Eval_fnd nil)
    (i skolem-const-decl "below(length(t))" affine_expr_Eval_fnd nil)
    (Noise type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (Epsilon type-eq-decl nil affine nil)
    (h skolem-const-decl "CacheData" affine_expr_Eval_fnd nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (i skolem-const-decl "below(length(t))" affine_expr_Eval_fnd nil)
    (t skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd nil)
    (every adt-def-decl "boolean" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (length_append formula-decl nil list_props nil)
    (newoff skolem-const-decl "int" affine_expr_Eval_fnd nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (length_take formula-decl nil list_more_props nil)
    (last_idx_box formula-decl nil affine_box nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (RE2AC_TCC61 0
  (RE2AC_TCC61-2 nil 3632079158
   ("" (skeep*)
    (("" (assert)
      ((""
        (apply (then (label "re" -1) (label "varac" -2)
                (label "cached some" -3) (label "cached" -4)
                (label "idxs" -5) (label "pownoises" -6)
                (label "newoff" -7) (label "nwidxs" -8)
                (label "acRes" -9) (label "result" -10) (label "idx" 1)
                (label "pow <= 1" 2) (label "varac not single value" 3)
                (label "cv not 0" 4) (label "pow gt opn" 5)
                (label "opw gt opn" 6)))
        (("" (hide -11)
          (("" (replaces "result")
            (("" (assert)
              (("" (split 7)
                (("1" (inst 1 "(:(re, acRes, nwidxs):)")
                  (("1" (expand "append" 1) (("1" (grind) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (lift-if "nwidxs")
                  (("2" (split nwidxs)
                    (("1"
                      (with-labels (name "opn" "opn(val(cached)`1)")
                       (("opn name")))
                      (("1" (hide "opn name")
                        (("1"
                          (with-labels (flatten "nwidxs")
                           (("opn >= 2" "nwidxs")))
                          (("1"
                            (with-labels (typepred "cache")
                             (("cache correct" "cache comp pairs"
                               "cache idxs bound" "UNKNOWN")))
                            (("1" (expand "compatible_pairs?")
                              (("1"
                                (with-labels
                                 (skeep "cache comp pairs")
                                 (("N vars in box"
                                   "cache comp pairs on"
                                   "UNKNOWN")))
                                (("1"
                                  (inst
                                   1
                                   "upd_noise_burst(N, nats(nextfreeidx, newoff - 1), LAMBDA(i:nat): (get_noise_by_idx(nth(pd(varac),0)`1, N)^(i+1+opn)))")
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (expand
                                       "vars_in_box_compatible?")
                                      (("1"
                                        (skolem 1 "k")
                                        (("1"
                                          (inst "N vars in box" "k")
                                          (("1"
                                            (with-labels
                                             (flatten "N vars in box")
                                             (("eval box is vs"
                                               "single intervals in box"
                                               "UNKNOWN")))
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (replace
                                                 "eval box is vs"
                                                 1
                                                 :dir
                                                 RL)
                                                (("1"
                                                  (expand "var_ac" 1)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "eval_ac_noise"
                                                           2)
                                                          (("1"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand_ol)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (use
                                                                     "eval_pd_noise_rec_pds_def")
                                                                    (("1"
                                                                      (expand_ol)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (use
                                                                           "eval_pd_noise_rec_pds_def")
                                                                          (("1"
                                                                            (expand_ol)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (use
                                                                                 "eval_pd_noise_rec_pds_def")
                                                                                (("1"
                                                                                  (expand_ol)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1
                                                                                     2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "nextfreeidx")
                                                                                        (("1"
                                                                                          (use
                                                                                           "gnbi_updb_2")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "member_nats")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "k")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "nextfreeidx")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "last_idx_in_box")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              "varac not single value"))
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "power_Epsilon_is_Epsilon")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              "varac not single value"))
                                                                                            (("3"
                                                                                              (skeep)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    "varac not single value"))
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (use
                                                                                         "power_Epsilon_is_Epsilon")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    "opn >= 2"))
                                                                                  (("3"
                                                                                    (skeep)
                                                                                    (("3"
                                                                                      (reveal
                                                                                       "opn name")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              "varac not single value"))
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (use
                                                                                   "power_Epsilon_is_Epsilon")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             (1
                                                                              "opn >= 2"))
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (reveal
                                                                                 "opn name")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "eval_ac_noise"
                                                           1)
                                                          (("2"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand_ol)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (use
                                                                     "eval_pd_noise_rec_pds_def")
                                                                    (("1"
                                                                      (expand_ol)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        "varac not single value"))
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (use
                                                                             "power_Epsilon_is_Epsilon")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide-all-but
                                                                       (1
                                                                        "opn >= 2"))
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (reveal
                                                                           "opn name")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     "single intervals in box"
                                                     1
                                                     :dir
                                                     RL
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (use
                                                       "gnbi_updb_2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (replaces
                                                             "nwidxs"
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "member_nats")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (typepred
                                                                     "k")
                                                                    (("1"
                                                                      (typepred
                                                                       "nextfreeidx")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1
                                                          "varac not single value"))
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (use
                                                               "power_Epsilon_is_Epsilon")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (1
                                                          "opn >= 2"))
                                                        (("3"
                                                          (skeep)
                                                          (("3"
                                                            (reveal
                                                             "opn name")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "compatible_pairs_on?")
                                      (("2"
                                        (skolem 1 "k")
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (case "k=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (expand
                                                   "eval_ACExpr_Env"
                                                   1)
                                                  (("1"
                                                    (replaces "acRes")
                                                    (("1"
                                                      (typepred
                                                       "cached")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (with-labels
                                                           (flatten -1)
                                                           (("cached powvar"
                                                             "cached idx re"
                                                             "cached cache idx"
                                                             "UNKNOWN")))
                                                          (("1"
                                                            (skolem
                                                             "cached cache idx"
                                                             "i")
                                                            (("1"
                                                              (inst
                                                               "cache comp pairs on"
                                                               "i")
                                                              (("1"
                                                                (with-labels
                                                                 (flatten)
                                                                 (("cache eval"
                                                                   "cache if powvar"
                                                                   "UNKNOWN")))
                                                                (("1"
                                                                  (replace
                                                                   "cached cache idx")
                                                                  (("1"
                                                                    (expand
                                                                     "eval_ACExpr_Env"
                                                                     "cache eval")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         "cache_powvar_correct")
                                                                        (("1"
                                                                          (replace
                                                                           "cached cache idx")
                                                                          (("1"
                                                                            (expand
                                                                             "CacheData_correct?")
                                                                            (("1"
                                                                              (with-labels
                                                                               (flatten
                                                                                -1)
                                                                               (("chached varidx < box"
                                                                                 "cached cond ok"
                                                                                 "cached as AC"
                                                                                 "UNKNOWN")))
                                                                              (("1"
                                                                                (replace
                                                                                 "cached as AC"
                                                                                 "cache eval")
                                                                                (("1"
                                                                                  (replace
                                                                                   "re")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       "cached idx re")
                                                                                      (("1"
                                                                                        (replace
                                                                                         "varac"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "containment_pow_var_ac")
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -1
                                                                                             :where
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "vars_in_box_compatible?")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       "N vars in box"
                                                                                                       "idx")
                                                                                                      (("1"
                                                                                                        (with-labels
                                                                                                         (flatten
                                                                                                          "N vars in box")
                                                                                                         (("eval box is vs"
                                                                                                           "single intervals in box"
                                                                                                           "UNKNOWN")))
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           "eval box is vs"
                                                                                                           1
                                                                                                           :dir
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth_ac")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "var_ac"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (lift-if
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "eval_ac_noise"
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "eval_pd_noise_rec_pds_def")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand_ol)
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (use
                                                                                                                                 "eval_pd_noise_rec_pds_def")
                                                                                                                                (("1"
                                                                                                                                  (expand_ol)
                                                                                                                                  (("1"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (use
                                                                                                                                       "eval_pd_noise_rec_pds_def")
                                                                                                                                      (("1"
                                                                                                                                        (expand_ol)
                                                                                                                                        (("1"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (use
                                                                                                                                             "eval_pd_noise_rec_pds_def")
                                                                                                                                            (("1"
                                                                                                                                              (expand_ol)
                                                                                                                                              (("1"
                                                                                                                                                (replaces
                                                                                                                                                 -1
                                                                                                                                                 2)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (typepred
                                                                                                                                                     "nextfreeidx")
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "gnbi_updb_2")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "member_nats")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "last_idx_in_box")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (1
                                                                                                                                                          "varac not single value"))
                                                                                                                                                        (("2"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "power_Epsilon_is_Epsilon")
                                                                                                                                                              (("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (1
                                                                                                                                                          "opn >= 2"))
                                                                                                                                                        (("3"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("3"
                                                                                                                                                            (reveal
                                                                                                                                                             "opn name")
                                                                                                                                                            (("3"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               (1
                                                                                                                                                "varac not single value"))
                                                                                                                                              (("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (use
                                                                                                                                                     "power_Epsilon_is_Epsilon")
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (hide-all-but
                                                                                                                                               (1
                                                                                                                                                "opn >= 2"))
                                                                                                                                              (("3"
                                                                                                                                                (skeep)
                                                                                                                                                (("3"
                                                                                                                                                  (reveal
                                                                                                                                                   "opn name")
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (1
                                                                                                                                          "varac not single value"))
                                                                                                                                        (("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (use
                                                                                                                                               "power_Epsilon_is_Epsilon")
                                                                                                                                              (("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (hide-all-but
                                                                                                                                         (1
                                                                                                                                          "opn >= 2"))
                                                                                                                                        (("3"
                                                                                                                                          (skeep)
                                                                                                                                          (("3"
                                                                                                                                            (reveal
                                                                                                                                             "opn name")
                                                                                                                                            (("3"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "eval_ac_noise"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "eval_pd_noise_rec_pds_def")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand_ol)
                                                                                                                            (("2"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "eval_pd_noise_rec_pds_def")
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "nth_ac")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       "varac"
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           "nwidxs"
                                                                                                           -1
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "member_append_fi[nat]")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -2)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     "cached cond ok")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "next_idx")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "last_idx")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           "pownoises")
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-1
                                                                                                                              -2
                                                                                                                              "varac"
                                                                                                                              "varac not single value"))
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               "varac")
                                                                                                                              (("1"
                                                                                                                                (use
                                                                                                                                 "olidx_car_last[nzBaseType]")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "car_ol")
                                                                                                                                    (("1"
                                                                                                                                      (use
                                                                                                                                       "notmember_ol_nat")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         "take_ol[nat,<]")
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (use
                                                                                                                     "member_nats")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2)
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "nextfreeidx")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               "varac")
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "last_idx_box")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "next_idx")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "last_idx")
                                                                                                                                    (("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        -2
                                                                                                                                        -3
                                                                                                                                        "varac not single value"))
                                                                                                                                      (("2"
                                                                                                                                        (use
                                                                                                                                         "olidx_car_last[nzBaseType]")
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "car_ol")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "length")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (reveal
                                                                                                     "cache comp pairs on")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       "cache comp pairs on"
                                                                                                       "i")
                                                                                                      (("3"
                                                                                                        (with-labels
                                                                                                         (flatten
                                                                                                          "cache comp pairs on")
                                                                                                         (("cached eval noise vs"
                                                                                                           "cached N compatible")))
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (lemma
                                                                                                             "powvar_comp_noise_extension")
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "N"
                                                                                                               "opn(val(cached)`1)"
                                                                                                               "opn(re)"
                                                                                                               "varac"
                                                                                                               "pownoises"
                                                                                                               "nextfreeidx")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   "varac"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     "cached cache idx"
                                                                                                                     :dir
                                                                                                                     RL)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       "pownoises"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         "nwidxs"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           "pownoises"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             "re"
                                                                                                                             (-1
                                                                                                                              1))
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               "newoff"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (reveal
                                                                                                                                 "opn name")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   "pownoises"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "idxs_bounded"
                                                                                                                     "cache idxs bound")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       "cache idxs bound"
                                                                                                                       "i")
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "next_idx(pd(nth(cache, i)`2)) = nth(nth(cache, i)`3, opn(val(cached)`1)-2)+1")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           "cache idxs bound"
                                                                                                                           :hide?
                                                                                                                           t)
                                                                                                                          (("1"
                                                                                                                            (use
                                                                                                                             "last_take_nth[nat,<]")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               1
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           "cached cache idx")
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             "cached as AC"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (use
                                                                                                                               "next_idx_pow_var_ac")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (replace
                                                                                                                           "varac"
                                                                                                                           "varac not single value")
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (replace
                                                                                                                 "varac"
                                                                                                                 "varac not single value")
                                                                                                                (("3"
                                                                                                                  (replace
                                                                                                                   "pownoises"
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (replace
                                                                                                                     "varac"
                                                                                                                     1)
                                                                                                                    (("3"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 "varac not single value")
                                                                                                                (("4"
                                                                                                                  (replace
                                                                                                                   "varac")
                                                                                                                  (("4"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nth_ac")
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-1
                                                                                                                        "varac not single value"))
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("5"
                                                                                                                (replace
                                                                                                                 "re"
                                                                                                                 1)
                                                                                                                (("5"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                "varac not single value"))
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "power_Epsilon_is_Epsilon")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (reveal
                                                                                                       "varac")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                "opn >= 2"))
                                                                                              (("3"
                                                                                                (skeep)
                                                                                                (("3"
                                                                                                  (reveal
                                                                                                   "opn name")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                "varac"
                                                                                                "varac not single value"))
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "length")
                                                                                                (("4"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   "cache comp pairs on"
                                                   "k-1")
                                                  (("2"
                                                    (with-labels
                                                     (flatten
                                                      "cache comp pairs on")
                                                     (("cache eval"
                                                       "cache if powvar"
                                                       "UNKNOWN")))
                                                    (("2"
                                                      (replace
                                                       "cache eval"
                                                       2
                                                       :dir
                                                       RL)
                                                      (("2"
                                                        (use
                                                         "eval_updb_no_idxs")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 3)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (use
                                                                 "member_nats")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "idxs_bounded"
                                                                       "cache idxs bound")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (expand
                                                                           "idxs_ac")
                                                                          (("1"
                                                                            (use
                                                                             "beyond_last_idx_notmember")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "next_idx")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1
                                                            "varac not single value"))
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (use
                                                               "power_Epsilon_is_Epsilon")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (1
                                                            "opn >= 2"))
                                                          (("3"
                                                            (skeep)
                                                            (("3"
                                                              (reveal
                                                               "opn name")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide-all-but
                                                           (1
                                                            "varac not single value"))
                                                          (("4"
                                                            (expand
                                                             "length")
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "k=0")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "nth"
                                                   (-1 -2))
                                                  (("1"
                                                    (expand "nth" 1)
                                                    (("1"
                                                      (typepred
                                                       "cached")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (with-labels
                                                           (flatten -1)
                                                           (("cached powvar"
                                                             "cached idx re"
                                                             "cached in cache")))
                                                          (("1"
                                                            (skolem
                                                             "cached in cache"
                                                             "j")
                                                            (("1"
                                                              (inst
                                                               "cache comp pairs on"
                                                               "j")
                                                              (("1"
                                                                (with-labels
                                                                 (flatten
                                                                  "cache comp pairs on")
                                                                 (("cached eval noise vs"
                                                                   "cached N compatible")))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "powvar_comp_noise_extension")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "N"
                                                                       "opn(val(cached)`1)"
                                                                       "opn(re)"
                                                                       "varac"
                                                                       "pownoises"
                                                                       "nextfreeidx")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           "varac"
                                                                           -1)
                                                                          (("1"
                                                                            (replaces
                                                                             "cached in cache"
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (replace
                                                                               "pownoises"
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 "cached idx re"
                                                                                 "cached N compatible")
                                                                                (("1"
                                                                                  (replace
                                                                                   "re"
                                                                                   "cached N compatible")
                                                                                  (("1"
                                                                                    (replace
                                                                                     "nwidxs"
                                                                                     1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       "pownoises"
                                                                                       1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         "re"
                                                                                         (-1
                                                                                          1))
                                                                                        (("1"
                                                                                          (replace
                                                                                           "newoff"
                                                                                           1)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             "opn name")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         "pownoises"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "idxs_bounded"
                                                                           "cache idxs bound")
                                                                          (("2"
                                                                            (inst
                                                                             "cache idxs bound"
                                                                             "j")
                                                                            (("2"
                                                                              (case
                                                                               "next_idx(pd(nth(cache, j)`2)) = nth(nth(cache, j)`3, opn(val(cached)`1)-2)+1")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 "cache idxs bound"
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (use
                                                                                   "last_take_nth[nat,<]")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "cache_powvar_correct")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "CacheData_correct?")
                                                                                      (("2"
                                                                                        (replace
                                                                                         "cached in cache")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (replace
                                                                                               "varac")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 "cached idx re")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   "re")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 "cached in cache")
                                                                                (("2"
                                                                                  (use
                                                                                   "cache_powvar_correct")
                                                                                  (("2"
                                                                                    (replace
                                                                                     "cached in cache")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "CacheData_correct?")
                                                                                      (("2"
                                                                                        (with-labels
                                                                                         (flatten
                                                                                          -1)
                                                                                         (("cached cond ok"
                                                                                           "cached as AC"
                                                                                           "UNKNOWN")))
                                                                                        (("2"
                                                                                          (replace
                                                                                           "cached as AC"
                                                                                           1)
                                                                                          (("2"
                                                                                            (use
                                                                                             "next_idx_pow_var_ac")
                                                                                            (("2"
                                                                                              (replace
                                                                                               "cached idx re"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 "re"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   "varac"
                                                                                                   "varac not single value")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       "cached idx re"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         "re"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (use
                                                                                 "cache_powvar_correct")
                                                                                (("3"
                                                                                  (replace
                                                                                   "cached in cache")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "CacheData_correct?")
                                                                                    (("3"
                                                                                      (with-labels
                                                                                       (flatten
                                                                                        -1)
                                                                                       (("cached cond ok"
                                                                                         "cached as AC"
                                                                                         "UNKNOWN")))
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (replace
                                                                                           "varac"
                                                                                           "varac not single value")
                                                                                          (("3"
                                                                                            (replace
                                                                                             "cached idx re"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (replace
                                                                                               "re"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (use
                                                                         "cache_powvar_correct")
                                                                        (("3"
                                                                          (replace
                                                                           "cached in cache")
                                                                          (("3"
                                                                            (expand
                                                                             "CacheData_correct?")
                                                                            (("3"
                                                                              (with-labels
                                                                               (flatten
                                                                                -1)
                                                                               (("cached cond ok"
                                                                                 "cached as AC"
                                                                                 "UNKNOWN")))
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (replace
                                                                                   "varac"
                                                                                   "varac not single value")
                                                                                  (("3"
                                                                                    (replace
                                                                                     "pownoises"
                                                                                     1)
                                                                                    (("3"
                                                                                      (replace
                                                                                       "varac"
                                                                                       1)
                                                                                      (("3"
                                                                                        (replace
                                                                                         "cached idx re"
                                                                                         "cached cond ok")
                                                                                        (("3"
                                                                                          (replace
                                                                                           "re"
                                                                                           "cached cond ok")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (expand
                                                                         "length"
                                                                         "varac not single value")
                                                                        (("4"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (replace
                                                                         "re"
                                                                         1)
                                                                        (("5"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 "cache comp pairs on"
                                                 "k-1")
                                                (("1"
                                                  (expand "nth" 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         (-1 -2))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "pow_var_compatible?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (skolem
                                                                 2
                                                                 "i")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     "cache comp pairs on"
                                                                     "i")
                                                                    (("1"
                                                                      (case
                                                                       "get_noise_by_idx( nth(nth(cache, k - 1)`3, i)
                      	                              , upd_noise_burst(N, nats(nextfreeidx, newoff - 1), LAMBDA(i: nat): (get_noise_by_idx(car(pd(varac))`1, N)^(1 + i +opn)))) = get_noise_by_idx(nth(nth(cache, k - 1)`3, i),N)")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                                                                                                                                               0)`1,
                                                                                                                                           upd_noise_burst(N,
                                                                                                                                                           nats(nextfreeidx, newoff - 1),
                                                                                                                                                           LAMBDA
                                                                                                                                                           (i: nat):
                                                                                                                                                           (get_noise_by_idx
                                                                                                                                                            (car(pd(varac))`1, N)
                                                                                                                                                            ^
                                                                                                                                                            (1 + i +opn))))
                                                                                                                           ^ (2 + i) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                                                                                                                                               0)`1,
                                                                                                                                           N)
                                                                                                                           ^ (2 + i)")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "gnbi_updb_2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 1)
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (use
                                                                                     "member_nats")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "nextfreeidx")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth_ac"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "idxs_bounded")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   "cache idxs bound"
                                                                                                   "k-1")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "next_idx")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "somevidx"
                                                                                                       "varidx(nth(cache, k - 1)`1)")
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "last_idx_box")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "next_idx")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "last_idx")
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (use
                                                                                                                     "olidx_car_last[nzBaseType]")
                                                                                                                    (("1"
                                                                                                                      (expand_ol)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth"
                                                                                                                         -4
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "nth_ac")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -7))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "length")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                "varac not single value"))
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (use
                                                                                     "power_Epsilon_is_Epsilon")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "length")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               (1
                                                                                "opn >= 2"))
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (reveal
                                                                                   "opn name")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide-all-but
                                                                               (1
                                                                                "varac not single value"))
                                                                              (("4"
                                                                                (expand
                                                                                 "length")
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         3)
                                                                        (("2"
                                                                          (use
                                                                           "gnbi_updb_2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               1)
                                                                              (("1"
                                                                                (use
                                                                                 "member_nats")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "idxs_bounded")
                                                                                        (("1"
                                                                                          (inst
                                                                                           "cache idxs bound"
                                                                                           "k-1")
                                                                                          (("1"
                                                                                            (use
                                                                                             "cache_powvar_correct")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "CacheData_correct?")
                                                                                              (("1"
                                                                                                (with-labels
                                                                                                 (flatten
                                                                                                  -1)
                                                                                                 (("cache_k-1`3 length"
                                                                                                   "cache_k-1`3 precond hold"
                                                                                                   "cache_k-1`2 pow_var_ac"
                                                                                                   "UNKNOWN")))
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   "cache_k-1`2 pow_var_ac"
                                                                                                   "cache idxs bound")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "next_idx_pow_var_ac")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       "cache idxs bound")
                                                                                                      (("1"
                                                                                                        (lift-if
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "cached")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   "cache idxs bound"
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "i")
                                                                                                                    (("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-1
                                                                                                                        -5
                                                                                                                        "cache idxs bound"))
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         ">=")
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "i = opn(nth(cache, k - 1)`1) - 2")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (case
                                                                                                                             "i < opn(nth(cache, k - 1)`1) - 2")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "nth_ol[nat,<]")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "nth(cache, k - 1)`3"
                                                                                                                                   "opn(nth(cache, k - 1)`1) - 2"
                                                                                                                                   "i")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              "varac not single value"))
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (use
                                                                                   "power_Epsilon_is_Epsilon")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      "varac not single value"))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             (1
                                                                              "opn >= 2"))
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (reveal
                                                                                 "opn name")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide-all-but
                                                                             (1
                                                                              "varac not single value"))
                                                                            (("4"
                                                                              (expand
                                                                               "length")
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "length")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide-all-but
                                                                         (1
                                                                          "opn >= 2"))
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (reveal
                                                                             "opn name")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("5"
                                                                          (expand
                                                                           "length")
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "k")
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 1 2))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but
                                     (1 "varac not single value"))
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (use
                                         "power_Epsilon_is_Epsilon")
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but (1 "opn >= 2"))
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (reveal "opn name")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (with-labels (flatten "nwidxs")
                       (("cached opn < 2" "nwidxs" "UNKNOWN")))
                      (("2"
                        (with-labels (typepred "cache")
                         (("correct cache" "cache comp pairs"
                           "cache idxs bound" "UNKNOWN")))
                        (("2" (expand "compatible_pairs?")
                          (("2"
                            (with-labels (skeep "cache comp pairs")
                             (("N vars in box" "cache comp pairs on"
                               "UNKNOWN")))
                            (("2"
                              (inst 2
                               "upd_noise_burst(N, nats(nextfreeidx, newoff - 1), LAMBDA(i:nat): (get_noise_by_idx(nth(pd(varac),0)`1, N)^(2+i)))")
                              (("1"
                                (split 2)
                                (("1"
                                  (expand "vars_in_box_compatible?")
                                  (("1"
                                    (skolem 1 "k")
                                    (("1"
                                      (inst "N vars in box" "k")
                                      (("1"
                                        (with-labels
                                         (flatten "N vars in box")
                                         (("eval box is vs"
                                           "single intervals in box"
                                           "UNKNOWN")))
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (replace
                                             "eval box is vs"
                                             1
                                             :dir
                                             RL)
                                            (("1"
                                              (expand "var_ac" 1)
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "eval_ac_noise"
                                                       2)
                                                      (("1"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand_ol)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (use
                                                                       "eval_pd_noise_rec_pds_def")
                                                                      (("1"
                                                                        (expand_ol)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "eval_pd_noise_rec_pds_def")
                                                                            (("1"
                                                                              (expand_ol)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "nextfreeidx")
                                                                                    (("1"
                                                                                      (use
                                                                                       "gnbi_updb_2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (use
                                                                                             "member_nats")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "k")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "nextfreeidx")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last_idx_in_box")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          "varac not single value"))
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (use
                                                                                               "power_Epsilon_is_Epsilon")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                "varac not single value"))
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (use
                                                                                     "power_Epsilon_is_Epsilon")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "eval_ac_noise"
                                                       1)
                                                      (("2"
                                                        (use
                                                         "eval_pd_noise_rec_pds_def")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand_ol)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (use
                                                                 "eval_pd_noise_rec_pds_def")
                                                                (("1"
                                                                  (expand_ol)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (use
                                                                         "power_Epsilon_is_Epsilon")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces
                                                 "single intervals in box"
                                                 1
                                                 :dir
                                                 RL)
                                                (("2"
                                                  (use "gnbi_updb_2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (replaces
                                                         "nwidxs"
                                                         -1)
                                                        (("1"
                                                          (use
                                                           "member_nats")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "k")
                                                                (("1"
                                                                  (typepred
                                                                   "nextfreeidx")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1
                                                      "varac not single value"))
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (use
                                                           "power_Epsilon_is_Epsilon")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "compatible_pairs_on?")
                                  (("2"
                                    (skolem 1 "k")
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (expand
                                               "eval_ACExpr_Env"
                                               1)
                                              (("1"
                                                (replaces "acRes")
                                                (("1"
                                                  (lemma
                                                   "containment_pow_var_ac")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "upd_noise_burst(N,
                                                                                                          nats(nextfreeidx, newoff - 1),
                                                                                                          LAMBDA
                                                                                                          (i: nat):
                                                                                                          (get_noise_by_idx(car(pd(varac))`1, N)
                                                                                                           ^
                                                                                                           (2+i)))"
                                                     "vs(varidx(re))"
                                                     "varac"
                                                     "pow"
                                                     "nwidxs")
                                                    (("1"
                                                      (replace "re" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           "re"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "vars_in_box_compatible?")
                                                                  (("1"
                                                                    (inst
                                                                     "N vars in box"
                                                                     "idx")
                                                                    (("1"
                                                                      (replace
                                                                       "varac"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth_ac"
                                                                         1)
                                                                        (("1"
                                                                          (with-labels
                                                                           (flatten
                                                                            "N vars in box")
                                                                           (("box eval"
                                                                             "box sing int"
                                                                             "UNKNOWN")))
                                                                          (("1"
                                                                            (replace
                                                                             "box eval"
                                                                             1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (use
                                                                               "eval_updb_no_idxs")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     1
                                                                                     "j")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (use
                                                                                         "member_nats")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "nextfreeidx")
                                                                                              (("1"
                                                                                                (use
                                                                                                 "last_idx_box")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  "varac not single value"))
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (use
                                                                                     "power_Epsilon_is_Epsilon")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (reveal
                                                                                       "varac")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         "varac")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth_ac")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (replaces
                                                                                 "varac")
                                                                                (("3"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "nth_ac")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replaces
                                                                     "nwidxs"
                                                                     -1)
                                                                    (("2"
                                                                      (use
                                                                       "member_nats")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replaces
                                                                             "varac")
                                                                            (("2"
                                                                              (typepred
                                                                               "nextfreeidx")
                                                                              (("2"
                                                                                (use
                                                                                 "last_idx_box")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (use
                                                                   "pow_var_compatible_noise")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replaces
                                                                     "varac")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("2"
                                                        (replaces
                                                         "varac")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (use
                                                             "power_Epsilon_is_Epsilon")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("3"
                                                        (replaces
                                                         "varac")
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               "cache comp pairs on"
                                               "k-1")
                                              (("2"
                                                (with-labels
                                                 (flatten
                                                  "cache comp pairs on")
                                                 (("eval cache"
                                                   "cache if powvar"
                                                   "UNKNOWN")))
                                                (("2"
                                                  (replaces
                                                   "eval cache"
                                                   2
                                                   :dir
                                                   RL)
                                                  (("2"
                                                    (use
                                                     "eval_updb_no_idxs")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (skolem
                                                           1
                                                           "i")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (use
                                                               "member_nats")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "idxs_bounded")
                                                                    (("1"
                                                                      (inst
                                                                       "cache idxs bound"
                                                                       "k-1")
                                                                      (("1"
                                                                        (expand
                                                                         "next_idx")
                                                                        (("1"
                                                                          (lemma
                                                                           "beyond_last_idx_notmember")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "i"
                                                                             "pd(nth(cache, k - 1)`2)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "idxs_ac")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("2"
                                                        (replaces
                                                         "varac")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (use
                                                             "power_Epsilon_is_Epsilon")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (1
                                                        "varac not single value"
                                                        "varac"))
                                                      (("3"
                                                        (replaces
                                                         "varac")
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "k=0")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (replace "re" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "pow_var_compatible_noise")
                                                  (("1"
                                                    (replaces "nwidxs")
                                                    (("1"
                                                      (replaces
                                                       "varac")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nth" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 "cache comp pairs on"
                                                 "k-1")
                                                (("2"
                                                  (with-labels
                                                   (flatten
                                                    "cache comp pairs on")
                                                   (("eval cache"
                                                     "cache if powvar"
                                                     "UNKNOWN")))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "pow_var_compatible?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skolem
                                                             2
                                                             "j")
                                                            (("2"
                                                              (inst
                                                               "cache if powvar"
                                                               "j")
                                                              (("2"
                                                                (case
                                                                 "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                                                                                                                           0)`1,
                                                                                                                       upd_noise_burst(N,
                                                                                                                                       nats(nextfreeidx, newoff - 1),
                                                                                                                                       LAMBDA
                                                                                                                                       (i: nat):
                                                                                                                                       (get_noise_by_idx
                                                                                                                                        (car(pd(varac))`1, N)
                                                                                                                                        ^
                                                                                                                                        (2 + i)))) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, k - 1)`1))),
                                                                                                                           0)`1,
                                                                                                                       N)")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (case
                                                                     "get_noise_by_idx(nth(nth(cache, k - 1)`3, j),
                                                                                                                                upd_noise_burst(N,
                                                                                                                                                nats(nextfreeidx, newoff - 1),
                                                                                                                                                LAMBDA
                                                                                                                                                (i: nat):
                                                                                                                                                (get_noise_by_idx
                                                                                                                                                 (car(pd(varac))`1, N)
                                                                                                                                                 ^
                                                                                                                                                 (2 + i)))) = get_noise_by_idx(nth(nth(cache, k - 1)`3, j),
                                                                                                                                N)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (use
                                                                         "gnbi_updb_2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             1)
                                                                            (("1"
                                                                              (use
                                                                               "member_nats")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (use
                                                                                         "cache_powvar_correct")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "CacheData_correct?")
                                                                                          (("1"
                                                                                            (with-labels
                                                                                             (flatten
                                                                                              -1)
                                                                                             (("cache_k-1`3 length"
                                                                                               "cache_k-1`3 precond hold"
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "UNKNOWN")))
                                                                                            (("1"
                                                                                              (replace
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "cache idxs bound")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "next_idx_pow_var_ac")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1
                                                                                                   :where
                                                                                                   "cache idxs bound")
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               "cache idxs bound"
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "j")
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    -5
                                                                                                                    "cache idxs bound"))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     ">=")
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "j = opn(nth(cache, k - 1)`1) - 2 ")
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "j < opn(nth(cache, k - 1)`1) - 2")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           (-2
                                                                                                                            1))
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "nth_ol[nat,<]")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "nth(cache, k - 1)`3"
                                                                                                                               "opn(nth(cache, k - 1)`1) - 2"
                                                                                                                               "j")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (use
                                                                               "power_Epsilon_is_Epsilon")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "length")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("3"
                                                                            (expand
                                                                             "length")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (use
                                                                     "gnbi_updb_2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (use
                                                                           "member_nats")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (typepred
                                                                                 "nextfreeidx")
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth_ac"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst
                                                                                       "cache idxs bound"
                                                                                       "k-1")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "next_idx")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "somevidx"
                                                                                           "varidx(nth(cache, k - 1)`1)")
                                                                                          (("1"
                                                                                            (use
                                                                                             "last_idx_box")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "next_idx")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "last_idx")
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "olidx_car_last[nzBaseType]")
                                                                                                        (("1"
                                                                                                          (expand_ol)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -4
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth_ac")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          -8))
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        "varac not single value"))
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (use
                                                                             "power_Epsilon_is_Epsilon")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide-all-but
                                                                       (1
                                                                        "varac not single value"))
                                                                      (("3"
                                                                        (expand
                                                                         "length")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (use
                                                                       "power_Epsilon_is_Epsilon")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide-all-but
                                                                   (1
                                                                    "varac not single value"))
                                                                  (("4"
                                                                    (expand
                                                                     "length")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but
                                 (1 "varac not single value"))
                                (("2"
                                  (skeep)
                                  (("2"
                                    (use "power_Epsilon_is_Epsilon")
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace "newoff" 1)
                  (("3" (expand ">=")
                    (("3"
                      (case "nextfreeidx - opn(val(cached)`1) + pow = nextfreeidx + (pow - opn(val(cached)`1))")
                      (("1" (replaces -1)
                        (("1" (case "0 < pow - opn(val(cached)`1)")
                          (("1" (hide-all-but (1 -1))
                            (("1"
                              (name-replace "A"
                               "pow - opn(val(cached)`1)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace "newoff" 1)
                  (("4" (expand "idxs_bounded" 1)
                    (("4" (skeep)
                      (("4" (case "i=0")
                        (("1" (replaces -1)
                          (("1" (expand "nth" 1)
                            (("1" (replace "acRes" 1)
                              (("1"
                                (use "next_idx_pow_var_ac")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 3)
                                          (("1"
                                            (flatten)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (replace "nwidxs" 2)
                                              (("2"
                                                (lift-if 2)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "pow - 1 = opn(val(cached)`1)")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         1
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "nth(append(take[nat](pownoises, pow - 2),
                                                                                                          nats(nextfreeidx, newoff - 1)),
                                                                                                   pow - 2) = nextfreeidx")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (use
                                                                 "nth_append[nat]")
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (use
                                                                     "length_take[nat]")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "min")
                                                                        (("1"
                                                                          (lift-if
                                                                           1)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (case
                                                                                 "length(pownoises) = pow - 2")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "length(pownoises) > opn(val(cached)`1) - 2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     "pownoises"
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "cached")
                                                                                      (("2"
                                                                                        (use
                                                                                         "cache_powvar_correct_result")
                                                                                        (("2"
                                                                                          (with-labels
                                                                                           (typepred
                                                                                            "cache")
                                                                                           (("correct cache"
                                                                                             "cache compatible pairs"
                                                                                             "cache idxs bounded"
                                                                                             "UNKNOWN")))
                                                                                          (("2"
                                                                                            (with-labels
                                                                                             (assert)
                                                                                             (("cached correct")))
                                                                                            (("2"
                                                                                              (replace
                                                                                               "cached"
                                                                                               "cached correct"
                                                                                               :dir
                                                                                               RL)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "CacheData_correct?"
                                                                                                 "cached correct")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "cached")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             "varac"
                                                                                                             "varac not single value")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -2
                                                                                                               "cached correct")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 "re"
                                                                                                                 "cached correct")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (use
                                                                     "length_take[nat]")
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "length_append[nat]")
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "length_take[nat]")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "min")
                                                                            (("2"
                                                                              (lift-if
                                                                               1)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (replace
                                                                                     "pownoises"
                                                                                     1)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -2)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "cached")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (with-labels
                                                                                             (flatten
                                                                                              -1)
                                                                                             (("cached powvar"
                                                                                               "cached idx re"
                                                                                               "cached cache idx"
                                                                                               "UNKNOWN")))
                                                                                            (("2"
                                                                                              (skolem
                                                                                               "cached cache idx"
                                                                                               "j")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 "cached cache idx"
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "cache_powvar_correct")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "CacheData_correct?")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (with-labels
                                                                                                         (flatten
                                                                                                          -1)
                                                                                                         (("chached varidx < box"
                                                                                                           "cached cond ok"
                                                                                                           "cached as AC"
                                                                                                           "UNKNOWN")))
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           "cached idx re"
                                                                                                           "cached cond ok")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             "re"
                                                                                                             "cached cond ok")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "nth_append[nat]")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           2)
                                                          (("1"
                                                            (case
                                                             "nth(nats(nextfreeidx, newoff - 1),
                                                                                                            pow - 2 - length(take[nat](pownoises, opn(val(cached)`1) - 1))) = newoff -1 ")
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               2)
                                                              (("1"
                                                                (replace
                                                                 "newoff"
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "length(take[nat](pownoises, opn(val(cached)`1) - 1)) = opn(val(cached)`1) - 1")
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (replaces
                                                                   "newoff"
                                                                   1)
                                                                  (("1"
                                                                    (typepred
                                                                     "nats(nextfreeidx, nextfreeidx - opn(val(cached)`1) + pow - 1)")
                                                                    (("1"
                                                                      (inst?
                                                                       -5)
                                                                      (("1"
                                                                        (replace
                                                                         -5
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "length_take[nat]")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "min"
                                                                     1)
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replaces
                                                                             "pownoises"
                                                                             1)
                                                                            (("2"
                                                                              (use
                                                                               "cache_powvar_correct_result")
                                                                              (("2"
                                                                                (with-labels
                                                                                 (typepred
                                                                                  "cache")
                                                                                 (("correct cache"
                                                                                   "cache compatible pairs"
                                                                                   "cache idxs bounded"
                                                                                   "UNKNOWN")))
                                                                                (("2"
                                                                                  (with-labels
                                                                                   (assert)
                                                                                   (("cached correct")))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "CacheData_correct?"
                                                                                     "cached correct")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "cached")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 "cached"
                                                                                                 "cached correct"
                                                                                                 :dir
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   "cached correct")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     "re"
                                                                                                     "cached correct")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (case
                                                               "length[nat](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) = opn(val[CacheData](cached)`1) - 1")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "length_take[nat]")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "min"
                                                                     1)
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replaces
                                                                             "pownoises"
                                                                             1)
                                                                            (("2"
                                                                              (use
                                                                               "cache_powvar_correct_result")
                                                                              (("2"
                                                                                (with-labels
                                                                                 (typepred
                                                                                  "cache")
                                                                                 (("correct cache"
                                                                                   "cache compatible pairs"
                                                                                   "cache idxs bounded"
                                                                                   "UNKNOWN")))
                                                                                (("2"
                                                                                  (with-labels
                                                                                   (assert)
                                                                                   (("cached correct")))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "length[nat](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) = opn(val[CacheData](cached)`1) - 1")
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "length_append[nat]")
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (use
                                                                   "length_take[nat]")
                                                                  (("1"
                                                                    (replaces
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replaces
                                                                               "pownoises"
                                                                               1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "cached")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (with-labels
                                                                                     (flatten
                                                                                      -1)
                                                                                     (("cached powvar"
                                                                                       "cached idx re"
                                                                                       "cached cache idx"
                                                                                       "UNKNOWN")))
                                                                                    (("2"
                                                                                      (skolem
                                                                                       "cached cache idx"
                                                                                       "j")
                                                                                      (("2"
                                                                                        (replace
                                                                                         "cached cache idx"
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (use
                                                                                           "cache_powvar_correct")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "CacheData_correct?")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (with-labels
                                                                                                 (flatten
                                                                                                  -1)
                                                                                                 (("chached varidx < box"
                                                                                                   "cached cond ok"
                                                                                                   "cached as AC"
                                                                                                   "UNKNOWN")))
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   "varac")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     "cached idx re"
                                                                                                     "cached cond ok")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       "re")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (use
                                                               "length_take[nat]")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "min"
                                                                   1)
                                                                  (("1"
                                                                    (lift-if
                                                                     1)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replaces
                                                                           "pownoises"
                                                                           1)
                                                                          (("2"
                                                                            (use
                                                                             "cache_powvar_correct_result")
                                                                            (("2"
                                                                              (with-labels
                                                                               (typepred
                                                                                "cache")
                                                                               (("correct cache"
                                                                                 "cache compatible pairs"
                                                                                 "cache idxs bounded"
                                                                                 "UNKNOWN")))
                                                                              (("2"
                                                                                (with-labels
                                                                                 (assert)
                                                                                 (("cached correct")))
                                                                                (("2"
                                                                                  (expand
                                                                                   "CacheData_correct?"
                                                                                   "cached correct")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "cached")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (replace
                                                                                               "cached"
                                                                                               "cached correct"
                                                                                               :dir
                                                                                               RL)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2
                                                                                                 "cached correct")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   "re"
                                                                                                   "cached correct")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace
                                                       "newoff"
                                                       2)
                                                      (("2"
                                                        (typepred
                                                         "nats(nextfreeidx, nextfreeidx - opn(val(cached)`1) + pow - 1)")
                                                        (("2"
                                                          (inst? -5)
                                                          (("2"
                                                            (replaces
                                                             -5
                                                             3)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (with-labels (typepred "cache")
                           (("correct cache" "cache compatible pairs"
                             "cache idxs bounded" "UNKNOWN")))
                          (("2"
                            (expand "idxs_bounded"
                                    "cache idxs bounded")
                            (("2" (expand "nth" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst "cache idxs bounded" "i-1")
                                  (("2"
                                    (expand ">=")
                                    (("2"
                                      (case
                                       "nextfreeidx - opn(val(cached)`1) + pow = nextfreeidx + (pow - opn(val(cached)`1))")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "0 < pow - opn(val(cached)`1)")
                                          (("1"
                                            (hide-all-but
                                             (-1
                                              2
                                              "cache idxs bounded"))
                                            (("1"
                                              (name-replace
                                               "A"
                                               "pow - opn(val(cached)`1)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (factorial def-decl "posnat" factorial "ints/")
    (C const-decl "posnat" binomial "reals/")
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= car(idxs)}"
     affine_pow nil)
    (length_append formula-decl nil list_props nil)
    (cache_powvar_correct_result formula-decl nil affine_expr_Eval_fnd
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (length_take formula-decl nil list_more_props nil)
    (pow skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (nth_append formula-decl nil list_more_props nil)
    (N skolem-const-decl "Noise" affine_expr_Eval_fnd nil)
    (pow_var_compatible_noise formula-decl nil affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (k skolem-const-decl
     "below(length(cons((re, acRes, nwidxs), cache)))"
     affine_expr_Eval_fnd nil)
    (j skolem-const-decl "below(opn(nth(cache, k - 1)`1) - 1)"
     affine_expr_Eval_fnd nil)
    (k skolem-const-decl "below(length(box))" affine_expr_Eval_fnd nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (length def-decl "nat" list_props nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (newoff skolem-const-decl "int" affine_expr_Eval_fnd nil)
    (/= const-decl "boolean" notequal nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (varac skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (N skolem-const-decl "Noise" affine_expr_Eval_fnd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (opn skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (^ const-decl "real" exponentiation nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (upd_noise_burst const-decl "Noise" affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (beyond_last_idx_notmember formula-decl nil affine nil)
    (eval_updb_no_idxs formula-decl nil affine nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (containment_pow_var_ac formula-decl nil affine_pow nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (take def-decl "list[T]" list_more_props nil)
    (last_idx const-decl "int" indexed_list nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (expt def-decl "real" exponentiation nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (SingInterval? const-decl "bool" affine nil)
    (notmember_ol_nat formula-decl nil affine_pow nil)
    (cached skolem-const-decl "{res: Maybe[CacheData] |
         some?(res) IMPLIES
          powvar?(val(res)`1) AND
           varidx(val(res)`1) = varidx(re) AND
            (EXISTS (i: below(length(cache))): nth(cache, i) = val(res))}"
     affine_expr_Eval_fnd nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (member def-decl "bool" list_props nil)
    (last_ol def-decl "T" ordered_list nil)
    (take_ol formula-decl nil ordered_list nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (last_idx_box formula-decl nil affine_box nil)
    (member_append_fi formula-decl nil list_more_props nil)
    (pownoises skolem-const-decl
     "ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]"
     affine_expr_Eval_fnd nil)
    (above nonempty-type-eq-decl nil integers nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (last_take_nth formula-decl nil ordered_list nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (powvar_comp_noise_extension formula-decl nil affine_pow nil)
    (represents_var? const-decl "bool" affine nil)
    (next_idx const-decl "nat" affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (idx skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (cache_powvar_correct formula-decl nil affine_expr_Eval_fnd nil)
    (i skolem-const-decl "below(opn(nth(cache, k - 1)`1) - 1)"
     affine_expr_Eval_fnd nil)
    (nth_ol formula-decl nil ordered_list nil)
    (k skolem-const-decl
     "below(length(cons((re, acRes, nwidxs), cache)))"
     affine_expr_Eval_fnd nil)
    (nwidxs skolem-const-decl "list[nat]" affine_expr_Eval_fnd nil)
    (acRes skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eval_ac_noise const-decl "real" affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (gnbi_updb_2 formula-decl nil affine nil)
    (member_nats formula-decl nil affine_pow nil)
    (power_Epsilon_is_Epsilon formula-decl nil affine_pow nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (k skolem-const-decl "below(length(box))" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil))
   nil)
  (RE2AC_TCC61-1 nil 3631872799 ("" (cases-tcc) nil nil) nil nil))
 (RE2AC_TCC62 0
  (RE2AC_TCC62-1 nil 3632064917 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (next_idx const-decl "nat" affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (RE2AC_TCC63 0
  (RE2AC_TCC63-1 nil 3632064917 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car_ol const-decl "T" ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (represents_var? const-decl "bool" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (RE2AC_TCC64 0
  (RE2AC_TCC64-2 nil 3632080211
   ("" (skeep*)
    (("" (replaces -5)
      (("" (typepred "nats(nextfreeidx, newoff - 1)")
        (("1" (replaces -4)
          (("1" (split 8)
            (("1" (replaces -8) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (expand "car_ol")
                (("2" (replaces -3)
                  (("2" (expand "next_idx")
                    (("2" (use "last_idx_box")
                      (("2" (replaces -6)
                        (("2" (expand "next_idx")
                          (("2" (typepred "nextfreeidx")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replaces -4) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (last_idx_box formula-decl nil affine_box nil)
    (next_idx const-decl "nat" affine nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car_ol const-decl "T" ordered_list nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (> const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil)
  (RE2AC_TCC64-1 nil 3632064917 ("" (subtype-tcc) nil nil) nil nil))
 (RE2AC_TCC65 0
  (RE2AC_TCC65-1 nil 3632064917
   ("" (skeep*)
    (("" (assert)
      ((""
        (apply (then (label "re" -1) (label "varac" -2)
                (label "cached" -3) (label "newoff" -4)
                (label "nwidxs" -5) (label "acRes" -6)
                (label "result" -7) (label "idx" 1)
                (label "pow <= 1" 2) (label "varac not single value" 3)
                (label "not in cache 3" 4) (label "not in cache 2" 5)
                (label "not in cache 1" 6)))
        (("" (replaces "re")
          (("" (replaces "result")
            (("" (assert)
              (("" (split 7)
                (("1" (expand "correct_cache?")
                  (("1" (expand "CacheData_correct?")
                    (("1" (flatten)
                      (("1" (typepred "nextfreeidx")
                        (("1" (replaces "nwidxs" 2)
                          (("1" (expand "nats" 2)
                            (("1" (lift-if 2)
                              (("1"
                                (split 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replaces -1 1 :dir RL)
                                      (("1"
                                        (use "last_idx_box")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand_ol)
                                    (("2"
                                      (use "last_idx_box")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces "newoff")
                  (("2" (hide-all-but (1 "pow <= 1"))
                    (("2"
                      (case "nextfreeidx - 1 + pow = nextfreeidx + (pow-1)")
                      (("1" (replaces -1)
                        (("1" (case "0<=pow - 1")
                          (("1" (name-replace "A" "pow -1 ")
                            (("1" (assert) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (C const-decl "posnat" binomial "reals/")
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_pd def-decl
     "{pds: ErrorTerms | NOT null?(pds) AND car(pds)`1 >= car(idxs)}"
     affine_pow nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (nth def-decl "T" list_props nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (last_idx_box formula-decl nil affine_box nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil))
   nil))
 (RE2AC_TCC66 0
  (RE2AC_TCC66-2 nil 3632080585
   ("" (skeep*)
    (("" (assert)
      (("" (hide -8)
        ((""
          (apply (then (label "re" -1) (label "varac" -2)
                  (label "cached" -3) (label "newoff" -4)
                  (label "nwidxs" -5) (label "acRes" -6)
                  (label "result" -7) (label "idx" 1)
                  (label "pow <= 1" 2)
                  (label "varac not single value" 3)
                  (label "not in cache 3" 4) (label "not in cache 2" 5)
                  (label "not in cache 1" 6)))
          (("" (replaces "re")
            (("" (replaces "result")
              (("" (assert)
                (("" (split 7)
                  (("1"
                    (inst 1 "(: (POWVAR(idx, pow), acRes, nwidxs) :)")
                    (("1" (grind) nil nil)) nil)
                   ("2"
                    (with-labels (typepred "cache")
                     (("cache correct" "cache comp pairs"
                       "cache idxs bound" "UNKNOWN")))
                    (("2" (expand "compatible_pairs?")
                      (("2"
                        (with-labels (skeep "cache comp pairs")
                         (("N vars in box" "cache comp pairs on"
                           "UNKNOWN")))
                        (("2"
                          (inst 1
                           "upd_noise_burst(N, nwidxs, LAMBDA(i:nat): (get_noise_by_idx(nth(pd(varac),0)`1, N)^(i+2)))")
                          (("1" (split 1)
                            (("1" (expand "vars_in_box_compatible?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst "N vars in box" "i_1")
                                  (("1"
                                    (with-labels
                                     (flatten)
                                     (("eval box is vs"
                                       "single intervals in box"
                                       "UNKNOWN")))
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (replace
                                         "eval box is vs"
                                         1
                                         :dir
                                         RL)
                                        (("1"
                                          (expand "var_ac" 1)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "eval_ac_noise"
                                                   2)
                                                  (("1"
                                                    (use
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand_ol)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (expand_ol)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (use
                                                                   "eval_pd_noise_rec_pds_def")
                                                                  (("1"
                                                                    (expand_ol)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (use
                                                                         "eval_pd_noise_rec_pds_def")
                                                                        (("1"
                                                                          (expand_ol)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (typepred
                                                                                 "nextfreeidx")
                                                                                (("1"
                                                                                  (use
                                                                                   "gnbi_updb_2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         "nwidxs"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "member_nats")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "i_1")
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "nextfreeidx")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "last_idx_in_box")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             "newoff"
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                "pow <= 1"))
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      "varac not single value"))
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "power_Epsilon_is_Epsilon")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            "varac not single value"))
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (use
                                                                                 "power_Epsilon_is_Epsilon")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (use
                                                                           "power_Epsilon_is_Epsilon")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "eval_ac_noise"
                                                   1)
                                                  (("2"
                                                    (use
                                                     "eval_pd_noise_rec_pds_def")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand_ol)
                                                        (("2"
                                                          (replaces
                                                           -1
                                                           1)
                                                          (("2"
                                                            (use
                                                             "eval_pd_noise_rec_pds_def")
                                                            (("1"
                                                              (expand_ol)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                "varac not single value"))
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "power_Epsilon_is_Epsilon")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replaces
                                             "single intervals in box"
                                             1
                                             :dir
                                             RL)
                                            (("2"
                                              (use "gnbi_updb_2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (replaces
                                                     "nwidxs"
                                                     -1)
                                                    (("1"
                                                      (use
                                                       "member_nats")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (typepred
                                                             "i_1")
                                                            (("1"
                                                              (typepred
                                                               "nextfreeidx")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces
                                                         "newoff"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1
                                                  "varac not single value"))
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "power_Epsilon_is_Epsilon")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "compatible_pairs_on?")
                              (("2"
                                (skeep 1)
                                (("2"
                                  (case "i_1=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (expand "eval_ACExpr_Env" 1)
                                        (("1"
                                          (expand
                                           "vars_in_box_compatible?")
                                          (("1"
                                            (inst
                                             "N vars in box"
                                             "idx")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace
                                                 "N vars in box"
                                                 1
                                                 :dir
                                                 RL)
                                                (("1"
                                                  (replace "acRes" 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (use
                                                       "containment_pow_var_ac")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (replaces
                                                               "varac")
                                                              (("1"
                                                                (expand
                                                                 "nth_ac")
                                                                (("1"
                                                                  (use
                                                                   "eval_updb_no_idxs")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (skolem
                                                                         1
                                                                         "k")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (use
                                                                             "idxs_ac_var_ac")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   "nwidxs"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "member_nats")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "nextfreeidx")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replaces
                                                                                       "newoff"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (use
                                                                           "power_Epsilon_is_Epsilon")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (replaces
                                                                 "nwidxs"
                                                                 -1)
                                                                (("2"
                                                                  (use
                                                                   "member_nats")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (typepred
                                                                         "nextfreeidx")
                                                                        (("1"
                                                                          (expand
                                                                           "last_idx_in_box")
                                                                          (("1"
                                                                            (expand
                                                                             ">")
                                                                            (("1"
                                                                              (replaces
                                                                               "varac")
                                                                              (("1"
                                                                                (use
                                                                                 "last_idx_box")
                                                                                (("1"
                                                                                  (expand
                                                                                   ">=")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "next_idx")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "last_idx")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "last_ol")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replaces
                                                                     "newoff"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (use
                                                               "pow_var_compatible_noise")
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1
                                                          "varac not single value"))
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (use
                                                               "power_Epsilon_is_Epsilon")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (1
                                                          "varac not single value"))
                                                        (("3"
                                                          (expand
                                                           "length")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "pow_var_compatible_noise")
                                                      (("1"
                                                        (replace
                                                         "varac"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     "cache comp pairs on"
                                     "i_1 -1 ")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replaces
                                             "cache comp pairs on"
                                             2
                                             :dir
                                             RL)
                                            (("1"
                                              (split 2)
                                              (("1"
                                                (use
                                                 "eval_updb_no_idxs")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "idxs_bounded")
                                                        (("2"
                                                          (inst
                                                           "cache idxs bound"
                                                           "i_1 - 1")
                                                          (("2"
                                                            (expand
                                                             "idxs_ac")
                                                            (("2"
                                                              (expand
                                                               "next_idx")
                                                              (("2"
                                                                (use
                                                                 "beyond_last_idx_notmember")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replaces
                                                                     "nwidxs"
                                                                     -1)
                                                                    (("2"
                                                                      (use
                                                                       "member_nats")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (replaces
                                                                         "newoff"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (1
                                                    "varac not single value"))
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "power_Epsilon_is_Epsilon")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but
                                                   (1
                                                    "varac not single value"))
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "pow_var_compatible?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (case
                                                               "get_noise_by_idx(nth(nth(cache, i_1 - 1)`3, i_2),
                                                                                upd_noise_burst(N,
                                                                                                nwidxs,
                                                                                                LAMBDA
                                                                                                (i: nat):
                                                                                                (get_noise_by_idx
                                                                                                 (car(pd(varac))`1, N)
                                                                                                 ^
                                                                                                 (2 + i)))) = get_noise_by_idx(nth(nth(cache, i_1 - 1)`3, i_2),
                                                                                N)")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, i_1 - 1)`1))),
                                                                                           0)`1,
                                                                                       upd_noise_burst(N,
                                                                                                       nwidxs,
                                                                                                       LAMBDA
                                                                                                       (i: nat):
                                                                                                       (get_noise_by_idx
                                                                                                        (car(pd(varac))`1, N)
                                                                                                        ^
                                                                                                        (2 + i)))) = get_noise_by_idx(nth(pd(nth_ac(box, varidx(nth(cache, i_1 - 1)`1))),
                                                                                           0)`1,
                                                                                       N)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (use
                                                                       "gnbi_updb_2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             "nwidxs"
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (use
                                                                                 "member_nats")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "last_idx_box")
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "next_idx")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "last_idx")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT null?(pd(nth_ac(box, varidx(nth(cache, i_1 - 1)`1))))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "olidx_car_last[nzBaseType]")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "nextfreeidx")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "car_ol")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   "newoff"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (use
                                                                             "power_Epsilon_is_Epsilon")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         (1
                                                                          "varac not single value"))
                                                                        (("3"
                                                                          (expand
                                                                           "length")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (use
                                                                   "gnbi_updb_2")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         "cache comp pairs on")
                                                                        (("1"
                                                                          (replace
                                                                           "nwidxs"
                                                                           -1)
                                                                          (("1"
                                                                            (use
                                                                             "member_nats")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "idxs_bounded")
                                                                                    (("1"
                                                                                      (inst?
                                                                                       "cache idxs bound")
                                                                                      (("1"
                                                                                        (use
                                                                                         "cache_powvar_correct")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "CacheData_correct?")
                                                                                          (("1"
                                                                                            (with-labels
                                                                                             (flatten
                                                                                              -1)
                                                                                             (("cache_k-1`3 length"
                                                                                               "cache_k-1`3 precond hold"
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "UNKNOWN")))
                                                                                            (("1"
                                                                                              (replace
                                                                                               "cache_k-1`2 pow_var_ac"
                                                                                               "cache idxs bound")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "next_idx_pow_var_ac")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1
                                                                                                   :where
                                                                                                   "cache idxs bound")
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               ">=")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 "cache idxs bound")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "i_2")
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-6
                                                                                                                      -1
                                                                                                                      "cache idxs bound"))
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "i_2 = opn(nth(cache, i_1 - 1)`1) - 2")
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           RL)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "i_2 < opn(nth(cache, i_1 - 1)`1) - 2")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -2
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "nth_ol[nat,<]")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "nth(cache, i_1-1)`3"
                                                                                                                               "opn(nth(cache, i_1-1)`1) - 2"
                                                                                                                               "i_2")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replaces
                                                                               "newoff")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (use
                                                                         "power_Epsilon_is_Epsilon")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "length")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (1
                                                                      "varac not single value"))
                                                                    (("3"
                                                                      (expand
                                                                       "length")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 (1
                                                                  "varac not single value"))
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (use
                                                                     "power_Epsilon_is_Epsilon")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide-all-but
                                                                 (1
                                                                  "varac not single value"))
                                                                (("4"
                                                                  (expand
                                                                   "length")
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i_1")
                                      (("2"
                                        (hide-all-but (-1 1 2))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (hide-all-but (1 "varac not single value"))
                            (("2" (skeep)
                              (("2"
                                (assert)
                                (("2"
                                  (use "power_Epsilon_is_Epsilon")
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replaces "newoff")
                    (("3" (expand ">=")
                      (("3" (hide-all-but (1 "pow <= 1"))
                        (("3"
                          (case "nextfreeidx - 1 + pow = nextfreeidx + (pow - 1)")
                          (("1" (replaces -1)
                            (("1" (case "1<=(pow - 1)")
                              (("1"
                                (name-replace "A" "pow-1")
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (typepred "cache")
                    (("4" (expand "idxs_bounded")
                      (("4" (skeep)
                        (("4" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (replaces "acRes")
                                (("1"
                                  (use "next_idx_pow_var_ac")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (lift-if 1)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (typepred "nwidxs")
                                            (("1"
                                              (case "length(nwidxs)=0")
                                              (("1" (assert) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (replaces "newoff")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand ">=")
                                                (("2"
                                                  (replaces "nwidxs")
                                                  (("2"
                                                    (typepred
                                                     "nats(nextfreeidx, nextfreeidx - 2 + pow)")
                                                    (("2"
                                                      (inst -5 "pow-2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" 2)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2"
                                  (replaces "newoff")
                                  (("2"
                                    (hide-all-but (2 -3 "pow <= 1"))
                                    (("2"
                                      (case
                                       "nextfreeidx - 1 + pow = nextfreeidx + (pow - 1)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case "1<=(pow - 1)")
                                          (("1"
                                            (name-replace "A" "pow-1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (POWVAR adt-constructor-decl "[[nat, nat] -> (powvar?)]"
     AffineExpr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (> const-decl "bool" reals nil)
    (car_ol const-decl "T" ordered_list nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (varac skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (N skolem-const-decl "Noise" affine_expr_Eval_fnd nil)
    (upd_noise_burst const-decl "Noise" affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (containment_pow_var_ac formula-decl nil affine_pow nil)
    (represents_var? const-decl "bool" affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (next_idx const-decl "nat" affine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (eval_updb_no_idxs formula-decl nil affine nil)
    (idx skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (idxs_ac_var_ac formula-decl nil affine nil)
    (expt def-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (last_idx const-decl "int" indexed_list nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (SingInterval? const-decl "bool" affine nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (cache skolem-const-decl
     "{cache: (compatible_pairs?(box, vs)) | idxs_bounded(nextfreeidx)(cache)}"
     affine_expr_Eval_fnd nil)
    (nextfreeidx skolem-const-decl
     "{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)}"
     affine_expr_Eval_fnd nil)
    (vs skolem-const-decl "Env" affine_expr_Eval_fnd nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (last_ol def-decl "T" ordered_list nil)
    (last_idx_box formula-decl nil affine_box nil)
    (pow_var_compatible_noise formula-decl nil affine_pow nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (beyond_last_idx_notmember formula-decl nil affine nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (varidx shared-adt-accessor-decl
     "[{x: AffineExpr | powvar?(x) OR varidx?(x)} -> nat]"
     AffineExpr_adt nil)
    (olidx_car_last formula-decl nil indexed_list nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (i_2 skolem-const-decl "below(opn(nth(cache, i_1 - 1)`1) - 1)"
     affine_expr_Eval_fnd nil)
    (nth_ol formula-decl nil ordered_list nil)
    (next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (cache_powvar_correct formula-decl nil affine_expr_Eval_fnd nil)
    (opn adt-accessor-decl "[(powvar?) -> nat]" AffineExpr_adt nil)
    (i_1 skolem-const-decl
     "below(length(cons((POWVAR(idx, pow), acRes, nwidxs), cache)))"
     affine_expr_Eval_fnd nil)
    (nwidxs skolem-const-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           nextfreeidx
           AND
           length(r) = newoff - nextfreeidx AND
            (FORALL (i: below(length(r))): nth(r, i) = i + nextfreeidx)}"
     affine_expr_Eval_fnd nil)
    (acRes skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (pow skolem-const-decl "nat" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eval_ac_noise const-decl "real" affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (gnbi_updb_2 formula-decl nil affine nil)
    (member_nats formula-decl nil affine_pow nil)
    (newoff skolem-const-decl "int" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (power_Epsilon_is_Epsilon formula-decl nil affine_pow nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (i_1 skolem-const-decl "below(length(box))" affine_expr_Eval_fnd
     nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nats def-decl
     "{r: ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)] |
         NOT null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
                 (r)
          AND
          car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)](r) =
           s
           AND
           length(r) = e - s + 1 AND
            (FORALL (i: below(length(r))): nth(r, i) = s + i)}"
     affine_pow nil))
   nil)
  (RE2AC_TCC66-1 nil 3632064917 ("" (subtype-tcc) nil nil) nil nil))
 (RE2AC_TCC67 0
  (RE2AC_TCC67-1 nil 3632064917 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_idx const-decl "nat" affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (RE2AC_TCC68 0
  (RE2AC_TCC68-1 nil 3632064917 ("" (cases-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (RE2AC_TCC69 0
  (RE2AC_TCC69-1 nil 3632130329 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (RE2AC_TCC70 0
  (RE2AC_TCC70-1 nil 3632130329 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (RE2AC_TCC71 0
  (RE2AC_TCC71-1 nil 3632130329 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (next_idx const-decl "nat" affine nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil))
 (RE2AC_TCC72 0
  (RE2AC_TCC72-2 nil 3632130837
   ("" (skeep*)
    (("" (replaces -1)
      (("" (typepred "res1")
        (("" (assert)
          (("" (replaces -5 :dir RL)
            (("" (flatten)
              (("" (assert)
                (("" (expand "compatible_pairs?")
                  (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil))
   nil)
  (RE2AC_TCC72-1 nil 3632130329 ("" (subtype-tcc) nil nil) nil nil))
 (RE2AC_TCC73 0
  (RE2AC_TCC73-1 nil 3632130329 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
     AffineExpr_adt nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (RE2AC_TCC74 0
  (RE2AC_TCC74-1 nil 3632130329 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (RE2AC_TCC75 0
  (RE2AC_TCC75-1 nil 3632130329 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (RE2AC_TCC76 0
  (RE2AC_TCC76-1 nil 3632130329 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (RE2AC_TCC77 0
  (RE2AC_TCC77-1 nil 3632130329 ("" (grind) nil nil)
   ((ordered_list? def-decl "bool" ordered_list nil)) nil))
 (RE2AC_TCC78 0
  (RE2AC_TCC78-1 nil 3632130329 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (last_ol def-decl "T" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (sub_pd_pd const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil))
   nil))
 (RE2AC_TCC79 0
  (RE2AC_TCC79-2 nil 3632131028
   ("" (skeep*)
    (("" (assert)
      (("" (hide -11)
        ((""
          (apply (then (label "result" -10) (label "ac2" -9)
                  (label "cache2" -8) (label "newid2" -7)
                  (label "res2" -6) (label "ac1" -5)
                  (label "cache1" -4) (label "newid1" -3)
                  (label "res1" -2) (label "re" -1)))
          ((""
            (deftactic typepred_res2 nil
             (with-labels
              (then (typepred "res2") (replace "cache2" -1 :dir RL)
               (replace "newid2" -1 :dir RL) (assert) (flatten))
              (("cache2 not null" "re2" "cache2-form" "N2"
                "newid2-prop" "cache2-idxs_bound" "UNKNOWN"))))
            ((""
              (deftactic typepred_res1 nil
               (with-labels
                (then (typepred "res1") (replace "cache1" -1 :dir RL)
                 (replace "newid1" -1 :dir RL) (assert) (flatten))
                (("cache1 not null" "re1" "cache1-form" "N1"
                  "newid1-prop" "cache1-idxs_bound" "UNKNOWN"))))
              (("" (split 3)
                (("1" (grind) nil nil)
                 ("2" (replaces "result")
                  (("2" (assert)
                    (("2" (typepred_res1)
                      (("2" (typepred_res2)
                        (("2" (skolem "cache2-form" "l2")
                          (("2" (skolem "cache1-form" "l1")
                            (("2" (replace "cache1-form" "cache2-form")
                              (("2"
                                (replace "cache2-form" 3)
                                (("2"
                                  (inst
                                   3
                                   "cons((re, sub_ac_ac(ac1, ac2), null)::CacheData, append(l2,l1))")
                                  (("1"
                                    (hide-all-but 3)
                                    (("1"
                                      (expand "append" 1 3)
                                      (("1"
                                        (use "append_assoc[CacheData]")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred_res2)
                  (("3" (skolem "N2" "N2")
                    (("3"
                      (with-labels (flatten)
                       (("N2 vars in box comp" "N2 compatible pairs")))
                      (("3" (inst 2 "N2")
                        (("3" (assert)
                          (("3" (expand "compatible_pairs_on?")
                            (("3" (skeep)
                              (("3"
                                (case "i=0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "nth" 2)
                                    (("1"
                                      (replace "result")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "eval_ACExpr_Env" 2)
                                          (("1"
                                            (replaces "re")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "containment_sub")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (typepred_res1)
                                                        (("1"
                                                          (replaces
                                                           "re1"
                                                           :dir
                                                           RL)
                                                          (("1"
                                                            (skolem
                                                             "N1"
                                                             "N1")
                                                            (("1"
                                                              (with-labels
                                                               (flatten)
                                                               (("N1 vars in box comp"
                                                                 "N1 compatible pairs")))
                                                              (("1"
                                                                (case
                                                                 "FORALL (i: below(length(cache1))):
                                                                                                                                                                                         eval_ac_noise(nth(cache1, i)`2, N2) =
                                                                                                                                                                                          eval_ac_noise(nth(cache1, i)`2, N1)")
                                                                (("1"
                                                                  (replace
                                                                   "ac1")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "compatible_pairs_on?"
                                                                           "N1 compatible pairs")
                                                                          (("1"
                                                                            (inst
                                                                             "N1 compatible pairs"
                                                                             "0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               "N1 compatible pairs")
                                                                              (("1"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "compatible_pairs_on?"
                                                                   "N1 compatible pairs")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       "N1 compatible pairs"
                                                                       "i!1")
                                                                      (("2"
                                                                        (skolem
                                                                         "cache2-form"
                                                                         "l2")
                                                                        (("2"
                                                                          (replace
                                                                           "cache2-form"
                                                                           "N2 compatible pairs")
                                                                          (("2"
                                                                            (inst
                                                                             "N2 compatible pairs"
                                                                             "length(l2)+i!1")
                                                                            (("1"
                                                                              (case
                                                                               "nth(append(l2, cache1), length(l2) + i!1) = nth(cache1, i!1)")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (use
                                                                                   "nth_append[CacheData]")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "length_append[CacheData]")
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "i!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               "cache2-form"
                                                                               1)
                                                                              (("2"
                                                                                (use
                                                                                 "length_append[CacheData]")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         "N2 compatible pairs"
                                                         "0")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           "N2 compatible pairs")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name "j" "i-1")
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "nth" 3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (replace "result")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   "N2 compatible pairs"
                                                   "j")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replaces "result")
                  (("4" (assert)
                    (("4" (typepred_res2)
                      (("4" (typepred_res1) nil nil)) nil))
                    nil))
                  nil)
                 ("5" (replaces "result")
                  (("5" (assert)
                    (("5" (expand "idxs_bounded")
                      (("5" (skeep)
                        (("5" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (use "next_idx_sub_ac_ac")
                                (("1"
                                  (expand ">=")
                                  (("1"
                                    (typepred_res2)
                                    (("1"
                                      (typepred_res1)
                                      (("1"
                                        (expand "idxs_bounded")
                                        (("1"
                                          (inst
                                           "cache1-idxs_bound"
                                           "0")
                                          (("1"
                                            (expand
                                             "nth"
                                             "cache1-idxs_bound")
                                            (("1"
                                              (replace "ac1" :dir RL)
                                              (("1"
                                                (inst
                                                 "cache2-idxs_bound"
                                                 "0")
                                                (("1"
                                                  (expand
                                                   "nth"
                                                   "cache2-idxs_bound")
                                                  (("1"
                                                    (replace
                                                     "ac2"
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (hide-all-but
                                                       (3
                                                        "cache2-idxs_bound"
                                                        "newid2-prop"
                                                        "cache1-idxs_bound"
                                                        -11))
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if -4)
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 ">=")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred_res2)
                            (("2" (expand "idxs_bounded")
                              (("2"
                                (inst "cache2-idxs_bound" "i-1")
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (next_idx_sub_ac_ac formula-decl nil affine nil)
    (i skolem-const-decl
     "below(length(cons((re, sub_ac_ac(ac1, ac2), null), cache2)))"
     affine_expr_Eval_fnd nil)
    (ac2 skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (ac1 skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (nth_append formula-decl nil list_more_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_append formula-decl nil list_props nil)
    (cache2 skolem-const-decl "(correct_cache?(box))"
     affine_expr_Eval_fnd nil)
    (i!1 skolem-const-decl "below(length(cache1))" affine_expr_Eval_fnd
     nil)
    (l2 skolem-const-decl "list[CacheData]" affine_expr_Eval_fnd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cache1 skolem-const-decl "(correct_cache?(box))"
     affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (eval_ac_noise const-decl "real" affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (containment_sub formula-decl nil affine nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append_assoc formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (sub_pd_pd const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (sub_ac_ac const-decl "AffineCombination" affine nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (RE2AC_TCC79-1 nil 3632130329 ("" (subtype-tcc) nil nil) nil nil))
 (RE2AC_TCC80 0
  (RE2AC_TCC80-1 nil 3632130329 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
     AffineExpr_adt nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (RE2AC_TCC81 0
  (RE2AC_TCC81-1 nil 3632130329 ("" (cases-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (next_idx const-decl "nat" affine nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (RE2AC_TCC82 0
  (RE2AC_TCC82-1 nil 3632131428 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (RE2AC_TCC83 0
  (RE2AC_TCC83-1 nil 3632131428 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (next_idx const-decl "nat" affine nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (Noise type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (Epsilon type-eq-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (RE2AC_TCC84 0
  (RE2AC_TCC84-1 nil 3632131428 ("" (grind) nil nil)
   ((ordered_list? def-decl "bool" ordered_list nil)) nil))
 (RE2AC_TCC85 0
  (RE2AC_TCC85-1 nil 3632131428
   ("" (skeep*)
    (("" (replace -6 2)
      (("" (assert)
        (("" (expand "correct_cache?")
          (("" (expand "CacheData_correct?") (("" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (CacheData_correct? const-decl "bool" affine_expr_Eval_fnd nil))
   nil))
 (RE2AC_TCC86 0
  (RE2AC_TCC86-1 nil 3632131428
   ("" (skeep*)
    (("" (assert)
      (("" (hide -7)
        ((""
          (apply (then (label "result" -6) (label "ac1" -5)
                  (label "cache1" -4) (label "newid1" -3)
                  (label "res1" -2) (label "re" -1)))
          ((""
            (deftactic typepred_res1 nil
             (with-labels
              (then (typepred "res1") (replace "cache1" -1 :dir RL)
               (replace "newid1" -1 :dir RL) (assert) (flatten))
              (("cache1 not null" "re1" "cache1-form" "N1"
                "newid1-prop" "cache1-idxs_bound" "UNKNOWN"))))
            (("" (split 2)
              (("1" (grind) nil nil)
               ("2" (replaces "result")
                (("2" (assert)
                  (("2" (typepred_res1)
                    (("2" (skolem "cache1-form" "l1")
                      (("2" (replace "cache1-form" 2)
                        (("2"
                          (inst 2
                           "cons((re, neg_ac(ac1), null)::CacheData, l1)")
                          (("1" (hide-all-but 2)
                            (("1" (expand "append" 1 2)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "ordered_list?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (typepred_res1)
                (("3" (skolem "N1" "N1")
                  (("3" (inst 2 "N1")
                    (("3"
                      (with-labels (flatten "N1")
                       (("N1 vars in box" "N1 comp on pairs")))
                      (("3" (assert)
                        (("3" (expand "compatible_pairs_on?")
                          (("3" (skeep)
                            (("3" (case "i=0")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (expand "nth" 2)
                                  (("1"
                                    (replace "result")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "eval_ACExpr_Env" 2)
                                        (("1"
                                          (replaces "re")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use "containment_neg")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 3)
                                                  (("1"
                                                    (inst
                                                     "N1 comp on pairs"
                                                     "0")
                                                    (("1"
                                                      (with-labels
                                                       (flatten
                                                        "N1 comp on pairs")
                                                       (("eval"
                                                         "powvar")))
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         "eval")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "length")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "nth" 3)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst "N1 comp on pairs" "i-1")
                                    (("1"
                                      (replaces "result")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (replaces "result")
                (("4" (assert) (("4" (typepred_res1) nil nil)) nil))
                nil)
               ("5" (replaces "result")
                (("5" (assert)
                  (("5" (expand "idxs_bounded")
                    (("5" (skeep)
                      (("5" (case "i=0")
                        (("1" (replaces -1)
                          (("1" (expand "nth" 1)
                            (("1" (use "next_idx_neg_ac")
                              (("1"
                                (expand ">=")
                                (("1"
                                  (typepred_res1)
                                  (("1"
                                    (expand "idxs_bounded")
                                    (("1"
                                      (inst "cache1-idxs_bound" "0")
                                      (("1"
                                        (expand
                                         "nth"
                                         "cache1-idxs_bound")
                                        (("1"
                                          (replace "ac1" :dir RL)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "length")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred_res1)
                          (("2" (expand "idxs_bounded")
                            (("2" (inst "cache1-idxs_bound" "i-1")
                              (("1"
                                (expand "nth" 3)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (typepred "i")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (<= const-decl "bool" reals nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (Noise type-eq-decl nil affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (containment_neg formula-decl nil affine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cache1 skolem-const-decl "(correct_cache?(box))"
     affine_expr_Eval_fnd nil)
    (box skolem-const-decl "Box" affine_expr_Eval_fnd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (i skolem-const-decl "below(length(result`2))" affine_expr_Eval_fnd
     nil)
    (result skolem-const-decl "[nat, (cons?[CacheData])]"
     affine_expr_Eval_fnd nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (re skolem-const-decl "RealExpr" affine_expr_Eval_fnd nil)
    (ac1 skolem-const-decl "AffineCombination" affine_expr_Eval_fnd
     nil)
    (i skolem-const-decl
     "below(length(cons((re, neg_ac(ac1), null), cache1)))"
     affine_expr_Eval_fnd nil)
    (next_idx_neg_ac formula-decl nil affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (RE2AC_TCC87 0
  (RE2AC_TCC87-1 nil 3632131428 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
     AffineExpr_adt nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (RE2AC_TCC88 0
  (RE2AC_TCC88-1 nil 3632131428 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (< const-decl "bool" reals nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (CacheData type-eq-decl nil affine_expr_Eval_fnd nil)
    (correct_cache? def-decl "bool" affine_expr_Eval_fnd nil)
    (Env type-eq-decl nil affine_box nil)
    (compatible_pairs? const-decl "bool" affine_expr_Eval_fnd nil)
    (idxs_bounded const-decl "bool" affine_expr_Eval_fnd nil)
    (next_idx const-decl "nat" affine nil)
    (compatible_pairs_on? const-decl "bool" affine_expr_Eval_fnd nil)
    (pow_var_compatible? const-decl "bool" affine_pow nil)
    (^ const-decl "real" exponentiation nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (SingInterval? const-decl "bool" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))

