(affine_expr
 (r2E_TCC1 0
  (r2E_TCC1-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (const_ac const-decl "AffineCombination" affine nil))
   nil))
 (eval_ACExpr_Env_TCC1 0
  (eval_ACExpr_Env_TCC1-1 nil 3627301718
   ("" (lemma "well_founded_restrict[AffineExpr,RealExpr]")
    (("" (inst?)
      (("" (expand "well_founded?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded_restrict judgement-tcc nil restrict_order_props nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (eval_ACExpr_Env_TCC2 0
  (eval_ACExpr_Env_TCC2-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC3 0
  (eval_ACExpr_Env_TCC3-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC4 0
  (eval_ACExpr_Env_TCC4-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC5 0
  (eval_ACExpr_Env_TCC5-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC6 0
  (eval_ACExpr_Env_TCC6-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC7 0
  (eval_ACExpr_Env_TCC7-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC8 0
  (eval_ACExpr_Env_TCC8-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC9 0
  (eval_ACExpr_Env_TCC9-1 nil 3627301718 ("" (cases-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (eval_ACExpr_Env_TCC10 0
  (eval_ACExpr_Env_TCC10-1 nil 3630337258 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (new_noise_symbols_count_TCC1 0
  (new_noise_symbols_count_TCC1-1 nil 3630339912
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC1 0
  (Eval_ACExpr_Box_offset_TCC1-1 nil 3627838069
   ("" (skeep)
    (("" (skeep)
      (("" (replaces -2)
        (("" (expand "ac_from")
          (("" (typepred "opC")
            (("" (replaces -1)
              (("" (use "next_idx_const_ac") (("" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ac_from const-decl "bool" affine_expr nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_idx_const_ac formula-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (const_ac const-decl "AffineCombination" affine nil)
    (Unit type-decl nil Unit_adt "structures/")
    (unit? adt-recognizer-decl "[Unit -> boolean]" Unit_adt
           "structures/")
    (unit adt-constructor-decl "(unit?)" Unit_adt "structures/"))
   nil))
 (Eval_ACExpr_Box_offset_TCC2 0
  (Eval_ACExpr_Box_offset_TCC2-1 nil 3627838069
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_from const-decl "bool" affine_expr nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (last_ol def-decl "T" ordered_list nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC3 0
  (Eval_ACExpr_Box_offset_TCC3-1 nil 3627838069 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC4 0
  (Eval_ACExpr_Box_offset_TCC4-3 "" 3628343330
   ("" (skeep*)
    (("" (expand "ac_from")
      (("" (replaces -6)
        (("" (use "next_idx_add_ac_ac")
          (("" (expand ">=")
            (("" (typepred "val(res1)")
              (("" (expand "ac_from")
                (("" (typepred "val(res2)")
                  (("" (expand "ac_from")
                    (("" (replaces -4)
                      (("" (expand "new_noise_symbols_count" 1)
                        (("" (hide-all-but (-1 -2 -3 1))
                          ((""
                            (name-replace "A"
                             "1 + last_idx_in_box(box) + new_noise_symbols_count(op1)")
                            (("" (expand "max")
                              ((""
                                (lift-if)
                                ((""
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ac_from const-decl "bool" affine_expr nil)
    (next_idx_add_ac_ac formula-decl nil affine nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil)
  (Eval_ACExpr_Box_offset_TCC4-2 "" 3628013585
   ("" (skeep*)
    (("" (expand "ac_from")
      (("" (replaces -6)
        (("" (use "next_idx_sub_ac_ac")
          (("" (replaces -1)
            (("" (typepred "val(res1)")
              (("" (expand "ac_from")
                (("" (typepred "val(res2)")
                  (("" (expand "ac_from")
                    (("" (replaces -3)
                      (("" (expand "nonaff_op_count" 1)
                        (("" (hide-all-but (-1 -2 1))
                          ((""
                            (name-replace "A"
                             "1 + last_idx_in_box(box) + nonaff_op_count(op1)")
                            (("" (expand "max")
                              ((""
                                (lift-if 1)
                                ((""
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_idx_sub_ac_ac formula-decl nil affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   shostak)
  (Eval_ACExpr_Box_offset_TCC4-1 nil 3627838069
   ("" (skeep*)
    (("" (expand "ac_from")
      (("" (typepred "val(res2)")
        (("1" (expand "ac_from")
          (("1" (replaces -7)
            (("1" (use "next_idx_add_ac_ac")
              (("1" (replaces -1)
                (("1" (typepred "val(res1)")
                  (("1" (expand "ac_from") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC5 0
  (Eval_ACExpr_Box_offset_TCC5-2 nil 3628343297
   ("" (skeep*)
    (("" (expand "ac_from")
      (("" (replaces -6)
        (("" (use "next_idx_sub_ac_ac")
          (("" (expand ">=")
            (("" (typepred "val(res1)")
              (("" (expand "ac_from")
                (("" (typepred "val(res2)")
                  (("" (expand "ac_from")
                    (("" (replaces -4)
                      (("" (expand "new_noise_symbols_count" 1)
                        (("" (hide-all-but (-1 -2 -3 1))
                          ((""
                            (name-replace "A"
                             "1 + last_idx_in_box(box) + new_noise_symbols_count(op1)")
                            (("" (expand "max")
                              ((""
                                (lift-if -3)
                                ((""
                                  (split -3)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ac_from const-decl "bool" affine_expr nil)
    (next_idx_sub_ac_ac formula-decl nil affine nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   nil)
  (Eval_ACExpr_Box_offset_TCC5-1 nil 3627838069
   ("" (skeep*)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (expand "next_idx_2")
        (("2" (typepred "val[(ac_from(op1, box, nidx_offset))](res1)")
          (("2" (expand "ac_from")
            (("2"
              (typepred "val
                               (res2)")
              (("2" (expand "ac_from")
                (("2" (hide-all-but (-1 -2 1))
                  (("2"
                    (name-replace "A" "next_idx(pd(val
      (res2)))")
                    (("2"
                      (name-replace "B"
                       "next_idx(pd(val[(ac_from(op1, box, nidx_offset))](res1)))")
                      (("2"
                        (case "last_idx_in_box(box) + nonaff_op_count(op1) + nonaff_op_count(op2) + nidx_offset = last_idx_in_box(box) + nonaff_op_count(op1) + nidx_offset + nonaff_op_count(op2)")
                        (("1" (grind) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (Box type-eq-decl nil affine_box nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (next_idx const-decl "nat" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (next_idx_2 const-decl "nat" affine nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC6 0
  (Eval_ACExpr_Box_offset_TCC6-2 nil 3628343268
   ("" (skeep*)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (expand "next_idx_2")
        (("2" (typepred "val[(ac_from(op1, box, nidx_offset))](res1)")
          (("2" (expand "ac_from")
            (("2"
              (typepred "val
                                       (res2)")
              (("2" (expand "ac_from")
                (("2" (hide-all-but (-1 -2 1))
                  (("2"
                    (name-replace "A" "next_idx(pd(val
              (res2)))")
                    (("2"
                      (name-replace "B"
                       "next_idx(pd(val[(ac_from(op1, box, nidx_offset))](res1)))")
                      (("2"
                        (case "last_idx_in_box(box) + new_noise_symbols_count(op1) + new_noise_symbols_count(op2) + nidx_offset = last_idx_in_box(box) + new_noise_symbols_count(op1) + nidx_offset + new_noise_symbols_count(op2)")
                        (("1" (grind) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (ac_from const-decl "bool" affine_expr nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (next_idx const-decl "nat" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (next_idx_2 const-decl "nat" affine nil))
   nil)
  (Eval_ACExpr_Box_offset_TCC6-1 nil 3627838069
   ("" (skeep*)
    (("" (expand "ac_from")
      (("" (replaces -6)
        (("" (use "next_idx_mult_ac_ac")
          (("1" (replaces -1)
            (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((next_idx_mult_ac_ac formula-decl nil affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC7 0
  (Eval_ACExpr_Box_offset_TCC7-2 nil 3628343233
   ("" (skeep*)
    (("" (expand "ac_from")
      (("" (replaces -6)
        (("" (use "next_idx_mult_ac_ac") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ac_from const-decl "bool" affine_expr nil)
    (next_idx_mult_ac_ac formula-decl nil affine nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (next_idx_2 const-decl "nat" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (next_idx const-decl "nat" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (mult_ac_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (append_ol const-decl "ordered_list" ordered_list nil)
    (add_ET const-decl "ErrorTerms" affine nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (Eval_ACExpr_Box_offset_TCC7-1 nil 3627838069
   ("" (skeep*)
    (("" (expand "ac_from")
      (("" (replaces -1)
        (("" (replaces -3)
          (("" (typepred "val(res)")
            (("" (expand "ac_from")
              (("" (use "next_idx_neg_ac")
                (("" (replaces -1)
                  (("" (expand "nonaff_op_count" 1)
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_idx_neg_ac formula-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/"))
   nil))
 (Eval_ACExpr_Box_offset_TCC8 0
  (Eval_ACExpr_Box_offset_TCC8-2 "" 3630341642
   ("" (skeep*)
    (("" (expand "ac_from")
      (("" (replaces -1)
        (("" (replaces -3)
          (("" (typepred "val(res)")
            (("" (expand "ac_from")
              (("" (use "next_idx_neg_ac")
                (("" (replaces -1)
                  (("" (expand "new_noise_symbols_count" 1)
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ac_from const-decl "bool" affine_expr nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (next_idx_neg_ac formula-decl nil affine nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/"))
   shostak)
  (Eval_ACExpr_Box_offset_TCC8-1 nil 3628342690
   ("" (skeep*)
    (("" (expand "ac_from")
      (("" (replaces -1)
        (("" (replaces -3)
          (("" (typepred "val(res)")
            (("" (expand "ac_from")
              (("" (use "next_idx_neg_ac")
                (("" (replaces -1)
                  (("" (expand "nonaff_op_count" 1)
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC9 0
  (Eval_ACExpr_Box_offset_TCC9-1 nil 3630337258
   ("" (skeep*)
    (("" (replaces -2)
      (("" (expand "represents_var?")
        (("" (expand "nth_ac") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((nth_ac const-decl "AffineCombination" affine_box nil)
    (length def-decl "nat" list_props nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (represents_var? const-decl "bool" affine nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC10 0
  (Eval_ACExpr_Box_offset_TCC10-1 nil 3630337258
   ("" (skeep*)
    ((""
      (case "nidx_offset + 1 + last_idx_in_box(box) >= next_idx(pd(variable))")
      (("1" (assert) nil nil)
       ("2" (hide 3)
        (("2" (expand "last_idx_in_box") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((AffineCombination type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (next_idx const-decl "nat" affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (last_ol def-decl "T" ordered_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (last_idx const-decl "int" indexed_list nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC11 0
  (Eval_ACExpr_Box_offset_TCC11-1 nil 3630337258
   ("" (skeep*)
    (("" (replaces -2)
      (("" (expand "ac_from")
        (("" (replaces -1)
          (("" (expand "new_noise_symbols_count")
            (("" (use "next_idx_pow_var_ac")
              (("" (expand ">=")
                (("" (lift-if 2)
                  (("" (split 2)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_idx_pow_var_ac formula-decl nil affine_pow nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (next_idx const-decl "nat" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (represents_var? const-decl "bool" affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (ac_from const-decl "bool" affine_expr nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (Eval_ACExpr_Box_offset_TCC12 0
  (Eval_ACExpr_Box_offset_TCC12-1 nil 3630337258
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (acf_to_ac_TCC1 0
  (acf_to_ac_TCC1-1 nil 3627902640 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (Eval_ACExpr_Box_TCC1 0
  (Eval_ACExpr_Box_TCC1-1 nil 3627819871 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (Eval_offset_someness_monotony 0
  (Eval_offset_someness_monotony-1 nil 3628071649
   (""
    (deftactic binop nil
     (then (skolem 1 ("op1" "op2") :skolem-typepreds? t) (flatten)
      (hide -5)
      (spread (split -3)
       ((spread (split -4)
         ((then (hide -3 -4) (skeep) (inst -1 "box" "_")
           (inst -2 "box" "n")
           (spread (split 1)
            ((then (flatten) (expand "Eval_ACExpr_Box" -1) (lift-if -1)
              (assert)
              (spread (split -1)
               ((propax)
                (then (expand "Eval_ACExpr_Box_offset" 1) (lift-if 1)
                 (spread (split 1)
                  ((then (flatten) (assert)
                    (spread (split 1)
                     ((then (expand "Eval_ACExpr_Box_offset" 1)
                       (lift-if 1)
                       (spread (split 1)
                        ((then (assert) (flatten)
                          (spread (split 1)
                           ((propax)
                            (then (copy -4)
                             (inst -5
                              "new_noise_symbols_count(op1) + n")
                             (assert)
                             (inst -1
                              "1 + new_noise_symbols_count(op1)")
                             (assert)))))
                         (then (flatten) (grind)))))
                      (propax))))
                   (then (flatten) (assert))))))))
             (then (flatten) (expand "Eval_ACExpr_Box" 1) (lift-if 1)
              (assert)
              (spread (split 1)
               ((then (expand "Eval_ACExpr_Box_offset" -1) (lift-if -1)
                 (assert)
                 (spread (split -1)
                  ((then (flatten) (expand "Eval_ACExpr_Box_offset" -3)
                    (lift-if -3) (assert)
                    (spread (split -3)
                     ((then (flatten)
                       (spread (split -2)
                        ((spread (split -4)
                          ((propax)
                           (then (copy -4)
                            (inst -5
                             "new_noise_symbols_count(op1) + n")
                            (assert)
                            (inst -1
                             "1 + new_noise_symbols_count(op1)")
                            (assert))))
                         (propax))))
                      (propax))))
                   (grind))))
                (propax)))))))
          (propax)))
        (propax)))))
    (("" (induct "expr")
      (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil)
       ("2" (grind) nil nil) ("3" (grind) nil nil)
       ("4" (binop) nil nil)
       ("5" (skeep :preds? t)
        (("5" (split -2)
          (("1" (hide -2 -3)
            (("1" (skeep)
              (("1" (expand "Eval_ACExpr_Box" 1)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "Eval_ACExpr_Box_offset" -1)
                          (("1" (lift-if -1)
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (expand "Eval_ACExpr_Box_offset" -1)
                                  (("2"
                                    (lift-if -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (copy -2)
                                          (("1"
                                            (inst -1 "box" "1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -2 "box" "n")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "Eval_ACExpr_Box_offset" 2 1)
                        (("2" (lift-if 2)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "Eval_ACExpr_Box_offset" 1)
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split 1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (copy -2)
                                          (("2"
                                            (inst -1 "box" "1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -3 "box" "n")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil)
       ("6" (binop) nil nil) ("7" (binop) nil nil)
       ("8" (skeep :preds? t)
        (("8" (hide -3)
          (("8" (skeep)
            (("8" (expand "Eval_ACExpr_Box" 1)
              (("8" (lift-if 1)
                (("8" (split 1)
                  (("1" (flatten)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (assert) nil nil) ("10" (assert) nil nil)
       ("11" (assert) nil nil) ("12" (assert) nil nil)
       ("13" (assert) nil nil))
      nil))
    nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Eval_ACExpr_Box const-decl "Maybe[AffineCombination]" affine_expr
     nil)
    (ac_from const-decl "bool" affine_expr nil)
    (Eval_ACExpr_Box_offset def-decl
     "Maybe[(ac_from(expr, box, nidx_offset))]" affine_expr nil)
    (AffineExpr_induction formula-decl nil AffineExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (well_typed?_TCC1 0
  (well_typed?_TCC1-1 nil 3627987550 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (well_typed?_TCC2 0
  (well_typed?_TCC2-1 nil 3627987550 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (well_typed?_TCC3 0
  (well_typed?_TCC3-1 nil 3627987550 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (well_typed?_TCC4 0
  (well_typed?_TCC4-1 nil 3630337258 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (well_typed?_TCC5 0
  (well_typed?_TCC5-1 nil 3630337258 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (some_well_typed 0
  (some_well_typed-1 nil 3628077307
   (""
    (deftactic binop nil
     (then (expand "well_typed?") (skeep :preds? t)
      (spread (split -3)
       ((spread (split -4)
         ((then (hide -3 -4) (skeep) (inst?) (inst?)
           (expand "Eval_ACExpr_Box" -3) (lift-if -3) (assert)
           (spread (split -3)
            ((propax)
             (then (expand "Eval_ACExpr_Box_offset" 1) (lift-if 1)
              (assert)
              (spread (split 1)
               ((then (flatten)
                 (spread (split 1)
                  ((then (use "Eval_offset_someness_monotony") (assert)
                    (lemma "Eval_offset_someness_monotony")
                    (inst? -1 :where -4) (assert)
                    (expand "well_typed?" 1)
                    (spread (split 1) ((propax) (propax))))
                   (propax))))
                (propax)))))))
          (propax)))
        (propax)))))
    (("" (induct "expr")
      (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil)
       ("2" (expand "well_typed?") (("2" (propax) nil nil)) nil)
       ("3" (expand "well_typed?") (("3" (grind) nil nil)) nil)
       ("4" (binop) nil nil)
       ("5" (skeep :preds? t)
        (("5" (split -2)
          (("1" (hide -2 -3)
            (("1" (skeep)
              (("1" (inst?)
                (("1" (expand "well_typed?" 1)
                  (("1" (assert)
                    (("1" (hide 2) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil)
       ("6" (binop) nil nil) ("7" (binop) nil nil)
       ("8" (binop) nil nil) ("9" (assert) nil nil)
       ("10" (assert) nil nil) ("11" (assert) nil nil)
       ("12" (assert) nil nil) ("13" (assert) nil nil))
      nil))
    nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Eval_ACExpr_Box const-decl "Maybe[AffineCombination]" affine_expr
     nil)
    (well_typed? inductive-decl "bool" affine_expr nil)
    (AffineExpr_induction formula-decl nil AffineExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Eval_ACExpr_Box_offset def-decl
     "Maybe[(ac_from(expr, box, nidx_offset))]" affine_expr nil)
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Eval_offset_someness_monotony formula-decl nil affine_expr nil)
    (neg_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (Eval_offset_idxs 0
  (Eval_offset_idxs-1 nil 3627986655
   (""
    (deftactic binop (idxs_lemma)
     (then (skeep* :preds? t) (hide -7)
      (spread (split -5)
       ((spread (split -6)
         ((then (hide -5 -6) (expand "Eval_ACExpr_Box_offset" -5)
           (lift-if -5) (assert)
           (spread (split -5)
            ((then (flatten)
              (spread (split -2)
               ((then (inst? -4) (assert) (inst? -3) (assert)
                 (expand "Eval_ACExpr_Box_offset" -9) (inst? -3)
                 (inst? -4) (assert) (use idxs_lemma) (assert))
                (propax))))
             (propax))))
          (propax)))
        (propax)))))
    (("" (induct "expr")
      (("1" (assert) nil nil)
       ("2" (typepred "expr!1") (("2" (assert) nil nil)) nil)
       ("3" (skeep)
        (("3" (hide -1)
          (("3" (skeep)
            (("3" (skeep)
              (("3" (expand "idxs_ac")
                (("3" (typepred "CONST2_var")
                  (("3" (replaces -1) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep*)
        (("4" (hide -1)
          (("4" (use "some_well_typed")
            (("4" (split -1)
              (("1" (grind) nil nil)
               ("2" (use "Eval_offset_someness_monotony")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (binop "idxs_ac_add_ac_ac") nil nil)
       ("6" (skeep* :preds? t)
        (("6" (hide -5)
          (("6" (split -4)
            (("1" (hide -4)
              (("1" (expand "Eval_ACExpr_Box_offset" -4)
                (("1" (lift-if -4)
                  (("1" (split -4)
                    (("1" (flatten)
                      (("1" (inst? -3)
                        (("1" (assert)
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (expand "Eval_ACExpr_Box_offset" -7)
                                (("1"
                                  (use "idxs_ac_neg_ac")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil)
       ("7" (binop "idxs_ac_sub_ac_ac") nil nil)
       ("8" (binop "idxs_ac_mult_ac_ac") nil nil)
       ("9" (skeep* :preds? t)
        (("9" (hide -5)
          (("9" (expand "Eval_ACExpr_Box_offset" -5)
            (("9" (lift-if -5)
              (("9" (split -5)
                (("1" (flatten)
                  (("1" (expand "Eval_ACExpr_Box_offset" -9)
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "Eval_ACExpr_Box_offset")
                    (("2" (assert)
                      (("2" (use "idxs_ac_pow_var_ac")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (assert) nil nil) ("11" (assert) nil nil)
       ("12" (assert) nil nil) ("13" (assert) nil nil)
       ("14" (assert) nil nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (ac_from const-decl "bool" affine_expr nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member def-decl "bool" list_props nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (Eval_ACExpr_Box_offset def-decl
     "Maybe[(ac_from(expr, box, nidx_offset))]" affine_expr nil)
    (AffineExpr_induction formula-decl nil AffineExpr_adt nil)
    (const_ac const-decl "AffineCombination" affine nil)
    (Unit type-decl nil Unit_adt "structures/")
    (unit? adt-recognizer-decl "[Unit -> boolean]" Unit_adt
           "structures/")
    (unit adt-constructor-decl "(unit?)" Unit_adt "structures/")
    ({\|\|} const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (idxs_pd def-decl "list[nat]" affine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Eval_offset_someness_monotony formula-decl nil affine_expr nil)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" AffineExpr_adt
     nil)
    (some_well_typed formula-decl nil affine_expr nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (idxs_ac_add_ac_ac formula-decl nil affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (idxs_ac_neg_ac formula-decl nil affine nil)
    (idxs_ac_sub_ac_ac formula-decl nil affine nil)
    (idxs_ac_mult_ac_ac formula-decl nil affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (next_idx_2 const-decl "nat" affine nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (next_idx const-decl "nat" affine nil)
    (length def-decl "nat" list_props nil)
    (represents_var? const-decl "bool" affine nil)
    (idxs_ac_pow_var_ac formula-decl nil affine_pow nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (Eval_offset_idxs_upper_bound 0
  (Eval_offset_idxs_upper_bound-1 nil 3628006294
   (""
    (deftactic binop (specific-lemma)
     (then (skeep :preds? t) (hide -5) (skeep*)
      (spread (split -3)
       ((spread (split -4)
         ((then (hide -3 -4) (expand "Eval_ACExpr_Box_offset" -3)
           (lift-if -3) (assert)
           (spread (split -3)
            ((then (flatten)
              (spread (split -2)
               ((then (inst? -4) (assert) (inst? -3 :where -1) (assert)
                 (inst -3 "i") (inst -4 "i")
                 (expand "Eval_ACExpr_Box_offset" -5)
                 (use specific-lemma) (assert)
                 (spread (split -1)
                  ((then (assert) (expand "new_noise_symbols_count" 1)
                    (assert))
                   (then (assert) (expand "new_noise_symbols_count" 1)
                    (assert)))))
                (propax))))
             (propax))))
          (propax)))
        (propax)))))
    (("" (induct "expr")
      (("1" (assert) nil nil)
       ("2" (typepred "expr!1") (("2" (assert) nil nil)) nil)
       ("3" (skeep)
        (("3" (hide -1)
          (("3" (skeep*)
            (("3" (typepred "CONST2_var") (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (hide -1)
          (("4" (skeep*)
            (("4" (use "some_well_typed")
              (("4" (split -1)
                (("1" (expand "new_noise_symbols_count")
                  (("1" (expand "Eval_ACExpr_Box_offset" -2)
                    (("1" (lift-if -2)
                      (("1" (assert)
                        (("1" (split -2)
                          (("1" (propax) nil nil)
                           ("2" (expand "Eval_ACExpr_Box_offset" -2)
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (binop "idxs_ac_add_ac_ac") nil nil)
       ("6" (skeep :preds? t)
        (("6" (hide -3)
          (("6" (skeep*)
            (("6" (split -2)
              (("1" (hide -2)
                (("1" (expand "Eval_ACExpr_Box_offset" -2)
                  (("1" (lift-if -2)
                    (("1" (assert)
                      (("1" (split -2)
                        (("1" (inst? -2)
                          (("1" (assert)
                            (("1" (expand "Eval_ACExpr_Box_offset" -3)
                              (("1"
                                (lemma "idxs_ac_neg_ac")
                                (("1"
                                  (inst -3 "i")
                                  (("1"
                                    (inst? -1 :where -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand
                                         "new_noise_symbols_count"
                                         1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (binop "idxs_ac_sub_ac_ac") nil nil)
       ("8" (binop "idxs_ac_mult_ac_ac")
        (("8" (expand "new_noise_symbols_count" 1)
          (("8" (assert) nil nil)) nil))
        nil)
       ("9" (binop "idxs_ac_pow_var_ac")
        (("9" (expand "Eval_ACExpr_Box_offset" -3)
          (("9" (lift-if -3)
            (("9" (assert)
              (("9" (split -3)
                (("1" (propax) nil nil)
                 ("2" (expand "Eval_ACExpr_Box_offset" -3)
                  (("2" (assert)
                    (("2" (use "idxs_ac_pow_var_ac")
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (grind) nil nil)
                           ("2" (flatten)
                            (("2" (expand "new_noise_symbols_count")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (assert) nil nil) ("11" (assert) nil nil)
       ("12" (assert) nil nil) ("13" (assert) nil nil)
       ("14" (assert) nil nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (ac_from const-decl "bool" affine_expr nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (Eval_ACExpr_Box_offset def-decl
     "Maybe[(ac_from(expr, box, nidx_offset))]" affine_expr nil)
    (AffineExpr_induction formula-decl nil AffineExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (const_ac const-decl "AffineCombination" affine nil)
    (Unit type-decl nil Unit_adt "structures/")
    (unit? adt-recognizer-decl "[Unit -> boolean]" Unit_adt
           "structures/")
    (unit adt-constructor-decl "(unit?)" Unit_adt "structures/")
    (idxs_pd def-decl "list[nat]" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (some_well_typed formula-decl nil affine_expr nil)
    (VARIDX adt-constructor-decl "[nat -> (varidx?)]" AffineExpr_adt
     nil)
    (Eval_ACExpr_Box const-decl "Maybe[AffineCombination]" affine_expr
     nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (car_ol const-decl "T" ordered_list nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (idxs_ac_add_ac_ac formula-decl nil affine nil)
    (idxs_ac_neg_ac formula-decl nil affine nil)
    (idxs_ac_sub_ac_ac formula-decl nil affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (nzBaseType type-eq-decl nil affine nil)
    (idxs_ac_mult_ac_ac formula-decl nil affine nil)
    (idxs_ac_pow_var_ac formula-decl nil affine_pow nil)
    (represents_var? const-decl "bool" affine nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (next_idx const-decl "nat" affine nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nth def-decl "T" list_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (noises_of_restricted_Evals_leg_1 0
  (noises_of_restricted_Evals_leg_1-1 nil 3627926346
   ("" (skeep*)
    (("" (beta)
      (("" (flatten)
        (("" (skeep)
          (("" (use "restrict_box_alt_def")
            (("" (flatten)
              (("" (hide -2)
                (("" (use "idxs_box_membership")
                  (("1" (assert)
                    (("1" (replaces -2)
                      (("1" (use "restrict_box_alt_def")
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (assert)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (use
                                   "compatibles_box_noises"
                                   ("N1" "N1" "N2" "N2"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (expand "appin")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((idxs_box_membership formula-decl nil affine_box nil)
    (box skolem-const-decl "Box" affine_expr nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (compatibles_box_noises formula-decl nil affine_box nil)
    (Env type-eq-decl nil affine_box nil)
    (idxs_box const-decl "list[nat]" affine_box nil)
    (appin const-decl "bool" list_more_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (i skolem-const-decl "nat" affine_expr nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (append def-decl "list[T]" list_props nil)
    (restrict_box const-decl "Noise" affine_box nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (ac_from const-decl "bool" affine_expr nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (Eval_ACExpr_Box_offset def-decl
     "Maybe[(ac_from(expr, box, nidx_offset))]" affine_expr nil)
    (restrict_box_alt_def formula-decl nil affine_box nil))
   shostak))
 (noises_of_restricted_Evals_leg_2 0
  (noises_of_restricted_Evals_leg_2-1 nil 3627983511
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (skeep)
          (("" (use "restrict_box_alt_def")
            (("" (flatten)
              (("" (hide -1)
                (("" (assert)
                  (("" (hide 2)
                    (("" (split 1)
                      (("1" (use "Eval_offset_idxs")
                        (("1" (assert)
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (use "idxs_box_membership")
                        (("1" (assert) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Eval_offset_idxs formula-decl nil affine_expr nil)
    (length def-decl "nat" list_props nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (idxs_box const-decl "list[nat]" affine_box nil)
    (member def-decl "bool" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (box skolem-const-decl "Box" affine_expr nil)
    (idxs_box_membership formula-decl nil affine_box nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (ac_from const-decl "bool" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (Eval_ACExpr_Box_offset def-decl
     "Maybe[(ac_from(expr, box, nidx_offset))]" affine_expr nil)
    (restrict_box_alt_def formula-decl nil affine_box nil))
   shostak))
 (noises_of_restricted_Evals_leg_3 0
  (noises_of_restricted_Evals_leg_3-1 nil 3627984342
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (skeep)
          (("" (use "restrict_box_alt_def")
            (("" (flatten)
              (("" (hide -1)
                (("" (assert)
                  (("" (hide 2)
                    (("" (split 1)
                      (("1" (lemma "Eval_offset_idxs_upper_bound")
                        (("1" (inst? -1 :where -2)
                          (("1" (assert)
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "idxs_box_membership")
                        (("1" (assert) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (Eval_offset_idxs_upper_bound formula-decl nil affine_expr nil)
    (length def-decl "nat" list_props nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (idxs_box const-decl "list[nat]" affine_box nil)
    (member def-decl "bool" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (box skolem-const-decl "Box" affine_expr nil)
    (idxs_box_membership formula-decl nil affine_box nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (ac_from const-decl "bool" affine_expr nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (Eval_ACExpr_Box_offset def-decl
     "Maybe[(ac_from(expr, box, nidx_offset))]" affine_expr nil)
    (restrict_box_alt_def formula-decl nil affine_box nil))
   shostak))
 (noises_of_restricted_Evals_leg_4 0
  (noises_of_restricted_Evals_leg_4-1 nil 3627985181
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (skeep)
          (("" (use "restrict_box_alt_def")
            (("" (flatten)
              (("" (hide -1)
                (("" (assert)
                  (("" (hide 2)
                    (("" (split 1)
                      (("1" (lemma "Eval_offset_idxs_upper_bound")
                        (("1" (inst? -1 :where -2)
                          (("1" (assert)
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "idxs_box_membership")
                        (("1" (assert) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Eval_offset_idxs_upper_bound formula-decl nil affine_expr nil)
    (length def-decl "nat" list_props nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (idxs_box const-decl "list[nat]" affine_box nil)
    (member def-decl "bool" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (box skolem-const-decl "Box" affine_expr nil)
    (idxs_box_membership formula-decl nil affine_box nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (list type-decl nil list_adt nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (ac_from const-decl "bool" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (Eval_ACExpr_Box_offset def-decl
     "Maybe[(ac_from(expr, box, nidx_offset))]" affine_expr nil)
    (restrict_box_alt_def formula-decl nil affine_box nil))
   shostak))
 (Eval_offset_noises_matching 0
  (Eval_offset_noises_matching-1 nil 3627985320
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (skeep)
          (("" (case "i <= last_idx_in_box(box)")
            (("1"
              (use "noises_of_restricted_Evals_leg_1"
                   ("N1" "N1" "N2" "N2"))
              (("1" (assert)
                (("1" (assert)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2"
              (case "i <= last_idx_in_box(box)+new_noise_symbols_count(expr1) + n")
              (("1"
                (use "noises_of_restricted_Evals_leg_2"
                     ("N1" "N1" "N2" "N2"))
                (("1" (assert)
                  (("1" (assert)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2"
                (case "i <= last_idx_in_box(box)+new_noise_symbols_count(expr1)+new_noise_symbols_count(expr2)+ n")
                (("1" (hide-all-but (- 1 5))
                  (("1" (lemma "noises_of_restricted_Evals_leg_3")
                    (("1"
                      (inst -1 "N1" "N2" "box" "expr1" "expr2" "n"
                       "vs")
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (use "noises_of_restricted_Evals_leg_4"
                       ("N1" "N1" "N2" "N2" "expr2" "expr2"))
                  (("2" (assert)
                    (("2" (assert)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (noises_of_restricted_Evals_leg_2 formula-decl nil affine_expr nil)
    (noises_of_restricted_Evals_leg_4 formula-decl nil affine_expr nil)
    (noises_of_restricted_Evals_leg_3 formula-decl nil affine_expr nil)
    (noises_of_restricted_Evals_leg_1 formula-decl nil affine_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil))
   shostak))
 (Eval_inclusion_offset 0
  (Eval_inclusion_offset-3 "" 3628886034
   (""
    (deftactic binop (containment-lemma)
     (then (skolem 1 ("op1" "op2") :skolem-typepreds? t) (flatten)
      (hide -5)
      (spread (split -3)
       ((spread (split -4)
         ((then (hide -3 -4) (skeep)
           (expand "Eval_ACExpr_Box_offset" -3) (lift-if -3) (assert)
           (spread (split -3)
            ((then (flatten)
              (spread (split -2)
               ((spread (case "some?(Eval_ACExpr_Box(op1, box))")
                 ((spread (case "some?(Eval_ACExpr_Box(op2, box))")
                   ((then (inst -6 "n") (assert)
                     (inst -5 "n+new_noise_symbols_count(op1)")
                     (assert) (skolem -6 "N1") (skolem -5 "N2p")
                     (name-replace "Eval1"
                      "Eval_ACExpr_Box_offset(op1, box, n)")
                     (name-replace "Eval2"
                      "Eval_ACExpr_Box_offset(op2, box, new_noise_symbols_count(op1) + n)")
                     (name "N1r" "restrict_box(N1,box,val(Eval1))")
                     (name "N2r" "restrict_box(N2p,box,val(Eval2))")
                     (inst 1 "merge(N1r,N2r)")
                     (spread (split 1)
                      ((then (flatten)
                        (use "restrict_box_preserves_compbox"
                             ("N" "N2p" "Xa" "val(Eval2)"))
                        (assert) (hide -8)
                        (use "restrict_box_preserves_compbox"
                             ("N" "N1"))
                        (assert) (replace -3) (replace -4)
                        (expand "vars_in_box_compatible?") (skeep)
                        (inst?) (inst?) (flatten) (replace -1 :dir RL)
                        (use "eval_ac_partial_ext"
                             ("N2" "merge(N1r, N2r)"))
                        (spread (split 1)
                         ((then (assert) (hide 1) (skolem 1 "j")
                           (flatten) (use "merge_prop1")
                           (spread (split -1)
                            ((assert)
                             (then (hide 2) (typepred "j")
                              (lemma "compatibles_box_noises")
                              (inst -1 "N1r" "N2r" "box" "vs") (assert)
                              (inst -1 "j") (use "idxs_box_nth")
                              (expand "nth_ac") (expand "appin")
                              (propax)))))
                          (then (flatten) (assert) (use "merge_prop1")
                           (spread (split -1)
                            ((assert) (then (hide 2) (assert))))))))
                       (then (expand "Eval_ACExpr_Box_offset" 1)
                        (expand "eval_ACExpr_Env" 1)
                        (use containment-lemma) (assert) (hide 2)
                        (spread (split 1)
                         ((then (flatten)
                           (use "restrict_box_preserves_eval"
                                ("Xa" "val(Eval1)"))
                           (replaces -3) (replaces -1)
                           (replaces -9 :dir RL)
                           (use "mergeable_noises_respect_eval")
                           (expand "Eval1") (assert) (hide 2)
                           (use "mergeable_suff_conditions") (assert)
                           (hide 2) (skeep)
                           (spread (case "i <= last_idx_in_box(box)")
                            ((then
                              (use "noises_of_restricted_Evals_leg_1"
                                   ("expr2" "op2" "N1" "N1"))
                              (beta) (assert) (inst?) (assert)
                              (expand "N2r") (expand "N1r")
                              (expand "Eval2") (expand "Eval1")
                              (propax))
                             (then (expand "Eval2" -8)
                              (use "Eval_offset_idxs"
                                   ("expr"
                                    "op2"
                                    "nidx_offset"
                                    "new_noise_symbols_count(op1) + n"))
                              (beta) (assert) (inst?) (assert)
                              (spread (split -1)
                               ((then
                                 (use
                                  "restrict_box_alt_def"
                                  ("N" "N2p"))
                                 (flatten)
                                 (assert)
                                 (hide -1)
                                 (expand "Eval2" 1)
                                 (spread
                                  (case "null?(box)")
                                  ((grind)
                                   (then
                                    (use "idxs_box_membership")
                                    (assert)))))
                                (then
                                 (use "Eval_offset_idxs_upper_bound")
                                 (beta)
                                 (assert)
                                 (inst?)
                                 (assert))))))))
                          (then (flatten) (replaces -8 :dir RL)
                           (use "restrict_box_preserves_eval"
                                ("Xa" "val(Eval2)"))
                           (replaces -1) (replace -1 1)
                           (expand "Eval2" 1)
                           (use "merge_commutativity")
                           (spread (split -1)
                            ((then (replaces -1)
                              (use "mergeable_noises_respect_eval")
                              (assert) (hide 2)
                              (use "mergeable_suff_conditions")
                              (assert) (hide 2) (skeep)
                              (spread
                               (case "i <= last_idx_in_box(box)")
                               ((then
                                 (use
                                  "noises_of_restricted_Evals_leg_1"
                                  ("expr1" "op1" "N1" "N1"))
                                 (beta)
                                 (assert)
                                 (inst?)
                                 (assert)
                                 (expand
                                  ("N2r" "N1r" "Eval2" "Eval1")
                                  1)
                                 (expand
                                  ("N2r" "N1r" "Eval2" "Eval1")
                                  1)
                                 (assert))
                                (then
                                 (use
                                  "Eval_offset_idxs"
                                  ("expr"
                                   "op2"
                                   "nidx_offset"
                                   "new_noise_symbols_count(op1) + n"))
                                 (beta -1)
                                 (assert)
                                 (inst?)
                                 (assert)
                                 (use
                                  "restrict_box_alt_def"
                                  ("N" "N1"))
                                 (flatten)
                                 (hide -1)
                                 (assert)
                                 (spread
                                  (split 1)
                                  ((then
                                    (use
                                     "Eval_offset_idxs_upper_bound"
                                     ("nidx_offset" "n"))
                                    (assert)
                                    (inst?)
                                    (assert)
                                    (expand "Eval1")
                                    (propax))
                                   (spread
                                    (case "null?(box)")
                                    ((grind)
                                     (then
                                      (use "idxs_box_membership")
                                      (assert))))))))))
                             (then (hide 2) (replaces -1 :dir RL)
                              (replaces -1 :dir RL) (expand "Eval1")
                              (lemma "Eval_offset_noises_matching")
                              (inst? -1 :where 1) (expand "Eval2")
                              (inst? -1 :where 1)
                              (inst -1 "N1" "N2p" "vs") (beta) (assert)
                              (skeep) (inst?) (assert)))))))))))
                    (then (use "Eval_offset_someness_monotony")
                     (assert))))
                  (then (hide-all-but (1 -2))
                   (use "Eval_offset_someness_monotony") (assert))))
                (propax))))
             (propax))))
          (propax)))
        (propax)))))
    (("" (skeep)
      (("" (beta)
        (("" (induct "expr")
          (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil)
           ("2" (skeep :preds? t)
            (("2" (skeep :preds? t)
              (("2" (hide -3)
                (("2"
                  (expand* "eval_ACExpr_Env" "Eval_ACExpr_Box"
                   "Eval_ACExpr_Box_offset")
                  (("2" (replaces -2)
                    (("2" (typepred "vs")
                      (("2" (expand "vars_in_box?")
                        (("2" (flatten)
                          (("2" (skeep)
                            (("2" (inst? 1)
                              (("2"
                                (assert)
                                (("2" (use "containment_cnt") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (hide -1)
              (("3" (skeep)
                (("3"
                  (expand* "eval_ACExpr_Env" "Eval_ACExpr_Box"
                   "Eval_ACExpr_Box_offset")
                  (("3" (lift-if -1)
                    (("3" (assert)
                      (("3" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (typepred "vs")
                          (("2" (expand "vars_in_box?")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (binop "containment_add") nil nil)
           ("5" (skolem 1 ("op") :skolem-typepreds? t)
            (("5" (flatten)
              (("5" (hide -3)
                (("5" (split -2)
                  (("1" (hide -2)
                    (("1" (skeep)
                      (("1" (expand "Eval_ACExpr_Box_offset" -2)
                        (("1" (lift-if -2)
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (inst -2 "n")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -2 "N")
                                    (("1"
                                      (name-replace
                                       "Eval"
                                       "Eval_ACExpr_Box_offset(op, box, n)")
                                      (("1"
                                        (name
                                         "Nr"
                                         "restrict_box(N,box,val(Eval))")
                                        (("1"
                                          (inst 1 "N")
                                          (("1"
                                            (split 1)
                                            (("1" (flatten) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "Eval_ACExpr_Box_offset")
                                                (("2"
                                                  (expand
                                                   "eval_ACExpr_Env"
                                                   1)
                                                  (("2"
                                                    (use
                                                     "containment_neg")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "Eval")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (binop "containment_sub") nil nil)
           ("7" (skolem 1 ("op1" "op2") :skolem-typepreds? t)
            (("7" (flatten)
              (("7" (hide -5)
                (("7" (split -3)
                  (("1" (split -4)
                    (("1" (hide -3 -4)
                      (("1" (skeep)
                        (("1" (expand "Eval_ACExpr_Box_offset" -3)
                          (("1" (lift-if -3)
                            (("1" (assert)
                              (("1"
                                (split -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (case
                                       "some?(Eval_ACExpr_Box(op1, box))")
                                      (("1"
                                        (case
                                         "some?(Eval_ACExpr_Box(op2, box))")
                                        (("1"
                                          (inst -6 "n")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -5
                                               "n+new_noise_symbols_count(op1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -6 "N1")
                                                  (("1"
                                                    (skolem -5 "N2p")
                                                    (("1"
                                                      (name-replace
                                                       "Eval1"
                                                       "Eval_ACExpr_Box_offset(op1, box, n)")
                                                      (("1"
                                                        (name-replace
                                                         "Eval2"
                                                         "Eval_ACExpr_Box_offset(op2, box, new_noise_symbols_count(op1) + n)")
                                                        (("1"
                                                          (name
                                                           "N1r"
                                                           "restrict_box(N1,box,val(Eval1))")
                                                          (("1"
                                                            (name
                                                             "N2r"
                                                             "restrict_box(N2p,box,val(Eval2))")
                                                            (("1"
                                                              (inst
                                                               1
                                                               " upd_noise(merge(N1r, N2r),
                                                                                 		1 + last_idx_in_box(box) + new_noise_symbols_count(op1) +
                                                                                                         new_noise_symbols_count(op2)
                                                                                                         + n,
                                                                                 	   mul_noise_value(val(Eval_ACExpr_Box_offset(op1, box, n)),
                                                                                                        val(Eval_ACExpr_Box_offset(op2,
                                                                                                                                   box,
                                                                                                                                   new_noise_symbols_count(op1)
                                                                                                                                   +
                                                                                                                                   n)),
                                                                                                        first_noises(merge(N1r, N2r),
                                                                                                                     1 + last_idx_in_box(box)
                                                                                                                     +
                                                                                                                     new_noise_symbols_count(op1)
                                                                                                                     +
                                                                                                                     new_noise_symbols_count(op2)
                                                                                                                     +
                                                                                                                     n)))")
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (use
                                                                     "restrict_box_preserves_compbox"
                                                                     ("N"
                                                                      "N2p"
                                                                      "Xa"
                                                                      "val(Eval2)"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -8)
                                                                        (("1"
                                                                          (use
                                                                           "restrict_box_preserves_compbox"
                                                                           ("N"
                                                                            "N1"))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (expand
                                                                                   "vars_in_box_compatible?")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "eval_ac_noise(var_ac(nth(box, i), i), upd_noise(merge(N1r, N2r), 1 + last_idx_in_box(box) +  new_noise_symbols_count(op1)  + new_noise_symbols_count(op2)  + n, mul_noise_value(val (Eval_ACExpr_Box_offset
                                                                                                                                                                                (op1, box, n)),
                                                                                                                                                                               val
                                                                                                                                                                               (Eval_ACExpr_Box_offset
                                                                                                                                                                                (op2,
                                                                                                                                                                                 box,
                                                                                                                                                                                 new_noise_symbols_count(op1) + n)),
                                                                                                                                                                               first_noises
                                                                                                                                                                               (merge(N1r, N2r),
                                                                                                                                                                                1 + last_idx_in_box(box)
                                                                                                                                                                                +
                                                                                                                                                                                new_noise_symbols_count(op1)
                                                                                                                                                                                +
                                                                                                                                                                                new_noise_symbols_count(op2)
                                                                                                                                                                                +
                                                                                                                                                                                n)))) = eval_ac_noise(var_ac(nth(box, i), i),
                                                                                                                                                     merge(N1r, N2r))")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   :dir
                                                                                                   RL)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "eval_ac_partial_ext"
                                                                                                     ("N2"
                                                                                                      "merge(N1r, N2r)"))
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "N1r"
                                                                                                       "_")
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -1
                                                                                                         :where
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (skolem
                                                                                                               1
                                                                                                               "j")
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "merge_prop1")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "compatibles_box_noises")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "N1r"
                                                                                                                           "N2r"
                                                                                                                           "box"
                                                                                                                           "vs")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "j")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "appin")
                                                                                                                                (("2"
                                                                                                                                  (use
                                                                                                                                   "idxs_box_nth")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "nth_ac")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "appin")
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (use
                                                                                             "updated_noise_on_varac1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "i")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (use
                                                                                           "gnbi_upd_2")
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -3
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "merge_prop1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (name-replace
                                                                   "main_noise"
                                                                   "upd_noise(merge(N1r, N2r),
                                                                                                                                  1 + last_idx_in_box(box) +
                                                                                                                                   new_noise_symbols_count(op1)
                                                                                                                                   + new_noise_symbols_count(op2)
                                                                                                                                   + n,
                                                                                                                                  mul_noise_value(val
                                                                                                                                                  (Eval_ACExpr_Box_offset
                                                                                                                                                   (op1, box, n)),
                                                                                                                                                  val
                                                                                                                                                  (Eval_ACExpr_Box_offset
                                                                                                                                                   (op2,
                                                                                                                                                    box,
                                                                                                                                                    new_noise_symbols_count(op1) + n)),
                                                                                                                                                  first_noises
                                                                                                                                                  (merge(N1r, N2r),
                                                                                                                                                   1 + last_idx_in_box(box)
                                                                                                                                                   +
                                                                                                                                                   new_noise_symbols_count(op1)
                                                                                                                                                   +
                                                                                                                                                   new_noise_symbols_count(op2)
                                                                                                                                                   +
                                                                                                                                                   n)))")
                                                                  (("1"
                                                                    (expand
                                                                     "Eval_ACExpr_Box_offset"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_ACExpr_Env"
                                                                       1)
                                                                      (("1"
                                                                        (use
                                                                         "containment_mul")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "next_idx_2")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "val(Eval_ACExpr_Box_offset(op1, box, n))")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ac_from")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "val(Eval_ACExpr_Box_offset(op2,
                                                                                                                                                                                                          box,
                                                                                                                                                                                                          new_noise_symbols_count(op1)
                                                                                                                                                                                                          +
                                                                                                                                                                                                          n))")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ac_from")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -2
                                                                                            1))
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "A"
                                                                                             "next_idx(pd(val(Eval_ACExpr_Box_offset(op2,
                                                                                                                                                                                                          box,
                                                                                                                                                                                                          new_noise_symbols_count(op1)
                                                                                                                                                                                                          +
                                                                                                                                                                                                          n))))")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "B"
                                                                                               "next_idx(pd(val(Eval_ACExpr_Box_offset(op1, box, n))))")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (use
                                                                                   "restrict_box_preserves_eval"
                                                                                   ("Xa"
                                                                                    "val(Eval1)"))
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -3)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -9
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (case
                                                                                           "eval_ac_noise(val(Eval_ACExpr_Box_offset(op1, box, n)), main_noise) = eval_ac_noise(val(Eval_ACExpr_Box_offset(op1, box, n)), merge(N1r,N2r))")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (use
                                                                                               "mergeable_noises_respect_eval")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "Eval1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "mergeable_suff_conditions")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "i <= last_idx_in_box(box)")
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "noises_of_restricted_Evals_leg_1"
                                                                                                                 ("expr2"
                                                                                                                  "op2"
                                                                                                                  "N1"
                                                                                                                  "N1"))
                                                                                                                (("1"
                                                                                                                  (beta)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "N2r")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "N1r")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "Eval2")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "Eval1")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "Eval2"
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "Eval_offset_idxs"
                                                                                                                   ("expr"
                                                                                                                    "op2"
                                                                                                                    "nidx_offset"
                                                                                                                    "new_noise_symbols_count(op1) + n"))
                                                                                                                  (("2"
                                                                                                                    (beta)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "restrict_box_alt_def"
                                                                                                                               ("N"
                                                                                                                                "N2p"))
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "Eval2"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "null?(box)")
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (use
                                                                                                                                           "idxs_box_membership")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (use
                                                                                                                               "Eval_offset_idxs_upper_bound")
                                                                                                                              (("2"
                                                                                                                                (beta)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "main_noise"
                                                                                               1)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "eval_upd_no_idxs_ac")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "Eval_offset_idxs_upper_bound")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (case
                                                                                   "eval_ac_noise(val(Eval_ACExpr_Box_offset(op2,
                                                                                                                                                                                                          box,
                                                                                                                                                                                                          new_noise_symbols_count(op1) + n)),
                                                                                                                                                                               main_noise) = eval_ac_noise(val(Eval_ACExpr_Box_offset(op2,
                                                                                                                                                                                                          box,
                                                                                                                                                                                                          new_noise_symbols_count(op1) + n)),
                                                                                                                                                                               merge(N1r,N2r))")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -8
                                                                                       :dir
                                                                                       RL)
                                                                                      (("1"
                                                                                        (use
                                                                                         "restrict_box_preserves_eval"
                                                                                         ("Xa"
                                                                                          "val(Eval2)"))
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "Eval2"
                                                                                               1)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "merge_commutativity")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "mergeable_noises_respect_eval")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "mergeable_suff_conditions")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (skeep)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "i <= last_idx_in_box(box)")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "noises_of_restricted_Evals_leg_1"
                                                                                                                       ("expr1"
                                                                                                                        "op1"
                                                                                                                        "N1"
                                                                                                                        "N1"))
                                                                                                                      (("1"
                                                                                                                        (beta)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 ("N2r"
                                                                                                                                  "N1r"
                                                                                                                                  "Eval2"
                                                                                                                                  "Eval1")
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ("N2r"
                                                                                                                                    "N1r"
                                                                                                                                    "Eval2"
                                                                                                                                    "Eval1")
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "Eval_offset_idxs"
                                                                                                                       ("expr"
                                                                                                                        "op2"
                                                                                                                        "nidx_offset"
                                                                                                                        "new_noise_symbols_count(op1) + n"))
                                                                                                                      (("2"
                                                                                                                        (beta
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "restrict_box_alt_def"
                                                                                                                                 ("N"
                                                                                                                                  "N1"))
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "Eval_offset_idxs_upper_bound"
                                                                                                                                           ("nidx_offset"
                                                                                                                                            "n"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (inst?)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "Eval1")
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (case
                                                                                                                                           "null?(box)")
                                                                                                                                          (("1"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (use
                                                                                                                                             "idxs_box_membership")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "Eval1")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "Eval_offset_noises_matching")
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "Eval2")
                                                                                                                (("2"
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "N1"
                                                                                                                     "N2p"
                                                                                                                     "vs")
                                                                                                                    (("2"
                                                                                                                      (beta)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "main_noise"
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "eval_upd_no_idxs_ac")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "Eval_offset_idxs_upper_bound")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (expand
                                                                                 "main_noise"
                                                                                 1
                                                                                 1)
                                                                                (("4"
                                                                                  (use
                                                                                   "gnbi_upd")
                                                                                  (("4"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("4"
                                                                                      (case
                                                                                       "first_noises(merge(N1r, N2r),
                                                                                                                                                                                              1 + last_idx_in_box(box) +
                                                                                                                                                                                               new_noise_symbols_count(op1)
                                                                                                                                                                                               + new_noise_symbols_count(op2)
                                                                                                                                                                                               + n) = first_noises(main_noise,
                                                                                                                                                                                               1 + last_idx_in_box(box)
                                                                                                                                                                                               +
                                                                                                                                                                                               new_noise_symbols_count(op1)
                                                                                                                                                                                               +
                                                                                                                                                                                               new_noise_symbols_count(op2)
                                                                                                                                                                                               +
                                                                                                                                                                                               n)")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "main_noise"
                                                                                           1)
                                                                                          (("2"
                                                                                            (use
                                                                                             "first_noises_upd")
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "mul_noise_value_is_Epsilon")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use
                                           "Eval_offset_someness_monotony")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 -2))
                                        (("2"
                                          (use
                                           "Eval_offset_someness_monotony")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("8" (skolem 1 ("varidx" "power") :skolem-typepreds? t)
            (("8" (flatten)
              (("8" (hide -3)
                (("8" (skeep)
                  (("8" (expand "Eval_ACExpr_Box_offset" -3)
                    (("8" (lift-if -3)
                      (("8" (assert)
                        (("8" (split -3)
                          (("1" (propax) nil nil)
                           ("2" (expand "eval_ACExpr_Env")
                            (("2" (typepred "vs")
                              (("2"
                                (expand "vars_in_box?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (skolem -2 "N")
                                    (("2"
                                      (expand "Eval_ACExpr_Box_offset")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "nth_ac")
                                          (("2"
                                            (case "power=0")
                                            (("1"
                                              (expand "pow_var_ac")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 2 "N")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (expand
                                                         "eval_ac_noise")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "eval_pd_noise")
                                                            (("1"
                                                              (expand_ol)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "pow_var_ac")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "length(pd(var_ac(nth(box, varidx), varidx))) =
                             0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst 3 "N")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "vars_in_box_compatible?"
                                                           -3)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "varidx")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "eval_ac_noise")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "eval_pd_noise(pd(var_ac(nth(box, varidx), varidx)), N) = 0")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "eval_pd_noise")
                                                                        (("1"
                                                                          (expand_ol)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "eval_pd_noise"
                                                                       1)
                                                                      (("2"
                                                                        (expand_ol)
                                                                        (("2"
                                                                          (lift-if
                                                                           1)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "cv(var_ac(nth(box, varidx), varidx)) = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "power /= 1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               4
                                                               "upd_noise(N,last_idx_in_box(box) - 1 + n
                                  +
                                  power,get_noise_by_idx(varidx, N)^power)")
                                                              (("1"
                                                                (split
                                                                 4)
                                                                (("1"
                                                                  (expand
                                                                   "vars_in_box_compatible?")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (typepred
                                                                               "i")
                                                                              (("1"
                                                                                (use
                                                                                 "updated_noise_on_varac1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (use
                                                                                   "gnbi_upd_2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "i")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "vars_in_box_compatible?"
                                                                   -4)
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     "varidx")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replace
                                                                         -3
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (expand
                                                                           "eval_ac_noise"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "var_ac"
                                                                                 1
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lift-if
                                                                                     1)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_ac"
                                                                                           2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               2
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand_ol)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "eval_pd_noise_rec_pds_def")
                                                                                                  (("1"
                                                                                                    (expand_ol)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "eval_pd_noise_rec_pds_def")
                                                                                                        (("1"
                                                                                                          (expand_ol)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "eval_pd_noise_rec_pds_def")
                                                                                                              (("1"
                                                                                                                (expand_ol)
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (use
                                                                                                                     "eval_pd_noise_rec_pds_def")
                                                                                                                    (("1"
                                                                                                                      (expand_ol)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "gnbi_upd")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (use
                                                                                                                                   "expt_eq_0")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "mult_expt")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "/=")
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    1))
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "expt_nonzero")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "/=")
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "var_ac"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (use
                                                                   "power_Epsilon_judg")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "/=")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   4
                                                                   "N")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "vars_in_box_compatible?")
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "varidx")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replaces
                                                                             -3
                                                                             :dir
                                                                             RL)
                                                                            (("2"
                                                                              (use
                                                                               "expt_x1")
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (use
                                                                                   "expt_x1")
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "power=1")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 5
                                                                 "N")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (name
                                                               "newN"
                                                               "upd_noise_range(N,1 + last_idx_in_box(box) + n,power-2,LAMBDA(i:nat):get_noise_by_idx(nth(pd(var_ac(nth(box, varidx), varidx)),0)`1, N)^(i+2))")
                                                              (("1"
                                                                (inst
                                                                 6
                                                                 "newN")
                                                                (("1"
                                                                  (split
                                                                   6)
                                                                  (("1"
                                                                    (expand
                                                                     "vars_in_box_compatible?")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst?
                                                                         -3)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (replaces
                                                                               -3
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (use
                                                                                 "updated_noise_range_on_v1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "i")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("3"
                                                                                    (skeep)
                                                                                    (("3"
                                                                                      (use
                                                                                       "power_Epsilon_judg")
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -5
                                                                                   1
                                                                                   :dir
                                                                                   RL
                                                                                   :hide?
                                                                                   t)
                                                                                  (("2"
                                                                                    (use
                                                                                     "gnbi_updr_2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (use
                                                                                           "power_Epsilon_judg")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "containment_pow_var_ac")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "newN"
                                                                       "var_ac(nth(box, varidx), varidx)"
                                                                       "power"
                                                                       "1 + last_idx_in_box(box) + n"
                                                                       "vs(varidx)")
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (replaces
                                                                           -1
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (expand
                                                                             "pow_var_ac"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "vars_in_box_compatible?")
                                                                          (("2"
                                                                            (inst?
                                                                             -3
                                                                             :where
                                                                             1)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (replaces
                                                                                 -3
                                                                                 :dir
                                                                                 RL)
                                                                                (("2"
                                                                                  (use
                                                                                   "updated_noise_range_on_v1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (use
                                                                                         "power_Epsilon_judg")
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (use
                                                                           "pow_var_compatible_noise")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (use
                                                                     "power_Epsilon_judg")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("9" (assert) nil nil) ("10" (assert) nil nil)
           ("11" (assert) nil nil) ("12" (assert) nil nil)
           ("13" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ac_from const-decl "bool" affine_expr nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Eval_ACExpr_Box_offset def-decl
     "Maybe[(ac_from(expr, box, nidx_offset))]" affine_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (/= const-decl "boolean" notequal nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (vars_in_box? const-decl "bool" affine_box nil)
    (eval_ac_noise const-decl "real" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (eval_ACExpr_Env def-decl "BaseType" affine_expr nil)
    (AffineExpr_induction formula-decl nil AffineExpr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Unit type-decl nil Unit_adt "structures/")
    (unit? adt-recognizer-decl "[Unit -> boolean]" Unit_adt
           "structures/")
    (unit adt-constructor-decl "(unit?)" Unit_adt "structures/")
    (containment_cnt formula-decl nil affine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Proper? const-decl "bool" interval "interval_arith/")
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (SingInterval? const-decl "bool" affine nil)
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Eval_ACExpr_Box const-decl "Maybe[AffineCombination]" affine_expr
     nil)
    (Eval_offset_someness_monotony formula-decl nil affine_expr nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (new_noise_symbols_count def-decl "nat" affine_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict_box const-decl "Noise" affine_box nil)
    (merge def-decl "{N_: Noise |
         (null_ol?(N1) AND null_ol?(N2) AND null_ol?(N_)) OR
          (null_ol?(N1) AND
            NOT null_ol?(N2) AND
             NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N2)`1)
           OR
           (null_ol?(N2) AND
             NOT null_ol?(N1) AND
              NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N1)`1)
            OR
            (NOT null_ol?(N1) AND
              NOT null_ol?(N2) AND
               NOT null_ol?(N_) AND
                car_ol(N_)`1 = min(car_ol(N1)`1, car_ol(N2)`1))}"
           affine nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (containment_add formula-decl nil affine nil)
    (merge_commutativity formula-decl nil affine nil)
    (Eval_offset_noises_matching formula-decl nil affine_expr nil)
    (Eval1 skolem-const-decl "Maybe[(ac_from(op1, box, n))]"
     affine_expr nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member def-decl "bool" list_props nil)
    (idxs_box_membership formula-decl nil affine_box nil)
    (restrict_box_alt_def formula-decl nil affine_box nil)
    (Eval_offset_idxs_upper_bound formula-decl nil affine_expr nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Eval_offset_idxs formula-decl nil affine_expr nil)
    (noises_of_restricted_Evals_leg_1 formula-decl nil affine_expr nil)
    (N1r skolem-const-decl "Noise" affine_expr nil)
    (Eval2 skolem-const-decl
     "Maybe[(ac_from(op2, box, new_noise_symbols_count(op1) + n))]"
     affine_expr nil)
    (N2r skolem-const-decl "Noise" affine_expr nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (mergeable_suff_conditions formula-decl nil affine nil)
    (mergeable_noises_respect_eval formula-decl nil affine nil)
    (restrict_box_preserves_eval formula-decl nil affine_box nil)
    (eval_ac_partial_ext formula-decl nil affine nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (merge_prop1 formula-decl nil affine nil)
    (compatibles_box_noises formula-decl nil affine_box nil)
    (idxs_box_nth formula-decl nil affine_box nil)
    (j skolem-const-decl "nat" affine_expr nil)
    (box skolem-const-decl "Box" affine_expr nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (appin const-decl "bool" list_more_props nil)
    (idxs_box const-decl "list[nat]" affine_box nil)
    (restrict_box_preserves_compbox formula-decl nil affine_box nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Eval skolem-const-decl "Maybe[(ac_from(op, box, n))]" affine_expr
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (containment_neg formula-decl nil affine nil)
    (containment_sub formula-decl nil affine nil)
    (Eval1 skolem-const-decl "Maybe[(ac_from(op1, box, n))]"
     affine_expr nil)
    (N1r skolem-const-decl "Noise" affine_expr nil)
    (Eval2 skolem-const-decl
     "Maybe[(ac_from(op2, box, new_noise_symbols_count(op1) + n))]"
     affine_expr nil)
    (N2r skolem-const-decl "Noise" affine_expr nil)
    (j skolem-const-decl "nat" affine_expr nil)
    (op1 skolem-const-decl "RealExpr" affine_expr nil)
    (op2 skolem-const-decl "RealExpr" affine_expr nil)
    (n skolem-const-decl "upfrom(1)" affine_expr nil)
    (N2r skolem-const-decl "Noise" affine_expr nil)
    (N1r skolem-const-decl "Noise" affine_expr nil)
    (first_noises const-decl "Noise" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (> const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nzBaseType type-eq-decl nil affine nil)
    (next_idx const-decl "nat" affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (Eval2 skolem-const-decl
     "Maybe[(ac_from(op2, box, new_noise_symbols_count(op1) + n))]"
     affine_expr nil)
    (Eval1 skolem-const-decl "Maybe[(ac_from(op1, box, n))]"
     affine_expr nil)
    (main_noise skolem-const-decl "{N_: Noise |
         (null_ol?(merge(N1r, N2r)) IMPLIES
           (null_ol?(N_) OR
             car_ol(N_)`1 =
              1 + last_idx_in_box(box) + new_noise_symbols_count(op1) +
               new_noise_symbols_count(op2)
               + n))
          AND
          (NOT null_ol?(merge(N1r, N2r)) IMPLIES
            null_ol?(N_) OR
             ((1 + last_idx_in_box(box) + new_noise_symbols_count(op1) +
                new_noise_symbols_count(op2)
                + n
                < car_ol(merge(N1r, N2r))`1
                AND
                car_ol(N_)`1 =
                 1 + last_idx_in_box(box) + new_noise_symbols_count(op1) +
                  new_noise_symbols_count(op2)
                  + n)
               OR
               (1 + last_idx_in_box(box) + new_noise_symbols_count(op1) +
                 new_noise_symbols_count(op2)
                 + n
                 > car_ol(merge(N1r, N2r))`1
                 AND car_ol(N_)`1 = car_ol(merge(N1r, N2r))`1)
                OR
                car_ol(N_)`1 >=
                 min(car_ol(merge(N1r, N2r))`1,
                     1 + last_idx_in_box(box) +
                      new_noise_symbols_count(op1)
                      + new_noise_symbols_count(op2)
                      + n)))}" affine_expr nil)
    (eval_upd_no_idxs_ac formula-decl nil affine nil)
    (gnbi_upd formula-decl nil affine nil)
    (first_noises_upd formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (updated_noise_on_varac1 formula-decl nil affine nil)
    (j skolem-const-decl "nat" affine_expr nil)
    (gnbi_upd_2 formula-decl nil affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (mul_noise_value_is_Epsilon judgement-tcc nil affine nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "upfrom(1)" affine_expr nil)
    (power skolem-const-decl "nat" affine_expr nil)
    (get_noise_by_idx def-decl "Epsilon" affine nil)
    (varidx skolem-const-decl "nat" affine_expr nil)
    (N skolem-const-decl "Noise" affine_expr nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (eval_pd_noise_rec_pds_def formula-decl nil affine nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (expt_eq_0 formula-decl nil exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_expt formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (cons_ol const-decl "ordered_list" ordered_list nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (power_Epsilon_judg judgement-tcc nil affine_pow nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (upd_noise_range def-decl "Noise" affine nil)
    (gnbi_updr_2 formula-decl nil affine nil)
    (updated_noise_range_on_v1 formula-decl nil affine nil)
    (pow_var_compatible_noise formula-decl nil affine_pow nil)
    (last_idx const-decl "int" indexed_list nil)
    (last_ol def-decl "T" ordered_list nil)
    (represents_var? const-decl "bool" affine nil)
    (containment_pow_var_ac formula-decl nil affine_pow nil)
    (pow_var_ac const-decl "AffineCombination" affine_pow nil)
    (ac_proj_cv formula-decl nil affine nil)
    (ac_proj_pd formula-decl nil affine nil)
    (cdr_ol const-decl "ordered_list" ordered_list nil)
    (empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (eval_pd_noise def-decl "real" affine nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (Eval_inclusion_offset-2 "" 3628428425
   (""
    (deftactic binop (containment-lemma)
     (then (skolem 1 ("op1" "op2") :skolem-typepreds? t) (flatten)
      (hide -5)
      (spread (split -3)
       ((spread (split -4)
         ((then (hide -3 -4) (skeep)
           (expand "Eval_ACExpr_Box_offset" -3) (lift-if -3) (assert)
           (spread (split -3)
            ((then (flatten)
              (spread (split -2)
               ((spread (case "some?(Eval_ACExpr_Box(op1, box))")
                 ((spread (case "some?(Eval_ACExpr_Box(op2, box))")
                   ((then (inst -6 "n") (assert)
                     (inst -5 "n+nonaff_op_count(op1)") (assert)
                     (skolem -6 "N1") (skolem -5 "N2p")
                     (name-replace "Eval1"
                      "Eval_ACExpr_Box_offset(op1, box, n)")
                     (name-replace "Eval2"
                      "Eval_ACExpr_Box_offset(op2, box, nonaff_op_count(op1) + n)")
                     (name "N1r" "restrict_box(N1,box,val(Eval1))")
                     (name "N2r" "restrict_box(N2p,box,val(Eval2))")
                     (inst 1 "merge(N1r,N2r)")
                     (spread (split 1)
                      ((then (flatten)
                        (use "restrict_box_preserves_compbox"
                             ("N" "N2p" "Xa" "val(Eval2)"))
                        (assert) (hide -8)
                        (use "restrict_box_preserves_compbox"
                             ("N" "N1"))
                        (assert) (replace -3) (replace -4)
                        (expand "vars_in_box_compatible?") (skeep)
                        (inst?) (inst?) (replace -1 :dir RL)
                        (use "eval_ac_partial_ext"
                             ("N2" "merge(N1r, N2r)"))
                        (assert) (hide 2) (skolem 1 "j") (flatten)
                        (use "merge_prop1")
                        (spread (split -1)
                         ((assert)
                          (then (hide 2) (typepred "j")
                           (lemma "compatibles_box_noises")
                           (inst -1 "N1r" "N2r" "box" "vs") (assert)
                           (inst -1 "j") (use "idxs_box_nth")
                           (expand "nth_ac") (expand "appin")
                           (propax)))))
                       (then (expand "Eval_ACExpr_Box_offset" 1)
                        (expand "eval_ACExpr_Env" 1)
                        (use containment-lemma) (assert) (hide 2)
                        (spread (split 1)
                         ((then (flatten)
                           (use "restrict_box_preserves_eval"
                                ("Xa" "val(Eval1)"))
                           (replaces -3) (replaces -1)
                           (replaces -9 :dir RL)
                           (use "mergeable_noises_respect_eval")
                           (expand "Eval1") (assert) (hide 2)
                           (use "mergeable_suff_conditions") (assert)
                           (hide 2) (skeep)
                           (spread (case "i <= last_idx_in_box(box)")
                            ((then
                              (use "noises_of_restricted_Evals_leg_1"
                                   ("expr2" "op2" "N1" "N1"))
                              (beta) (assert) (inst?) (assert)
                              (expand "N2r") (expand "N1r")
                              (expand "Eval2") (expand "Eval1")
                              (propax))
                             (then (expand "Eval2" -8)
                              (use "Eval_offset_idxs"
                                   ("expr"
                                    "op2"
                                    "nidx_offset"
                                    "nonaff_op_count(op1) + n"))
                              (beta) (assert) (inst?) (assert)
                              (spread (split -1)
                               ((then
                                 (use
                                  "restrict_box_alt_def"
                                  ("N" "N2p"))
                                 (flatten)
                                 (assert)
                                 (hide -1)
                                 (expand "Eval2" 1)
                                 (spread
                                  (case "null?(box)")
                                  ((then (grind))
                                   (then
                                    (use "idxs_box_membership")
                                    (assert)))))
                                (then
                                 (use "Eval_offset_idxs_upper_bound")
                                 (beta)
                                 (assert)
                                 (inst?)
                                 (assert))))))))
                          (then (flatten) (replaces -8 :dir RL)
                           (use "restrict_box_preserves_eval"
                                ("Xa" "val(Eval2)"))
                           (replaces -1) (replace -1 1)
                           (expand "Eval2" 1)
                           (use "merge_commutativity")
                           (spread (split -1)
                            ((then (replaces -1)
                              (use "mergeable_noises_respect_eval")
                              (assert) (hide 2)
                              (use "mergeable_suff_conditions")
                              (assert) (hide 2) (skeep)
                              (spread
                               (case "i <= last_idx_in_box(box)")
                               ((then
                                 (use
                                  "noises_of_restricted_Evals_leg_1"
                                  ("expr1" "op1" "N1" "N1"))
                                 (beta)
                                 (assert)
                                 (inst?)
                                 (assert)
                                 (expand
                                  ("N2r" "N1r" "Eval2" "Eval1")
                                  1)
                                 (expand
                                  ("N2r" "N1r" "Eval2" "Eval1")
                                  1)
                                 (assert))
                                (then
                                 (use
                                  "Eval_offset_idxs"
                                  ("expr"
                                   "op2"
                                   "nidx_offset"
                                   "nonaff_op_count(op1) + n"))
                                 (beta -1)
                                 (assert)
                                 (inst?)
                                 (assert)
                                 (use
                                  "restrict_box_alt_def"
                                  ("N" "N1"))
                                 (flatten)
                                 (hide -1)
                                 (assert)
                                 (spread
                                  (split 1)
                                  ((then
                                    (use
                                     "Eval_offset_idxs_upper_bound"
                                     ("nidx_offset" "n"))
                                    (assert)
                                    (inst?)
                                    (assert)
                                    (expand "Eval1")
                                    (propax))
                                   (spread
                                    (case "null?(box)")
                                    ((then (grind))
                                     (then
                                      (use "idxs_box_membership")
                                      (assert))))))))))
                             (then (hide 2) (replaces -1 :dir RL)
                              (replaces -1 :dir RL) (expand "Eval1")
                              (lemma "Eval_offset_noises_matching")
                              (inst? -1 :where 1) (expand "Eval2")
                              (inst? -1 :where 1)
                              (inst -1 "N1" "N2p" "vs") (beta) (assert)
                              (skeep) (inst?) (assert)))))))))))
                    (then (use "Eval_offset_someness_monotony")
                     (assert))))
                  (then (hide-all-but (1 -2))
                   (use "Eval_offset_someness_monotony") (assert))))
                (propax))))
             (propax))))
          (propax)))
        (propax)))))
    (("" (skeep)
      (("" (beta)
        (("" (induct "expr")
          (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil)
           ("2" (skeep :preds? t)
            (("2" (skeep :preds? t)
              (("2" (hide -3)
                (("2"
                  (expand* "eval_ACExpr_Env" "Eval_ACExpr_Box"
                   "Eval_ACExpr_Box_offset")
                  (("2" (replaces -2)
                    (("2" (typepred "vs")
                      (("2" (expand "vars_in_box?")
                        (("2" (skeep)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (use "containment_cnt") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (hide -1)
              (("3" (skeep)
                (("3"
                  (expand* "eval_ACExpr_Env" "Eval_ACExpr_Box"
                   "Eval_ACExpr_Box_offset")
                  (("3" (lift-if -1)
                    (("3" (assert)
                      (("3" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (typepred "vs")
                          (("2" (expand "vars_in_box?")
                            (("2" (skeep)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (binop "containment_add") nil nil)
           ("5" (skolem 1 ("op") :skolem-typepreds? t)
            (("5" (flatten)
              (("5" (hide -3)
                (("5" (split -2)
                  (("1" (hide -2)
                    (("1" (skeep)
                      (("1" (expand "Eval_ACExpr_Box_offset" -2)
                        (("1" (lift-if -2)
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (inst -2 "n")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -2 "N")
                                    (("1"
                                      (name-replace
                                       "Eval"
                                       "Eval_ACExpr_Box_offset(op, box, n)")
                                      (("1"
                                        (name
                                         "Nr"
                                         "restrict_box(N,box,val(Eval))")
                                        (("1"
                                          (inst 1 "N")
                                          (("1"
                                            (split 1)
                                            (("1" (flatten) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "Eval_ACExpr_Box_offset")
                                                (("2"
                                                  (expand
                                                   "eval_ACExpr_Env"
                                                   1)
                                                  (("2"
                                                    (use
                                                     "containment_neg")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "Eval")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (binop "containment_sub") nil nil)
           ("7" (skolem 1 ("op1" "op2") :skolem-typepreds? t)
            (("7" (flatten)
              (("7" (hide -5)
                (("7" (split -3)
                  (("1" (split -4)
                    (("1" (hide -3 -4)
                      (("1" (skeep)
                        (("1" (expand "Eval_ACExpr_Box_offset" -3)
                          (("1" (lift-if -3)
                            (("1" (assert)
                              (("1"
                                (split -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (case
                                       "some?(Eval_ACExpr_Box(op1, box))")
                                      (("1"
                                        (case
                                         "some?(Eval_ACExpr_Box(op2, box))")
                                        (("1"
                                          (inst -6 "n")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -5
                                               "n+nonaff_op_count(op1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -6 "N1")
                                                  (("1"
                                                    (skolem -5 "N2p")
                                                    (("1"
                                                      (name-replace
                                                       "Eval1"
                                                       "Eval_ACExpr_Box_offset(op1, box, n)")
                                                      (("1"
                                                        (name-replace
                                                         "Eval2"
                                                         "Eval_ACExpr_Box_offset(op2, box, nonaff_op_count(op1) + n)")
                                                        (("1"
                                                          (name
                                                           "N1r"
                                                           "restrict_box(N1,box,val(Eval1))")
                                                          (("1"
                                                            (name
                                                             "N2r"
                                                             "restrict_box(N2p,box,val(Eval2))")
                                                            (("1"
                                                              (inst
                                                               1
                                                               " upd_noise(merge(N1r, N2r),
                                 		1 + last_idx_in_box(box) + nonaff_op_count(op1) +
                                                         nonaff_op_count(op2)
                                                         + n,
                                 	   mul_noise_value(val(Eval_ACExpr_Box_offset(op1, box, n)),
                                                        val(Eval_ACExpr_Box_offset(op2,
                                                                                   box,
                                                                                   nonaff_op_count(op1)
                                                                                   +
                                                                                   n)),
                                                        first_noises(merge(N1r, N2r),
                                                                     1 + last_idx_in_box(box)
                                                                     +
                                                                     nonaff_op_count(op1)
                                                                     +
                                                                     nonaff_op_count(op2)
                                                                     +
                                                                     n)))")
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (use
                                                                     "restrict_box_preserves_compbox"
                                                                     ("N"
                                                                      "N2p"
                                                                      "Xa"
                                                                      "val(Eval2)"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -8)
                                                                        (("1"
                                                                          (use
                                                                           "restrict_box_preserves_compbox"
                                                                           ("N"
                                                                            "N1"))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (expand
                                                                                   "vars_in_box_compatible?")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (case
                                                                                       "eval_ac_noise(var_ac(nth(box, i), i),
                                                                      upd_noise(merge(N1r, N2r),
                                                                                1 + last_idx_in_box(box) +
                                                                                 nonaff_op_count(op1)
                                                                                 + nonaff_op_count(op2)
                                                                                 + n,
                                                                                mul_noise_value(val
                                                                                                (Eval_ACExpr_Box_offset
                                                                                                 (op1, box, n)),
                                                                                                val
                                                                                                (Eval_ACExpr_Box_offset
                                                                                                 (op2,
                                                                                                  box,
                                                                                                  nonaff_op_count(op1) + n)),
                                                                                                first_noises
                                                                                                (merge(N1r, N2r),
                                                                                                 1 + last_idx_in_box(box)
                                                                                                 +
                                                                                                 nonaff_op_count(op1)
                                                                                                 +
                                                                                                 nonaff_op_count(op2)
                                                                                                 +
                                                                                                 n)))) = eval_ac_noise(var_ac(nth(box, i), i),
                                                                      merge(N1r, N2r))")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               :dir
                                                                                               RL)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "eval_ac_partial_ext"
                                                                                                 ("N2"
                                                                                                  "merge(N1r, N2r)"))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (skolem
                                                                                                       1
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "merge_prop1")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "compatibles_box_noises")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "N1r"
                                                                                                                   "N2r"
                                                                                                                   "box"
                                                                                                                   "vs")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "j")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "appin")
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "idxs_box_nth")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "nth_ac")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "appin")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (use
                                                                                           "updated_noise_on_varac1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (name-replace
                                                                   "main_noise"
                                                                   "upd_noise(merge(N1r, N2r),
                                                                      1 + last_idx_in_box(box) +
                                                                       nonaff_op_count(op1)
                                                                       + nonaff_op_count(op2)
                                                                       + n,
                                                                      mul_noise_value(val
                                                                                      (Eval_ACExpr_Box_offset
                                                                                       (op1, box, n)),
                                                                                      val
                                                                                      (Eval_ACExpr_Box_offset
                                                                                       (op2,
                                                                                        box,
                                                                                        nonaff_op_count(op1) + n)),
                                                                                      first_noises
                                                                                      (merge(N1r, N2r),
                                                                                       1 + last_idx_in_box(box)
                                                                                       +
                                                                                       nonaff_op_count(op1)
                                                                                       +
                                                                                       nonaff_op_count(op2)
                                                                                       +
                                                                                       n)))")
                                                                  (("1"
                                                                    (expand
                                                                     "Eval_ACExpr_Box_offset"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_ACExpr_Env"
                                                                       1)
                                                                      (("1"
                                                                        (use
                                                                         "containment_mul")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "next_idx_2")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "val(Eval_ACExpr_Box_offset(op1, box, n))")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ac_from")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "val(Eval_ACExpr_Box_offset(op2,
                                                                                                                            box,
                                                                                                                            nonaff_op_count(op1)
                                                                                                                            +
                                                                                                                            n))")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ac_from")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -2
                                                                                            1))
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "A"
                                                                                             "next_idx(pd(val(Eval_ACExpr_Box_offset(op2,
                                                                                                                            box,
                                                                                                                            nonaff_op_count(op1)
                                                                                                                            +
                                                                                                                            n))))")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "B"
                                                                                               "next_idx(pd(val(Eval_ACExpr_Box_offset(op1, box, n))))")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (use
                                                                                   "restrict_box_preserves_eval"
                                                                                   ("Xa"
                                                                                    "val(Eval1)"))
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -3)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -9
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (case
                                                                                           "eval_ac_noise(val(Eval_ACExpr_Box_offset(op1, box, n)), main_noise) = eval_ac_noise(val(Eval_ACExpr_Box_offset(op1, box, n)), merge(N1r,N2r))")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (use
                                                                                               "mergeable_noises_respect_eval")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "Eval1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "mergeable_suff_conditions")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "i <= last_idx_in_box(box)")
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "noises_of_restricted_Evals_leg_1"
                                                                                                                 ("expr2"
                                                                                                                  "op2"
                                                                                                                  "N1"
                                                                                                                  "N1"))
                                                                                                                (("1"
                                                                                                                  (beta)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "N2r")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "N1r")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "Eval2")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "Eval1")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "Eval2"
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "Eval_offset_idxs"
                                                                                                                   ("expr"
                                                                                                                    "op2"
                                                                                                                    "nidx_offset"
                                                                                                                    "nonaff_op_count(op1) + n"))
                                                                                                                  (("2"
                                                                                                                    (beta)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "restrict_box_alt_def"
                                                                                                                               ("N"
                                                                                                                                "N2p"))
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "Eval2"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "null?(box)")
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (use
                                                                                                                                           "idxs_box_membership")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (use
                                                                                                                               "Eval_offset_idxs_upper_bound")
                                                                                                                              (("2"
                                                                                                                                (beta)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "main_noise"
                                                                                               1)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "eval_upd_no_idxs_ac")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "Eval_offset_idxs_upper_bound")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (case
                                                                                   "eval_ac_noise(val(Eval_ACExpr_Box_offset(op2,
                                                                                                             box,
                                                                                                             nonaff_op_count(op1) + n)),
                                                                                  main_noise) = eval_ac_noise(val(Eval_ACExpr_Box_offset(op2,
                                                                                                             box,
                                                                                                             nonaff_op_count(op1) + n)),
                                                                                  merge(N1r,N2r))")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -8
                                                                                       :dir
                                                                                       RL)
                                                                                      (("1"
                                                                                        (use
                                                                                         "restrict_box_preserves_eval"
                                                                                         ("Xa"
                                                                                          "val(Eval2)"))
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "Eval2"
                                                                                               1)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "merge_commutativity")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "mergeable_noises_respect_eval")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "mergeable_suff_conditions")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (skeep)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "i <= last_idx_in_box(box)")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "noises_of_restricted_Evals_leg_1"
                                                                                                                       ("expr1"
                                                                                                                        "op1"
                                                                                                                        "N1"
                                                                                                                        "N1"))
                                                                                                                      (("1"
                                                                                                                        (beta)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 ("N2r"
                                                                                                                                  "N1r"
                                                                                                                                  "Eval2"
                                                                                                                                  "Eval1")
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ("N2r"
                                                                                                                                    "N1r"
                                                                                                                                    "Eval2"
                                                                                                                                    "Eval1")
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "Eval_offset_idxs"
                                                                                                                       ("expr"
                                                                                                                        "op2"
                                                                                                                        "nidx_offset"
                                                                                                                        "nonaff_op_count(op1) + n"))
                                                                                                                      (("2"
                                                                                                                        (beta
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "restrict_box_alt_def"
                                                                                                                                 ("N"
                                                                                                                                  "N1"))
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "Eval_offset_idxs_upper_bound"
                                                                                                                                           ("nidx_offset"
                                                                                                                                            "n"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (inst?)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "Eval1")
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (case
                                                                                                                                           "null?(box)")
                                                                                                                                          (("1"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (use
                                                                                                                                             "idxs_box_membership")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "Eval1")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "Eval_offset_noises_matching")
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "Eval2")
                                                                                                                (("2"
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "N1"
                                                                                                                     "N2p"
                                                                                                                     "vs")
                                                                                                                    (("2"
                                                                                                                      (beta)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "main_noise"
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "eval_upd_no_idxs_ac")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "Eval_offset_idxs_upper_bound")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (expand
                                                                                 "main_noise"
                                                                                 1
                                                                                 1)
                                                                                (("4"
                                                                                  (use
                                                                                   "gnbi_upd")
                                                                                  (("4"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("4"
                                                                                      (case
                                                                                       "first_noises(merge(N1r, N2r),
                                                                                                 1 + last_idx_in_box(box) +
                                                                                                  nonaff_op_count(op1)
                                                                                                  + nonaff_op_count(op2)
                                                                                                  + n) = first_noises(main_noise,
                                                                                                  1 + last_idx_in_box(box)
                                                                                                  +
                                                                                                  nonaff_op_count(op1)
                                                                                                  +
                                                                                                  nonaff_op_count(op2)
                                                                                                  +
                                                                                                  n)")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "main_noise"
                                                                                           1)
                                                                                          (("2"
                                                                                            (use
                                                                                             "first_noises_upd")
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "mul_noise_value_is_Epsilon")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use
                                           "Eval_offset_someness_monotony")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 -2))
                                        (("2"
                                          (use
                                           "Eval_offset_someness_monotony")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("8" (assert) nil nil) ("9" (assert) nil nil)
           ("10" (assert) nil nil) ("11" (assert) nil nil)
           ("12" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (vars_in_box? const-decl "bool" affine_box nil)
    (eval_ac_noise const-decl "real" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (AffineExpr_induction formula-decl nil AffineExpr_adt nil)
    (containment_cnt formula-decl nil affine nil)
    (unit adt-constructor-decl "(unit?)" Unit_adt "structures/")
    (unit? adt-recognizer-decl "[Unit -> boolean]" Unit_adt
           "structures/")
    (Unit type-decl nil Unit_adt "structures/")
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (restrict_box const-decl "Noise" affine_box nil)
    (merge def-decl "{N_: Noise |
         (null_ol?(N1) AND null_ol?(N2) AND null_ol?(N_)) OR
          (null_ol?(N1) AND
            NOT null_ol?(N2) AND
             NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N2)`1)
           OR
           (null_ol?(N2) AND
             NOT null_ol?(N1) AND
              NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N1)`1)
            OR
            (NOT null_ol?(N1) AND
              NOT null_ol?(N2) AND
               NOT null_ol?(N_) AND
                car_ol(N_)`1 = min(car_ol(N1)`1, car_ol(N2)`1))}"
           affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (containment_add formula-decl nil affine nil)
    (merge_commutativity formula-decl nil affine nil)
    (idxs_box_membership formula-decl nil affine_box nil)
    (restrict_box_alt_def formula-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (mergeable_suff_conditions formula-decl nil affine nil)
    (mergeable_noises_respect_eval formula-decl nil affine nil)
    (restrict_box_preserves_eval formula-decl nil affine_box nil)
    (merge_prop1 formula-decl nil affine nil)
    (compatibles_box_noises formula-decl nil affine_box nil)
    (idxs_box_nth formula-decl nil affine_box nil)
    (idxs_box const-decl "list[nat]" affine_box nil)
    (eval_ac_partial_ext formula-decl nil affine nil)
    (restrict_box_preserves_compbox formula-decl nil affine_box nil)
    (containment_neg formula-decl nil affine nil)
    (containment_sub formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (next_idx const-decl "nat" affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (eval_upd_no_idxs_ac formula-decl nil affine nil)
    (gnbi_upd formula-decl nil affine nil)
    (first_noises_upd formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (updated_noise_on_varac1 formula-decl nil affine nil)
    (mul_noise_value_is_Epsilon judgement-tcc nil affine nil))
   shostak)
  (Eval_inclusion_offset-1 nil 3627843813
   (""
    (deftactic binop (containment-lemma)
     (then (skolem 1 ("op1" "op2") :skolem-typepreds? t) (flatten)
      (hide -5)
      (spread (split -3)
       ((spread (split -4)
         ((then (hide -3 -4) (skeep)
           (expand "Eval_ACExpr_Box_offset" -3) (lift-if -3) (assert)
           (spread (split -3)
            ((then (flatten)
              (spread (split -2)
               ((spread (case "some?(Eval_ACExpr_Box(op1, box))")
                 ((spread (case "some?(Eval_ACExpr_Box(op2, box))")
                   ((then (inst -6 "n") (assert)
                     (inst -5 "n+nonaff_op_count(op1)") (assert)
                     (skolem -6 "N1") (skolem -5 "N2p")
                     (name-replace "Eval1"
                      "Eval_ACExpr_Box_offset(op1, box, n)")
                     (name-replace "Eval2"
                      "Eval_ACExpr_Box_offset(op2, box, nonaff_op_count(op1) + n)")
                     (name "N1r" "restrict_box(N1,box,val(Eval1))")
                     (name "N2r" "restrict_box(N2p,box,val(Eval2))")
                     (inst 1 "merge(N1r,N2r)")
                     (spread (split 1)
                      ((then (flatten)
                        (use "restrict_box_preserves_compbox"
                             ("N" "N2p" "Xa" "val(Eval2)"))
                        (assert) (hide -8)
                        (use "restrict_box_preserves_compbox"
                             ("N" "N1"))
                        (assert) (replace -3) (replace -4)
                        (expand "vars_in_box_compatible?") (skeep)
                        (inst?) (inst?) (replace -1 :dir RL)
                        (use "eval_ac_partial_ext"
                             ("N2" "merge(N1r, N2r)"))
                        (assert) (hide 2) (skolem 1 "j")
                        (use "merge_prop1")
                        (spread (split -1)
                         ((assert)
                          (then (hide 2) (typepred "j")
                           (lemma "compatibles_box_noises")
                           (inst -1 "N1r" "N2r" "box" "vs") (assert)
                           (inst -1 "j") (use "idxs_box_nth")
                           (expand "nth_ac") (propax)))))
                       (then (expand "Eval_ACExpr_Box_offset" 1)
                        (expand "eval_ACExpr_Env" 1)
                        (use containment-lemma) (assert) (hide 2)
                        (spread (split 1)
                         ((then (flatten)
                           (use "restrict_box_preserves_eval"
                                ("Xa" "val(Eval1)"))
                           (replaces -3) (replaces -1)
                           (replaces -9 :dir RL)
                           (use "mergeable_noises_respect_eval")
                           (expand "Eval1") (assert) (hide 2)
                           (use "mergeable_suff_conditions") (assert)
                           (hide 2) (skeep)
                           (spread (case "i <= last_idx_in_box(box)")
                            ((then
                              (use "noises_of_restricted_Evals_leg_1"
                                   ("expr2" "op2" "N1" "N1"))
                              (beta) (assert) (inst?) (assert)
                              (expand "N2r") (expand "N1r")
                              (expand "Eval2") (expand "Eval1")
                              (propax))
                             (then (expand "Eval2" -8)
                              (use "Eval_offset_idxs"
                                   ("expr"
                                    "op2"
                                    "nidx_offset"
                                    "nonaff_op_count(op1) + n"))
                              (beta) (assert) (inst?) (assert)
                              (spread (split -1)
                               ((then
                                 (use
                                  "restrict_box_alt_def"
                                  ("N" "N2p"))
                                 (flatten)
                                 (assert)
                                 (hide -1)
                                 (expand "Eval2" 1)
                                 (hide-all-but (2 -1))
                                 (use "idxs_box_membership")
                                 (assert))
                                (then
                                 (use "Eval_offset_idxs_upper_bound")
                                 (beta)
                                 (assert)
                                 (inst?)
                                 (assert))))))))
                          (then (flatten) (replaces -8 :dir RL)
                           (use "restrict_box_preserves_eval"
                                ("Xa" "val(Eval2)"))
                           (replaces -1) (replace -1 1)
                           (expand "Eval2" 1)
                           (use "merge_commutativity")
                           (spread (split -1)
                            ((then (replaces -1)
                              (use "mergeable_noises_respect_eval")
                              (assert) (hide 2)
                              (use "mergeable_suff_conditions")
                              (assert) (hide 2) (skeep)
                              (spread
                               (case "i <= last_idx_in_box(box)")
                               ((then
                                 (use
                                  "noises_of_restricted_Evals_leg_1"
                                  ("expr1" "op1" "N1" "N1"))
                                 (beta)
                                 (assert)
                                 (inst?)
                                 (assert)
                                 (expand
                                  ("N2r" "N1r" "Eval2" "Eval1")
                                  1)
                                 (expand
                                  ("N2r" "N1r" "Eval2" "Eval1")
                                  1)
                                 (assert))
                                (then
                                 (use
                                  "Eval_offset_idxs"
                                  ("expr"
                                   "op2"
                                   "nidx_offset"
                                   "nonaff_op_count(op1) + n"))
                                 (beta -1)
                                 (assert)
                                 (inst?)
                                 (assert)
                                 (use
                                  "restrict_box_alt_def"
                                  ("N" "N1"))
                                 (flatten)
                                 (hide -1)
                                 (assert)
                                 (spread
                                  (split 1)
                                  ((then
                                    (use
                                     "Eval_offset_idxs_upper_bound"
                                     ("nidx_offset" "n"))
                                    (assert)
                                    (inst?)
                                    (assert)
                                    (expand "Eval1")
                                    (propax))
                                   (then
                                    (use "idxs_box_membership")
                                    (assert))))))))
                             (then (hide 2) (replaces -1 :dir RL)
                              (replaces -1 :dir RL) (expand "Eval1")
                              (lemma "Eval_offset_noises_matching")
                              (inst? -1 :where 1) (expand "Eval2")
                              (inst? -1 :where 1)
                              (inst -1 "N1" "N2p" "vs") (beta) (assert)
                              (skeep) (inst?) (assert)))))))))))
                    (then (use "Eval_offset_someness_monotony")
                     (assert))))
                  (then (hide-all-but (1 -2))
                   (use "Eval_offset_someness_monotony") (assert))))
                (propax))))
             (propax))))
          (propax)))
        (propax)))))
    (("" (skeep)
      (("" (beta)
        (("" (induct "expr")
          (("1" (typepred "expr!1") (("1" (assert) nil nil)) nil)
           ("2" (skeep :preds? t)
            (("2" (skeep :preds? t)
              (("2" (hide -3)
                (("2"
                  (expand* "eval_ACExpr_Env" "Eval_ACExpr_Box"
                   "Eval_ACExpr_Box_offset")
                  (("2" (replaces -2)
                    (("2" (typepred "vs")
                      (("2" (expand "vars_in_box?")
                        (("2" (skeep)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (use "containment_cnt") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (hide -1)
              (("3" (skeep)
                (("3"
                  (expand* "eval_ACExpr_Env" "Eval_ACExpr_Box"
                   "Eval_ACExpr_Box_offset")
                  (("3" (lift-if -1)
                    (("3" (assert)
                      (("3" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (typepred "vs")
                          (("2" (expand "vars_in_box?")
                            (("2" (skeep)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (binop "containment_add") nil nil)
           ("5" (skolem 1 ("op") :skolem-typepreds? t)
            (("5" (flatten)
              (("5" (hide -3)
                (("5" (split -2)
                  (("1" (hide -2)
                    (("1" (skeep)
                      (("1" (expand "Eval_ACExpr_Box_offset" -2)
                        (("1" (lift-if -2)
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (inst -2 "n")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -2 "N")
                                    (("1"
                                      (name-replace
                                       "Eval"
                                       "Eval_ACExpr_Box_offset(op, box, n)")
                                      (("1"
                                        (name
                                         "Nr"
                                         "restrict_box(N,box,val(Eval))")
                                        (("1"
                                          (inst 1 "N")
                                          (("1"
                                            (split 1)
                                            (("1" (flatten) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "Eval_ACExpr_Box_offset")
                                                (("2"
                                                  (expand
                                                   "eval_ACExpr_Env"
                                                   1)
                                                  (("2"
                                                    (use
                                                     "containment_neg")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "Eval")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (binop "containment_sub") nil nil)
           ("7" (skolem 1 ("op1" "op2") :skolem-typepreds? t)
            (("7" (flatten)
              (("7" (hide -5)
                (("7" (split -3)
                  (("1" (split -4)
                    (("1" (hide -3 -4)
                      (("1" (skeep)
                        (("1" (expand "Eval_ACExpr_Box_offset" -3)
                          (("1" (lift-if -3)
                            (("1" (assert)
                              (("1"
                                (split -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (case
                                       "some?(Eval_ACExpr_Box(op1, box))")
                                      (("1"
                                        (case
                                         "some?(Eval_ACExpr_Box(op2, box))")
                                        (("1"
                                          (inst -6 "n")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -5
                                               "n+nonaff_op_count(op1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -6 "N1")
                                                  (("1"
                                                    (skolem -5 "N2p")
                                                    (("1"
                                                      (name-replace
                                                       "Eval1"
                                                       "Eval_ACExpr_Box_offset(op1, box, n)")
                                                      (("1"
                                                        (name-replace
                                                         "Eval2"
                                                         "Eval_ACExpr_Box_offset(op2, box, nonaff_op_count(op1) + n)")
                                                        (("1"
                                                          (name
                                                           "N1r"
                                                           "restrict_box(N1,box,val(Eval1))")
                                                          (("1"
                                                            (name
                                                             "N2r"
                                                             "restrict_box(N2p,box,val(Eval2))")
                                                            (("1"
                                                              (inst
                                                               1
                                                               " upd_noise(merge(N1r, N2r), 
		1 + last_idx_in_box(box) + nonaff_op_count(op1) +
                        nonaff_op_count(op2)
                        + n,
	   mul_noise_value(val(Eval_ACExpr_Box_offset(op1, box, n)),
                       val(Eval_ACExpr_Box_offset(op2,
                                                  box,
                                                  nonaff_op_count(op1)
                                                  +
                                                  n)),
                       first_noises(merge(N1r, N2r),
                                    1 + last_idx_in_box(box)
                                    +
                                    nonaff_op_count(op1)
                                    +
                                    nonaff_op_count(op2)
                                    +
                                    n)))")
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (use
                                                                     "restrict_box_preserves_compbox"
                                                                     ("N"
                                                                      "N2p"
                                                                      "Xa"
                                                                      "val(Eval2)"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -8)
                                                                        (("1"
                                                                          (use
                                                                           "restrict_box_preserves_compbox"
                                                                           ("N"
                                                                            "N1"))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (expand
                                                                                   "vars_in_box_compatible?")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (case
                                                                                       "eval_ac_noise(var_ac(nth(box, i), i),
                    upd_noise(merge(N1r, N2r),
                              1 + last_idx_in_box(box) +
                               nonaff_op_count(op1)
                               + nonaff_op_count(op2)
                               + n,
                              mul_noise_value(val
                                              (Eval_ACExpr_Box_offset
                                               (op1, box, n)),
                                              val
                                              (Eval_ACExpr_Box_offset
                                               (op2,
                                                box,
                                                nonaff_op_count(op1) + n)),
                                              first_noises
                                              (merge(N1r, N2r),
                                               1 + last_idx_in_box(box)
                                               +
                                               nonaff_op_count(op1)
                                               +
                                               nonaff_op_count(op2)
                                               +
                                               n)))) = eval_ac_noise(var_ac(nth(box, i), i),
                    merge(N1r, N2r))")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               :dir
                                                                                               RL)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "eval_ac_partial_ext"
                                                                                                 ("N2"
                                                                                                  "merge(N1r, N2r)"))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (skolem
                                                                                                       1
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "merge_prop1")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "j")
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "compatibles_box_noises")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "N1r"
                                                                                                                   "N2r"
                                                                                                                   "box"
                                                                                                                   "vs")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "j")
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "idxs_box_nth")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "nth_ac")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (use
                                                                                           "updated_noise_on_varac1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (name-replace
                                                                   "main_noise"
                                                                   "upd_noise(merge(N1r, N2r),
                              1 + last_idx_in_box(box) +
                               nonaff_op_count(op1)
                               + nonaff_op_count(op2)
                               + n,
                              mul_noise_value(val
                                              (Eval_ACExpr_Box_offset
                                               (op1, box, n)),
                                              val
                                              (Eval_ACExpr_Box_offset
                                               (op2,
                                                box,
                                                nonaff_op_count(op1) + n)),
                                              first_noises
                                              (merge(N1r, N2r),
                                               1 + last_idx_in_box(box)
                                               +
                                               nonaff_op_count(op1)
                                               +
                                               nonaff_op_count(op2)
                                               +
                                               n)))")
                                                                  (("1"
                                                                    (expand
                                                                     "Eval_ACExpr_Box_offset"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "eval_ACExpr_Env"
                                                                       1)
                                                                      (("1"
                                                                        (use
                                                                         "containment_mul")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "next_idx_2")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "val(Eval_ACExpr_Box_offset(op1, box, n))")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ac_from")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "val(Eval_ACExpr_Box_offset(op2,
                                                                        box,
                                                                        nonaff_op_count(op1)
                                                                        +
                                                                        n))")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ac_from")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -2
                                                                                            1))
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "A"
                                                                                             "next_idx(pd(val(Eval_ACExpr_Box_offset(op2,
                                                                        box,
                                                                        nonaff_op_count(op1)
                                                                        +
                                                                        n))))")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "B"
                                                                                               "next_idx(pd(val(Eval_ACExpr_Box_offset(op1, box, n))))")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (use
                                                                                   "restrict_box_preserves_eval"
                                                                                   ("Xa"
                                                                                    "val(Eval1)"))
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -3)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -9
                                                                                         :dir
                                                                                         RL)
                                                                                        (("2"
                                                                                          (case
                                                                                           "eval_ac_noise(val(Eval_ACExpr_Box_offset(op1, box, n)), main_noise) = eval_ac_noise(val(Eval_ACExpr_Box_offset(op1, box, n)), merge(N1r,N2r))")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (use
                                                                                               "mergeable_noises_respect_eval")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "Eval1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "mergeable_suff_conditions")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "i <= last_idx_in_box(box)")
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "noises_of_restricted_Evals_leg_1"
                                                                                                                 ("expr2"
                                                                                                                  "op2"
                                                                                                                  "N1"
                                                                                                                  "N1"))
                                                                                                                (("1"
                                                                                                                  (beta)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "N2r")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "N1r")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "Eval2")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "Eval1")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "Eval2"
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "Eval_offset_idxs"
                                                                                                                   ("expr"
                                                                                                                    "op2"
                                                                                                                    "nidx_offset"
                                                                                                                    "nonaff_op_count(op1) + n"))
                                                                                                                  (("2"
                                                                                                                    (beta)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "restrict_box_alt_def"
                                                                                                                               ("N"
                                                                                                                                "N2p"))
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "Eval2"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (hide-all-but
                                                                                                                                         (2
                                                                                                                                          -1))
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "idxs_box_membership")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (use
                                                                                                                               "Eval_offset_idxs_upper_bound")
                                                                                                                              (("2"
                                                                                                                                (beta)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "main_noise"
                                                                                               1)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "eval_upd_no_idxs_ac")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "Eval_offset_idxs_upper_bound")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (case
                                                                                   "eval_ac_noise(val(Eval_ACExpr_Box_offset(op2,
                                               box,
                                               nonaff_op_count(op1) + n)),
                    main_noise) = eval_ac_noise(val(Eval_ACExpr_Box_offset(op2,
                                               box,
                                               nonaff_op_count(op1) + n)),
                    merge(N1r,N2r))")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -8
                                                                                       :dir
                                                                                       RL)
                                                                                      (("1"
                                                                                        (use
                                                                                         "restrict_box_preserves_eval"
                                                                                         ("Xa"
                                                                                          "val(Eval2)"))
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "Eval2"
                                                                                               1)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "merge_commutativity")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "mergeable_noises_respect_eval")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "mergeable_suff_conditions")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (skeep)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "i <= last_idx_in_box(box)")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "noises_of_restricted_Evals_leg_1"
                                                                                                                       ("expr1"
                                                                                                                        "op1"
                                                                                                                        "N1"
                                                                                                                        "N1"))
                                                                                                                      (("1"
                                                                                                                        (beta)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 ("N2r"
                                                                                                                                  "N1r"
                                                                                                                                  "Eval2"
                                                                                                                                  "Eval1")
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   ("N2r"
                                                                                                                                    "N1r"
                                                                                                                                    "Eval2"
                                                                                                                                    "Eval1")
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (use
                                                                                                                       "Eval_offset_idxs"
                                                                                                                       ("expr"
                                                                                                                        "op2"
                                                                                                                        "nidx_offset"
                                                                                                                        "nonaff_op_count(op1) + n"))
                                                                                                                      (("2"
                                                                                                                        (beta
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (use
                                                                                                                                 "restrict_box_alt_def"
                                                                                                                                 ("N"
                                                                                                                                  "N1"))
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "Eval_offset_idxs_upper_bound"
                                                                                                                                           ("nidx_offset"
                                                                                                                                            "n"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (inst?)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "Eval1")
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (use
                                                                                                                                           "idxs_box_membership")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "Eval1")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "Eval_offset_noises_matching")
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "Eval2")
                                                                                                                (("2"
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "N1"
                                                                                                                     "N2p"
                                                                                                                     "vs")
                                                                                                                    (("2"
                                                                                                                      (beta)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "main_noise"
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "eval_upd_no_idxs_ac")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "Eval_offset_idxs_upper_bound")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (expand
                                                                                 "main_noise"
                                                                                 1
                                                                                 1)
                                                                                (("4"
                                                                                  (use
                                                                                   "gnbi_upd")
                                                                                  (("4"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("4"
                                                                                      (case
                                                                                       "first_noises(merge(N1r, N2r),
                                   1 + last_idx_in_box(box) +
                                    nonaff_op_count(op1)
                                    + nonaff_op_count(op2)
                                    + n) = first_noises(main_noise,
                                    1 + last_idx_in_box(box)
                                    +
                                    nonaff_op_count(op1)
                                    +
                                    nonaff_op_count(op2)
                                    +
                                    n)")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "main_noise"
                                                                                           1)
                                                                                          (("2"
                                                                                            (use
                                                                                             "first_noises_upd")
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "mul_noise_value_is_Epsilon")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use
                                           "Eval_offset_someness_monotony")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 -2))
                                        (("2"
                                          (use
                                           "Eval_offset_someness_monotony")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("8" (assert) nil nil) ("9" (assert) nil nil)
           ("10" (assert) nil nil) ("11" (assert) nil nil)
           ("12" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (BaseType type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (AffineCombination type-eq-decl nil affine nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Box type-eq-decl nil affine_box nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (vars_in_box? const-decl "bool" affine_box nil)
    (eval_ac_noise const-decl "real" affine nil)
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (AffineExpr_induction formula-decl nil AffineExpr_adt nil)
    (containment_cnt formula-decl nil affine nil)
    (unit adt-constructor-decl "(unit?)" Unit_adt "structures/")
    (unit? adt-recognizer-decl "[Unit -> boolean]" Unit_adt
           "structures/")
    (Unit type-decl nil Unit_adt "structures/")
    (nth_ac const-decl "AffineCombination" affine_box nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (restrict_box const-decl "Noise" affine_box nil)
    (merge def-decl "{N_: Noise |
         (null_ol?(N1) AND null_ol?(N2) AND null_ol?(N_)) OR
          (null_ol?(N1) AND
            NOT null_ol?(N2) AND
             NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N2)`1)
           OR
           (null_ol?(N2) AND
             NOT null_ol?(N1) AND
              NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N1)`1)
            OR
            (NOT null_ol?(N1) AND
              NOT null_ol?(N2) AND
               NOT null_ol?(N_) AND
                car_ol(N_)`1 = min(car_ol(N1)`1, car_ol(N2)`1))}"
           affine nil)
    (car_ol const-decl "T" ordered_list nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (containment_add formula-decl nil affine nil)
    (merge_commutativity formula-decl nil affine nil)
    (idxs_box_membership formula-decl nil affine_box nil)
    (restrict_box_alt_def formula-decl nil affine_box nil)
    (last_idx_in_box const-decl "upfrom(-1)" affine_box nil)
    (mergeable_suff_conditions formula-decl nil affine nil)
    (mergeable_noises_respect_eval formula-decl nil affine nil)
    (restrict_box_preserves_eval formula-decl nil affine_box nil)
    (idxs_box const-decl "list[nat]" affine_box nil)
    (idxs_box_nth formula-decl nil affine_box nil)
    (compatibles_box_noises formula-decl nil affine_box nil)
    (idxs_ac const-decl "list[nat]" affine nil)
    (merge_prop1 formula-decl nil affine nil)
    (eval_ac_partial_ext formula-decl nil affine nil)
    (restrict_box_preserves_compbox formula-decl nil affine_box nil)
    (containment_neg formula-decl nil affine nil)
    (containment_sub formula-decl nil affine nil)
    (first_noises const-decl "Noise" affine nil)
    (mul_noise_value const-decl "real" affine nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (nzBaseType type-eq-decl nil affine nil)
    (next_idx const-decl "nat" affine nil)
    (next_idx_2 const-decl "nat" affine nil)
    (eval_upd_no_idxs_ac formula-decl nil affine nil)
    (gnbi_upd formula-decl nil affine nil)
    (first_noises_upd formula-decl nil affine nil)
    (containment_mul formula-decl nil affine nil)
    (updated_noise_on_varac1 formula-decl nil affine nil)
    (mul_noise_value_is_Epsilon judgement-tcc nil affine nil))
   nil))
 (Eval_inclusion_some 0
  (Eval_inclusion_some-1 nil 3627303501
   ("" (skeep*)
    (("" (expand "Eval_ACExpr_Box")
      (("" (flatten)
        (("" (lift-if -1)
          (("" (assert)
            (("" (split -1)
              (("1" (propax) nil nil)
               ("2" (use "Eval_inclusion_offset")
                (("2" (beta) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Eval_ACExpr_Box const-decl "Maybe[AffineCombination]" affine_expr
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BaseType type-eq-decl nil affine nil)
    (Env type-eq-decl nil affine_box nil)
    (vars_in_box? const-decl "bool" affine_box nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (Eval_inclusion_offset formula-decl nil affine_expr nil))
   shostak))
 (split_TCC1 0
  (split_TCC1-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (< const-decl "bool" reals nil))
   nil))
 (split_TCC2 0
  (split_TCC2-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (< const-decl "bool" reals nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (split_TCC3 0
  (split_TCC3-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (< const-decl "bool" reals nil))
   nil))
 (split_TCC4 0
  (split_TCC4-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (< const-decl "bool" reals nil))
   nil))
 (split_TCC5 0
  (split_TCC5-1 nil 3627301718 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (split_TCC6 0
  (split_TCC6-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_TCC7 0
  (split_TCC7-1 nil 3627301718 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (length def-decl "nat" list_props nil)
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (split_TCC8 0
  (split_TCC8-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (split_TCC9 0
  (split_TCC9-2 nil 3627907445
   ("" (skeep :preds? t)
    (("" (skeep 3)
      (("" (name-replace "V" "v1(v - 1, cdr(box))" :hide? t)
        (("1" (typepred "V")
          (("1" (split)
            (("1" (hide -3) (("1" (grind) nil nil)) nil)
             ("2" (hide -3) (("2" (grind) nil nil)) nil)
             ("3" (skeep)
              (("3" (case-replace "i=0")
                (("1" (assert)
                  (("1" (expand "nth" +) (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (inst -3 "i-1")
                  (("1" (assert)
                    (("1" (split 2)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "nth" 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "nth" 2)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (typepred "i")
                      (("2" (assert)
                        (("2" (expand "length" -1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 4) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (box skolem-const-decl "Box" affine_expr nil)
    (i skolem-const-decl "below(length(box))" affine_expr nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (split_TCC9-1 nil 3627301718 ("" (subtype-tcc) nil nil) nil nil))
 (split_TCC10 0
  (split_TCC10-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_TCC11 0
  (split_TCC11-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_TCC12 0
  (split_TCC12-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_eq_TCC1 0
  (split_eq_TCC1-1 nil 3627921767
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (Box type-eq-decl nil affine_box nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_eq_TCC2 0
  (split_eq_TCC2-1 nil 3627921767
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (Box type-eq-decl nil affine_box nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (split_eq_TCC3 0
  (split_eq_TCC3-1 nil 3627921767
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (Box type-eq-decl nil affine_box nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (split_eq_TCC4 0
  (split_eq_TCC4-2 nil 3627922046
   ("" (skeep)
    (("" (skeep 3)
      (("" (typepred "v1(v - 1, cdr(box))")
        (("1" (replaces (-1 -2))
          (("1" (replaces (-1 -2))
            (("1"
              (case "cons[Interval](car[Interval](box), cdr(box)) = box")
              (("1" (assert) nil nil)
               ("2" (hide 4)
                (("2" (lemma "list_cons_eta[Interval]")
                  (("2" (inst -1 "box") nil nil)) nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   nil)
  (split_eq_TCC4-1 nil 3627921767
   ("" (recursive-judgement-tcc) nil nil) nil nil))
 (split_vars_in_box 0
  (split_vars_in_box-1 nil 3627907504
   ("" (skeep :preds? t)
    (("" (case "v < length(box)")
      (("1" (beta)
        (("1" (flatten)
          (("1" (expand "vars_in_box?" -2)
            (("1" (flatten)
              (("1" (skolem -3 "N")
                (("1" (case "vs(v) ## nth(box,v)")
                  (("1" (use "Halves_inclusion")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (hide 2)
                          (("1" (expand "vars_in_box?")
                            (("1" (split 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "split(v, box)")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "SingInterval?(HalfLeft(nth(box, v)))")
                                (("1"
                                  (inst 1 "upd_noise(N, v, 0)")
                                  (("1"
                                    (expand "vars_in_box_compatible?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "i=v")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (typepred
                                               "split(v, box)")
                                              (("1"
                                                (inst? -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replaces -3)
                                                    (("1"
                                                      (use
                                                       "updated_noise_on_varac2")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (use
                                                           "containment_var_single_interval")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst? -5)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (use "gnbi_upd")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "split(v, box)")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (replaces -3)
                                                  (("2"
                                                    (use
                                                     "updated_noise_on_varac1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst? -10)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (use
                                                                 "gnbi_upd_2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "containment_var")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "epsilon")
                                      (("2"
                                        (inst
                                         2
                                         "upd_noise(N, v, epsilon)")
                                        (("2"
                                          (expand
                                           "vars_in_box_compatible?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (case "i=v")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (typepred
                                                   "split(v, box)")
                                                  (("1"
                                                    (inst? -3)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replaces -3)
                                                        (("1"
                                                          (use
                                                           "updated_noise_on_varac2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "split(v, box)")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (replaces -3)
                                                        (("2"
                                                          (use
                                                           "updated_noise_on_varac1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?
                                                               -10)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (use
                                                                       "gnbi_upd_2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 1)
                          (("2" (expand "vars_in_box?")
                            (("2" (split 1)
                              (("1"
                                (typepred "split(v, box)")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -3 "i")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "SingInterval?(HalfRight(nth(box, v)))")
                                (("1"
                                  (inst 1 "upd_noise(N, v, 0)")
                                  (("1"
                                    (expand "vars_in_box_compatible?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "i=v")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (typepred
                                               "split(v, box)")
                                              (("1"
                                                (inst? -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replaces -4)
                                                    (("1"
                                                      (use
                                                       "updated_noise_on_varac2")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (use
                                                           "containment_var_single_interval")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (use "gnbi_upd")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "split(v, box)")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (replaces -4)
                                                  (("2"
                                                    (use
                                                     "updated_noise_on_varac1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst? -10)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (use
                                                                 "gnbi_upd_2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "containment_var")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "epsilon")
                                      (("2"
                                        (inst
                                         2
                                         "upd_noise(N, v, epsilon)")
                                        (("2"
                                          (expand
                                           "vars_in_box_compatible?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (case "i=v")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (typepred
                                                   "split(v, box)")
                                                  (("1"
                                                    (inst? -3)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replaces -4)
                                                        (("1"
                                                          (use
                                                           "updated_noise_on_varac2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "split(v, box)")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (replaces -4)
                                                        (("2"
                                                          (use
                                                           "updated_noise_on_varac1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?
                                                               -10)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (use
                                                                       "gnbi_upd_2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (expand "vars_in_box_compatible?" -3)
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (use "containment_interval")
                            (("2" (expand "containment")
                              (("2"
                                (split -1)
                                (("1"
                                  (use "ebi_var_ac")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "split_eq")
        (("2" (inst -1 "v" "box")
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (Env type-eq-decl nil affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (split def-decl "{lrb: [Box, Box] |
         LET (lb, rb) = lrb IN
           length(lb) = length(box) AND
            length(rb) = length(box) AND
             (FORALL (i: below(length(box))):
                IF i = v
                  THEN nth(lb, i) = HalfLeft(nth(box, i)) AND
                        nth(rb, i) = HalfRight(nth(box, i))
                ELSE nth(lb, i) = nth(box, i) AND nth(rb, i) = nth(box, i)
                ENDIF)}" affine_expr nil)
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (containment_var formula-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (> const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (gnbi_upd_2 formula-decl nil affine nil)
    (updated_noise_on_varac1 formula-decl nil affine nil)
    (gnbi_upd formula-decl nil affine nil)
    (updated_noise_on_varac2 formula-decl nil affine nil)
    (containment_var_single_interval formula-decl nil affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (add_N const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (Halves_inclusion formula-decl nil interval "interval_arith/")
    (containment const-decl "bool" affine nil)
    (ebi_var_ac formula-decl nil affine nil)
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (v skolem-const-decl "nat" affine_expr nil)
    (box skolem-const-decl "Box" affine_expr nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (vars_in_box? const-decl "bool" affine_box nil)
    (split_eq recursive-judgement-axiom nil affine_expr nil))
   nil)))

