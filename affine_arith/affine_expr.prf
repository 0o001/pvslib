(affine_expr
 (r2E_TCC1 0
  (r2E_TCC1-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((empty_ErrorTerms const-decl "ErrorTerms" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (const_ac const-decl "AffineCombination" affine nil))
   nil))
 (eval_ACExpr_Env_TCC1 0
  (eval_ACExpr_Env_TCC1-1 nil 3627301718
   ("" (lemma "well_founded_restrict[AffineExpr,RealExpr]")
    (("" (inst?)
      (("" (expand "well_founded?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded_restrict judgement-tcc nil restrict_order_props nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (eval_ACExpr_Env_TCC2 0
  (eval_ACExpr_Env_TCC2-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC3 0
  (eval_ACExpr_Env_TCC3-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC4 0
  (eval_ACExpr_Env_TCC4-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC5 0
  (eval_ACExpr_Env_TCC5-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC6 0
  (eval_ACExpr_Env_TCC6-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC7 0
  (eval_ACExpr_Env_TCC7-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC8 0
  (eval_ACExpr_Env_TCC8-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil)
    (<< adt-def-decl "(strict_well_founded?[AffineExpr])"
        AffineExpr_adt nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (eval_ACExpr_Env_TCC9 0
  (eval_ACExpr_Env_TCC9-1 nil 3627301718 ("" (cases-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (eval_ACExpr_Env_TCC10 0
  (eval_ACExpr_Env_TCC10-1 nil 3630337258 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AffineExpr type-decl nil AffineExpr_adt nil)
    (const? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (varidx? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (add? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (neg? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (sub? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (mult? adt-recognizer-decl "[AffineExpr -> boolean]" AffineExpr_adt
     nil)
    (powvar? adt-recognizer-decl "[AffineExpr -> boolean]"
     AffineExpr_adt nil)
    (RealExpr type-eq-decl nil AffineExpr_adt nil))
   nil))
 (split_TCC1 0
  (split_TCC1-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (< const-decl "bool" reals nil))
   nil))
 (split_TCC2 0
  (split_TCC2-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (< const-decl "bool" reals nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (split_TCC3 0
  (split_TCC3-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (< const-decl "bool" reals nil))
   nil))
 (split_TCC4 0
  (split_TCC4-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (< const-decl "bool" reals nil))
   nil))
 (split_TCC5 0
  (split_TCC5-1 nil 3627301718 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (split_TCC6 0
  (split_TCC6-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_TCC7 0
  (split_TCC7-1 nil 3627301718 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (length def-decl "nat" list_props nil)
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (split_TCC8 0
  (split_TCC8-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (split_TCC9 0
  (split_TCC9-2 nil 3627907445
   ("" (skeep :preds? t)
    (("" (skeep 3)
      (("" (name-replace "V" "v1(v - 1, cdr(box))" :hide? t)
        (("1" (typepred "V")
          (("1" (split)
            (("1" (hide -3) (("1" (grind) nil nil)) nil)
             ("2" (hide -3) (("2" (grind) nil nil)) nil)
             ("3" (skeep)
              (("3" (case-replace "i=0")
                (("1" (assert)
                  (("1" (expand "nth" +) (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (inst -3 "i-1")
                  (("1" (assert)
                    (("1" (split 2)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "nth" 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "nth" 2)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (typepred "i")
                      (("2" (assert)
                        (("2" (expand "length" -1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 4) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (box skolem-const-decl "Box" affine_expr nil)
    (i skolem-const-decl "below(length(box))" affine_expr nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Box type-eq-decl nil affine_box nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (split_TCC9-1 nil 3627301718 ("" (subtype-tcc) nil nil) nil nil))
 (split_TCC10 0
  (split_TCC10-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_TCC11 0
  (split_TCC11-1 nil 3627301718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_TCC12 0
  (split_TCC12-1 nil 3627301718 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_eq_TCC1 0
  (split_eq_TCC1-1 nil 3627921767
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (Box type-eq-decl nil affine_box nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (split_eq_TCC2 0
  (split_eq_TCC2-1 nil 3627921767
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (Box type-eq-decl nil affine_box nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (split_eq_TCC3 0
  (split_eq_TCC3-1 nil 3627921767
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (Box type-eq-decl nil affine_box nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (split_eq_TCC4 0
  (split_eq_TCC4-2 nil 3627922046
   ("" (skeep)
    (("" (skeep 3)
      (("" (typepred "v1(v - 1, cdr(box))")
        (("1" (replaces (-1 -2))
          (("1" (replaces (-1 -2))
            (("1"
              (case "cons[Interval](car[Interval](box), cdr(box)) = box")
              (("1" (assert) nil nil)
               ("2" (hide 4)
                (("2" (lemma "list_cons_eta[Interval]")
                  (("2" (inst -1 "box") nil nil)) nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   nil)
  (split_eq_TCC4-1 nil 3627921767
   ("" (recursive-judgement-tcc) nil nil) nil nil))
 (split_vars_in_box 0
  (split_vars_in_box-1 nil 3627907504
   ("" (skeep :preds? t)
    (("" (case "v < length(box)")
      (("1" (beta)
        (("1" (flatten)
          (("1" (expand "vars_in_box?" -2)
            (("1" (flatten)
              (("1" (skolem -3 "N")
                (("1" (case "vs(v) ## nth(box,v)")
                  (("1" (use "Halves_inclusion")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (hide 2)
                          (("1" (expand "vars_in_box?")
                            (("1" (split 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "split(v, box)")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "SingInterval?(HalfLeft(nth(box, v)))")
                                (("1"
                                  (inst 1 "upd_noise(N, v, 0)")
                                  (("1"
                                    (expand "vars_in_box_compatible?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "i=v")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (typepred
                                               "split(v, box)")
                                              (("1"
                                                (inst? -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replaces -3)
                                                    (("1"
                                                      (use
                                                       "updated_noise_on_varac2")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (use
                                                           "containment_var_single_interval")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst? -5)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (use "gnbi_upd")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "split(v, box)")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (replaces -3)
                                                  (("2"
                                                    (use
                                                     "updated_noise_on_varac1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst? -10)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (use
                                                                 "gnbi_upd_2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "containment_var")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "epsilon")
                                      (("2"
                                        (inst
                                         2
                                         "upd_noise(N, v, epsilon)")
                                        (("2"
                                          (expand
                                           "vars_in_box_compatible?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (case "i=v")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (typepred
                                                   "split(v, box)")
                                                  (("1"
                                                    (inst? -3)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replaces -3)
                                                        (("1"
                                                          (use
                                                           "updated_noise_on_varac2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "split(v, box)")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (replaces -3)
                                                        (("2"
                                                          (use
                                                           "updated_noise_on_varac1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?
                                                               -10)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (use
                                                                       "gnbi_upd_2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 1)
                          (("2" (expand "vars_in_box?")
                            (("2" (split 1)
                              (("1"
                                (typepred "split(v, box)")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -3 "i")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "SingInterval?(HalfRight(nth(box, v)))")
                                (("1"
                                  (inst 1 "upd_noise(N, v, 0)")
                                  (("1"
                                    (expand "vars_in_box_compatible?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "i=v")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (typepred
                                               "split(v, box)")
                                              (("1"
                                                (inst? -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replaces -4)
                                                    (("1"
                                                      (use
                                                       "updated_noise_on_varac2")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (use
                                                           "containment_var_single_interval")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (use "gnbi_upd")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "split(v, box)")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (replaces -4)
                                                  (("2"
                                                    (use
                                                     "updated_noise_on_varac1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst? -10)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (use
                                                                 "gnbi_upd_2")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "containment_var")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "epsilon")
                                      (("2"
                                        (inst
                                         2
                                         "upd_noise(N, v, epsilon)")
                                        (("2"
                                          (expand
                                           "vars_in_box_compatible?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (case "i=v")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (typepred
                                                   "split(v, box)")
                                                  (("1"
                                                    (inst? -3)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replaces -4)
                                                        (("1"
                                                          (use
                                                           "updated_noise_on_varac2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "split(v, box)")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (replaces -4)
                                                        (("2"
                                                          (use
                                                           "updated_noise_on_varac1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?
                                                               -10)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (use
                                                                       "gnbi_upd_2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (expand "vars_in_box_compatible?" -3)
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (use "containment_interval")
                            (("2" (expand "containment")
                              (("2"
                                (split -1)
                                (("1"
                                  (use "ebi_var_ac")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "split_eq")
        (("2" (inst -1 "v" "box")
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((Box type-eq-decl nil affine_box nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (Env type-eq-decl nil affine_box nil)
    (BaseType type-eq-decl nil affine nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (split def-decl "{lrb: [Box, Box] |
         LET (lb, rb) = lrb IN
           length(lb) = length(box) AND
            length(rb) = length(box) AND
             (FORALL (i: below(length(box))):
                IF i = v
                  THEN nth(lb, i) = HalfLeft(nth(box, i)) AND
                        nth(rb, i) = HalfRight(nth(box, i))
                ELSE nth(lb, i) = nth(box, i) AND nth(rb, i) = nth(box, i)
                ENDIF)}" affine_expr nil)
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (slice const-decl "real" interval "interval_arith/")
    (midpoint const-decl "real" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (/= const-decl "boolean" notequal nil)
    ({\|\|} const-decl "AffineCombination" affine nil)
    (var_ac const-decl "AffineCombination" affine nil)
    (null_ol? const-decl "bool" ordered_list nil)
    (eval_ac_noise const-decl "real" affine nil)
    (SingInterval? const-decl "bool" affine nil)
    (vars_in_box_compatible? const-decl "bool" affine_box nil)
    (containment_var formula-decl nil affine nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Epsilon type-eq-decl nil affine nil)
    (nzEpsilon type-eq-decl nil affine nil)
    (lt_idx const-decl "bool" indexed_list nil)
    (ordered_list? def-decl "bool" ordered_list nil)
    (Noise type-eq-decl nil affine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ordered_list type-eq-decl nil ordered_list nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car_ol const-decl "T" ordered_list nil)
    (> const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (upd_noise def-decl "{N_: Noise |
         (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
          (NOT null_ol?(N) IMPLIES
            null_ol?(N_) OR
             ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
               (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
                car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" affine nil)
    (gnbi_upd_2 formula-decl nil affine nil)
    (updated_noise_on_varac1 formula-decl nil affine nil)
    (gnbi_upd formula-decl nil affine nil)
    (updated_noise_on_varac2 formula-decl nil affine nil)
    (containment_var_single_interval formula-decl nil affine nil)
    (empty_noise const-decl "Noise" affine nil)
    (eval_pd_noise def-decl "real" affine nil)
    (add_N const-decl "Noise" affine nil)
    (extend_N const-decl "Noise" affine nil)
    (null_is_noise name-judgement "Noise" affine nil)
    (Halves_inclusion formula-decl nil interval "interval_arith/")
    (containment const-decl "bool" affine nil)
    (ebi_var_ac formula-decl nil affine nil)
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (v skolem-const-decl "nat" affine_expr nil)
    (box skolem-const-decl "Box" affine_expr nil)
    (AffineCombination type-eq-decl nil affine nil)
    (ErrorTerms type-eq-decl nil affine nil)
    (containment_interval formula-decl nil affine nil)
    (vars_in_box? const-decl "bool" affine_box nil)
    (split_eq recursive-judgement-axiom nil affine_expr nil))
   nil))
 (split_Inclusion 0
  (split_Inclusion-1 nil 3635260326
   ("" (skeep)
    (("" (skoletin*)
      (("" (expand "Inclusion?")
        (("" (typepred "split(v,pox)")
          (("" (assert)
            (("" (replaces (-4 -5) :dir rl)
              (("" (split)
                (("1" (skeep)
                  (("1" (inst - "i")
                    (("1" (split -)
                      (("1" (flatten)
                        (("1" (lemma "Halves_Incl")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (typepred "pox")
                                (("1"
                                  (expand "ProperBox?")
                                  (("1"
                                    (rewrite "every_nth")
                                    (("1" (inst - "i") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replaces -1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst - "i")
                    (("2" (split -)
                      (("1" (flatten)
                        (("1" (lemma "Halves_Incl")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (typepred "pox")
                                (("1"
                                  (expand "ProperBox?")
                                  (("1"
                                    (rewrite "every_nth")
                                    (("1" (inst - "i") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (replaces -2) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil affine_box nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (HalfLeft const-decl "Interval" interval "interval_arith/")
    (HalfRight const-decl "Interval" interval "interval_arith/")
    (split def-decl "{lrb: [Box, Box] |
         LET (lb, rb) = lrb IN
           length(lb) = length(box) AND
            length(rb) = length(box) AND
             (FORALL (i: below(length(box))):
                IF i = v
                  THEN nth(lb, i) = HalfLeft(nth(box, i)) AND
                        nth(rb, i) = HalfRight(nth(box, i))
                ELSE nth(lb, i) = nth(box, i) AND nth(rb, i) = nth(box, i)
                ENDIF)}" affine_expr nil)
    (ProperBox? const-decl "bool" affine_box nil)
    (ProperBox type-eq-decl nil affine_box nil)
    (Inclusion? const-decl "bool" affine_box nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Halves_Incl formula-decl nil interval "interval_arith/")
    (every_nth formula-decl nil list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (Proper? const-decl "bool" interval "interval_arith/")
    (Incl_reflx formula-decl nil interval "interval_arith/"))
   nil)))

