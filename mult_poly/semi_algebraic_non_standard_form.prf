(semi_algebraic_non_standard_form
 (negative_atom_eval_TCC1 0
  (negative_atom_eval_TCC1-1 nil 3865633856
   ("" (skeep)
    (("" (expand "negative_atom_ns")
      (("" (typepred "x") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((negative_atom_ns const-decl "atomic_poly_ns"
     semi_algebraic_non_standard_form nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (atomic_poly_ns type-eq-decl nil semi_algebraic_non_standard_form
     nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (negative_atom_eval subtype "semi_algebraic_non_standard_form.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), standard_form_mult_poly.max_length(semi_algebraic_non_standard_form.negative_atom_ns(semi_algebraic_non_standard_form.a)`poly))}")))
 (negative_atom_eval 0
  (negative_atom_eval-1 nil 3865634212
   ("" (skeep)
    (("" (skeep)
      (("" (expand "negative_atom_ns")
        (("" (lift-if)
          (("" (split)
            (("1" (expand "atom_eval_ns")
              (("1" (flatten)
                (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "atom_eval_ns")
                    (("1" (replace -1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (expand "atom_eval_ns")
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "atom_eval_ns")
                        (("2" (typepred "a`ineq")
                          (("2" (assert)
                            (("2" (replace -1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (atomic_poly_ns type-eq-decl nil semi_algebraic_non_standard_form
     nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (atom_eval_ns const-decl "bool" semi_algebraic_non_standard_form
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (negative_atom_ns const-decl "atomic_poly_ns"
     semi_algebraic_non_standard_form nil))
   shostak))
 (atom_max_ns_TCC1 0
  (atom_max_ns_TCC1-1 nil 3865633856 ("" (subtype-tcc) nil nil) nil nil
   (atom_max_ns subtype "semi_algebraic_non_standard_form.m"
    "(list_adt[atomic_poly_ns].cons?)")))
 (atom_max_ns_TCC2 0
  (atom_max_ns_TCC2-1 nil 3865633856 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (atom_max_ns termination
    "semi_algebraic_non_standard_form.atom_max_ns(list_adt[atomic_poly_ns].cdr(semi_algebraic_non_standard_form.m))"
    "nil")))
 (max_atom_ns 0
  (max_atom_ns-1 nil 3865634306
   ("" (induct m1)
    (("1" (skeep)
      (("1" (expand append 1)
        (("1" (expand atom_max_ns 1 2)
          (("1" (assert)
            (("1" (expand max)
              (("1" (assert)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (propax) nil nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand atom_max_ns 1 1)
          (("2" (lift-if 1)
            (("2" (split)
              (("1" (flatten)
                (("1" (expand append -1) (("1" (propax) nil nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (lemma "car_append[atomic_poly]")
                  (("2" (inst?)
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (expand atom_max_ns 2 2)
                          (("2" (lemma "cdr_append[atomic_poly]")
                            (("2" (inst?)
                              (("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_append formula-decl nil more_list_props structures)
    (cdr_append formula-decl nil more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (list_induction formula-decl nil list_adt nil)
    (INEQ type-eq-decl nil semi_algebraic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (atomic_poly type-eq-decl nil semi_algebraic nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (atom_max_ns def-decl "nat" semi_algebraic_non_standard_form nil)
    (meeting_ns type-eq-decl nil semi_algebraic_non_standard_form nil)
    (atomic_poly_ns type-eq-decl nil semi_algebraic_non_standard_form
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (meeting type-eq-decl nil semi_algebraic nil))
   shostak))
 (meet_ns_TCC1 0
  (meet_ns_TCC1-1 nil 3865633856 ("" (subtype-tcc) nil nil) nil nil
   (meet_ns subtype "semi_algebraic_non_standard_form.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), standard_form_mult_poly.max_length(list_adt[atomic_poly_ns].car(semi_algebraic_non_standard_form.m)`poly))}")))
 (meet_ns_TCC2 0
  (meet_ns_TCC2-1 nil 3865633856 ("" (subtype-tcc) nil nil) nil nil
   (meet_ns subtype "semi_algebraic_non_standard_form.x"
    "{x: list_adt[real].list | reals.>=(list_props[real].length(x), semi_algebraic_non_standard_form.atom_max_ns(list_adt[atomic_poly_ns].cdr(semi_algebraic_non_standard_form.m)))}"))))

