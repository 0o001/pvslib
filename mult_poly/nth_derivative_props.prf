(nth_derivative_props
 (noe 0
  (noe-1 nil 3812453521
   ("" (expand "not_one_element?" 1)
    (("" (skeep*)
      (("" (lemma "deriv_domain")
        (("" (expand "deriv_domain?" -1)
          (("" (inst -1 "1" "x")
            (("" (skeep)
              (("" (typepred "y")
                (("" (inst 1 "y+x") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-subtype-decl nil nth_derivative_props nil)
    (T_pred const-decl "[real -> boolean]" nth_derivative_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain formula-decl nil nth_derivative_props nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   shostak))
 (IMP_nth_derivatives_TCC1 0
  (IMP_nth_derivatives_TCC1-1 nil 3812453457
   ("" (lemma "deriv_domain") (("" (propax) nil nil)) nil)
   ((deriv_domain formula-decl nil nth_derivative_props nil)) nil
   (IMP_nth_derivatives assuming
    "analysis@nth_derivatives[T].nth_derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (IMP_nth_derivatives_TCC2 0
  (IMP_nth_derivatives_TCC2-1 nil 3812453457
   ("" (lemma "noe") (("" (propax) nil nil)) nil)
   ((noe formula-decl nil nth_derivative_props nil)) nil
   (IMP_nth_derivatives assuming
    "analysis@nth_derivatives[T].nth_derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_nderiv 0
  (derivable_nderiv-1 nil 3812453860
   ("" (induct "n")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "derivable_n_times?" 1 1)
          (("2" (assert)
            (("2" (expand "derivable_n_times?" -2)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (inst -1 "deriv(f)")
                    (("1" (assert)
                      (("1" (expand "nderiv" -3)
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (lemma "noe") (("2" (propax) nil nil)) nil)
                     ("3" (lemma "deriv_domain")
                      (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (lemma "noe") (("3" (propax) nil nil)) nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "deriv_domain") (("4" (propax) nil nil)) nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (deriv_domain formula-decl nil nth_derivative_props nil)
    (noe formula-decl nil nth_derivative_props nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T_pred const-decl "[real -> boolean]" nth_derivative_props nil)
    (T formal-subtype-decl nil nth_derivative_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak)))

