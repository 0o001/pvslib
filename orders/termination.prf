(termination
 (termination_by_tc 0
  (termination_by_tc-1 nil 3820677275
   ("" (skeep)
    (("" (skeep)
      (("" (expand "termination_by" 1)
        (("" (rule-induct "TC")
          (("" (skeep)
            (("" (typepred "<")
              (("" (split -2)
                (("1" (inst -3 "x" "y") (("1" (assert) nil nil)) nil)
                 ("2" (skeep)
                  (("2" (expand "well_founded_order?" -3)
                    (("2" (flatten)
                      (("2" (expand "transitive?" -4)
                        (("2" (inst -4 "y" "z" "x")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TC_weak_induction formula-decl nil relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Relation type-eq-decl nil termination nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded_order? const-decl "bool" well_foundedness nil)
    (T formal-type-decl nil termination nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (termination_by const-decl "bool" termination nil))
   nil))
 (termination_no_ascending_seq 0
  (termination_no_ascending_seq-1 nil 3820686330
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "terminating" -1)
          (("1" (skeep)
            (("1" (lemma "no_infinite_descending_sequence")
              (("1" (inst -1 "<")
                (("1" (assert)
                  (("1" (expand "ascending?")
                    (("1" (expand "descending?")
                      (("1" (expand "empty?")
                        (("1" (skeep)
                          (("1" (expand "termination_by" -2)
                            (("1" (expand "member" -3)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (expand "member" 1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "x(n)" "x(1+n)")
                                      (("1"
                                        (assert)
                                        (("1" (inst -1 "n") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "no_infinite_descending_sequence")
          (("2" (expand "terminating" 1 1)
            (("2" (expand "termination_by" 1)
              (("2" (expand "empty?" -2)
                (("2" (inst 1 "LAMBDA(a,b:T): R(b,a)")
                  (("1" (skeep) nil nil)
                   ("2" (inst -1 "LAMBDA(a,b:T): R(b,a)")
                    (("2" (assert)
                      (("2" (expand "empty?" 2)
                        (("2" (skeep 2)
                          (("2" (inst -2 "x")
                            (("2" (expand "member")
                              (("2"
                                (expand "ascending?")
                                (("2"
                                  (expand "descending?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Relation type-eq-decl nil termination nil)
    (R skolem-const-decl "Relation" termination nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (ascending? const-decl "bool" monotone_sequences nil)
    (empty? const-decl "bool" sets nil)
    (termination_by const-decl "bool" termination nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (descending? const-decl "bool" monotone_sequences nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness
     nil)
    (T formal-type-decl nil termination nil)
    (terminating const-decl "bool" termination nil))
   nil)))

