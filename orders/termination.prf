(termination
 (terminating_no_ascending_seq 0
  (terminating_no_ascending_seq-1 nil 3820686330
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "terminating" -1)
          (("1" (skeep)
            (("1" (lemma "no_infinite_descending_sequence")
              (("1" (inst -1 "<")
                (("1" (assert)
                  (("1" (expand "ascending?")
                    (("1" (expand "descending?")
                      (("1" (expand "empty?")
                        (("1" (skeep)
                          (("1" (expand "termination_by_wf" -2)
                            (("1" (expand "member" -3)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (expand "member" 1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "x(n)" "x(1+n)")
                                      (("1"
                                        (assert)
                                        (("1" (inst -1 "n") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "no_infinite_descending_sequence")
          (("2" (expand "terminating" 1 1)
            (("2" (expand "termination_by_wf" 1)
              (("2" (expand "empty?" -2)
                (("2" (inst 1 "LAMBDA(a,b:T): R(b,a)")
                  (("1" (skeep) nil nil)
                   ("2" (inst -1 "LAMBDA(a,b:T): R(b,a)")
                    (("2" (assert)
                      (("2" (expand "empty?" 2)
                        (("2" (skeep 2)
                          (("2" (inst -2 "x")
                            (("2" (expand "member")
                              (("2"
                                (expand "ascending?")
                                (("2"
                                  (expand "descending?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_infinite_descending_sequence formula-decl nil well_foundedness
     nil)
    (descending? const-decl "bool" monotone_sequences nil)
    (ascending? const-decl "bool" monotone_sequences nil)
    (well_founded? const-decl "bool" orders nil))
   nil))
 (terminating_well_founded_converse 0
  (terminating_well_founded_converse-1 nil 3822132696
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (rewrite "terminating_no_ascending_seq")
          (("1" (rewrite "no_infinite_descending_sequence")
            (("1" (rewrite "ascending_converse_descending") nil nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "terminating")
          (("2" (inst 1 "converse(R)")
            (("2" (expand "termination_by_wf")
              (("2" (skeep)
                (("2" (expand "converse") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R skolem-const-decl "Relation" termination nil)
    (well_founded? const-decl "bool" orders nil)
    (termination_by_wf const-decl "bool" termination nil)
    (terminating const-decl "bool" termination nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness
     nil)
    (pred type-eq-decl nil defined_types nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (ascending_converse_descending formula-decl nil monotone_sequences
     nil)
    (Relation type-eq-decl nil termination nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil termination nil)
    (terminating_no_ascending_seq formula-decl nil termination nil))
   shostak))
 (loop_is_not_terminating 0
  (loop_is_not_terminating-1 nil 3820754916
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "iterate_n_tc")
        (("" (inst?)
          (("" (assert)
            (("" (skeep)
              (("" (lemma "terminating_no_ascending_seq")
                (("" (inst -1 "R")
                  (("" (assert)
                    (("" (expand "empty?" -1)
                      (("" (expand "member" -1)
                        (("" (expand "ascending?" -1)
                          (("" (expand "iterate_n" -2)
                            (("" (lemma "ascending_iterate_n")
                              ((""
                                (expand "iterate_n" -1)
                                ((""
                                  (lemma "iterate_n_fseq")
                                  ((""
                                    (inst?)
                                    ((""
                                      (expand "iterate_n" -1)
                                      ((""
                                        (inst?)
                                        ((""
                                          (assert)
                                          ((""
                                            (skeep)
                                            ((""
                                              (inst
                                               -4
                                               "LAMBDA(i:nat): fseq(mod(i,n))")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred
                                                   "mod(n_1,n)")
                                                  (("1"
                                                    (typepred
                                                     "mod(1+n_1,n)")
                                                    (("1"
                                                      (case
                                                       "mod(1+n_1,n) = 0")
                                                      (("1"
                                                        (case
                                                         "mod(n_1,n) = n-1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (typepred
                                                               "fseq")
                                                              (("1"
                                                                (expand
                                                                 "ascending_n?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "n-1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "euclid_nat")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "1+n_1"
                                                             "n")
                                                            (("2"
                                                              (skeep
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "mod_sum_pos")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "r"
                                                                       "q"
                                                                       "n")
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "mod_lt_nat")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "n"
                                                                             "r")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -4)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT n_1 = n*q-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "mod_sum_pos")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "-1"
                                                                                             "q"
                                                                                             "n")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "mod_neg")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lift-if
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "n=1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "mod_even")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "1"
                                                                                                                   "n")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -3
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "n")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "mod_lt_nat")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "n"
                                                                                                                               "1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "mod_lt_nat")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "n"
                                                                                                                   "1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "mod(n_1, n) = mod(1+n_1,n) - 1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (typepred
                                                             "fseq")
                                                            (("1"
                                                              (expand
                                                               "ascending_n?"
                                                               -1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "mod(1 + n_1, n) - 1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "floor_val")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "n")
                                                                (("2"
                                                                  (lemma
                                                                   "mod_lt_nat")
                                                                  (("2"
                                                                    (lemma
                                                                     "mod_even")
                                                                    (("2"
                                                                      (lemma
                                                                       "mod_neg")
                                                                      (("2"
                                                                        (lemma
                                                                         "mod_sum_pos")
                                                                        (("2"
                                                                          (lemma
                                                                           "euclid_nat")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "1+n_1"
                                                                             "n")
                                                                            (("2"
                                                                              (skeep
                                                                               -1)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (case
                                                                                   "n_1 = n*q + r - 1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -3
                                                                                         "r-1"
                                                                                         "q"
                                                                                         "n")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -3
                                                                                             "r"
                                                                                             "q"
                                                                                             "n")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "mod_lt_nat")
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "n"
                                                                                                   "r")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "n"
                                                                                                     "r-1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ascending? const-decl "bool" monotone_sequences nil)
    (ascending_iterate_n formula-decl nil monotone_sequences nil)
    (iterate_n_fseq formula-decl nil monotone_sequences nil)
    (ascending_n? const-decl "bool" monotone_sequences nil)
    (iterate_n const-decl "PRED[[T, T]]" relation_iterate nil)
    (iterate_n_tc formula-decl nil relation_iterate nil))
   shostak))
 (terminating_is_weakly_terminating 0
  (terminating_is_weakly_terminating-1 nil 3821704964
   ("" (skeep :preds? t)
    (("" (expand "weakly_terminating")
      (("" (expand "terminating")
        (("" (skeep -1)
          (("" (lemma "wf_induction[T,<]")
            (("" (inst -1 "normalizable(R)")
              (("" (split)
                (("1" (propax) nil nil)
                 ("2" (hide 2)
                  (("2" (skeep)
                    (("2" (expand "normalizable" 1)
                      (("2" (flatten)
                        (("2" (expand "normal" 1)
                          (("2" (skeep -2)
                            (("2" (expand "termination_by_wf")
                              (("2"
                                (inst? -3)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "normalizable")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (inst 1 "tt")
                                            (("1"
                                              (expand "TC")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep -1)
                                            (("2"
                                              (insteep)
                                              (("2"
                                                (expand "TC" 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst 2 "tt")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "TC" 2)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TC inductive-decl "bool" relations nil)
    (well_founded? const-decl "bool" orders nil))
   shostak)))

