(termination
 (termination_no_ascending_seq 0
  (termination_no_ascending_seq-1 nil 3820686330
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "terminating" -1)
          (("1" (skeep)
            (("1" (lemma "no_infinite_descending_sequence")
              (("1" (inst -1 "<")
                (("1" (assert)
                  (("1" (expand "ascending?")
                    (("1" (expand "descending?")
                      (("1" (expand "empty?")
                        (("1" (skeep)
                          (("1" (expand "termination_by" -2)
                            (("1" (expand "member" -3)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (expand "member" 1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "x(n)" "x(1+n)")
                                      (("1"
                                        (assert)
                                        (("1" (inst -1 "n") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "no_infinite_descending_sequence")
          (("2" (expand "terminating" 1 1)
            (("2" (expand "termination_by" 1)
              (("2" (expand "empty?" -2)
                (("2" (inst 1 "LAMBDA(a,b:T): R(b,a)")
                  (("1" (skeep) nil nil)
                   ("2" (inst -1 "LAMBDA(a,b:T): R(b,a)")
                    (("2" (assert)
                      (("2" (expand "empty?" 2)
                        (("2" (skeep 2)
                          (("2" (inst -2 "x")
                            (("2" (expand "member")
                              (("2"
                                (expand "ascending?")
                                (("2"
                                  (expand "descending?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((terminating const-decl "bool" termination nil)
    (T formal-type-decl nil termination nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness
     nil)
    (descending? const-decl "bool" monotone_sequences nil)
    (member const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (termination_by const-decl "bool" termination nil)
    (empty? const-decl "bool" sets nil)
    (ascending? const-decl "bool" monotone_sequences nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (R skolem-const-decl "Relation" termination nil)
    (Relation type-eq-decl nil termination nil))
   nil))
 (termination_of_tc 0
  (termination_of_tc-1 nil 3820693572
   ("" (skeep)
    (("" (skeep)
      (("" (expand "termination_by" 1)
        (("" (rule-induct "TC")
          (("" (skeep)
            (("" (typepred "<")
              (("" (split -2)
                (("1" (inst -3 "x" "y") (("1" (assert) nil nil)) nil)
                 ("2" (skeep)
                  (("2" (expand "well_founded_order?" -3)
                    (("2" (flatten)
                      (("2" (expand "transitive?" -4)
                        (("2" (inst -4 "y" "z" "x")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TC_weak_induction formula-decl nil relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Relation type-eq-decl nil termination nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded_order? const-decl "bool" well_foundedness nil)
    (T formal-type-decl nil termination nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (termination_by const-decl "bool" termination nil))
   nil))
 (iterate_fseq_TCC1 0
  (iterate_fseq_TCC1-1 nil 3820766987 ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil termination nil)
    (iterate_n const-decl "PRED[[T, T]]" relation_iterate nil))
   nil
   (iterate_fseq subtype "0"
    "naturalnumbers.below((number_fields.+)(1, termination.n1))")))
 (iterate_fseq_TCC2 0
  (iterate_fseq_TCC2-1 nil 3820766987 ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil termination nil)
    (iterate_n const-decl "PRED[[T, T]]" relation_iterate nil))
   nil
   (iterate_fseq subtype "termination.n1"
    "naturalnumbers.below((number_fields.+)(1, termination.n1))")))
 (iterate_fseq 0
  (iterate_fseq-1 nil 3820767177
   ("" (induct "n1")
    (("1" (skeep*)
      (("1" (expand "iterate_n")
        (("1" (expand "iterate" -1)
          (("1" (inst 1 "LAMBDA(i:below(1)): x")
            (("1" (expand "ascending_n?" 1) (("1" (skeep) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (expand "iterate_n" -2)
        (("2" (expand "iterate" -2)
          (("2" (expand "iterate_n" -1)
            (("2" (expand "o" -2)
              (("2" (skeep -2)
                (("2" (inst -1 "x" "y_1" "R")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2"
                        (inst 1
                         "LAMBDA(i:below(j+2)): IF i=1+j THEN y ELSE fseq(i) ENDIF")
                        (("1" (assert) nil nil)
                         ("2" (expand "ascending_n?" 1)
                          (("2" (skeep)
                            (("2" (assert)
                              (("2"
                                (case "i_1=j")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred "fseq")
                                    (("2"
                                      (expand "ascending_n?" -1)
                                      (("2" (inst -1 "i_1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert)
                          (("3" (skeep) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "bool" relation_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fseq skolem-const-decl "(ascending_n?(j + 1)(R))" termination nil)
    (y skolem-const-decl "T" termination nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (R skolem-const-decl "Relation" termination nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (j skolem-const-decl "nat" termination nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate nil)
    (x skolem-const-decl "T" termination nil)
    (R skolem-const-decl "Relation" termination nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ascending_n? const-decl "bool" monotone_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (iterate_n const-decl "PRED[[T, T]]" relation_iterate nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Relation type-eq-decl nil termination nil)
    (T formal-type-decl nil termination nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (termination_no_ascending_n_fseq 0
  (termination_no_ascending_n_fseq-1 nil 3820755741
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (lemma "termination_no_ascending_seq")
          (("1" (inst?)
            (("1" (assert)
              (("1" (expand "empty?" -1)
                (("1" (expand "member" -1)
                  (("1" (skeep -3)
                    (("1" (expand "ascending_n?" -3)
                      (("1" (expand "ascending?" -1)
                        (("1" (inst -1 "LAMBDA(i:nat): fseq(mod(i,n))")
                          (("1" (skeep)
                            (("1" (expand "terminating" -1)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "termination_by" -1)
                                  (("1"
                                    (typepred "n_1")
                                    (("1"
                                      (typepred "n")
                                      (("1" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (loop_is_not_terminating 0
  (loop_is_not_terminating-1 nil 3820754916
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "iterate_n_tc")
        (("" (inst?)
          (("" (assert)
            (("" (skeep)
              (("" (lemma "termination_no_ascending_seq")
                (("" (inst -1 "R")
                  (("" (assert)
                    (("" (expand "empty?" -1)
                      (("" (expand "member" -1)
                        (("" (expand "ascending?" -1)
                          (("" (expand "iterate_n" -2)
                            (("" (lemma "ascending_iterate_n")
                              ((""
                                (expand "iterate_n" -1)
                                ((""
                                  (lemma "iterate_fseq")
                                  ((""
                                    (inst?)
                                    ((""
                                      (expand "iterate_n" -1)
                                      ((""
                                        (inst?)
                                        ((""
                                          (assert)
                                          ((""
                                            (skeep)
                                            ((""
                                              (inst
                                               -4
                                               "LAMBDA(i:nat): fseq(mod(i,n))")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred
                                                   "mod(n_1,n)")
                                                  (("1"
                                                    (typepred
                                                     "mod(1+n_1,n)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "NOT mod(1 + n_1, n) = 0")
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "n"
                                                           "R"
                                                           "fseq"
                                                           "mod(n_1,n)"
                                                           "mod(1+n_1,n)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "mod(1 + n_1, n) - mod(n_1, n)=1")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "iterate"
                                                                   -8)
                                                                  (("1"
                                                                    (expand
                                                                     "o"
                                                                     -8)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "iterate"
                                                                         -8)
                                                                        (("1"
                                                                          (skeep
                                                                           -8)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "mod"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

