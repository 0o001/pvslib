(traces
 (reachable_empty 0
  (reachable_empty-1 nil 3821351824
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "empty?" 1)
          (("1" (skeep)
            (("1" (expand "member")
              (("1" (lemma "reachable_weak_induction")
                (("1" (inst?)
                  (("1" (inst -1 "LAMBDA(t:T): NOT empty?(init)")
                    (("1" (split)
                      (("1" (inst -1 "x") (("1" (assert) nil nil)) nil)
                       ("2" (skeep)
                        (("2" (split)
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1" (inst -2 "t_1") nil nil)) nil))
                            nil)
                           ("2" (skeep) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "empty?")
          (("2" (skeep)
            (("2" (insteep)
              (("2" (expand "member")
                (("2" (expand "reachable") (("2" (flatten) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Relation type-eq-decl nil termination nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (reachable_weak_induction formula-decl nil traces nil)
    (reachable inductive-decl "bool" traces nil))
   shostak))
 (invariant_rule 0
  (invariant_rule-1 nil 3821297502
   ("" (skeep)
    (("" (lemma "reachable_induction")
      (("" (expand "invariant")
        (("" (inst -1 "rel" "init" "inv")
          (("" (split -1)
            (("1" (skeep)
              (("1" (insteep) (("1" (assert) nil nil)) nil)) nil)
             ("2" (hide 2)
              (("2" (skeep)
                (("2" (inst -2 "t")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst -4 "tp" "t") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reachable_induction formula-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Relation type-eq-decl nil termination nil)
    (PRED type-eq-decl nil defined_types nil)
    (reachable inductive-decl "bool" traces nil)
    (invariant const-decl "bool" traces nil))
   shostak))
 (none_forever 0
  (none_forever-1 nil 3821301708
   ("" (skeep :but "j")
    (("" (case "FORALL (n:nat): none?(tr(i)) IMPLIES none?(tr(i+n))")
      (("1" (skeep)
        (("1" (inst -1 "j-i") (("1" (assert) nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (skeep)
            (("2" (assert)
              (("2" (typepred "tr")
                (("2" (inst -1 "i+j") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Trace type-eq-decl nil traces nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (Maybe type-decl nil Maybe structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (length_TCC1 0
  (length_TCC1-1 nil 3821301700 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil traces nil)
    (Maybe type-decl nil Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Trace type-eq-decl nil traces nil)
    (finite_trace? const-decl "bool" traces nil)
    (FiniteTrace type-eq-decl nil traces nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (length subtype
           "{n: naturalnumbers.nat | Maybe[traces.T].none?(traces.ftr(n))}"
           "(sets[nat].nonempty?)")))
 (none_after_length 0
  (none_after_length-1 nil 3821302445
   ("" (skeep :preds? t)
    (("" (expand "length")
      (("" (name-label "mm" "min({n: nat | none?(ftr(n))})")
        (("" (typepred "mm")
          (("" (lemma "none_forever")
            (("" (inst -1 "ftr" "mm" "i") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" traces nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (none_forever formula-decl nil traces nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (Maybe type-decl nil Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Trace type-eq-decl nil traces nil)
    (finite_trace? const-decl "bool" traces nil)
    (FiniteTrace type-eq-decl nil traces nil))
   shostak))
 (length_is_none 0
  (length_is_none-1 nil 3821303019
   ("" (skeep)
    (("" (lemma "none_after_length") (("" (inst?) nil nil)) nil)) nil)
   ((none_after_length formula-decl nil traces nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Maybe type-decl nil Maybe structures)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Trace type-eq-decl nil traces nil)
    (finite_trace? const-decl "bool" traces nil)
    (FiniteTrace type-eq-decl nil traces nil)
    (length const-decl "nat" traces nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak))
 (empty_trace_TCC1 0
  (empty_trace_TCC1-1 nil 3821352934 ("" (subtype-tcc) nil nil) nil nil
   (empty_trace subtype
    "LAMBDA (i: naturalnumbers.nat): Maybe[traces.T].None"
    "FiniteTrace")))
 (empty_trace_length 0
  (empty_trace_length-1 nil 3821352966
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (decompose-equality)
          (("1" (expand "empty_trace")
            (("1" (lemma "none_after_length")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replaces -1)
          (("2" (grind)
            (("2" (with-tccs (typepred "min({n: nat | TRUE})"))
              (("2" (inst -1 "0") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Trace type-eq-decl nil traces nil)
    (finite_trace? const-decl "bool" traces nil)
    (FiniteTrace type-eq-decl nil traces nil)
    (empty_trace const-decl "FiniteTrace" traces nil)
    (sequence type-eq-decl nil sequences nil)
    (Maybe type-decl nil Maybe structures)
    (T formal-nonempty-type-decl nil traces nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (none_after_length formula-decl nil traces nil)
    (length const-decl "nat" traces nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (empty_trace_lenght_eq_0 0
  (empty_trace_lenght_eq_0-1 nil 3821352941
   ("" (lemma "empty_trace_length")
    (("" (inst?) (("" (assert) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil traces nil)
    (Maybe type-decl nil Maybe structures)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Trace type-eq-decl nil traces nil)
    (finite_trace? const-decl "bool" traces nil)
    (FiniteTrace type-eq-decl nil traces nil)
    (empty_trace const-decl "FiniteTrace" traces nil)
    (empty_trace_length formula-decl nil traces nil))
   shostak))
 (traces_TCC1 0
  (traces_TCC1-1 nil 3821301700 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil traces nil)
    (Maybe type-decl nil Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Trace type-eq-decl nil traces nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (traces subtype "traces.tr(traces.n)" "(Maybe[traces.T].some?)")))
 (traces_TCC2 0
  (traces_TCC2-1 nil 3821301700 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil traces nil)
    (Maybe type-decl nil Maybe structures)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Trace type-eq-decl nil traces nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (traces subtype "traces.tr(traces.n)" "(Maybe[traces.T].some?)"))))

