(lex2_more
 (lt_wf 0
  (lt_wf-1 nil 3820664796
   ("" (skeep)
    (("" (expand "well_founded?" 1)
      (("" (skeep)
        (("" (skeep)
          (("" (expand "lt" 1)
            (("" (lemma "lex2_lt")
              (("" (name "x" "min({n:nat | EXISTS(a:(p)): m1(a)=n})")
                (("1" (typepred "x")
                  (("1" (skeep -1)
                    (("1"
                      (name "mm"
                            "min({m:nat | EXISTS(a:(p)): m1(a)=x  AND m2(a) = m})")
                      (("1" (typepred "mm")
                        (("1" (skeep -1)
                          (("1" (inst 1 "a!1")
                            (("1" (skeep)
                              (("1"
                                (inst? -8)
                                (("1"
                                  (replace -8 -10)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (split -11)
                                        (("1"
                                          (replace -3 -8 rl)
                                          (("1"
                                            (inst -8 "m1(x!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst 1 "x!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -6 "m2(x!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst 1 "x!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "nonempty?" 1)
                          (("2" (expand "empty?" -1)
                            (("2" (expand "member" -1)
                              (("2"
                                (typepred "a")
                                (("2"
                                  (inst -2 "m2(a)")
                                  (("2" (inst 1 "a") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "nonempty?" 1)
                    (("2" (expand "empty?" -1)
                      (("2" (expand "member" -1)
                        (("2" (inst -1 "m1(y)")
                          (("2" (inst 1 "y") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt const-decl "bool" lex2_more nil)
    (MeasureFun type-eq-decl nil lex2_more nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil lex2_more nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (p skolem-const-decl "pred[T]" lex2_more nil)
    (y skolem-const-decl "T" lex2_more nil)
    (lex2_lt formula-decl nil lex2 nil)
    (well_founded? const-decl "bool" orders nil))
   nil
   (lt_wf subtype "lex2_more.lt(lex2_more.m1, lex2_more.m2)"
    "(orders[lex2_more.T].well_founded?)"))))

