(lex2_more
 (lt_wfo 0
  (lt_wfo-1 nil 3820676372
   ("" (skeep)
    (("" (expand "well_founded_order?" 1)
      (("" (split 1)
        (("1" (expand "well_founded?" 1)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (expand "lt" 1)
                (("1" (lemma "lex2_lt")
                  (("1"
                    (name "x" "min({n:nat | EXISTS(a:(p)): m1(a)=n})")
                    (("1" (typepred "x")
                      (("1" (skeep -1)
                        (("1"
                          (name "mm"
                                "min({m:nat | EXISTS(a:(p)): m1(a)=x  AND m2(a) = m})")
                          (("1" (typepred "mm")
                            (("1" (skeep -1)
                              (("1"
                                (inst 1 "a!1")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst? -8)
                                    (("1"
                                      (replace -8 -10)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "x!1")
                                          (("1"
                                            (split -11)
                                            (("1"
                                              (replace -3 -8 rl)
                                              (("1"
                                                (inst -8 "m1(x!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "x!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst -6 "m2(x!1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst 1 "x!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "nonempty?" 1)
                              (("2"
                                (expand "empty?" -1)
                                (("2"
                                  (expand "member" -1)
                                  (("2"
                                    (typepred "a")
                                    (("2"
                                      (inst -2 "m2(a)")
                                      (("2" (inst 1 "a") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "nonempty?" 1)
                        (("2" (expand "empty?" -1)
                          (("2" (expand "member" -1)
                            (("2" (inst -1 "m1(y)")
                              (("2" (inst 1 "y") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "lt" 1)
          (("2" (lemma "lex2_lt")
            (("2" (expand "transitive?" 1)
              (("2" (skeep)
                (("2" (inst-cp -1 "m1(x)" "m2(x)" "m1(y)" "m2(y)")
                  (("2" (assert)
                    (("2" (inst-cp -1 "m1(y)" "m2(y)" "m1(z)" "m2(z)")
                      (("2"
                        (inst-cp -1 "m1(x)" "m2(x)" "m1(z)" "m2(z)")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (hide -1)
                              (("2"
                                (hide -3 -4)
                                (("2"
                                  (hide 3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (split -2)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded_order? const-decl "bool" well_foundedness orders)
    (transitive? const-decl "bool" relations nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (y skolem-const-decl "T" lex2_more nil)
    (p skolem-const-decl "pred[T]" lex2_more nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (T formal-type-decl nil lex2_more nil)
    (pred type-eq-decl nil defined_types nil)
    (MeasureFun type-eq-decl nil lex2_more nil)
    (lt const-decl "bool" lex2_more nil))
   nil
   (lt_wfo subtype "lex2_more.lt(lex2_more.m1, lex2_more.m2)"
    "(well_foundedness[lex2_more.T].well_founded_order?)"))))

