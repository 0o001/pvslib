(lex2_more
 (lt_wfo 0
  (lt_wfo-1 nil 3820676372
   ("" (skeep)
    (("" (expand "well_founded_order?" 1)
      (("" (split 1)
        (("1" (expand "well_founded?" 1)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (expand "lt" 1)
                (("1" (lemma "lex2_lt")
                  (("1"
                    (name "x" "min({n:nat | EXISTS(a:(p)): m1(a)=n})")
                    (("1" (typepred "x")
                      (("1" (skeep -1)
                        (("1"
                          (name "mm"
                                "min({m:nat | EXISTS(a:(p)): m1(a)=x  AND m2(a) = m})")
                          (("1" (typepred "mm")
                            (("1" (skeep -1)
                              (("1"
                                (inst 1 "a!1")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst? -8)
                                    (("1"
                                      (replace -8 -10)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "x!1")
                                          (("1"
                                            (split -11)
                                            (("1"
                                              (replace -3 -8 rl)
                                              (("1"
                                                (inst -8 "m1(x!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "x!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst -6 "m2(x!1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst 1 "x!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "nonempty?" 1)
                              (("2"
                                (expand "empty?" -1)
                                (("2"
                                  (expand "member" -1)
                                  (("2"
                                    (typepred "a")
                                    (("2"
                                      (inst -2 "m2(a)")
                                      (("2" (inst 1 "a") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "nonempty?" 1)
                        (("2" (expand "empty?" -1)
                          (("2" (expand "member" -1)
                            (("2" (inst -1 "m1(y)")
                              (("2" (inst 1 "y") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "lt" 1)
          (("2" (lemma "lex2_lt")
            (("2" (expand "transitive?" 1)
              (("2" (skeep)
                (("2" (inst-cp -1 "m1(x)" "m2(x)" "m1(y)" "m2(y)")
                  (("2" (assert)
                    (("2" (inst-cp -1 "m1(y)" "m2(y)" "m1(z)" "m2(z)")
                      (("2"
                        (inst-cp -1 "m1(x)" "m2(x)" "m1(z)" "m2(z)")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (hide -1)
                              (("2"
                                (hide -3 -4)
                                (("2"
                                  (hide 3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (split -2)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded_order? const-decl "bool" well_foundedness nil)
    (transitive? const-decl "bool" relations nil)
    (well_founded? const-decl "bool" orders nil)
    (lex2_lt formula-decl nil lex2 nil)
    (y skolem-const-decl "T" lex2_more nil)
    (p skolem-const-decl "pred[T]" lex2_more nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (T formal-type-decl nil lex2_more nil)
    (pred type-eq-decl nil defined_types nil)
    (MeasureFun type-eq-decl nil lex2_more nil)
    (lt const-decl "bool" lex2_more nil))
   nil
   (lt_wfo subtype "lex2_more.lt(lex2_more.m1, lex2_more.m2)"
    "(well_foundedness[lex2_more.T].well_founded_order?)")))
 (lt_lex2_wf 0
  (lt_lex2_wf-1 nil 3820746005
   ("" (skeep)
    (("" (expand "well_founded?" 1)
      (("" (skeep)
        (("" (expand "lt_lex2")
          (("" (typepred "wf")
            (("" (expand "well_founded?" -1)
              (("" (skeep -2)
                ((""
                  (name "a" "min({n:nat | EXISTS(yy:(p)): m(yy) = n})")
                  (("1" (typepred "a")
                    (("1" (skeep -1)
                      (("1" (inst -4 "LAMBDA(bb:(p)): m(bb) = m(yy)")
                        (("1" (assert)
                          (("1" (split -4)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "y!1")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (split -6)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "y!1")
                                        (("1"
                                          (expand "extend" -1)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -6 "m(x)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "x")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -3 "x")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "extend" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "y!1")
                                                  (("2"
                                                    (expand
                                                     "extend"
                                                     -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "y!1")
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (expand "extend" -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "extend" 1)
                                (("2"
                                  (inst 1 "yy")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "nonempty?" 1)
                      (("2" (expand "empty?" -1)
                        (("2" (expand "member" -1)
                          (("2" (reveal +)
                            (("2" (hide 1)
                              (("2"
                                (inst -1 "m(y)")
                                (("2" (inst 1 "y") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (lt_lex2 const-decl "bool" lex2_more nil)
    (MeasureFun type-eq-decl nil lex2_more nil)
    (min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (x skolem-const-decl "(p)" lex2_more nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y!1 skolem-const-decl
     "(extend[T, (p), bool, FALSE](LAMBDA (bb: (p)): m(bb) = m(yy)))"
     lex2_more nil)
    (yy skolem-const-decl "(p)" lex2_more nil)
    (m skolem-const-decl "MeasureFun" lex2_more nil)
    (p skolem-const-decl "pred[T]" lex2_more nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (y skolem-const-decl "T" lex2_more nil)
    (empty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil lex2_more nil)
    (pred type-eq-decl nil defined_types nil))
   nil
   (lt_lex2_wf subtype "lex2_more.lt_lex2(lex2_more.m, lex2_more.wf)"
    "(orders[lex2_more.T].well_founded?)")))
 (wf_lex2_wf 0
  (no "no" 3820751638
   ("" (skeep)
    (("" (typepred "wf1" "wf2")
      (("" (expand "wf_lex2")
        (("" (expand "well_founded?")
          (("" (skeep)
            (("" (skeep -4)
              (("" (inst -1 "p")
                (("" (assert)
                  (("" (split -1)
                    (("1" (skeep -1)
                      (("1" (typepred "y!1")
                        (("1"
                          (inst -4
                           "LAMBDA(a:(p)): p(a) AND  FORALL (x: (p)): (NOT wf1(x, a))")
                          (("1" (split -4)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "y!2")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "y!2")
                                      (("1"
                                        (expand "extend" -1)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -2 "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst -2 "x")
                                                    (("1"
                                                      (expand
                                                       "dichotomous?"
                                                       -4)
                                                      (("1"
                                                        (inst
                                                         -4
                                                         "x"
                                                         "y!2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred "y!2")
                                    (("2"
                                      (hide -2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (inst 1 "y!1")
                                (("2"
                                  (expand "extend" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2) (("2" (inst 1 "y") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dichotomous? const-decl "bool" orders nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T formal-type-decl nil lex2_more nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (x skolem-const-decl "(p)" lex2_more nil)
    (p skolem-const-decl "pred[T]" lex2_more nil)
    (wf1 skolem-const-decl
     "{w: [[T, T] -> bool] | well_founded?[T](w) AND dichotomous?[T](w)}"
     lex2_more nil)
    (TRUE const-decl "bool" booleans nil)
    (y!2 skolem-const-decl "(extend[T, (p), bool, FALSE]
     (LAMBDA (a: (p)): TRUE AND FORALL (x: (p)): (NOT wf1(x, a))))"
     lex2_more nil)
    (wf_lex2 const-decl "bool" lex2_more nil))
   shostak
   (wf_lex2_wf subtype
    "lex2_more.wf_lex2(lex2_more.wf1, lex2_more.wf2)"
    "(orders[lex2_more.T].well_founded?)"))
  (wf_lex2_wf-1 nil 3820750230
   ("" (skeep)
    (("" (typepred "wf1" "wf2")
      (("" (expand "wf_lex2")
        (("" (expand "well_founded?")
          (("" (skeep)
            (("" (skeep -3)
              (("" (inst -1 "p")
                (("" (assert)
                  (("" (split -1)
                    (("1" (skeep -1)
                      (("1" (typepred "y!1")
                        (("1"
                          (inst -3
                           "LAMBDA(a:(p)): p(a) AND  FORALL (x: (p)): (NOT wf1(x, a))")
                          (("1" (split -3)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "y!2")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "y!2")
                                      (("1"
                                        (expand "extend" -1)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -2 "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst -2 "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "extend"
                                                         1)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (typepred
                                                             "y!2")
                                                            (("1"
                                                              (expand
                                                               "extend"
                                                               -1)
                                                              (("1"
                                                                (typepred
                                                                 "x_1")
                                                                (("1"
                                                                  (typepred
                                                                   "x")
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (wf_lex2_wf subtype
    "lex2_more.wf_lex2(lex2_more.wf1, lex2_more.wf2)"
    "(orders[lex2_more.T].well_founded?)"))))

