(relations_extra
 (strict_order_is_asymmetric 0
  (strict_order_is_asymmetric-1 nil 3314539726
   ("" (grind :if-match nil)
    (("" (inst - "x!2" "y!1" "x!2")
      (("" (assert) (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil))
   nil
   (strict_order_is_asymmetric subtype "relations_extra.x"
    "(relations_extra.asymmetric?)")))
 (asymmetric_is_antisymmetric 0
  (asymmetric_is_antisymmetric-1 nil 3314539726
   ("" (judgement-tcc) nil nil)
   ((antisymmetric? const-decl "bool" relations nil)) nil
   (asymmetric_is_antisymmetric subtype "relations_extra.x"
    "(relations[relations_extra.T].antisymmetric?)")))
 (asymmetric_is_irreflexive 0
  (asymmetric_is_irreflexive-1 nil 3314539726
   ("" (judgement-tcc) nil nil)
   ((irreflexive? const-decl "bool" relations nil)) nil
   (asymmetric_is_irreflexive subtype "relations_extra.x"
    "(relations[relations_extra.T].irreflexive?)")))
 (dichotomous_is_trichotomous 0
  (dichotomous_is_trichotomous-1 nil 3314539726
   ("" (judgement-tcc) nil nil)
   ((dichotomous? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil))
   nil
   (dichotomous_is_trichotomous subtype "relations_extra.x"
    "(orders[relations_extra.T].trichotomous?)")))
 (order_is_transitive 0
  (order_is_transitive-1 nil 3852881447
   ("" (skeep :preds? t)
    (("" (expand "order?") (("" (flatten) nil nil)) nil)) nil)
   ((order? const-decl "bool" relations_extra nil)) nil
   (order_is_transitive_ subtype "(relations_extra.order?)"
    "(relations[relations_extra.T].transitive?)")))
 (order_is_antisymmetric 0
  (order_is_antisymmetric-1 nil 3852881447 ("" (judgement-tcc) nil nil)
   nil nil
   (order_is_antisymmetric_ subtype "(relations_extra.order?)"
    "(relations[relations_extra.T].antisymmetric?)")))
 (partial_order_is_order 0
  (partial_order_is_order-1 nil 3852881447 ("" (judgement-tcc) nil nil)
   nil nil
   (partial_order_is_order_ subtype
    "(orders[relations_extra.T].partial_order?)"
    "(relations_extra.order?)")))
 (strict_order_is_order 0
  (strict_order_is_order-1 nil 3318180445
   ("" (grind :if-match nil)
    (("" (inst - "x!2")
      (("" (inst - "x!2" "y!1" "x!2") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil))
   nil
   (strict_order_is_order subtype "relations_extra.x"
    "(relations_extra.order?)")))
 (total_order_is_linear 0
  (total_order_is_linear-1 nil 3318180445
   ("" (grind :if-match all) nil nil)
   ((total_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (antisymmetric? const-decl "bool" relations nil)
    (trichotomous? const-decl "bool" orders nil))
   nil
   (total_order_is_linear subtype "relations_extra.x"
    "(relations_extra.linear_order?)")))
 (strict_total_order_is_linear 0
  (strict_total_order_is_linear-1 nil 3318180445
   ("" (grind :if-match all) nil nil)
   ((strict_total_order? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (antisymmetric? const-decl "bool" relations nil)
    (trichotomous? const-decl "bool" orders nil))
   nil
   (strict_total_order_is_linear subtype "relations_extra.x"
    "(relations_extra.linear_order?)")))
 (reflexive 0
  (reflexive-1 nil 3318876242
   ("" (skolem-typepred)
    (("" (expand "reflexive?") (("" (propax) nil nil)) nil)) nil)
   ((reflexive? const-decl "bool" relations nil)) shostak))
 (irreflexive 0
  (irreflexive-1 nil 3318876269
   ("" (skolem-typepred)
    (("" (expand "irreflexive?") (("" (propax) nil nil)) nil)) nil)
   ((irreflexive? const-decl "bool" relations nil)) shostak))
 (symmetric 0
  (symmetric-1 nil 3318876272
   ("" (skolem-typepred)
    (("" (expand "symmetric?") (("" (propax) nil nil)) nil)) nil)
   ((symmetric? const-decl "bool" relations nil)) shostak))
 (antisymmetric 0
  (antisymmetric-1 nil 3318876279
   ("" (skolem-typepred)
    (("" (expand "antisymmetric?") (("" (propax) nil nil)) nil)) nil)
   ((antisymmetric? const-decl "bool" relations nil)) shostak))
 (asymmetric 0
  (asymmetric-1 nil 3318876283
   ("" (skolem-typepred)
    (("" (expand "asymmetric?") (("" (propax) nil nil)) nil)) nil)
   nil shostak))
 (transitive 0
  (transitive-1 nil 3318876286
   ("" (skolem-typepred)
    (("" (expand "transitive?") (("" (propax) nil nil)) nil)) nil)
   ((transitive? const-decl "bool" relations nil)) shostak))
 (dichotomous 0
  (dichotomous-1 nil 3318876303
   ("" (skolem-typepred)
    (("" (expand "dichotomous?") (("" (propax) nil nil)) nil)) nil)
   ((dichotomous? const-decl "bool" orders nil)) shostak))
 (trichotomous 0
  (trichotomous-1 nil 3318876327
   ("" (skolem-typepred)
    (("" (expand "trichotomous?") (("" (propax) nil nil)) nil)) nil)
   ((trichotomous? const-decl "bool" orders nil)) shostak))
 (well_founded 0
  (well_founded-1 nil 3318876333
   ("" (skolem-typepred)
    (("" (expand "well_founded?") (("" (propax) nil nil)) nil)) nil)
   ((well_founded? const-decl "bool" orders nil)) shostak))
 (TC_fw_transitive 0
  (TC_fw_transitive-1 nil 3823194418
   ("" (skeep)
    (("" (expand "transitive?")
      (("" (skeep)
        (("" (lemma "TC_fw_weak_induction")
          ((""
            (inst -1 "R" "y"
             "LAMBDA(x:T):TC_fw(R)(y,z) IMPLIES TC_fw(R)(x,z)")
            (("" (split -1)
              (("1" (inst -1 "x") (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but 1)
                (("2" (skeep)
                  (("2" (expand "TC_fw" 1)
                    (("2" (flatten)
                      (("2" (split -1)
                        (("1" (inst 2 "y") (("1" (assert) nil nil))
                          nil)
                         ("2" (skeep)
                          (("2" (assert)
                            (("2" (insteep 2) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" relations nil)) nil
   (TC_fw_transitive subtype "relations_extra.TC_fw(relations_extra.R)"
    "(relations[relations_extra.T].transitive?)")))
 (TC_eq_TC_fw 0
  (TC_eq_TC_fw-1 nil 3823193003
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (lemma "TC_weak_induction")
            (("1" (inst? -1)
              (("1" (inst -1 "TC_fw(R)")
                (("1" (split -1)
                  (("1" (inst? -1) nil nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2" (expand "TC_fw" 1)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (expand "TC_fw" -1)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (insteep)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (skeep -1)
                                    (("2"
                                      (inst 2 "z_1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "TC_fw_transitive")
                                          (("2"
                                            (insteep)
                                            (("2"
                                              (expand "transitive?")
                                              (("2"
                                                (inst -1 "z_1" "z" "y")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "TC_fw_weak_induction")
            (("2" (inst -1 "R" "x!2" "LAMBDA(x:T):TC(R)(x,x!2)")
              (("2" (split -1)
                (("1" (inst?) nil nil)
                 ("2" (hide 2)
                  (("2" (skeep)
                    (("2" (expand "TC" 1)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (skeep -1)
                            (("2" (insteep)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "TC" 2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TC inductive-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (TC_weak_induction formula-decl nil relations nil))
   shostak))
 (TC_bw_transitive 0
  (TC_bw_transitive-2 nil 3823196375
   ("" (skeep)
    (("" (expand "transitive?")
      (("" (skeep)
        (("" (lemma "TC_bw_weak_induction")
          ((""
            (inst -1 "R" "y"
             "LAMBDA(z:T):TC_bw(R)(x,y) IMPLIES TC_bw(R)(x,z)")
            (("" (split -1)
              (("1" (inst -1 "z") (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but 1)
                (("2" (skeep)
                  (("2" (expand "TC_bw" 1)
                    (("2" (flatten)
                      (("2" (split -1)
                        (("1" (inst 2 "y") (("1" (assert) nil nil))
                          nil)
                         ("2" (skeep)
                          (("2" (assert)
                            (("2" (inst 2 "z_1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" relations nil)) nil
   (TC_bw_transitive subtype "relations_extra.TC_bw(relations_extra.R)"
    "(relations[relations_extra.T].transitive?)"))
  (TC_bw_transitive-1 nil 3823195240 ("" (judgement-tcc) nil nil) nil
   nil
   (TC_bw_transitive subtype "relations_extra.TC_bw(relations_extra.R)"
    "(relations[relations_extra.T].transitive?)")))
 (TC_eq_TC_bw 0
  (TC_eq_TC_bw-1 nil 3823195262
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (lemma "TC_weak_induction")
            (("1" (inst? -1)
              (("1" (inst -1 "TC_bw(R)")
                (("1" (split -1)
                  (("1" (inst? -1) nil nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2" (expand "TC_bw" 1)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (expand "TC_bw" -2)
                                (("2"
                                  (split -2)
                                  (("1"
                                    (insteep)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (skeep -1)
                                    (("2"
                                      (inst 2 "z_1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "TC_bw_transitive")
                                          (("2"
                                            (insteep)
                                            (("2"
                                              (expand "transitive?")
                                              (("2"
                                                (inst -1 "x" "z" "z_1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "TC_bw_weak_induction")
            (("2" (inst -1 "R" "x!1" "LAMBDA(x:T):TC(R)(x!1,x)")
              (("2" (split -1)
                (("1" (inst?) nil nil)
                 ("2" (hide 2)
                  (("2" (skeep)
                    (("2" (expand "TC" 1)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (skeep -1)
                            (("2" (insteep)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "TC" 2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TC_weak_induction formula-decl nil relations nil)
    (transitive? const-decl "bool" relations nil)
    (TC inductive-decl "bool" relations nil))
   nil)))

