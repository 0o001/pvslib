(relation_iterate
 (comp_equal_r 0
  (comp_equal_r-1 nil 3314540085
   ("" (skolem!)
    (("" (decompose-equality)
      (("" (iff)
        (("" (expand "o")
          (("" (prop)
            (("1" (skosimp) (("1" (assert) nil nil)) nil)
             ("2" (inst?) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (O const-decl "bool" relation_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil relation_iterate nil))
   shostak))
 (comp_equal_l 0
  (comp_equal_l-1 nil 3314540148
   ("" (skolem!)
    (("" (decompose-equality)
      (("" (iff)
        (("" (expand "o")
          (("" (prop)
            (("1" (skosimp) (("1" (assert) nil nil)) nil)
             ("2" (inst?) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (O const-decl "bool" relation_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil relation_iterate nil))
   shostak))
 (iterate_TCC1 0
  (iterate_TCC1-1 nil 3314540067 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (iterate subtype "(number_fields.-)(relation_iterate.n, 1)" "nat")))
 (iterate_TCC2 0
  (iterate_TCC2-1 nil 3314540067 ("" (termination-tcc) nil nil) nil nil
   (iterate termination
    "relation_iterate.iterate(relation_iterate.R, (number_fields.-)(relation_iterate.n, 1))"
    "nil")))
 (iterate_add 0
  (iterate_add-1 nil 3314540217
   ("" (induct "n")
    (("1" (skolem!)
      (("1" (expand "iterate" + 3)
        (("1" (rewrite "comp_equal_r") nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" + (1 3))
        (("2" (rewrite "assoc" :dir rl)
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((assoc formula-decl nil relation_props2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (comp_equal_r formula-decl nil relation_iterate nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (O const-decl "bool" relation_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil relation_iterate nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (iterate_add_applied 0
  (iterate_add_applied-1 nil 3314540329
   ("" (skosimp)
    (("" (rewrite "iterate_add")
      (("" (expand "o") (("" (inst?) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((iterate_add formula-decl nil relation_iterate nil)
    (T formal-type-decl nil relation_iterate nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (O const-decl "bool" relation_props nil))
   shostak))
 (iterate_1 0
  (iterate_1-1 nil 3314540378
   ("" (skolem!)
    (("" (expand* "iterate" "iterate")
      (("" (rewrite "comp_equal_l") nil nil)) nil))
    nil)
   ((iterate def-decl "pred[[T, T]]" relation_iterate nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil relation_iterate nil)
    (comp_equal_l formula-decl nil relation_iterate nil))
   shostak))
 (iterate_add_one 0
  (iterate_add_one-1 nil 3314540410
   ("" (skolem!)
    (("" (use "iterate_add" ("m" "1" "n" "n!1"))
      (("" (replace -1 :hide? t) (("" (rewrite "iterate_1") nil nil))
        nil))
      nil))
    nil)
   ((iterate_add formula-decl nil relation_iterate nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil relation_iterate nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (iterate_1 formula-decl nil relation_iterate nil))
   shostak))
 (iterate_mult 0
  (iterate_mult-1 nil 3314540483
   ("" (induct "n")
    (("1" (skolem!)
      (("1" (expand "iterate" + (1 3)) (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" + 1)
        (("2" (inst?)
          (("2" (rewrite "iterate_add") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((iterate_add formula-decl nil relation_iterate nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil relation_iterate nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (converse_equal 0
  (converse_equal-1 nil 3314540542
   ("" (decompose-equality)
    (("" (expand "converse")
      (("" (rewrite "symmetry_of_equals") nil nil)) nil))
    nil)
   ((symmetry_of_equals formula-decl nil equality_props nil)
    (T formal-type-decl nil relation_iterate nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (converse_comp 0
  (converse_comp-1 nil 3314540571
   ("" (skolem!)
    (("" (decompose-equality)
      (("" (iff)
        (("" (expand* "o" "converse")
          (("" (prop)
            (("1" (skosimp)
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
             ("2" (skosimp)
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (O const-decl "bool" relation_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil relation_iterate nil))
   shostak))
 (iterate_converse 0
  (iterate_converse-1 nil 3314540613
   ("" (induct "n")
    (("1" (skolem!)
      (("1" (expand "iterate")
        (("1" (rewrite "converse_equal") nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (rewrite "iterate_add_one")
        (("2" (expand "iterate" + 2)
          (("2" (rewrite "converse_comp")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((converse_comp formula-decl nil relation_iterate nil)
    (iterate_add_one formula-decl nil relation_iterate nil)
    (converse_equal formula-decl nil relation_iterate nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (converse const-decl "pred[[T2, T1]]" relation_defs nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil relation_iterate nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (comp_is_monotone 0
  (comp_is_monotone-1 nil 3314540754
   ("" (expand* "subset?" "member" "o")
    (("" (skosimp*)
      (("" (inst?)
        (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil relation_iterate nil)
    (subset? const-decl "bool" sets nil)
    (O const-decl "bool" relation_props nil)
    (member const-decl "bool" sets nil))
   shostak))
 (iterate_is_monotone 0
  (iterate_is_monotone-1 nil 3314540812
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand* "iterate" "subset?" "member")
        (("1" (skosimp) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "iterate" +)
        (("2" (rewrite "comp_is_monotone")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((comp_is_monotone formula-decl nil relation_iterate nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil relation_iterate nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (iterate_n_tc 0
  (iterate_n_tc-1 nil 3820753333
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (rule-induct "TC")
          (("1" (skeep)
            (("1" (split -1)
              (("1" (inst 1 "1") (("1" (grind) nil nil)) nil)
               ("2" (skeep*)
                (("2" (lemma "iterate_add_applied")
                  (("2" (inst?)
                    (("2" (expand "iterate_n")
                      (("2" (inst -1 "n" "n!1" "x!1" "z" "y!1")
                        (("2" (assert) (("2" (inst 1 "n!1+n") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2"
            (case "FORALL(n:posnat,x,y):iterate_n(n)(R)(x,y) IMPLIES TC(R)(x,y)")
            (("1" (inst?) (("1" (assert) nil nil)) nil)
             ("2" (hide-all-but 1)
              (("2" (induct "n")
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (skeep)
                  (("3" (skeep)
                    (("3" (case-replace "j=0")
                      (("1" (hide-all-but (-4 1))
                        (("1" (grind)
                          (("1" (hide -1)
                            (("1" (expand "TC")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "iterate_n")
                          (("2" (expand "iterate" -3)
                            (("2" (expand "o")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -1 "x!1" "y!2")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide (-2 -3 1))
                                      (("2"
                                        (expand "TC" 1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst 2 "y!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "TC" 2)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TC_weak_induction formula-decl nil relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (iterate_n const-decl "PRED[[T, T]]" relation_iterate nil)
    (T formal-type-decl nil relation_iterate nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate nil)
    (O const-decl "bool" relation_props nil)
    (iterate_add_applied formula-decl nil relation_iterate nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TC inductive-decl "bool" relations nil))
   shostak)))

