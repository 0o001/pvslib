(bounding_circuits_
 (IMP_weighted_digraphs_abs_TCC1 0
  (IMP_weighted_digraphs_abs_TCC1-2 nil 3659962943
   ("" (rewrite "measure_matrix_assoc") nil nil)
   ((N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_matrix_assoc formula-decl nil measures nil))
   nil)
  (IMP_weighted_digraphs_abs_TCC1-1 nil 3659962834
   ("" (subtype-tcc) nil nil) nil nil))
 (IMP_weighted_digraphs_abs_TCC2 0
  (IMP_weighted_digraphs_abs_TCC2-2 nil 3659962970
   ("" (rewrite "id_is_identity") nil nil)
   ((N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (id_is_identity formula-decl nil measures nil))
   nil)
  (IMP_weighted_digraphs_abs_TCC2-1 nil 3659962834
   ("" (subtype-tcc) nil nil) nil nil))
 (IMP_weighted_digraphs_abs_TCC3 0
  (IMP_weighted_digraphs_abs_TCC3-2 nil 3659963024
   ("" (use "concretedigraph_implements_abstractdigraph") nil nil)
   ((concretedigraph_implements_abstractdigraph formula-decl nil
     bounding_circuits_ nil))
   nil)
  (IMP_weighted_digraphs_abs_TCC3-1 nil 3659962834
   ("" (assuming-tcc) nil nil) nil nil))
 (IMP_matrix_wdg__TCC1 0
  (IMP_matrix_wdg__TCC1-2 nil 3659963066
   ("" (use "concretewd_implements_abstractwd") nil nil)
   ((concretewd_implements_abstractwd formula-decl nil
     bounding_circuits_ nil))
   nil)
  (IMP_matrix_wdg__TCC1-1 nil 3659962834 ("" (assuming-tcc) nil nil)
   nil nil))
 (vclist_TCC1 0
  (vclist_TCC1-1 nil 3660909027 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil))
   nil))
 (is_less_MM_list_TCC1 0
  (is_less_MM_list_TCC1-1 nil 3654423363 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil))
   nil))
 (is_less_MM_list_TCC2 0
  (is_less_MM_list_TCC2-1 nil 3654423363
   ("" (skeep)
    (("" (inst + "car(LM)")
      (("" (ground)
        (("" (expand "member") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (member def-decl "bool" list_props nil))
   nil))
 (is_less_MM_list_TCC3 0
  (is_less_MM_list_TCC3-1 nil 3654423363 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (get const-decl "Sign3" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (le const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil))
   nil))
 (is_less_MM_list_TCC4 0
  (is_less_MM_list_TCC4-1 nil 3654423363
   ("" (skeep :preds? t)
    (("" (typepred "  v(M, cdr[Measure_Matrix[N]](LM))")
      (("" (ground)
        (("" (skeep -)
          (("" (inst + "MM")
            (("" (ground)
              (("" (expand "member" 1) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" measures nil)
    (member def-decl "bool" list_props nil)
    (< const-decl "bool" reals nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (minimalize_iter_TCC1 0
  (minimalize_iter_TCC1-1 nil 3654423363
   ("" (skeep)
    (("" (ground)
      (("1" (skeep)
        (("1" (typepred (M))
          (("1" (hide (-1 -2))
            (("1" (ground)
              (("1" (expand "member") (("1" (propax) nil nil)) nil)
               ("2" (inst 1 "M")
                (("2" (ground)
                  (("2" (expand "<=")
                    (("2" (ground)
                      (("2" (expand "le") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep) nil nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (le const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil))
   nil))
 (minimalize_iter_TCC2 0
  (minimalize_iter_TCC2-1 nil 3654423363
   ("" (skeep)
    (("" (skeep)
      (("" (expand " length" 2 2) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (minimalize_iter_TCC3 0
  (minimalize_iter_TCC3-1 nil 3654423363
   ("" (skeep)
    (("" (skeep)
      (("" (ground)
        (("1" (typepred " v(cdr[Measure_Matrix[N]](LM), ret)")
          (("1" (skeep)
            (("1" (typepred (M))
              (("1" (hide (-1 -2 -4))
                (("1" (split -1)
                  (("1" (case "NOT member(M, cdr(LM))")
                    (("1" (expand "member" -1)
                      (("1" (ground)
                        (("1" (typepred "is_less_MM_list(fr, ret)")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (inst -4 "MM")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst + "MM_1")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (lemma "matrices_order")
                                        (("1"
                                          (expand "partial_order?")
                                          (("1"
                                            (expand "preorder?")
                                            (("1"
                                              (expand "transitive?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "MM_1"
                                                   "MM"
                                                   "fr")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -3 "M") (("2" (ground) nil nil)) nil))
                    nil)
                   ("2" (inst -2 "M") (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "length" 1 2) (("2" (ground) nil nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (typepred " v(cdr[Measure_Matrix[N]](LM), ret)")
            (("2" (inst -3 "m")
              (("2" (ground)
                (("2" (expand "member" 2) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" measures nil)
    (member def-decl "bool" list_props nil)
    (< const-decl "bool" reals nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (M skolem-const-decl
     "{M: Measure_Matrix | member(M, LM) OR member(M, ret)}"
     bounding_circuits_ nil)
    (is_less_MM_list def-decl "{b: bool |
         b IMPLIES
          (EXISTS (MM: Measure_Matrix): member(MM, LM) AND MM <= M)}"
     bounding_circuits_ nil)
    (partial_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (matrices_order formula-decl nil measures nil)
    (ret skolem-const-decl "list[Measure_Matrix[N]]" bounding_circuits_
     nil)
    (LM skolem-const-decl "list[Measure_Matrix[N]]" bounding_circuits_
     nil)
    (MM skolem-const-decl "Measure_Matrix[N]" bounding_circuits_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (minimalize_iter_TCC4 0
  (minimalize_iter_TCC4-1 nil 3654423363
   ("" (skeep)
    (("" (skeep)
      (("" (expand "length" 3 2) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (minimalize_iter_TCC5 0
  (minimalize_iter_TCC5-1 nil 3654423363
   ("" (skeep)
    (("" (skeep)
      (("" (ground)
        (("1"
          (typepred "v(cdr[Measure_Matrix[N]](LM),
                 cons[Measure_Matrix[N]](fr, ret))")
          (("1" (skeep)
            (("1" (typepred (M))
              (("1" (hide (-1 -2 -4))
                (("1" (split -1)
                  (("1" (case "NOT member(M, cdr(LM))")
                    (("1" (expand "member" -1)
                      (("1" (ground)
                        (("1" (inst -2 "fr")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (inst 2 "MM")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -3 " M") (("2" (ground) nil nil)) nil))
                    nil)
                   ("2" (inst -2 "M")
                    (("2" (expand "member" 1) (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "length" 1 2) (("2" (ground) nil nil)) nil))
          nil)
         ("2" (skeep)
          (("2"
            (typepred
             "v(cdr[Measure_Matrix[N]](LM), cons[Measure_Matrix[N]](fr, ret))")
            (("2" (hide (-1 -2))
              (("2" (inst?)
                (("2" (ground)
                  (("1" (expand "member" -1)
                    (("1" (expand "member")
                      (("1" (flatten) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "member" 2) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" measures nil)
    (member def-decl "bool" list_props nil)
    (< const-decl "bool" reals nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (LM skolem-const-decl "list[Measure_Matrix[N]]" bounding_circuits_
     nil)
    (M skolem-const-decl
     "{M: Measure_Matrix | member(M, LM) OR member(M, ret)}"
     bounding_circuits_ nil)
    (fr skolem-const-decl "Measure_Matrix[N]" bounding_circuits_ nil)
    (ret skolem-const-decl "list[Measure_Matrix[N]]" bounding_circuits_
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (minimalize_TCC1 0
  (minimalize_TCC1-1 nil 3654423541
   ("" (skeep)
    (("" (ground)
      (("1" (skeep)
        (("1" (typepred (M))
          (("1" (hide (-1 -2))
            (("1"
              (typepred "minimalize_iter(LM, null[Measure_Matrix[N]])")
              (("1" (hide (-1 -3))
                (("1" (inst -1 "M")
                  (("1" (skeep)
                    (("1"
                      (typepred
                       "minimalize_iter(minimalize_iter(LM, null[Measure_Matrix[N]]),
                                   null[Measure_Matrix[N]])")
                      (("1" (hide (-1 -3))
                        (("1" (inst -1 "MM")
                          (("1" (skeep)
                            (("1" (inst 1 "MM_1")
                              (("1"
                                (ground)
                                (("1"
                                  (lemma "matrices_order")
                                  (("1"
                                    (expand "partial_order?")
                                    (("1"
                                      (expand "preorder?")
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst -2 "MM_1" "MM" "M")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2"
          (typepred
           "minimalize_iter(minimalize_iter(LM, null[Measure_Matrix[N]]),
                                   null[Measure_Matrix[N]])")
          (("2" (hide (-1 -2))
            (("2" (inst -1 "m")
              (("2" (assert)
                (("2" (expand "member" -1 1)
                  (("2" (hide -2)
                    (("2"
                      (typepred
                       "minimalize_iter(LM, null[Measure_Matrix[N]])")
                      (("2" (hide (-1 -2))
                        (("2" (inst - "m")
                          (("2" (assert)
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (minimalize_iter def-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM) OR member(M, ret))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix):
             member(m, L) IMPLIES (member(m, ret) OR member(m, LM)))}"
     bounding_circuits_ nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" measures nil)
    (LM skolem-const-decl "list[Measure_Matrix[N]]" bounding_circuits_
     nil)
    (MM skolem-const-decl "Measure_Matrix[N]" bounding_circuits_ nil)
    (matrices_order formula-decl nil measures nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil))
   nil))
 (list_prod_pre_TCC1 0
  (list_prod_pre_TCC1-1 nil 3657884095
   ("" (skeep)
    (("" (skeep) (("" (expand "member") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)) nil))
 (list_prod_pre_TCC2 0
  (list_prod_pre_TCC2-1 nil 3657884095 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (list_prod_pre_TCC3 0
  (list_prod_pre_TCC3-1 nil 3657884095
   ("" (skeep)
    (("" (skeep :preds? t)
      (("" (expand "member" -5)
        (("" (lift-if -5)
          (("" (ground)
            (("1" (lemma "member_append_l[Measure_Matrix]")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (hide 4)
                    (("1" (lemma "member_nth[Measure_Matrix]")
                      (("1" (inst - "l2" "m2")
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (lemma "nth_member[Measure_Matrix]")
                              (("1"
                                (inst
                                 -
                                 "map[Measure_Matrix[N], Measure_Matrix[N]]
                 (LAMBDA (M: Measure_Matrix[N]):
                    *[N](car[Measure_Matrix[N]](l1), M))
                 (l2)"
                                 "m1*m2"
                                 "i")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma
                                       "map_nth_rw[Measure_Matrix, Measure_Matrix]")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "map_length[Measure_Matrix, Measure_Matrix]")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "v(cdr[Measure_Matrix[N]](l1), l2)")
              (("2" (hide (-1 -4 -6))
                (("2" (inst?)
                  (("2" (lemma "member_append_r[Measure_Matrix]")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (member_append_r formula-decl nil more_list_props "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (member_append_l formula-decl nil more_list_props "structures/")
    (member_nth formula-decl nil more_list_props "structures/")
    (nth_member formula-decl nil more_list_props "structures/")
    (map_length formula-decl nil more_map_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (l1 skolem-const-decl "list[Measure_Matrix[N]]" bounding_circuits_
     nil)
    (i skolem-const-decl "below(length(l2))" bounding_circuits_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (l2 skolem-const-decl "list[Measure_Matrix[N]]" bounding_circuits_
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (* const-decl "Measure_Matrix" measures nil)
    (member def-decl "bool" list_props nil))
   nil))
 (list_prod_TCC1 0
  (list_prod_TCC1-1 nil 3657884095
   ("" (skeep)
    (("" (skeep)
      (("" (typepred " list_prod_pre(l1, l2)")
        (("" (hide -1)
          (("" (inst?)
            (("" (assert)
              (("" (typepred " minimalize(list_prod_pre(l1, l2))")
                (("" (hide -1) (("" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" measures nil)
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (* const-decl "Measure_Matrix" measures nil)
    (list_prod_pre def-decl "{L: list[Measure_Matrix] |
         FORALL (m1, m2: Measure_Matrix):
           member(m1, l1) AND member(m2, l2) IMPLIES member(m1 * m2, L)}"
     bounding_circuits_ nil))
   nil))
 (decomp_weight_TCC1 0
  (decomp_weight_TCC1-1 nil 3657446634
   ("" (skeep)
    (("" (typepred "vc`v")
      (("" (expand "vert?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((vert type-eq-decl nil digraphs_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (decomp_weight_TCC2 0
  (decomp_weight_TCC2-1 nil 3657446634
   ("" (skeep)
    (("" (typepred "vc`v")
      (("" (expand "vert?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (decomp_weight_TCC3 0
  (decomp_weight_TCC3-1 nil 3657446634
   ("" (skeep)
    (("" (typepred "vc`v")
      (("" (expand "vert?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((vert type-eq-decl nil digraphs_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (decomp_weight_TCC4 0
  (decomp_weight_TCC4-1 nil 3657446634 ("" (subtype-tcc) nil nil) nil
   nil))
 (decomp_weight_TCC5 0
  (decomp_weight_TCC5-1 nil 3657446634 ("" (subtype-tcc) nil nil) nil
   nil))
 (decomp_weight_TCC6 0
  (decomp_weight_TCC6-2 nil 3659963461
   ("" (skeep)
    (("" (typepred " nth[vert_circ(dg(G))](cd, 0)`v")
      (("1" (expand "vert?") (("1" (propax) nil nil)) nil)
       ("2" (skeep)
        (("2" (typepred "vc`v")
          (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (decomp_weight_TCC6-1 nil 3657446634
   ("" (skeep)
    (("" (typepred " nth[vert_circ[T](dg(G))](cd, 0)`v")
      (("1" (expand "vert?") (("1" (propax) nil nil)) nil)
       ("2" (skeep)
        (("2" (typepred "vc`v")
          (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Sign3 type-eq-decl nil sign3 "reals/")
    (finite_set type-eq-decl nil finite_sets nil))
   nil))
 (decomp_weight_TCC7 0
  (decomp_weight_TCC7-1 nil 3657446634 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (decomp_weight_TCC8 0
  (decomp_weight_TCC8-2 nil 3659963475
   ("" (skeep)
    (("" (typepred " nth[vert_circ(dg(G))](cd, 1)`v")
      (("1" (expand "vert?") (("1" (propax) nil nil)) nil)
       ("2" (skeep)
        (("2" (typepred "vc`v")
          (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (decomp_weight_TCC8-1 nil 3657446634
   ("" (skeep)
    (("" (typepred " nth[vert_circ[T](dg(G))](cd, 1)`v")
      (("1" (expand "vert?") (("1" (propax) nil nil)) nil)
       ("2" (skeep)
        (("2" (typepred "vc`v")
          (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Sign3 type-eq-decl nil sign3 "reals/")
    (finite_set type-eq-decl nil finite_sets nil))
   nil))
 (decomp_weight_TCC9 0
  (decomp_weight_TCC9-2 nil 3659963520
   ("" (skeep)
    (("" (typepred (cd))
      ((""
        (name "ed" "gen_seq2
                      (dg(G), nth[vert_circ(dg(G))](cd, 0)`v,
                       nth[vert_circ(dg(G))](cd, 1)`v)")
        (("1" (replace -1)
          (("1" (expand "walk?" 2)
            (("1" (ground)
              (("1" (skeep :preds? t)
                (("1" (expand "ed" -2)
                  (("1" (expand "gen_seq2" -2)
                    (("1" (expand "finseq_appl" 1)
                      (("1" (expand "walk?")
                        (("1" (flatten)
                          (("1" (hide -6)
                            (("1" (inst -6 "0")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "list2finseq" -6 1)
                                  (("1"
                                    (rewrite
                                     "map_length[vert_circ(dg(G)), vert(dg(G))]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "finseq_appl" -6)
                                        (("1"
                                          (expand "list2finseq" -6)
                                          (("1"
                                            (lemma
                                             "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (lemma
                                                   "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces
                                                         -3
                                                         1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (case "n=0")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "gen_seq2")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "gen_seq2")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (typepred "vc`v")
            (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ed skolem-const-decl
     "Seq[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (map_length formula-decl nil more_map_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (gen_seq2 const-decl "Seq(G)" walks_ "digraphs/")
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil))
   nil)
  (decomp_weight_TCC9-1 nil 3657446634
   ("" (skeep)
    (("" (typepred (cd))
      ((""
        (name "ed" "gen_seq2[T]
               (dg(G), nth[vert_circ[T](dg(G))](cd, 0)`v,
                nth[vert_circ[T](dg(G))](cd, 1)`v)")
        (("1" (replace -1)
          (("1" (expand "walk?" 2)
            (("1" (ground)
              (("1" (skeep :preds? t)
                (("1" (expand "ed" -2)
                  (("1" (expand "gen_seq2" -2)
                    (("1" (expand "finseq_appl" 1)
                      (("1" (expand "walk?")
                        (("1" (flatten)
                          (("1" (hide -6)
                            (("1" (inst -6 "0")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "list2finseq" -6 1)
                                  (("1"
                                    (rewrite
                                     "map_length[vert_circ[T](dg(G)), vert[T](dg(G))]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "finseq_appl" -6)
                                        (("1"
                                          (expand "list2finseq" -6)
                                          (("1"
                                            (lemma
                                             "map_nth_rw[vert_circ[T](dg(G)), vert[T](dg(G))]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (lemma
                                                   "map_nth_rw[vert_circ[T](dg(G)), vert[T](dg(G))]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces
                                                         -3
                                                         1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (case "n=0")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "gen_seq2")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "gen_seq2")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (typepred "vc`v")
            (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Sign3 type-eq-decl nil sign3 "reals/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (decomp_weight_TCC10 0
  (decomp_weight_TCC10-1 nil 3657446634
   ("" (skeep)
    (("" (typepred (cd))
      (("" (expand "length") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (decomp_weight_TCC11 0
  (decomp_weight_TCC11-1 nil 3657446634
   ("" (lemma "cdr_decomp")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (cdr_decomp formula-decl nil circuit_decomp_ "digraphs/")
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil))
   nil))
 (decomp_weight_TCC12 0
  (decomp_weight_TCC12-1 nil 3657446634
   ("" (skeep)
    (("" (typepred (cd))
      (("" (expand "length" 2 2)
        (("" (ground)
          (("" (expand "length" -2)
            (("" (lift-if 2) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (decomp_weight_def 0
  (decomp_weight_def-1 nil 3657449519
   (""
    (case "FORALL (G: wdg, n:posnat, cd: walk_decomp(dg(G))):
              n=length(cd) IMPLIES decomp_weight(G, cd) = wgt_walk(G, decomp_to_walk(dg(G), cd))")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst -1 "length(cd)")
          (("1" (skeep)
            (("1" (typepred "vc`v")
              (("1" (expand "vert?") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (skeep)
          (("3" (case "j=0")
            (("1" (replaces -1)
              (("1" (hide -1)
                (("1" (skeep)
                  (("1" (expand "decomp_weight")
                    (("1" (assert)
                      (("1" (expand "decomp_to_walk")
                        (("1" (expand "nth") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "decomp_to_walk" 2 1)
                (("2" (assert)
                  (("2" (rewrite "wgt_comp")
                    (("1" (expand "decomp_weight" 2 1)
                      (("1" (expand "nth" 2 1)
                        (("1"
                          (typepred "decomp_to_walk(dg(G), cdr(cd))")
                          (("1" (replace -3)
                            (("1" (typepred "car(cd)")
                              (("1"
                                (case "last(car(cd)`c) = car(cd)`v")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "nth" 2 1)
                                    (("1"
                                      (expand "drop_circuits" 2 1)
                                      (("1"
                                        (expand "first" 2 1)
                                        (("1"
                                          (expand "finseq_appl" 2)
                                          (("1"
                                            (expand "list2finseq" 2 1)
                                            (("1"
                                              (lemma
                                               "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "nth" 2 1)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "G"
                                                       "cdr(cd)")
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -8)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if
                                                             -7)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "vc`v")
                                                          (("2"
                                                            (expand
                                                             "vert?")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred (cd))
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -11)
                                                    (("2"
                                                      (lift-if -11)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (typepred "vc`v")
                                                    (("3"
                                                      (expand "vert?")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replaces -1 1)
                                  (("2"
                                    (ground)
                                    (("1"
                                      (replaces -1 1)
                                      (("1"
                                        (expand "gen_seq1")
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (expand "finseq_appl")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "circuit_at?")
                                      (("2"
                                        (expand "circuit?")
                                        (("2"
                                          (expand "pre_circuit?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (expand "last")
                                                (("2"
                                                  (expand
                                                   "finseq_appl")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "vc`v")
                              (("2"
                                (expand "vert?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "cd")
                      (("2" (typepred "decomp_to_walk(dg(G), cdr(cd))")
                        (("1" (replace -3 1)
                          (("1" (case "last(car(cd)`c) = car(cd)`v")
                            (("1" (replaces -1)
                              (("1"
                                (expand "drop_circuits" 1 1)
                                (("1"
                                  (expand "first " 1)
                                  (("1"
                                    (expand "finseq_appl" 1)
                                    (("1"
                                      (expand "list2finseq" 1)
                                      (("1"
                                        (lemma
                                         "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (hide
                                               (-1 -2 -3 -4 -5 -8 3))
                                              (("1"
                                                (expand "walk?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (inst -2 "0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "list2finseq"
                                                           -2
                                                           1)
                                                          (("1"
                                                            (rewrite
                                                             "map_length[vert_circ(dg(G)), vert(dg(G))]")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (expand
                                                                   "list2finseq")
                                                                  (("1"
                                                                    (lemma
                                                                     "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred (cd))
                                            (("2"
                                              (expand "length" -)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep)
                                            (("3"
                                              (typepred "vc`v")
                                              (("3"
                                                (expand "vert?")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "car(cd)")
                              (("2"
                                (ground)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand "last")
                                    (("1"
                                      (expand "gen_seq1")
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "circuit_at?")
                                  (("2"
                                    (expand "circuit?")
                                    (("2"
                                      (expand "pre_circuit?")
                                      (("2"
                                        (expand "last")
                                        (("2"
                                          (expand "finseq_appl")
                                          (("2"
                                            (assert)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (typepred "vc`v")
                            (("2" (expand "vert?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skeep)
                      (("3" (typepred "vc`v")
                        (("3" (expand "vert?") (("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (lemma "id_is_identity") (("4" (assert) nil nil)) nil)
         ("5" (lemma "measure_matrix_assoc") (("5" (assert) nil nil))
          nil)
         ("6" (skeep)
          (("6" (skeep)
            (("6" (typepred "vc`v")
              (("6" (expand "vert?") (("6" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("7" (lemma "id_is_identity") (("7" (assert) nil nil)) nil)
         ("8" (lemma "measure_matrix_assoc") (("8" (assert) nil nil))
          nil))
        nil))
      nil)
     ("3" (lemma "id_is_identity") (("3" (skeep) nil nil)) nil)
     ("4" (lemma "measure_matrix_assoc") (("4" (assert) nil nil)) nil)
     ("5" (skeep)
      (("5" (typepred "vc`v")
        (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
      nil)
     ("6" (lemma "id_is_identity") (("6" (propax) nil nil)) nil)
     ("7" (lemma "measure_matrix_assoc") (("7" (propax) nil nil)) nil))
    nil)
   ((measure_matrix_assoc formula-decl nil measures nil)
    (id_is_identity formula-decl nil measures nil)
    (map_length formula-decl nil more_map_props nil)
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cd skolem-const-decl
     "walk_decomp[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (< const-decl "bool" reals nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wgt_comp formula-decl nil weighted_digraphs_ "digraphs/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (decomp_weight def-decl "Measure_Matrix" bounding_circuits_ nil)
    (* const-decl "Measure_Matrix" measures nil)
    (id const-decl "Measure_Matrix" measures nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ "digraphs/")
    (last const-decl "T" seq_extras "structures/")
    (decomp_to_walk def-decl "{ww: Walk(G) |
         LET W = drop_circuits(G, cd) IN
           first(ww) = first(W) AND last(ww) = last(W)}"
     circuit_decomp_ "digraphs/"))
   shostak))
 (walk_bounding_TCC1 0
  (walk_bounding_TCC1-1 nil 3658703132
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "walk?_caret")
        (("" (inst?)
          (("" (assert)
            (("" (expand "^")
              (("" (expand "min") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (walk?_caret formula-decl nil walks_ "digraphs/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil))
   nil))
 (walk_bounding_TCC2 0
  (walk_bounding_TCC2-1 nil 3658703132 ("" (subtype-tcc) nil nil)
   ((array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (form_matrix const-decl "{m: Measure_Matrix | eq(m, f)}" measures
     nil)
    (id const-decl "Measure_Matrix" measures nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (walk_bounding_TCC3 0
  (walk_bounding_TCC3-1 nil 3658703132
   ("" (skeep)
    (("" (lemma "walk?_caret")
      (("" (inst?)
        (("" (assert)
          (("" (expand "^")
            (("" (expand "min") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (walk?_caret formula-decl nil walks_ "digraphs/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (walk_bounding_TCC4 0
  (walk_bounding_TCC4-1 nil 3658703132 ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (append def-decl "list[T]" list_props nil)
    (^ def-decl "list[T]" more_list_props "structures/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (id_fun const-decl "Sign3" measures nil)
    (array2list_it def-decl
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     array2list "structures/")
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list "structures/")
    (form_matrix const-decl "{m: Measure_Matrix | eq(m, f)}" measures
     nil)
    (id const-decl "Measure_Matrix" measures nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (walk_bounding_TCC5 0
  (walk_bounding_TCC5-1 nil 3658703132 ("" (subtype-tcc) nil nil) nil
   nil))
 (walk_bounding_TCC6 0
  (walk_bounding_TCC6-1 nil 3658703132 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/"))
   nil))
 (walk_bounding_def_TCC1 0
  (walk_bounding_def_TCC1-1 nil 3658703132 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (<= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/"))
   nil))
 (walk_bounding_def 0
  (walk_bounding_def-1 nil 3658703520
   ("" (skolem 1 ("G" "n" "_" "bs"))
    ((""
      (case "FORALL (m:posnat, walk: Walk(dg(G))):
       m=length(walk) AND ( FORALL (v2: vert(dg(G))):
           FORALL (cc: prewalk
                       | (circuit_at?(dg(G), cc, v2) AND length(cc) <= n)):
             EXISTS (M2: Measure_Matrix):
               member(M2, bs(v2)) AND M2 <= wgt_walk(G, cc))
         IMPLIES
         (FORALL ((cd: walk_decomp(dg(G))
                       | FORALL (j: below(length(cd))):
                           nth(cd, j)`c`length <= n)):
            drop_circuits(dg(G), cd) = walk IMPLIES
             (EXISTS (M: Measure_Matrix):
                member(M, walk_bounding(G, walk, bs)) AND
                 M <= decomp_weight(G, cd)))")
      (("1" (skeep)
        (("1" (inst - "length(walk)" "walk")
          (("1" (assert) (("1" (ground) nil nil)) nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "m")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (skeep)
            (("3" (skeep)
              (("3" (assert)
                (("3" (skeep :preds? t)
                  (("3" (hide -1)
                    (("3" (case "j=0")
                      (("1" (hide -5)
                        (("1" (expand "walk_bounding")
                          (("1" (assert)
                            (("1" (lemma "decomp_weight_def")
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "decomp_to_walk")
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (inst -8 "walk`seq(0)")
                                        (("1"
                                          (typepred "car(cd)")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "gen_seq1")
                                                (("1"
                                                  (expand "wgt_walk")
                                                  (("1"
                                                    (expand "wgt_aux")
                                                    (("1"
                                                      (inst 1 "id")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (expand "<=")
                                                          (("1"
                                                            (expand
                                                             "le")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -9 "car(cd)`c")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           +)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst - " 0 ")
                                                (("2"
                                                  (expand "nth")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace
                                                       -9
                                                       1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "drop_circuits")
                                                        (("2"
                                                          (expand
                                                           "list2finseq")
                                                          (("2"
                                                            (expand
                                                             "nth")
                                                            (("2"
                                                              (expand
                                                               "map")
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (expand
                                                                     "length")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep)
                                                (("3"
                                                  (typepred "vc`v")
                                                  (("3"
                                                    (expand "vert?")
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (typepred "vc`v")
                                              (("2"
                                                (expand "vert?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "walk")
                                          (("2"
                                            (hide -6)
                                            (("2"
                                              (expand "walk?")
                                              (("2"
                                                (expand "verts_in?")
                                                (("2"
                                                  (inst -2 "0")
                                                  (("2"
                                                    (expand "vert?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst -4 "walk^(1, length(walk)-1)")
                          (("1" (expand "^" -4 1)
                            (("1" (expand "min")
                              (("1"
                                (ground)
                                (("1"
                                  (inst -1 "cdr(cd)")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "walk_bounding" 2)
                                        (("1"
                                          (typepred
                                           "list_prod(map(LAMBDA (m1: Measure_Matrix):
                               m1 * wgt_walk(G, walk ^ (0, 1)))
                            (cons(id, bs(finseq_appl[T](walk)(0)))),
                         walk_bounding(G,
                                       walk ^ (1, length(walk) - 1),
                                       bs))")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand
                                               "decomp_weight"
                                               2)
                                              (("1"
                                                (inst -9 "walk`seq(0)")
                                                (("1"
                                                  (inst
                                                   -9
                                                   "nth(cd, 0)`c")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "M2* wgt_walk(G, walk ^ (0, 1))"
                                                       "M")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               2
                                                               "M_1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case-replace
                                                                   "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)")
                                                                  (("1"
                                                                    (lemma
                                                                     "mult_right_preserves_order")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       " wgt_walk(G, walk ^ (0, 1))"
                                                                       "M2"
                                                                       "wgt_walk(G, nth(cd, 0)`c)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "mult_right_preserves_order")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             " M"
                                                                             "M2 * wgt_walk(G, walk ^ (0, 1))"
                                                                             "
       wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "mult_left_preserves_order")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "  wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1))"
                                                                                   "M"
                                                                                   "decomp_weight(G, cdr(cd))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "matrices_order")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "partial_order?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "preorder?")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (hide
                                                                                               (-1
                                                                                                -3))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "transitive?")
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -
                                                                                                   "M_1"
                                                                                                   "M2 * wgt_walk(G, walk ^ (0, 1)) * M"
                                                                                                   "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       " M_1"
                                                                                                       "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) * M "
                                                                                                       "wgt_walk(G, nth(cd, 0)`c) * wgt_walk(G, walk ^ (0, 1)) *
        decomp_weight(G, cdr(cd))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "id_is_identity")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (lemma
                                                                                                         "measure_matrix_assoc")
                                                                                                        (("3"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (skeep)
                                                                                                        (("4"
                                                                                                          (typepred
                                                                                                           "vc`v")
                                                                                                          (("4"
                                                                                                            (expand
                                                                                                             "vert?")
                                                                                                            (("4"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "vc`v")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "vert?")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (lemma
                                                                                                     "id_is_identity")
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (lemma
                                                                                                     "measure_matrix_assoc")
                                                                                                    (("4"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "id_is_identity")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (lemma
                                                                                     "measure_matrix_assoc")
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skeep)
                                                                                    (("4"
                                                                                      (typepred
                                                                                       "vc`v")
                                                                                      (("4"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("4"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("2"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               "id_is_identity")
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (lemma
                                                                               "measure_matrix_assoc")
                                                                              (("4"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("2"
                                                                            (expand
                                                                             "vert?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (lemma
                                                                         "id_is_identity")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (lemma
                                                                         "measure_matrix_assoc")
                                                                        (("4"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "gen_seq2")
                                                                      (("1"
                                                                        (expand
                                                                         "^")
                                                                        (("1"
                                                                          (expand
                                                                           "min")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "^")
                                                                        (("1"
                                                                          (expand
                                                                           "gen_seq2")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (lift-if
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -12
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (hide
                                                                                   (-1
                                                                                    -2
                                                                                    -3
                                                                                    -4
                                                                                    -6))
                                                                                  (("1"
                                                                                    (hide
                                                                                     3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "drop_circuits")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "list2finseq")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (ground)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "gen_seq2")
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               (x!1))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "gen_seq2")
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("2"
                                                                            (expand
                                                                             "vert?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (typepred
                                                                         "vc`v")
                                                                        (("3"
                                                                          (expand
                                                                           "vert?")
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("3"
                                                                        (expand
                                                                         "vert?")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "member_nth[Measure_Matrix]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               " bs(walk`seq(0))"
                                                               " M2")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (lemma
                                                                     "nth_member[Measure_Matrix]")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "map(LAMBDA (m1: Measure_Matrix):
                   m1 * wgt_walk(G, walk ^ (0, 1)))
                (cons(id, bs(finseq_appl[T](walk)(0))))"
                                                                       "M2* wgt_walk(G, walk ^ (0, 1))"
                                                                       "i+1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "map_nth_rw[Measure_Matrix, Measure_Matrix]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "finseq_appl")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "finseq_appl")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (lemma
                                                                                 "id_is_identity")
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (lemma
                                                                                 "measure_matrix_assoc")
                                                                                (("4"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "map_length[Measure_Matrix, Measure_Matrix]")
                                                                        (("2"
                                                                          (expand
                                                                           "length")
                                                                          (("2"
                                                                            (typepred
                                                                             "i")
                                                                            (("2"
                                                                              (expand
                                                                               "finseq_appl")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (lemma
                                                                         "id_is_identity")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (lemma
                                                                         "measure_matrix_assoc")
                                                                        (("4"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (lemma
                                                                           "id_is_identity")
                                                                          (("5"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (skeep)
                                                                        (("6"
                                                                          (lemma
                                                                           "measure_matrix_assoc")
                                                                          (("6"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "id_is_identity")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (lemma
                                                         "measure_matrix_assoc")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (lemma
                                                         "walk?_caret")
                                                        (("4"
                                                          (inst?)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (expand
                                                               "^")
                                                              (("4"
                                                                (expand
                                                                 "min")
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst -6 "0")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "nth(cd, 0)")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "id * wgt_walk(G, walk ^ (0, 1))"
                                                             "M")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   3
                                                                   " M_1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "wgt_walk"
                                                                         3
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "gen_seq1")
                                                                          (("1"
                                                                            (expand
                                                                             "wgt_aux")
                                                                            (("1"
                                                                              (case-replace
                                                                               "gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v) = walk ^ (0, 1)")
                                                                              (("1"
                                                                                (lemma
                                                                                 "mult_left_preserves_order")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "id * wgt_walk(G, walk ^ (0, 1))"
                                                                                   "M "
                                                                                   " decomp_weight(G, cdr(cd))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "matrices_order")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "partial_order?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "preorder?")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -3)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "transitive?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "M_1 "
                                                                                                   "id * wgt_walk(G, walk ^ (0, 1)) * M "
                                                                                                   "id * wgt_walk(G, walk ^ (0, 1)) * decomp_weight(G, cdr(cd))")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "vc`v")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "vert?")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (lemma
                                                                                                     "id_is_identity")
                                                                                                    (("3"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (lemma
                                                                                                     "measure_matrix_assoc")
                                                                                                    (("4"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (lemma
                                                                                     "id_is_identity")
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (lemma
                                                                                     "measure_matrix_assoc")
                                                                                    (("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "gen_seq2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "min")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "gen_seq2")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -11
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "drop_circuits "
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "list2finseq")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lift-if
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         (x!1))
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "gen_seq2")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   (x!1))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "gen_seq2")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "vc`v")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "vert?")
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "map")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "id_is_identity")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               "measure_matrix_assoc")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (lemma
                                                               "walk?_caret")
                                                              (("4"
                                                                (inst?)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (expand
                                                                     "^")
                                                                    (("4"
                                                                      (expand
                                                                       "min")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -10
                                                             1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (expand
                                                               "drop_circuits "
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "list2finseq")
                                                                (("2"
                                                                  (expand
                                                                   "map"
                                                                   1)
                                                                  (("2"
                                                                    (lift-if
                                                                     1)
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "length")
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "nth "
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "nth"
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred
                                                             "vc`v")
                                                            (("2"
                                                              (expand
                                                               "vert?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred "vc`v")
                                                      (("3"
                                                        (expand
                                                         "vert?")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -)
                                                  (("2"
                                                    (typepred "walk")
                                                    (("2"
                                                      (expand "walk?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "verts_in?")
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "0")
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (lemma "id_is_identity")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep)
                                            (("3"
                                              (lemma
                                               "measure_matrix_assoc")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep)
                                            (("4"
                                              (lemma "walk?_caret")
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (expand "^")
                                                    (("4"
                                                      (expand "min")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (expand "finseq_appl")
                                            (("5"
                                              (assert)
                                              (("5"
                                                (typepred "walk")
                                                (("5"
                                                  (expand "walk?")
                                                  (("5"
                                                    (hide -6)
                                                    (("5"
                                                      (expand
                                                       "verts_in?")
                                                      (("5"
                                                        (flatten)
                                                        (("5"
                                                          (inst?)
                                                          (("5"
                                                            (assert)
                                                            (("5"
                                                              (expand
                                                               "vert?")
                                                              (("5"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (decompose-equality 1)
                                      (("1"
                                        (expand "drop_circuits" 1 1)
                                        (("1"
                                          (expand "list2finseq" 1)
                                          (("1"
                                            (rewrite
                                             "map_length[vert_circ(dg(G)), vert(dg(G))]")
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand "min")
                                                (("1"
                                                  (case
                                                   "length(cd) = walk`length")
                                                  (("1"
                                                    (expand
                                                     " length"
                                                     -1
                                                     1)
                                                    (("1"
                                                      (lift-if -1)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace
                                                     -7
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand
                                                       "drop_circuits")
                                                      (("2"
                                                        (expand
                                                         "list2finseq")
                                                        (("2"
                                                          (rewrite
                                                           "map_length[vert_circ(dg(G)), vert(dg(G))]")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred "vc`v")
                                                      (("3"
                                                        (expand
                                                         "vert?")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (typepred "vc`v")
                                                (("2"
                                                  (expand "vert?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        (("1"
                                          (expand "drop_circuits" 1)
                                          (("1"
                                            (expand "list2finseq")
                                            (("1"
                                              (lemma
                                               "map_nth_rw[vert_circ(dg(G)), vert(dg(G))]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (replace
                                                       -8
                                                       1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "drop_circuits")
                                                        (("1"
                                                          (expand
                                                           "list2finseq")
                                                          (("1"
                                                            (expand
                                                             "map"
                                                             1)
                                                            (("1"
                                                              (lift-if
                                                               1)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "length")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "nth"
                                                                   2
                                                                   2)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred "vc`v")
                                                    (("2"
                                                      (expand "vert?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (typepred "vc`v")
                                            (("2"
                                              (expand "vert?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (typepred "vc`v")
                                          (("3"
                                            (expand "vert?")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "length(cd) = walk`length")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand " length" -1 1)
                                        (("1"
                                          (lift-if -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "walk?")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "verts_in?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -3 "i+1")
                                                        (("1"
                                                          (expand
                                                           "list2finseq")
                                                          (("1"
                                                            (hide -4)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -3)
                                                              (("1"
                                                                (expand
                                                                 "map"
                                                                 -3)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           (i))
                                                          (("2"
                                                            (expand
                                                             "map"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "list2finseq")
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst -5 "n!1+1")
                                                      (("2"
                                                        (expand
                                                         "map"
                                                         -5
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "list2finseq"
                                                           -5
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "list2finseq"
                                                             -1
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -5
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("2"
                                                                    (expand
                                                                     "map"
                                                                     -5)
                                                                    (("2"
                                                                      (expand
                                                                       "list2finseq")
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         -5)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst -4 "j!1+1")
                                                  (("2"
                                                    (expand "nth " -4)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (replace -7 1 :dir rl)
                                        (("2"
                                          (expand "drop_circuits")
                                          (("2"
                                            (expand "list2finseq")
                                            (("2"
                                              (rewrite
                                               "map_length[vert_circ(dg(G)), vert(dg(G))]")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (typepred "vc`v")
                                        (("3"
                                          (expand "vert?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep)
                                    (("3"
                                      (typepred "vc`v")
                                      (("3"
                                        (expand "vert?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (expand "length")
                                    (("4"
                                      (lift-if -1)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "walk?_caret")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "^")
                                  (("2"
                                    (expand "min")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide 2)
            (("4" (skeep)
              (("4" (skeep)
                (("4" (skeep)
                  (("4" (typepred "vc`v")
                    (("4" (expand "vert?") (("4" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (hide 2)
            (("5" (skeep)
              (("5" (skeep)
                (("5" (skeep)
                  (("5" (lemma "id_is_identity")
                    (("5" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (hide 2)
            (("6" (skeep)
              (("6" (skeep)
                (("6" (skeep)
                  (("6" (lemma "measure_matrix_assoc")
                    (("6" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (hide 2)
            (("7" (skeep)
              (("7" (skeep)
                (("7" (skeep)
                  (("7" (typepred (cc))
                    (("7" (expand "circuit_at?")
                      (("7" (expand "circuit?")
                        (("7" (expand "pre_circuit?")
                          (("7" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (skeep)
          (("3" (skeep)
            (("3" (typepred "vc`v")
              (("3" (expand "vert?") (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (skeep)
            (("4" (skeep)
              (("4" (lemma "id_is_identity") (("4" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (skeep)
          (("5" (skeep)
            (("5" (skeep)
              (("5" (lemma "measure_matrix_assoc")
                (("5" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (hide 2)
        (("6" (skeep)
          (("6" (skeep)
            (("6" (typepred (cc))
              (("6" (expand "circuit_at?")
                (("6" (expand "circuit?")
                  (("6" (expand "pre_circuit?")
                    (("6" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decomp_weight def-decl "Measure_Matrix" bounding_circuits_ nil)
    (walk_bounding def-decl "list[Measure_Matrix]" bounding_circuits_
     nil)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ "digraphs/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (<= const-decl "bool" measures nil)
    (member def-decl "bool" list_props nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (<= const-decl "bool" reals nil)
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (associative? const-decl "bool" operator_defs nil)
    (identity? const-decl "bool" operator_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (n skolem-const-decl "nat" bounding_circuits_ nil)
    (bs skolem-const-decl
     "[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G)) ->
   list[Measure_Matrix]]" bounding_circuits_ nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (decomp_weight_def formula-decl nil bounding_circuits_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cd skolem-const-decl "{cd: walk_decomp(dg(G)) |
         FORALL (j: below(length(cd))): nth(cd, j)`c`length <= n}"
     bounding_circuits_ nil)
    (length_null formula-decl nil more_list_props "structures/")
    (le const-decl "bool" measures nil)
    (wgt_aux def-decl "Weight" weighted_digraphs_ "digraphs/")
    (walk skolem-const-decl
     "Walk[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
         LET W = drop_circuits(G, cd) IN
           first(ww) = first(W) AND last(ww) = last(W)}"
     circuit_decomp_ "digraphs/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_prod const-decl "{L: list[Measure_Matrix] |
         FORALL (m1, m2: Measure_Matrix):
           member(m1, l1) AND member(m2, l2) IMPLIES
            (EXISTS (M: Measure_Matrix): member(M, L) AND M <= m1 * m2)}"
     bounding_circuits_ nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (gen_seq2 const-decl "Seq(G)" walks_ "digraphs/")
    (matrices_order formula-decl nil measures nil)
    (preorder? const-decl "bool" orders nil)
    (id_is_identity formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (mult_left_preserves_order formula-decl nil measures nil)
    (mult_right_preserves_order formula-decl nil measures nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (x!1 skolem-const-decl
     "below[gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v)`length]"
     bounding_circuits_ nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(bs(walk`seq(0))))"
     bounding_circuits_ nil)
    (map_length formula-decl nil more_map_props nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (member_nth formula-decl nil more_list_props "structures/")
    (walk?_caret formula-decl nil walks_ "digraphs/")
    (x!1 skolem-const-decl
     "below[gen_seq2(dg(G), nth(cd, 0)`v, nth(cd, 1)`v)`length]"
     bounding_circuits_ nil)
    (i skolem-const-decl "below(length
        (list2finseq
             [vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))]
             (map
                  [vert_circ
                       [T, ConcreteDigraph, vert, edges, size, make](dg
                                                                     (G)),
                   vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))]
                  (LAMBDA (vc:
                             vert_circ
                                 [T, ConcreteDigraph, vert, edges, size,
                                  make](dg(G))):
                     vc`v)
                  (cdr
                       [vert_circ
                            [T, ConcreteDigraph, vert, edges, size, make](dg
                                                                          (G))]
                       (cd)))))" bounding_circuits_ nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/"))
   shostak))
 (walk_bounding_has_walk_wgt 0
  (walk_bounding_has_walk_wgt-1 nil 3658852425
   ("" (skolem 1 ("G" "_" "bs"))
    ((""
      (case " FORALL (m:posnat, walk: Walk(dg(G))):
       m=walk`length IMPLIES  EXISTS (M: Measure_Matrix):
          member(M, walk_bounding(G, walk, bs)) AND M <= wgt_walk(G, walk)")
      (("1" (skeep)
        (("1" (inst?) (("1" (inst - "walk`length") nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (induct " m")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (skeep)
            (("3" (case "j=0")
              (("1" (skeep)
                (("1" (expand "wgt_walk")
                  (("1" (expand "wgt_aux")
                    (("1" (inst 1 "id")
                      (("1" (ground)
                        (("1" (expand "walk_bounding")
                          (("1" (expand "member")
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (expand "<=")
                          (("2" (expand "le") (("2" (propax) nil nil))
                            nil))
                          nil)
                         ("3" (expand "walk_bounding")
                          (("3" (expand "member")
                            (("3" (propax) nil nil)) nil))
                          nil)
                         ("4" (expand "<=")
                          (("4" (expand "le") (("4" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (assert)
                  (("2" (inst -1 "walk^(1, length(walk)-1)")
                    (("1" (ground)
                      (("1" (skeep)
                        (("1" (expand "walk_bounding" 2)
                          (("1"
                            (typepred
                             " list_prod(map(LAMBDA (m1: Measure_Matrix):
                             m1 * wgt_walk(G, walk ^ (0, 1)))
                          (cons(id, bs(finseq_appl[T](walk)(0)))),
                       walk_bounding(G, walk ^ (1, length(walk) - 1), bs))")
                            (("1" (hide -1)
                              (("1"
                                (inst
                                 -
                                 "id* wgt_walk(G, walk ^ (0, 1)) "
                                 " M")
                                (("1"
                                  (ground)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "wgt_walk_decomposed")
                                          (("1"
                                            (inst - "G" "1" "walk")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "id_is_identity")
                                                (("1"
                                                  (expand "identity?")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     " wgt_walk(G, walk ^ (0, 1))")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replaces -2)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "mult_left_preserves_order")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "wgt_walk(G, walk ^ (0, 1))"
                                                               "M "
                                                               " wgt_walk(G, walk ^ (1, length(walk) - 1))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "matrices_order")
                                                                  (("1"
                                                                    (expand
                                                                     "partial_order?")
                                                                    (("1"
                                                                      (expand
                                                                       "preorder?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "transitive?")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "M_1"
                                                                             "wgt_walk(G, walk ^ (0, 1)) * M "
                                                                             "
       wgt_walk(G, walk ^ (0, 1)) *
        wgt_walk(G, walk ^ (1, length(walk) - 1))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "id_is_identity")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               "measure_matrix_assoc")
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "id_is_identity")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "measure_matrix_assoc")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "id_is_identity")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "measure_matrix_assoc")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "map")
                                    (("2"
                                      (expand "member")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "id_is_identity")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (lemma "measure_matrix_assoc")
                                  (("3" (propax) nil nil))
                                  nil)
                                 ("4"
                                  (lemma "walk?_caret")
                                  (("4"
                                    (inst?)
                                    (("4"
                                      (assert)
                                      (("4"
                                        (expand "^")
                                        (("4"
                                          (expand "min")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (lemma "id_is_identity")
                                (("2" (propax) nil nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (lemma "measure_matrix_assoc")
                                (("3" (propax) nil nil))
                                nil))
                              nil)
                             ("4" (skeep)
                              (("4"
                                (lemma "walk?_caret")
                                (("4"
                                  (inst?)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (expand "^")
                                      (("4"
                                        (expand "min")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (typepred "walk")
                              (("5"
                                (expand "walk?")
                                (("5"
                                  (expand "verts_in?")
                                  (("5"
                                    (flatten)
                                    (("5"
                                      (inst -2 "0")
                                      (("5"
                                        (expand "vert?")
                                        (("5"
                                          (assert)
                                          (("5"
                                            (expand "finseq_appl")
                                            (("5" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "^")
                        (("2" (expand "min") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "walk?_caret")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (expand "^")
                            (("2" (expand "min")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (skeep)
              (("4" (skeep)
                (("4" (skeep)
                  (("4" (lemma "id_is_identity")
                    (("4" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skeep)
            (("5" (skeep)
              (("5" (skeep)
                (("5" (skeep)
                  (("5" (lemma "measure_matrix_assoc")
                    (("5" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (skeep)
            (("3" (lemma "id_is_identity") (("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (skeep)
            (("4" (lemma "measure_matrix_assoc")
              (("4" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (<= const-decl "bool" measures nil)
    (walk_bounding def-decl "list[Measure_Matrix]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (member def-decl "bool" list_props nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (associative? const-decl "bool" operator_defs nil)
    (identity? const-decl "bool" operator_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (bs skolem-const-decl
     "[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G)) ->
   list[Measure_Matrix]]" bounding_circuits_ nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (le const-decl "bool" measures nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wgt_aux def-decl "Weight" weighted_digraphs_ "digraphs/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (below type-eq-decl nil naturalnumbers nil)
    (walk?_caret formula-decl nil walks_ "digraphs/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (wgt_walk_decomposed formula-decl nil weighted_digraphs_
     "digraphs/")
    (matrices_order formula-decl nil measures nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (partial_order? const-decl "bool" orders nil)
    (mult_left_preserves_order formula-decl nil measures nil)
    (id_is_identity formula-decl nil measures nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list_prod const-decl "{L: list[Measure_Matrix] |
         FORALL (m1, m2: Measure_Matrix):
           member(m1, l1) AND member(m2, l2) IMPLIES
            (EXISTS (M: Measure_Matrix): member(M, L) AND M <= m1 * m2)}"
     bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (walk skolem-const-decl
     "Walk[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (walk_list_bounding_TCC1 0
  (walk_list_bounding_TCC1-1 nil 3659094121 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ "digraphs/"))
   nil))
 (walk_list_bounding_TCC2 0
  (walk_list_bounding_TCC2-1 nil 3659094121
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (walk_list_bounding_def_TCC1 0
  (walk_list_bounding_def_TCC1-1 nil 3659094121
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (<= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/"))
   nil))
 (walk_list_bounding_def 0
  (walk_list_bounding_def-2 nil 3659964530
   ("" (skolem 1 ("G" "n" "_" "bs"))
    (("" (case "identity?(*)(id) AND associative?(*)")
      (("1" (flatten)
        (("1" (label "mm" (-1 -2))
          (("1" (hide mm)
            (("1"
              (case "FORALL (m:nat, wlist: list[Walk(dg(G))]):
                 m = length(wlist) AND (FORALL (v2: vert(dg(G))):
                    FORALL (cc: prewalk
                                | (circuit_at?(dg(G), cc, v2) AND length(cc) <= n)):
                      EXISTS (M2: Measure_Matrix):
                        member(M2, bs(v2)) AND M2 <= wgt_walk(G, cc))
                  IMPLIES
                  (FORALL (walk: Walk(dg(G)),
                           (cd: walk_decomp(dg(G))
                                | FORALL (j: below(length(cd))):
                                    nth(cd, j)`c`length <= n)):
                     member(walk, wlist) AND drop_circuits(dg(G), cd) = walk IMPLIES
                      (EXISTS (M: Measure_Matrix):
                         member(M, walk_list_bounding(G, wlist, bs)) AND
                          M <= decomp_weight(G, cd)))")
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (inst -1 " length(wlist)")
                    (("1" (assert) (("1" (ground) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (deftactic meas
                   (then (repeat (skeep)) (reveal mm) (flatten)
                    (assert)))
                  (("2"
                    (deftactic vert
                     (then (hide-all-but 1) (repeat (skeep))
                      (typepred "vc`v") (expand "vert?")))
                    (("2" (induct "m")
                      (("1" (skeep)
                        (("1" (skeep)
                          (("1" (expand "member")
                            (("1" (lift-if -3)
                              (("1"
                                (ground)
                                (("1"
                                  (expand "length")
                                  (("1" (ground) nil nil))
                                  nil)
                                 ("2"
                                  (expand "length")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (skeep)
                          (("2"
                            (deftactic cc (circ)
                             (then (hide-all-but 1) (repeat (skeep))
                              (typepred circ) (expand "circuit_at?")
                              (expand "circuit?")
                              (expand "pre-circuit?") (ground)))
                            (("2" (inst -1 "cdr(wlist)")
                              (("1"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "member" -4)
                                    (("1"
                                      (lift-if -4)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand
                                             "walk_list_bounding")
                                            (("1"
                                              (lemma
                                               "walk_bounding_def")
                                              (("1"
                                                (inst
                                                 -
                                                 "G"
                                                 "n"
                                                 "walk"
                                                 "bs")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (inst -1 "cd")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst 2 "M")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "member_append_l[Measure_Matrix]")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -2 "walk" "cd")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst + "M")
                                                (("2"
                                                  (expand
                                                   "walk_list_bounding"
                                                   2)
                                                  (("2"
                                                    (lemma
                                                     "member_append_r[Measure_Matrix]")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" -1)
                                  (("2"
                                    (lift-if -1)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (vert) nil nil) ("4" (meas) nil nil)
                       ("5" (meas) nil nil)
                       ("6" (hide 2)
                        (("6" (skeep)
                          (("6" (skeep)
                            (("6" (typepred "cc")
                              (("6"
                                (expand "circuit_at?")
                                (("6"
                                  (expand "circuit?")
                                  (("6"
                                    (expand "pre_circuit?")
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep)
                  (("3" (skeep)
                    (("3" (typepred "vc`v")
                      (("3" (expand "vert?") (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (skeep)
                  (("4" (skeep)
                    (("4" (reveal mm) (("4" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("5" (hide 2)
                (("5" (skeep)
                  (("5" (skeep)
                    (("5" (reveal mm) (("5" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("6" (hide 2)
                (("6" (skeep)
                  (("6" (skeep)
                    (("6" (typepred (cc))
                      (("6" (expand "circuit_at?")
                        (("6" (expand "circuit?")
                          (("6" (expand "pre_circuit?")
                            (("6" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "id_is_identity")
          (("2" (lemma "measure_matrix_assoc") (("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((associative? const-decl "bool" operator_defs nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (identity? const-decl "bool" operator_defs nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (decomp_weight def-decl "Measure_Matrix" bounding_circuits_ nil)
    (walk_list_bounding def-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ "digraphs/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (<= const-decl "bool" measures nil)
    (member def-decl "bool" list_props nil)
    (<= const-decl "bool" reals nil)
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (below type-eq-decl nil nat_types nil)
    (TRUE const-decl "bool" booleans nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (n skolem-const-decl "nat" bounding_circuits_ nil)
    (bs skolem-const-decl
     "[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G)) ->
   list[Measure_Matrix]]" bounding_circuits_ nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wlist skolem-const-decl "list[Walk(dg(G))]" bounding_circuits_
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member_append_r formula-decl nil more_list_props "structures/")
    (walk_bounding_def formula-decl nil bounding_circuits_ nil)
    (member_append_l formula-decl nil more_list_props "structures/")
    (walk_bounding def-decl "list[Measure_Matrix]" bounding_circuits_
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (id_is_identity formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil))
   nil)
  (walk_list_bounding_def-1 nil 3659104061
   ("" (skolem 1 ("G" "n" "_" "bs"))
    (("" (case "identity?(*)(id) AND associative?(*)")
      (("1" (flatten)
        (("1" (label "mm" (-1 -2))
          (("1" (hide mm)
            (("1"
              (case "FORALL (m:nat, wlist: list[Walk[T](dg(G))]):
        m = length(wlist) AND (FORALL (v2: vert(dg(G))):
           FORALL (cc: prewalk[T]
                       | (circuit_at?(dg(G), cc, v2) AND length(cc) <= n)):
             EXISTS (M2: Measure_Matrix):
               member(M2, bs(v2)) AND M2 <= wgt_walk(G, cc))
         IMPLIES
         (FORALL (walk: Walk(dg(G)),
                  (cd: walk_decomp[T](dg(G))
                       | FORALL (j: below(length(cd))):
                           nth(cd, j)`c`length <= n)):
            member(walk, wlist) AND drop_circuits(dg(G), cd) = walk IMPLIES
             (EXISTS (M: Measure_Matrix):
                member(M, walk_list_bounding(G, wlist, bs)) AND
                 M <= decomp_weight(G, cd)))")
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (inst -1 " length(wlist)")
                    (("1" (assert) (("1" (ground) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (deftactic meas
                   (then (repeat (skeep)) (reveal mm) (flatten)
                    (assert)))
                  (("2"
                    (deftactic vert
                     (then (hide-all-but 1) (repeat (skeep))
                      (typepred "vc`v") (expand "vert?")))
                    (("2" (induct "m")
                      (("1" (skeep)
                        (("1" (skeep)
                          (("1" (expand "member")
                            (("1" (lift-if -3)
                              (("1"
                                (ground)
                                (("1"
                                  (expand "length")
                                  (("1" (ground) nil nil))
                                  nil)
                                 ("2"
                                  (expand "length")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (skeep)
                          (("2"
                            (deftactic cc (circ)
                             (then (hide-all-but 1) (repeat (skeep))
                              (typepred circ) (expand "circuit_at?")
                              (expand "circuit?")
                              (expand "pre-circuit?") (ground)))
                            (("2" (inst -1 "cdr(wlist)")
                              (("1"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "member" -4)
                                    (("1"
                                      (lift-if -4)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand
                                             "walk_list_bounding")
                                            (("1"
                                              (lemma
                                               "walk_bounding_def")
                                              (("1"
                                                (inst
                                                 -
                                                 "G"
                                                 "n"
                                                 "walk"
                                                 "bs")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (inst -1 "cd")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst 2 "M")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "member_append_l[Measure_Matrix]")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -2 "walk" "cd")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst + "M")
                                                (("2"
                                                  (expand
                                                   "walk_list_bounding"
                                                   2)
                                                  (("2"
                                                    (lemma
                                                     "member_append_r[Measure_Matrix]")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" -1)
                                  (("2"
                                    (lift-if -1)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (vert) nil nil) ("4" (meas) nil nil)
                       ("5" (meas) nil nil)
                       ("6" (hide 2)
                        (("6" (skeep)
                          (("6" (skeep)
                            (("6" (typepred "cc")
                              (("6"
                                (expand "circuit_at?")
                                (("6"
                                  (expand "circuit?")
                                  (("6"
                                    (expand "pre_circuit?")
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep)
                  (("3" (skeep)
                    (("3" (typepred "vc`v")
                      (("3" (expand "vert?") (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (skeep)
                  (("4" (skeep)
                    (("4" (reveal mm) (("4" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("5" (hide 2)
                (("5" (skeep)
                  (("5" (skeep)
                    (("5" (reveal mm) (("5" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("6" (hide 2)
                (("6" (skeep)
                  (("6" (skeep)
                    (("6" (typepred (cc))
                      (("6" (expand "circuit_at?")
                        (("6" (expand "circuit?")
                          (("6" (expand "pre_circuit?")
                            (("6" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "id_is_identity")
          (("2" (lemma "measure_matrix_assoc") (("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Sign3 type-eq-decl nil sign3 "reals/")
    (<= const-decl "bool" measures nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member_append_r formula-decl nil more_list_props "structures/")
    (member_append_l formula-decl nil more_list_props "structures/")
    (id_is_identity formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil))
   shostak))
 (walk_list_bounding_has_walk_wgt 0
  (walk_list_bounding_has_walk_wgt-2 nil 3659964575
   ("" (skolem 1 ("G" "_" "bs" "walk"))
    ((""
      (case "FORALL (m:nat, wlist: list[Walk(dg(G))]):
               m= length(wlist) AND member(walk, wlist) IMPLIES
                (EXISTS (M: Measure_Matrix):
                   member(M, walk_list_bounding(G, wlist, bs)) AND
                    M <= wgt_walk(G, walk))")
      (("1" (skeep)
        (("1" (inst?)
          (("1" (inst - " length(wlist)") (("1" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "m")
          (("1" (skeep)
            (("1" (expand "member")
              (("1" (lift-if -2)
                (("1" (ground)
                  (("1" (expand "length") (("1" (ground) nil nil)) nil)
                   ("2" (expand "length") (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "member" -3)
                (("2" (lift-if -3)
                  (("2" (ground)
                    (("1" (expand "walk_list_bounding" 2)
                      (("1" (hide -2)
                        (("1" (lemma "walk_bounding_has_walk_wgt")
                          (("1" (inst?)
                            (("1" (skeep)
                              (("1"
                                (inst + "M")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "member_append_l[Measure_Matrix]")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "cdr(wlist)")
                      (("2" (assert)
                        (("2" (ground)
                          (("1" (skeep)
                            (("1" (inst + "M")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "walk_list_bounding" 2)
                                  (("1"
                                    (lemma
                                     "member_append_r[Measure_Matrix]")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length" -)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (skeep)
              (("3" (skeep)
                (("3" (lemma "id_is_identity") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (skeep)
              (("4" (skeep)
                (("4" (lemma "measure_matrix_assoc")
                  (("4" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (skeep)
            (("3" (lemma "id_is_identity") (("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (skeep)
            (("4" (lemma "measure_matrix_assoc")
              (("4" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (<= const-decl "bool" measures nil)
    (walk_list_bounding def-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (associative? const-decl "bool" operator_defs nil)
    (identity? const-decl "bool" operator_defs nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (walk skolem-const-decl
     "Walk[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (bs skolem-const-decl
     "[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G)) ->
   list[Measure_Matrix]]" bounding_circuits_ nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member_append_r formula-decl nil more_list_props "structures/")
    (walk_bounding_has_walk_wgt formula-decl nil bounding_circuits_
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (walk_bounding def-decl "list[Measure_Matrix]" bounding_circuits_
     nil)
    (member_append_l formula-decl nil more_list_props "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (id_is_identity formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil))
   nil)
  (walk_list_bounding_has_walk_wgt-1 nil 3659106546
   ("" (skolem 1 ("G" "_" "bs" "walk"))
    ((""
      (case "FORALL (m:nat, wlist: list[Walk[T](dg(G))]):
        m= length(wlist) AND member(walk, wlist) IMPLIES
         (EXISTS (M: Measure_Matrix):
            member(M, walk_list_bounding(G, wlist, bs)) AND
             M <= wgt_walk(G, walk))")
      (("1" (skeep)
        (("1" (inst?)
          (("1" (inst - " length(wlist)") (("1" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "m")
          (("1" (skeep)
            (("1" (expand "member")
              (("1" (lift-if -2)
                (("1" (ground)
                  (("1" (expand "length") (("1" (ground) nil nil)) nil)
                   ("2" (expand "length") (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "member" -3)
                (("2" (lift-if -3)
                  (("2" (ground)
                    (("1" (expand "walk_list_bounding" 2)
                      (("1" (hide -2)
                        (("1" (lemma "walk_bounding_has_walk_wgt")
                          (("1" (inst?)
                            (("1" (skeep)
                              (("1"
                                (inst + "M")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "member_append_l[Measure_Matrix]")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "cdr(wlist)")
                      (("2" (assert)
                        (("2" (ground)
                          (("1" (skeep)
                            (("1" (inst + "M")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "walk_list_bounding" 2)
                                  (("1"
                                    (lemma
                                     "member_append_r[Measure_Matrix]")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length" -)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (skeep)
              (("3" (skeep)
                (("3" (lemma "id_is_identity") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (skeep)
              (("4" (skeep)
                (("4" (lemma "measure_matrix_assoc")
                  (("4" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (skeep)
            (("3" (lemma "id_is_identity") (("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (skeep)
            (("4" (lemma "measure_matrix_assoc")
              (("4" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" measures nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Sign3 type-eq-decl nil sign3 "reals/")
    (finite_set type-eq-decl nil finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (member_append_r formula-decl nil more_list_props "structures/")
    (member_append_l formula-decl nil more_list_props "structures/")
    (id_is_identity formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil))
   shostak))
 (bound_circuits_at_def_TCC1 0
  (bound_circuits_at_def_TCC1-1 nil 3659115731
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (get const-decl "Sign3" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (le const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil)
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (/= const-decl "boolean" notequal nil)
    (cycle? const-decl "bool" cycles_ "digraphs/")
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bound_circuits_at_def 0
  (bound_circuits_at_def-1 nil 3659130685
   ("" (skeep)
    (("" (skeep)
      (("" (expand "bound_circuits_at")
        ((""
          (typepred "minimalize(walk_list_bounding(G, vc`cycles, bs))")
          (("" (hide (-1 -3))
            (("" (ground)
              (("1" (lemma "walk_list_bounding_def")
                (("1" (inst - "G" "n" "vc`cycles" "bs")
                  (("1" (ground)
                    (("1" (lemma "circuit_decomposition")
                      (("1" (inst -1 "dg(G)" "vc`vert" "circ")
                        (("1" (skeep)
                          (("1"
                            (inst -4 "drop_circuits(dg(G), cd)" "cd")
                            (("1" (ground)
                              (("1"
                                (lemma "decomp_weight_def")
                                (("1"
                                  (inst - "G" "cd")
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (replace -3 -2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -9 "M")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "MM")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "matrices_order")
                                                  (("1"
                                                    (expand
                                                     "partial_order?")
                                                    (("1"
                                                      (expand
                                                       "preorder?")
                                                      (("1"
                                                        (expand
                                                         "transitive?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "MM"
                                                             "M"
                                                             "wgt_walk(G, circ)")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "id_is_identity")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               "measure_matrix_assoc")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "vc`cycles")
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (inst
                                     -1
                                     "drop_circuits(dg(G), cd)")
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -3 "j")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "vc`cycles")
                (("2" (hide -1)
                  (("2" (inst -1 "circ")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (assert)
                          (("1"
                            (lemma "walk_list_bounding_has_walk_wgt")
                            (("1" (inst?)
                              (("1"
                                (inst -1 "circ")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -5 "M")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "MM")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "matrices_order")
                                              (("1"
                                                (expand
                                                 "partial_order?")
                                                (("1"
                                                  (expand "preorder?")
                                                  (("1"
                                                    (expand
                                                     "transitive?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "MM"
                                                         "M"
                                                         "wgt_walk(G, circ)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "id_is_identity")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "measure_matrix_assoc")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "cycle_at?")
                      (("2" (expand "cycle?")
                        (("2" (expand "circuit?")
                          (("2" (expand "pre_circuit?")
                            (("2" (flatten) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (walk_list_bounding def-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (below type-eq-decl nil nat_types nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" measures nil)
    (member def-decl "bool" list_props nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (circuit_decomposition formula-decl nil circuit_decomp_
     "digraphs/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (M skolem-const-decl "Measure_Matrix[N]" bounding_circuits_ nil)
    (vc skolem-const-decl "Vert_Cycles(G)" bounding_circuits_ nil)
    (bs skolem-const-decl
     "[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G)) ->
   list[Measure_Matrix]]" bounding_circuits_ nil)
    (matrices_order formula-decl nil measures nil)
    (preorder? const-decl "bool" orders nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (id_is_identity formula-decl nil measures nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (id const-decl "Measure_Matrix" measures nil)
    (identity? const-decl "bool" operator_defs nil)
    (* const-decl "Measure_Matrix" measures nil)
    (associative? const-decl "bool" operator_defs nil)
    (transitive? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (decomp_weight_def formula-decl nil bounding_circuits_ nil)
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ "digraphs/")
    (n skolem-const-decl "nat" bounding_circuits_ nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cd skolem-const-decl
     "walk_decomp[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ "digraphs/")
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (vert_circ type-eq-decl nil circuit_decomp_ "digraphs/")
    (gen_seq1 const-decl "Seq(G)" walks_ "digraphs/")
    (Seq type-eq-decl nil walks_ "digraphs/")
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (< const-decl "bool" reals nil)
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (walk_list_bounding_def formula-decl nil bounding_circuits_ nil)
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (cycle? const-decl "bool" cycles_ "digraphs/")
    (M skolem-const-decl "Measure_Matrix[N]" bounding_circuits_ nil)
    (walk_list_bounding_has_walk_wgt formula-decl nil
     bounding_circuits_ nil)
    (circ skolem-const-decl
     "prewalk[T, ConcreteDigraph, vert, edges, size, make]"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil))
   shostak))
 (index_of_vert_TCC1 0
  (index_of_vert_TCC1-1 nil 3659136927
   ("" (skeep)
    (("" (typepred (VL))
      (("" (expand "every")
        (("" (lift-if -1) (("" (ground) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (index_of_vert_TCC2 0
  (index_of_vert_TCC2-1 nil 3659136927
   ("" (skeep :preds? t)
    (("" (inst?)
      (("" (expand "nth" 1 1)
        (("" (assert)
          (("" (skeep)
            (("" (case " i=0")
              (("1" (replaces -1)
                (("1" (ground)
                  (("1" (skeep)
                    (("1" (inst - "j") (("1" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -5 :dir rl)
                (("2" (inst -4 "0")
                  (("2" (ground)
                    (("2" (expand "nth" 2 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil))
   nil))
 (index_of_vert_TCC3 0
  (dslfknasldfnasd "asdnflaskdnf" 3659173558
   ("" (skeep :preds? t)
    (("" (skeep)
      (("" (inst 2 "i-1")
        (("1" (ground)
          (("1" (expand "nth" -3)
            (("1" (lift-if -3) (("1" (ground) nil nil)) nil)) nil)
           ("2" (skeep)
            (("2" (inst -5 "j+1")
              (("1" (expand " nth" -5)
                (("1" (lift-if -5)
                  (("1" (ground)
                    (("1" (replace -1)
                      (("1" (expand "nth" -5) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred (j))
                (("2" (expand " length" 1)
                  (("2" (ground)
                    (("2" (lift-if 1)
                      (("2" (ground)
                        (("2" (typepred (VL)) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (ground)
          (("1" (case "i=0")
            (("1" (replace -1)
              (("1" (expand "nth") (("1" (propax) nil nil)) nil)) nil)
             ("2" (inst -4 "0") (("2" (ground) nil nil)) nil))
            nil)
           ("2" (typepred (i))
            (("2" (expand "length" -1)
              (("2" (lift-if -1) (("2" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "below(length(cdr(VL)))" bounding_circuits_
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (v skolem-const-decl
     "vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (VL skolem-const-decl
     "{VL: list[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))] |
         EXISTS (i: below(length(VL))):
           nth(VL, i) = v AND
            (FORALL (j: below(length(VL))):
               nth(VL, j) = nth(VL, i) IMPLIES j = i)}"
     bounding_circuits_ nil)
    (i skolem-const-decl "below(length(VL))" bounding_circuits_ nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (index_of_vert_TCC3-1 nil 3659136927 ("" (subtype-tcc) nil nil) nil
   nil))
 (index_of_vert_TCC4 0
  (index_of_vert_TCC4-1 nil 3659136927
   ("" (skeep)
    (("" (expand "length" 2 2)
      (("" (lift-if 2)
        (("" (ground)
          (("" (typepred (VL))
            (("" (skeep)
              (("" (typepred "i")
                (("" (expand "length") (("" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   nil))
 (index_of_vert_TCC5 0
  (index_of_vert_TCC5-2 nil 3659963540
   ("" (skeep)
    (("" (typepred " v1(G, v, cdr[vert(dg(G))](VL))")
      (("1" (ground)
        (("1" (expand "length" 1)
          (("1" (lift-if 1)
            (("1" (ground)
              (("1" (typepred "VL")
                (("1" (skeep)
                  (("1" (ground)
                    (("1" (typepred (i))
                      (("1" (expand "length") (("1" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "nth" 1 1) (("2" (propax) nil nil)) nil)
         ("3" (skeep)
          (("3" (inst -4 "j-1")
            (("1" (expand "nth" -1)
              (("1" (lift-if -1) (("1" (ground) nil nil)) nil)) nil)
             ("2" (typepred "j")
              (("2" (case "j=0")
                (("1" (replace -1)
                  (("1" (expand "nth") (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "length" -1)
                    (("2" (lift-if -1) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand " length" 1 2)
        (("2" (lift-if 1)
          (("2" (ground)
            (("1" (typepred (VL))
              (("1" (skeep)
                (("1" (typepred (i))
                  (("1" (expand "length") (("1" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred (VL))
              (("2" (skeep)
                (("2" (typepred (i))
                  (("2" (expand "length") (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (typepred (VL))
              (("3" (skeep)
                (("3" (skeep)
                  (("3" (typepred (i))
                    (("3" (expand "length") (("3" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred (VL))
        (("3" (skeep)
          (("3" (inst + "i-1")
            (("1" (hide 3)
              (("1" (ground)
                (("1" (expand "nth" -)
                  (("1" (lift-if -2) (("1" (ground) nil nil)) nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -4 "j+1")
                    (("1" (expand "nth" -4)
                      (("1" (lift-if -4)
                        (("1" (ground)
                          (("1" (replace -1)
                            (("1" (expand "nth")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "j")
                      (("2" (expand "length" +)
                        (("2" (lift-if 1)
                          (("2" (ground)
                            (("2" (typepred (i))
                              (("2"
                                (expand "length")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "i=0")
              (("1" (replace -1)
                (("1" (expand "nth" -) (("1" (propax) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (typepred (i))
                  (("2" (expand "length" -1)
                    (("2" (lift-if -1) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (v skolem-const-decl
     "vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (VL skolem-const-decl
     "{VL: list[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))] |
         EXISTS (i: below(length(VL))):
           nth(VL, i) = v AND
            (FORALL (j: below(length(VL))):
               nth(VL, j) = nth(VL, i) IMPLIES j = i)}"
     bounding_circuits_ nil)
    (j skolem-const-decl "below(length(VL))" bounding_circuits_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "below(length(cdr[vert(dg(G))](VL)))"
     bounding_circuits_ nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(VL))" bounding_circuits_ nil))
   nil)
  (index_of_vert_TCC5-1 nil 3659136927
   ("" (skeep)
    (("" (typepred " v1(G, v, cdr[vert[T](dg(G))](VL))")
      (("1" (ground)
        (("1" (expand "length" 1)
          (("1" (lift-if 1)
            (("1" (ground)
              (("1" (typepred "VL")
                (("1" (skeep)
                  (("1" (ground)
                    (("1" (typepred (i))
                      (("1" (expand "length") (("1" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "nth" 1 1) (("2" (propax) nil nil)) nil)
         ("3" (skeep)
          (("3" (inst -4 "j-1")
            (("1" (expand "nth" -1)
              (("1" (lift-if -1) (("1" (ground) nil nil)) nil)) nil)
             ("2" (typepred "j")
              (("2" (case "j=0")
                (("1" (replace -1)
                  (("1" (expand "nth") (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "length" -1)
                    (("2" (lift-if -1) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand " length" 1 2)
        (("2" (lift-if 1)
          (("2" (ground)
            (("1" (typepred (VL))
              (("1" (skeep)
                (("1" (typepred (i))
                  (("1" (expand "length") (("1" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred (VL))
              (("2" (skeep)
                (("2" (typepred (i))
                  (("2" (expand "length") (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (typepred (VL))
              (("3" (skeep)
                (("3" (skeep)
                  (("3" (typepred (i))
                    (("3" (expand "length") (("3" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred (VL))
        (("3" (skeep)
          (("3" (inst + "i-1")
            (("1" (hide 3)
              (("1" (ground)
                (("1" (expand "nth" -)
                  (("1" (lift-if -2) (("1" (ground) nil nil)) nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -4 "j+1")
                    (("1" (expand "nth" -4)
                      (("1" (lift-if -4)
                        (("1" (ground)
                          (("1" (replace -1)
                            (("1" (expand "nth")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "j")
                      (("2" (expand "length" +)
                        (("2" (lift-if 1)
                          (("2" (ground)
                            (("2" (typepred (i))
                              (("2"
                                (expand "length")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "i=0")
              (("1" (replace -1)
                (("1" (expand "nth" -) (("1" (propax) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (typepred (i))
                  (("2" (expand "length" -1)
                    (("2" (lift-if -1) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Sign3 type-eq-decl nil sign3 "reals/"))
   nil))
 (bound_circuits_list_def_TCC1 0
  (bound_circuits_list_def_TCC1-1 nil 3659181175
   ("" (subtype-tcc) nil nil)
   ((VC_List type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (get const-decl "Sign3" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (le const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil)
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (/= const-decl "boolean" notequal nil)
    (cycle? const-decl "bool" cycles_ "digraphs/")
    (cycle_at? const-decl "bool" cycles_ "digraphs/"))
   nil))
 (bound_circuits_list_def_TCC2 0
  (bound_circuits_list_def_TCC2-1 nil 3659181175
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "index_of_vert(G, v, vl)")
        (("" (expand "bound_circuits_list")
          ((""
            (rewrite
             "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
            (("" (typepred "vc_list")
              (("" (assert)
                (("" (expand "vclist") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (map_length formula-decl nil more_map_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (VertList type-eq-decl nil bounding_circuits_ nil))
   nil))
 (bound_circuits_list_def_TCC3 0
  (bound_circuits_list_def_TCC3-1 nil 3659181175
   ("" (subtype-tcc) nil nil)
   ((VC_List type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (get const-decl "Sign3" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (le const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil)
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (/= const-decl "boolean" notequal nil)
    (cycle? const-decl "bool" cycles_ "digraphs/")
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bound_circuits_list_def 0
  (bound_circuits_list_def-1 nil 3659181512
   ("" (skeep)
    (("" (skeep)
      (("" (expand "bound_circuits_list" 1)
        (("" (lemma "map_nth_rw[Vert_Cycles(G), list[Measure_Matrix]]")
          (("" (inst?)
            (("1" (replaces -1)
              (("1" (typepred "vc_list")
                (("1" (expand "vclist")
                  (("1" (typepred "index_of_vert(G, v, vl)")
                    (("1" (lemma "bound_circuits_at_def")
                      (("1"
                        (inst - " G" "n"
                         "nth(vc_list, index_of_vert(G, v, vl))" "bs")
                        (("1" (label corc -7)
                          (("1" (hide corc)
                            (("1" (ground)
                              (("1"
                                (inst -6 "index_of_vert(G, v, vl)")
                                (("1"
                                  (replace -3 -6)
                                  (("1"
                                    (replace -6 -1 :dir rl)
                                    (("1"
                                      (reveal corc)
                                      (("1"
                                        (inst -2 "circ")
                                        (("1"
                                          (assert)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (typepred "vl") (("2" (inst -2 "v") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "index_of_vert(G, v, vl)")
              (("2" (typepred "vc_list")
                (("2" (expand "vclist") (("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("3" (typepred "vl") (("3" (inst -2 "v") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (bound_circuits_at_def formula-decl nil bounding_circuits_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (vc_list skolem-const-decl "VC_List(G, vl)" bounding_circuits_ nil)
    (v skolem-const-decl
     "vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (vl skolem-const-decl "VertList(G)" bounding_circuits_ nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil))
   shostak))
 (bound_circuits_iter_TCC1 0
  (bound_circuits_iter_TCC1-1 nil 3659185144 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bound_circuits_iter_TCC2 0
  (bound_circuits_iter_TCC2-1 nil 3659185144
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "index_of_vert(G, v, vl)")
          (("" (replace -4)
            (("" (expand "bound_circuits_list")
              ((""
                (rewrite
                 "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                (("" (typepred "vc_list")
                  (("" (assert)
                    (("" (expand "vclist") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VertList type-eq-decl nil bounding_circuits_ nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (map_length formula-decl nil more_map_props nil))
   nil))
 (bound_circuits_iter_TCC3 0
  (bound_circuits_iter_TCC3-1 nil 3659185144 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bound_circuits_iter_TCC4 0
  (bound_circuits_iter_TCC4-1 nil 3659185144
   ("" (termination-tcc) nil nil)
   ((minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bound_circuits_iter_def_TCC1 0
  (bound_circuits_iter_def_TCC1-1 nil 3659186263
   ("" (subtype-tcc) nil nil)
   ((VC_List type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (get const-decl "Sign3" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (le const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil)
    (verts_in? const-decl "bool" walks_ "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (/= const-decl "boolean" notequal nil)
    (cycle? const-decl "bool" cycles_ "digraphs/")
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bound_circuits_iter_def 0
  (bound_circuits_iter_def-1 nil 3659186700
   ("" (skolem 1 ("G" "_" "_" "vl" "vc_list" "_" "_"))
    (("" (induct "i")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (ground)
          (("1" (skeep)
            (("1" (expand "bound_circuits_iter" 1)
              (("1"
                (inst -1 "n+1" "v" "LAMBDA
                                       (v: vert(dg(G))):
                                       nth
                                       (bound_circuits_list
                                        (G, vl, vc_list, bs),
                                        index_of_vert(G, v, vl))")
                (("1" (ground)
                  (("1" (hide 2)
                    (("1" (lemma "bound_circuits_list_def")
                      (("1" (skeep)
                        (("1"
                          (inst -1 "G" "n" "v2" "vl" "vc_list" "bs")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (inst -1 "cc")
                                (("1"
                                  (typepred (cc))
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skeep)
                    (("2" (typepred "index_of_vert(G, v!1, vl)")
                      (("2" (expand "bound_circuits_list")
                        (("2"
                          (rewrite
                           "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                          (("2" (typepred "vc_list")
                            (("2" (assert)
                              (("2"
                                (expand "vclist")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "vl") (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (case-replace "j=0")
            (("1" (hide (-2 1))
              (("1" (skeep)
                (("1" (skeep)
                  (("1" (expand "bound_circuits_iter")
                    (("1" (expand "bound_circuits_iter")
                      (("1" (lemma "bound_circuits_list_def")
                        (("1" (inst?)
                          (("1" (inst -1 "n")
                            (("1" (label corc -4)
                              (("1"
                                (hide corc)
                                (("1"
                                  (ground)
                                  (("1"
                                    (inst - "circ")
                                    (("1"
                                      (reveal corc)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (skeep)
          (("4" (skeep)
            (("4" (skeep)
              (("4" (skeep)
                (("4" (lemma "id_is_identity") (("4" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skeep)
          (("5" (skeep)
            (("5" (skeep)
              (("5" (skeep)
                (("5" (lemma "measure_matrix_assoc")
                  (("5" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (hide 2)
        (("6" (skeep)
          (("6" (skeep)
            (("6" (skeep)
              (("6" (skeep)
                (("6" (expand "cycle_at?")
                  (("6" (expand "cycle?")
                    (("6" (expand "circuit_at?")
                      (("6" (expand "circuit?")
                        (("6" (expand "pre_circuit?")
                          (("6" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (hide 2)
        (("7" (skeep)
          (("7" (skeep)
            (("7" (lemma "id_is_identity") (("7" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (hide 2)
        (("8" (skeep)
          (("8" (skeep)
            (("8" (lemma "measure_matrix_assoc")
              (("8" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("9" (hide 2)
        (("9" (skeep)
          (("9" (skeep)
            (("9" (typepred "cc")
              (("9" (expand "circuit_at?")
                (("9" (expand "circuit?")
                  (("9" (expand "pre_circuit?")
                    (("9" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (member def-decl "bool" list_props nil)
    (<= const-decl "bool" reals nil)
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "Measure_Matrix" measures nil)
    (associative? const-decl "bool" operator_defs nil)
    (id const-decl "Measure_Matrix" measures nil)
    (identity? const-decl "bool" operator_defs nil)
    (vc_list skolem-const-decl "VC_List(G, vl)" bounding_circuits_ nil)
    (vl skolem-const-decl "VertList(G)" bounding_circuits_ nil)
    (bound_circuits_iter def-decl
     "[vert(dg(G)) -> list[Measure_Matrix]]" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (<= const-decl "bool" measures nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (map_length formula-decl nil more_map_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bound_circuits_list_def formula-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bs skolem-const-decl
     "[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G)) ->
   list[Measure_Matrix]]" bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (id_is_identity formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (cycle? const-decl "bool" cycles_ "digraphs/")
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (bound_circuits_iter_stable 0
  (bound_circuits_iter_stable-1 nil 3659189319
   ("" (skolem 1 ("G" "vl" "vc_list" "_" "_"))
    (("" (induct "i")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (ground)
          (("1" (skeep)
            (("1" (expand "bound_circuits_iter" 1)
              (("1"
                (inst -1 "LAMBDA (v: vert(dg(G))):
                             nth(bound_circuits_list(G, vl, vc_list, bs),
                                 index_of_vert(G, v, vl))")
                (("1" (ground)
                  (("1" (replace -1 :dir rl)
                    (("1" (replace -3 1 :dir rl)
                      (("1" (decompose-equality 1)
                        (("1" (typepred "index_of_vert(G, x!1, vl)")
                          (("1"
                            (lemma
                             " map_nth_rw[vert(dg(G)), list[Measure_Matrix]]")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (rewrite
                           "map_length[vert(dg(G)), list[Measure_Matrix]]")
                          (("2" (skeep)
                            (("2" (typepred "index_of_vert(G, v, vl)")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (lemma
                       "list_extensionality[list[Measure_Matrix]]")
                      (("2" (inst?)
                        (("1" (flatten)
                          (("1" (hide -1)
                            (("1" (ground)
                              (("1"
                                (rewrite
                                 "map_length[vert(dg(G)), list[Measure_Matrix]]")
                                (("1"
                                  (expand "bound_circuits_list")
                                  (("1"
                                    (rewrite
                                     "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                    (("1"
                                      (typepred (vc_list))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "vclist")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (2 3))
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (rewrite
                                           "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                          (("2"
                                            (typepred
                                             "index_of_vert(G, v, vl)")
                                            (("2"
                                              (typepred "vc_list")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "vclist")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide (2 3))
                                      (("3"
                                        (typepred (vl))
                                        (("3"
                                          (skeep)
                                          (("3" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (2 3))
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "bound_circuits_list")
                                      (("2"
                                        (rewrite
                                         "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                        (("2"
                                          (typepred "vc_list")
                                          (("2"
                                            (typepred
                                             "index_of_vert(G, v, vl)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "vclist")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep :preds? t)
                                (("2"
                                  (rewrite
                                   "map_length[vert(dg(G)), list[Measure_Matrix]]")
                                  (("1"
                                    (lemma
                                     "map_nth_rw[vert(dg(G)), list[Measure_Matrix]]")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case-replace
                                           "(LAMBDA (v: vert(dg(G))):
                                 nth(bound_circuits_list
                                     (G, vl, vc_list, bs),
                                     index_of_vert(G, v, vl))) = bs")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (replace -3 :dir rl)
                                              (("1"
                                                (typepred
                                                 "index_of_vert(G, x!1, vl)")
                                                (("1"
                                                  (lemma
                                                   "map_nth_rw[vert(dg(G)), list[Measure_Matrix]]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (typepred
                                                 "index_of_vert(G, v, vl)")
                                                (("2"
                                                  (hide (2 3))
                                                  (("2"
                                                    (expand
                                                     "bound_circuits_list")
                                                    (("2"
                                                      (rewrite
                                                       "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                      (("2"
                                                        (typepred
                                                         "vc_list")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "vclist")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (hide (2 3))
                                              (("2"
                                                (typepred
                                                 "index_of_vert(G, v, vl)")
                                                (("2"
                                                  (expand
                                                   "bound_circuits_list")
                                                  (("2"
                                                    (rewrite
                                                     "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                    (("2"
                                                      (typepred
                                                       "vc_list")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "vclist")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide (2 3))
                                            (("3"
                                              (typepred "vl")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (2 3))
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (typepred "vc_list")
                                            (("2"
                                              (expand
                                               "bound_circuits_list")
                                              (("2"
                                                (typepred
                                                 "index_of_vert(G, v, vl)")
                                                (("2"
                                                  (rewrite
                                                   "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "vclist")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide (2 3))
                                        (("3"
                                          (typepred "vl")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (typepred
                                       "index_of_vert(G, v, vl)")
                                      (("2"
                                        (expand "bound_circuits_list")
                                        (("2"
                                          (rewrite
                                           "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                          (("2"
                                            (typepred "vc_list")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "vclist")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "bound_circuits_list")
                          (("2" (skeep)
                            (("2"
                              (rewrite
                               "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                              (("2"
                                (typepred "index_of_vert(G, v, vl)")
                                (("2"
                                  (typepred "vc_list")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "vclist")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skeep)
                          (("3" (typepred "vl") (("3" (inst?) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (hide 2)
                    (("2" (expand "bound_circuits_list")
                      (("2"
                        (rewrite
                         "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                        (("2" (typepred "vc_list")
                          (("2" (typepred "index_of_vert(G, v, vl)")
                            (("2" (assert)
                              (("2"
                                (expand "vclist")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred (vl)) (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (case "j=0")
            (("1" (replace -1)
              (("1" (skeep)
                (("1" (expand "bound_circuits_iter")
                  (("1" (expand "bound_circuits_iter")
                    (("1" (replace -3 :dir rl)
                      (("1" (decompose-equality 2)
                        (("1"
                          (lemma
                           "map_nth_rw[vert(dg(G)), list[Measure_Matrix]]")
                          (("1" (inst?)
                            (("1" (replace -1)
                              (("1"
                                (typepred "index_of_vert(G, x!1, vl)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (typepred "index_of_vert(G, v, vl)")
                            (("2"
                              (rewrite
                               "map_length[vert(dg(G)), list[Measure_Matrix]]")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (bound_circuits_iter def-decl
     "[vert(dg(G)) -> list[Measure_Matrix]]" bounding_circuits_ nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (map_length formula-decl nil more_map_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (list_extensionality formula-decl nil more_list_props
     "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (n skolem-const-decl "below(length(map(LAMBDA (v: vert(dg(G))):
                   nth(bound_circuits_list(G, vl, vc_list, bs),
                       index_of_vert(G, v, vl)))
                (vl)))" bounding_circuits_ nil)
    (bs skolem-const-decl
     "[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G)) ->
   list[Measure_Matrix]]" bounding_circuits_ nil)
    (vc_list skolem-const-decl "VC_List(G, vl)" bounding_circuits_ nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (vl skolem-const-decl "VertList(G)" bounding_circuits_ nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (bs skolem-const-decl
     "[vert[T, ConcreteDigraph, vert, edges, size, make](dg(G)) ->
   list[Measure_Matrix]]" bounding_circuits_ nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (bound_circuits_TCC1 0
  (bound_circuits_TCC1-1 nil 3659198706 ("" (subtype-tcc) nil nil)
   ((make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil
     di_subgraphs_ "digraphs/")
    (size_def formula-decl nil digraphs_abs "digraphs/")
    (^ const-decl "real" exponentiation nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil))
 (bound_circuits_TCC2 0
  (bound_circuits_TCC2-1 nil 3659198706 ("" (subtype-tcc) nil nil)
   ((MM_list_bool const-decl "bool" bounding_circuits_ nil)
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil
     di_subgraphs_ "digraphs/")
    (size_def formula-decl nil digraphs_abs "digraphs/")
    (^ const-decl "real" exponentiation nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bound_circuits_TCC3 0
  (bound_circuits_TCC3-1 nil 3659198706 ("" (subtype-tcc) nil nil)
   ((MM_list_bool const-decl "bool" bounding_circuits_ nil)
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil
     di_subgraphs_ "digraphs/")
    (size_def formula-decl nil digraphs_abs "digraphs/")
    (^ const-decl "real" exponentiation nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bound_circuits_TCC4 0
  (bound_circuits_TCC4-1 nil 3659198706
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "bound_circuits_iter_stable")
        (("" (inst?)
          (("" (inst - "CircBound(G) - bs`1")
            (("1" (assert)
              (("1" (lemma "bound_circuits_iter_def")
                (("1" (inst?)
                  (("1" (inst - "bs`1" "_")
                    (("1" (typepred "bs")
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst -2 "v2")
                            (("1" (ground)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "cc")
                                  (("1"
                                    (typepred (cc))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (replace -6 -1 :dir rl)
                                          (("1"
                                            (expand "MM_list_bool")
                                            (("1"
                                              (lemma "every_nth[bool]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst 1 "M")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -10
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "index_of_vert(G, v2, vl)")
                                                                (("1"
                                                                  (lemma
                                                                   "map_nth_rw[list[Measure_Matrix], bool]")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "mm_list_bool"
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "map_nth_rw[vert(dg(G)),list[Measure_Matrix]]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "index_of_vert(G, v2, vl)")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "every_nth[Measure_Matrix]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "member_nth[Measure_Matrix]")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "map_length[vert(dg(G)), list[Measure_Matrix]]")
                                                                      (("2"
                                                                        (typepred
                                                                         "index_of_vert(G, v2, vl)")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "index_of_vert(G, v2, vl)")
                                                                  (("2"
                                                                    (rewrite
                                                                     "map_length[ list[Measure_Matrix], bool]")
                                                                    (("2"
                                                                      (replace
                                                                       -14)
                                                                      (("2"
                                                                        (expand
                                                                         "bound_circuits_list")
                                                                        (("2"
                                                                          (rewrite
                                                                           "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                                          (("2"
                                                                            (typepred
                                                                             "vc_list")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "vclist")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "vl")
                                                                  (("3"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -4 "v2")
                                          (("2"
                                            (inst -4 "cc")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -1 "cc")
                                      (("2"
                                        (skeep -)
                                        (("2"
                                          (inst 1 "M2")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "bs`1")
                    (("2" (assert)
                      (("2" (case "bs`1 = CircBound(G)")
                        (("1" (typepred "bs")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (typepred "cc")
                                      (("1"
                                        (assert)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "bs`1")
              (("2" (assert)
                (("2" (case "bs`1 = CircBound(G)")
                  (("1" (typepred "bs")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst?)
                          (("1" (skeep)
                            (("1" (inst?)
                              (("1"
                                (typepred "cc")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wdg formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (<= const-decl "bool" reals nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (member def-decl "bool" list_props nil)
    (positive? const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (* const-decl "Measure_Matrix" measures nil)
    (id const-decl "Measure_Matrix" measures nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (BoundingSets type-eq-decl nil matrix_wdg_ nil)
    (v2 skolem-const-decl
     "vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (cc skolem-const-decl "{cc |
         (circuit_at?[T, ConcreteDigraph, vert, edges, size, make]
              (dg(G), cc, v2)
           AND length(cc) <= CircBound(G))
          OR
          cycle_at?[T, ConcreteDigraph, vert, edges, size, make]
              (dg(G), cc, v2)}" bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (every_nth formula-decl nil list_props nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (map_length formula-decl nil more_map_props nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (bound_circ_list skolem-const-decl "list[list[Measure_Matrix[N]]]"
     bounding_circuits_ nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (v2 skolem-const-decl
     "vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (vl skolem-const-decl "VertList(G)" bounding_circuits_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (mm_list_bool const-decl "bool" bounding_circuits_ nil)
    (MM_list_bool const-decl "bool" bounding_circuits_ nil)
    (cc skolem-const-decl "{cc |
         (circuit_at?[T, ConcreteDigraph, vert, edges, size, make]
              (dg(G), cc, v2)
           AND length(cc) <= CircBound(G))
          OR
          cycle_at?[T, ConcreteDigraph, vert, edges, size, make]
              (dg(G), cc, v2)}" bounding_circuits_ nil)
    (v2 skolem-const-decl
     "vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (bound_circuits_iter_def formula-decl nil bounding_circuits_ nil)
    (bs skolem-const-decl "BoundingSets
    [T, N, ConcreteDigraph, vert, edges, size, make, wdg, dg, get_wgt,
     WeightsMap, weighted_edge?, get_weight, weight_map?, make_wdg](G)"
     bounding_circuits_ nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bound_circuits_iter_stable formula-decl nil bounding_circuits_
     nil))
   nil))
 (bound_circuits_TCC5 0
  (bound_circuits_TCC5-1 nil 3659198706 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (member def-decl "bool" list_props nil)
    (positive? const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (* const-decl "Measure_Matrix" measures nil)
    (id const-decl "Measure_Matrix" measures nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (BoundingSets type-eq-decl nil matrix_wdg_ nil)
    (MM_list_bool const-decl "bool" bounding_circuits_ nil)
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (bound_circuits_TCC6 0
  (bound_circuits_TCC6-1 nil 3659198706
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "index_of_vert(G, v, vl)")
          (("" (replaces -6)
            (("" (expand "bound_circuits_list")
              ((""
                (rewrite
                 "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                (("" (typepred "vc_list")
                  (("" (assert)
                    (("" (expand "vclist") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VertList type-eq-decl nil bounding_circuits_ nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (BoundingSets type-eq-decl nil matrix_wdg_ nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (<= const-decl "bool" measures nil)
    (positive? const-decl "bool" measures nil)
    (member def-decl "bool" list_props nil)
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (<= const-decl "bool" reals nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (map_length formula-decl nil more_map_props nil))
   nil))
 (bound_circuits_TCC7 0
  (bound_circuits_TCC7-1 nil 3659198706
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "bound_circuits_iter_def")
        (("" (inst -1 "G" "bs`1" "_" "vl" "vc_list" "bs`3" "1")
          (("" (skeep)
            (("" (skeep)
              (("" (inst -1 "v2")
                (("" (typepred "bs")
                  (("" (assert)
                    (("" (ground)
                      (("1" (skeep)
                        (("1" (inst -1 "cc")
                          (("1" (typepred (cc))
                            (("1" (ground)
                              (("1"
                                (expand "bound_circuits_iter")
                                (("1"
                                  (expand "bound_circuits_iter")
                                  (("1"
                                    (replace -9 2)
                                    (("1"
                                      (simplify 2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 2 "M")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "MM_list_bool")
                                              (("1"
                                                (lemma
                                                 "every_nth[bool]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "index_of_vert(G, v2, vl)")
                                                          (("1"
                                                            (lemma
                                                             "map_nth_rw[ list[Measure_Matrix], bool]")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -10
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "mm_list_bool")
                                                                    (("1"
                                                                      (lemma
                                                                       "every_nth[Measure_Matrix]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "member_nth[Measure_Matrix]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "i")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "index_of_vert(G, v2, vl)")
                                                                (("2"
                                                                  (replace
                                                                   -13
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "bound_circuits_list")
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                                      (("2"
                                                                        (typepred
                                                                         "vc_list")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "vclist")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "map_length[ list[Measure_Matrix], bool]")
                                                            (("2"
                                                              (replace
                                                               -9
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "bound_circuits_list")
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                                  (("2"
                                                                    (typepred
                                                                     "vc_list")
                                                                    (("2"
                                                                      (expand
                                                                       "vclist")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "bound_circuits_iter")
                                (("2"
                                  (expand "bound_circuits_iter")
                                  (("2"
                                    (replace -8 2)
                                    (("2"
                                      (simplify 2)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 2 "M")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "MM_list_bool")
                                              (("2"
                                                (lemma
                                                 "every_nth[bool]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "index_of_vert(G, v2, vl)")
                                                          (("1"
                                                            (lemma
                                                             "map_nth_rw[ list[Measure_Matrix], bool]")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "mm_list_bool")
                                                                  (("1"
                                                                    (lemma
                                                                     "member_nth[Measure_Matrix]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (lemma
                                                                             "every_nth[Measure_Matrix]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "i")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "index_of_vert(G, v2, vl)")
                                                                (("2"
                                                                  (replace
                                                                   -12
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "bound_circuits_list")
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                                      (("2"
                                                                        (typepred
                                                                         "vc_list")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "vclist")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "index_of_vert(G, v2, vl)")
                                                            (("2"
                                                              (rewrite
                                                               "map_length[ list[Measure_Matrix], bool]")
                                                              (("2"
                                                                (replaces
                                                                 -11
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "bound_circuits_list")
                                                                  (("2"
                                                                    (rewrite
                                                                     "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                                    (("2"
                                                                      (typepred
                                                                       "vc_list")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "vclist")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst?)
                          (("2" (skeep)
                            (("2" (inst? -)
                              (("2"
                                (assert)
                                (("2"
                                  (skeep -)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wdg formal-type-decl nil bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (member def-decl "bool" list_props nil)
    (positive? const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (* const-decl "Measure_Matrix" measures nil)
    (id const-decl "Measure_Matrix" measures nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (BoundingSets type-eq-decl nil matrix_wdg_ nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (MM_list_bool const-decl "bool" bounding_circuits_ nil)
    (mm_list_bool const-decl "bool" bounding_circuits_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (v2 skolem-const-decl
     "vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (vl skolem-const-decl "VertList(G)" bounding_circuits_ nil)
    (bound_circ_list skolem-const-decl "list[list[Measure_Matrix[N]]]"
     bounding_circuits_ nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (map_length formula-decl nil more_map_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (every_nth formula-decl nil list_props nil)
    (bound_circuits_iter def-decl
     "[vert(dg(G)) -> list[Measure_Matrix]]" bounding_circuits_ nil)
    (bound_circuits_iter_def formula-decl nil bounding_circuits_ nil))
   nil))
 (start_bounding_TCC1 0
  (start_bounding_TCC1-1 nil 3659269721 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (start_bounding_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (start_bounding_TCC2 0
  (start_bounding_TCC2-1 nil 3659269721
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "index_of_vert(G, v, vl)")
        (("" (replaces -4)
          (("" (expand "start_bounding_list")
            (("" (expand "bound_circuits_list")
              ((""
                (rewrite
                 "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                (("" (typepred "vc_list")
                  (("" (assert)
                    (("" (expand "vclist") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (bs0 const-decl "list[Measure_Matrix]" bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (map_length formula-decl nil more_map_props nil)
    (start_bounding_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (VertList type-eq-decl nil bounding_circuits_ nil))
   nil))
 (start_bounding_TCC3 0
  (start_bounding_TCC3-1 nil 3659269721 ("" (subtype-tcc) nil nil)
   ((VC_List type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minimalize const-decl "{L: list[Measure_Matrix] |
         (FORALL ((M: Measure_Matrix | member(M, LM))):
            EXISTS (MM: Measure_Matrix): member(MM, L) AND MM <= M)
          AND
          (FORALL (m: Measure_Matrix): member(m, L) IMPLIES member(m, LM))}"
     bounding_circuits_ nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (start_bounding_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil
     di_subgraphs_ "digraphs/")
    (size_def formula-decl nil digraphs_abs "digraphs/")
    (^ const-decl "real" exponentiation nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (start_bounding_TCC4 0
  (start_bounding_TCC4-1 nil 3659269721
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (replace -1 -2)
            (("" (replace -2 1)
              (("" (simplify 1)
                (("" (expand "start_bounding_list" 1)
                  (("" (lemma "bound_circuits_list_def")
                    (("" (inst?)
                      (("" (typepred "cc")
                        (("" (inst -3 "0")
                          (("" (label circ -2)
                            (("" (hide circ)
                              ((""
                                (ground)
                                (("1"
                                  (inst -1 "cc")
                                  (("1"
                                    (reveal circ)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -4 -6)
                                        (("1"
                                          (expand
                                           "start_bounding_list"
                                           -6)
                                          (("1"
                                            (expand "MM_list_bool")
                                            (("1"
                                              (case
                                               "(EXISTS (M: Measure_Matrix):
          member(M,
                 nth(bound_circuits_list(G, vl, vc_list, bs0(G)),
                     index_of_vert(G, v2, vl)))
           AND M <= wgt_walk(G, cc))")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 1 "M")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide (-3 -4))
                                                      (("1"
                                                        (lemma
                                                         "member_nth[Measure_Matrix]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (lemma
                                                                 "every_nth[bool]")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "index_of_vert(G, v2, vl)")
                                                                          (("1"
                                                                            (lemma
                                                                             "map_nth_rw[list[Measure_Matrix], bool]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "mm_list_bool")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "every_nth[Measure_Matrix]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "i")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "map_length[ list[Measure_Matrix], bool]")
                                                                            (("2"
                                                                              (expand
                                                                               "bound_circuits_list")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "index_of_vert(G, v2, vl)")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "vc_list")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vclist")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (ground) nil nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (skeep)
                                                  (("3"
                                                    (lemma
                                                     "id_is_identity")
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide-all-but 1)
                                                (("4"
                                                  (skeep)
                                                  (("4"
                                                    (lemma
                                                     "measure_matrix_assoc")
                                                    (("4"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (hide-all-but (-1 1))
                                                (("5"
                                                  (skeep)
                                                  (("5"
                                                    (expand
                                                     "cycle_at?")
                                                    (("5"
                                                      (expand "cycle?")
                                                      (("5"
                                                        (expand
                                                         "circuit_at?")
                                                        (("5"
                                                          (expand
                                                           "circuit?")
                                                          (("5"
                                                            (expand
                                                             "pre_circuit?")
                                                            (("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (hide-all-but 1)
                                                (("6"
                                                  (typepred
                                                   "index_of_vert(G, v2, vl)")
                                                  (("6"
                                                    (expand
                                                     "bound_circuits_list")
                                                    (("6"
                                                      (rewrite
                                                       "map_length[Vert_Cycles(G), list[Measure_Matrix]]")
                                                      (("6"
                                                        (typepred
                                                         "vc_list")
                                                        (("6"
                                                          (assert)
                                                          (("6"
                                                            (expand
                                                             "vclist")
                                                            (("6"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("7"
                                                (hide-all-but 1)
                                                (("7"
                                                  (typepred "vl")
                                                  (("7"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2" (skeep) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((start_bounding_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (bs0 const-decl "list[Measure_Matrix]" bounding_circuits_ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (<= const-decl "bool" measures nil)
    (index_of_vert def-decl "{i: below(length(VL)) |
         nth(VL, i) = v AND
          (FORALL (j: below(length(VL))): nth(VL, j) = v IMPLIES i = j)}"
     bounding_circuits_ nil)
    (bound_circuits_list const-decl "list[list[Measure_Matrix]]"
     bounding_circuits_ nil)
    (member def-decl "bool" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (associative? const-decl "bool" operator_defs nil)
    (identity? const-decl "bool" operator_defs nil)
    (mm_list_bool const-decl "bool" bounding_circuits_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (G skolem-const-decl "wdg" bounding_circuits_ nil)
    (v2 skolem-const-decl
     "vert[T, ConcreteDigraph, vert, edges, size, make](dg(G))"
     bounding_circuits_ nil)
    (vl skolem-const-decl "VertList(G)" bounding_circuits_ nil)
    (vc_list skolem-const-decl "VC_List(G, vl)" bounding_circuits_ nil)
    (positive? const-decl "bool" measures nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (bound_circuits_at const-decl "list[Measure_Matrix]"
     bounding_circuits_ nil)
    (map_length formula-decl nil more_map_props nil)
    (every_nth formula-decl nil list_props nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (id_is_identity formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (cycle? const-decl "bool" cycles_ "digraphs/")
    (circuit? const-decl "bool" circuits_ "digraphs/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pre_circuit? const-decl "bool" circuits_ "digraphs/")
    (MM_list_bool const-decl "bool" bounding_circuits_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (<= const-decl "bool" reals nil)
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (finseq type-eq-decl nil finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bound_circuits_list_def formula-decl nil bounding_circuits_ nil))
   nil))
 (bounding_from_graph_lists_TCC1 0
  (bounding_from_graph_lists_TCC1-1 nil 3660126112
   ("" (skeep*)
    (("" (expand "bound_circuits")
      (("" (lift-if 1)
        (("" (ground)
          (("" (typepred "n")
            (("" (typepred "BS`1")
              (("" (typepred "BS")
                (("" (assert)
                  (("" (replaces -2)
                    (("" (hide (-1 -2 -4))
                      (("" (hide 1) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bound_circuits const-decl "BoundingSets(G)" bounding_circuits_
     nil)
    (posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (BoundingSets type-eq-decl nil matrix_wdg_ nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Walk type-eq-decl nil walks_ "digraphs/")
    (walk? const-decl "bool" walks_ "digraphs/")
    (<= const-decl "bool" measures nil)
    (positive? const-decl "bool" measures nil)
    (member def-decl "bool" list_props nil)
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil
     di_subgraphs_ "digraphs/")
    (size_def formula-decl nil digraphs_abs "digraphs/")
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (bounding_from_gl_termination 0
  (bounding_from_gl_termination-1 nil 3659352248
   ("" (skeep)
    (("" (expand "bounding_from_graph_lists")
      (("" (lemma "bounding_steps_iter_def")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((bounding_from_graph_lists const-decl "bool" bounding_circuits_
     nil)
    (<= const-decl "bool" reals nil)
    (CircBound const-decl "posnat" matrix_wdg_ nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ "digraphs/")
    (circuit_at? const-decl "bool" circuits_ "digraphs/")
    (cycle_at? const-decl "bool" cycles_ "digraphs/")
    (member def-decl "bool" list_props nil)
    (positive? const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil)
    (walk? const-decl "bool" walks_ "digraphs/")
    (Walk type-eq-decl nil walks_ "digraphs/")
    (* const-decl "Measure_Matrix" measures nil)
    (id const-decl "Measure_Matrix" measures nil)
    (wgt_walk const-decl "Weight" weighted_digraphs_ "digraphs/")
    (BoundingSets type-eq-decl nil matrix_wdg_ nil)
    (VertList type-eq-decl nil bounding_circuits_ nil)
    (Cycles_at type-eq-decl nil bounding_circuits_ nil)
    (Vert_Cycles type-eq-decl nil bounding_circuits_ nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (vclist const-decl "bool" bounding_circuits_ nil)
    (VC_List type-eq-decl nil bounding_circuits_ nil)
    (start_bounding const-decl "BoundingSets(G)" bounding_circuits_
     nil)
    (BoundingStepsFun type-eq-decl nil matrix_wdg_ nil)
    (bound_circuits const-decl "BoundingSets(G)" bounding_circuits_
     nil)
    (bounding_steps_iter_def formula-decl nil matrix_wdg_ nil)
    (T formal-type-decl nil bounding_circuits_ nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits_ nil)
    (ConcreteDigraph formal-type-decl nil bounding_circuits_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]"
     bounding_circuits_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     bounding_circuits_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]"
     bounding_circuits_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" bounding_circuits_ nil)
    (wdg formal-type-decl nil bounding_circuits_ nil)
    (dg formal-const-decl "[wdg -> ConcreteDigraph]" bounding_circuits_
     nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (get_wgt formal-const-decl
     "[W: wdg, (edges(dg(W))) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (WeightsMap formal-type-decl nil bounding_circuits_ nil)
    (weighted_edge? formal-const-decl
     "[WeightsMap -> [[T, T] -> bool]]" bounding_circuits_ nil)
    (get_weight formal-const-decl
     "[map0: WeightsMap, (weighted_edge?(map0)) -> measures[N].Measure_Matrix]"
     bounding_circuits_ nil)
    (weight_map? formal-const-decl
     "[ConcreteDigraph -> [WeightsMap -> bool]]" bounding_circuits_
     nil)
    (make_wdg formal-const-decl
     "[cd: ConcreteDigraph, (weight_map?(cd)) -> wdg]"
     bounding_circuits_ nil))
   shostak)))

