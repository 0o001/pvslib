(ccg_to_mwg
 (weight_TCC1 0
  (weight_TCC1-1 nil 3588004351
   ("" (skosimp)
    (("" (typepred "dg(G!1)" "e!1")
      (("" (expand* "edge?" "vert?")
        (("" (inst -1 "(e!1`1, e!1`2)") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((edge type-eq-decl nil digraphs "digraphs/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (vert? const-decl "bool" digraphs "digraphs/"))
   nil))
 (ccg_to_mwg_TCC1 0
  (ccg_to_mwg_TCC1-1 nil 3600611264
   ("" (rewrite "measure_matrix_assoc") nil nil)
   ((N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_matrix_assoc formula-decl nil measures nil))
   nil))
 (ccg_to_mwg_TCC2 0
  (ccg_to_mwg_TCC2-1 nil 3600611264
   ("" (rewrite "id_is_identity") nil nil)
   ((N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (id_is_identity formula-decl nil measures nil))
   nil))
 (same_edges 0
  (same_edges-1 nil 3589210739
   ("" (skeep)
    (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
      (("" (assert)
        (("" (expand "ccg_to_mwg")
          (("" (decompose-equality)
            (("" (hide -2)
              (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Exprs formal-type-decl nil ccg_to_mwg nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (edge type-eq-decl nil digraphs "digraphs/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (* const-decl "measure_matrix" measures nil)
    (id const-decl "measure_matrix" measures nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (Val formal-type-decl nil ccg_to_mwg nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (weight const-decl "[below(N) -> [below(N) -> Sign3]]" ccg_to_mwg
     nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (same_verts 0
  (same_verts-1 nil 3589210752
   ("" (skeep)
    (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
      (("" (assert)
        (("" (expand "ccg_to_mwg")
          (("" (decompose-equality)
            (("" (hide -2)
              (("" (assert)
                (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Exprs formal-type-decl nil ccg_to_mwg nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (edge type-eq-decl nil digraphs "digraphs/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (* const-decl "measure_matrix" measures nil)
    (id const-decl "measure_matrix" measures nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (Val formal-type-decl nil ccg_to_mwg nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (weight const-decl "[below(N) -> [below(N) -> Sign3]]" ccg_to_mwg
     nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (same_walks 0
  (same_walks-1 nil 3588608630
   ("" (skeep)
    (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
      (("" (assert)
        (("" (prop)
          (("1" (expand "ccg_to_mwg")
            (("1" (decompose-equality -2)
              (("1" (hide -2) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (expand "ccg_to_mwg")
            (("2" (decompose-equality -2)
              (("2" (hide -2) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Exprs formal-type-decl nil ccg_to_mwg nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (edge type-eq-decl nil digraphs "digraphs/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (* const-decl "measure_matrix" measures nil)
    (id const-decl "measure_matrix" measures nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (Val formal-type-decl nil ccg_to_mwg nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (edge? const-decl "bool" digraphs "digraphs/")
    (Sign3 type-eq-decl nil sign3 "reals/")
    (weight const-decl "[below(N) -> [below(N) -> Sign3]]" ccg_to_mwg
     nil))
   shostak))
 (gte_mc_to_defined_pos_TCC1 0
  (gte_mc_to_defined_pos_TCC1-1 nil 3589199067
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (measures_combination type-eq-decl nil ccg nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (walk? const-decl "bool" walks "digraphs/"))
   nil))
 (gte_mc_to_defined_pos_TCC2 0
  (gte_mc_to_defined_pos_TCC2-1 nil 3589199067
   ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil))
   nil))
 (gte_mc_to_defined_pos_TCC3 0
  (gte_mc_to_defined_pos_TCC3-1 nil 3589199067
   ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil))
   nil))
 (gte_mc_to_defined_pos 0
  (gte_mc_to_defined_pos-1 nil 3589199076
   ("" (auto-rewrite "finseq_appl")
    (("" (skolem 1 ("G" "_"))
      (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
        (("" (assert)
          (("" (measure-induct+ "length(w)" ("w"))
            (("1" (skeep)
              (("1" (case "length(x!1) = 1")
                (("1" (hide -2)
                  (("1" (expand "defined_pos?")
                    (("1" (expand "wgt_walk")
                      (("1" (expand "wgt_aux")
                        (("1" (assert)
                          (("1" (expand "id") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "defined_pos?")
                  (("2" (lemma "wgt_walk_decomposed")
                    (("2" (inst -1 "G1" "1" "x!1")
                      (("2" (assert)
                        (("2" (lemma "same_walks")
                          (("2" (inst -1 "G" "x!1")
                            (("2" (assert)
                              (("2"
                                (hide -1)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (inst -1 "rest(x!1)" "rest(mc)")
                                      (("1"
                                        (expand "rest" -1 1)
                                        (("1"
                                          (expand "^" -1 1)
                                          (("1"
                                            (expand "min")
                                            (("1"
                                              (split)
                                              (("1"
                                                (expand "rest")
                                                (("1"
                                                  (expand
                                                   "^"
                                                   1
                                                   (2 3 4))
                                                  (("1"
                                                    (expand "min")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "ccg_to_mwg")
                                                        (("1"
                                                          (decompose-equality)
                                                          (("1"
                                                            (expand
                                                             "weight")
                                                            (("1"
                                                              (decompose-equality
                                                               -2)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "(x!1(0), x!1(1))")
                                                                (("1"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "mc`seq(0)")
                                                                      (("1"
                                                                        (decompose-equality
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "mc`seq(1)")
                                                                          (("1"
                                                                            (expand
                                                                             "indi_func")
                                                                            (("1"
                                                                              (expand
                                                                               "gte_mc?")
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "G1`wgt(x!1`seq(0), x!1`seq(1))(mc`seq(0))(mc`seq(1)) /= -1")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "wgt_walk"
                                                                                           -3
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "wgt_aux")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "^"
                                                                                               -3
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "min")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "^"
                                                                                                     -3
                                                                                                     (2
                                                                                                      4
                                                                                                      6))
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "min")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "wgt_aux")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "^"
                                                                                                           -3
                                                                                                           (1
                                                                                                            2))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "id_is_identity")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "identity?")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "wgt(G1)(x!1`seq(0), x!1`seq(1))")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "defined_pos_mul")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "wgt(G1)(x!1`seq(0), x!1`seq(1))"
                                                                                                                           "wgt_walk(G1, x!1 ^ (1, length(x!1) - 1))"
                                                                                                                           "mc`seq(0)"
                                                                                                                           "mc`seq(1)"
                                                                                                                           "mc`seq(length(x!1) - 1)")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "defined_pos?")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "id_is_identity")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("3"
                                                                                                                              (rewrite
                                                                                                                               "measure_matrix_assoc")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-4
                                                                            1))
                                                                          (("2"
                                                                            (typepred
                                                                             "x!1")
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "walk?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "verts_in?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "0")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "vert?")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-5
                                                                      1))
                                                                    (("2"
                                                                      (typepred
                                                                       "x!1")
                                                                      (("2"
                                                                        (expand*
                                                                         "walk?"
                                                                         "verts_in?"
                                                                         "vert?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             -3)
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("2"
                                                                    (typepred
                                                                     "x!1")
                                                                    (("2"
                                                                      (expand
                                                                       "walk?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "0")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-3
                                                                  1))
                                                                (("2"
                                                                  (typepred
                                                                   "dg(G1)")
                                                                  (("2"
                                                                    (expand*
                                                                     "edge?"
                                                                     "vert?")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "(x!2`1, x!2`2)")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2 3)
                                                (("2"
                                                  (lemma
                                                   "gte_mc_sub_walk")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "G"
                                                     "x!1"
                                                     "1"
                                                     "length(x!1) - 1"
                                                     "mc")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "rest")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide - 3)
                                        (("2"
                                          (expand* "rest" "^" "min")
                                          (("2"
                                            (typepred "mc")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "x!1")
                                        (("3"
                                          (hide-all-but (-2 1 2))
                                          (("3"
                                            (split)
                                            (("1"
                                              (expand*
                                               "rest"
                                               "^"
                                               "min")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "rest")
                                              (("2"
                                                (rewrite "walk?_caret")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (rewrite "id_is_identity") nil nil)) nil)
             ("3" (hide-all-but 1)
              (("3" (rewrite "measure_matrix_assoc") nil nil)) nil)
             ("4" (typepred "y!1")
              (("4" (hide-all-but (-2 1))
                (("4" (lemma "same_walks")
                  (("4" (inst -1 "G" "y!1") (("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide-all-but 1)
              (("5" (rewrite "id_is_identity") nil nil)) nil)
             ("6" (hide-all-but 1)
              (("6" (rewrite "measure_matrix_assoc") nil nil)) nil)
             ("7" (typepred "w!1")
              (("7" (hide-all-but (-2 -4 1))
                (("7" (lemma "same_walks")
                  (("7" (inst -1 "G" "w!1") (("7" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (same_walks formula-decl nil ccg_to_mwg nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (x!1 skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G))" ccg_to_mwg
     nil)
    (mc skolem-const-decl
     "measures_combination[Val, Exprs, Conditions, Vars, MT, >, N](x!1)"
     ccg_to_mwg nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (weight const-decl "[below(N) -> [below(N) -> Sign3]]" ccg_to_mwg
     nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (indi_func const-decl "Sign3" ccg_to_mwg nil)
    (vert type-eq-decl nil digraphs "digraphs/")
    (vert? const-decl "bool" digraphs "digraphs/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (defined_pos_mul formula-decl nil measures nil)
    (id_is_identity formula-decl nil measures nil)
    (/= const-decl "boolean" notequal nil)
    (gte_mc_sub_walk formula-decl nil ccg nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (walk?_caret formula-decl nil walks "digraphs/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wgt_walk_decomposed formula-decl nil weighted_digraphs
     "digraphs/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wgt_aux def-decl "Weight" weighted_digraphs "digraphs/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wgt_walk const-decl "Weight" weighted_digraphs "digraphs/")
    (defined_pos? const-decl "bool" measures nil)
    (identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (G skolem-const-decl "CCG[Val, Exprs, Conditions, Vars, MT, >, N]"
     ccg_to_mwg nil)
    (measures_combination type-eq-decl nil ccg nil)
    (FunMeasure type-eq-decl nil ccg_def nil)
    (gte_mc? const-decl "bool" ccg nil)
    (G1 skolem-const-decl
     "wdg[CallingContext, measure_matrix[N], measures[N].*, measures[N].id]"
     ccg_to_mwg nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (walk? const-decl "bool" walks "digraphs/")
    (Walk type-eq-decl nil walks "digraphs/")
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil))
   shostak))
 (defined_pos_to_gte_mc_TCC1 0
  (defined_pos_to_gte_mc_TCC1-1 nil 3590504728
   ("" (subtype-tcc) nil nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (Val formal-type-decl nil ccg_to_mwg nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs "digraphs/")
    (walk? const-decl "bool" walks "digraphs/"))
   nil))
 (defined_pos_to_gte_mc_TCC2 0
  (defined_pos_to_gte_mc_TCC2-1 nil 3590504728
   ("" (subtype-tcc) nil nil)
   ((ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (wgt_walk const-decl "Weight" weighted_digraphs "digraphs/")
    (/= const-decl "boolean" notequal nil)
    (defined_pos? const-decl "bool" measures nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil))
   nil))
 (defined_pos_to_gte_mc 0
  (defined_pos_to_gte_mc-1 nil 3590491914
   ("" (auto-rewrite "finseq_appl")
    (("" (skolem 1 ("G" "_"))
      (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
        (("" (assert)
          (("" (measure-induct+ "length(w)" ("w"))
            (("1" (skeep)
              (("1" (case "length(x!1) = 1")
                (("1" (hide -2)
                  (("1" (case "i = j")
                    (("1" (expand "gte_mc?")
                      (("1" (assert)
                        (("1" (inst 1 "#(i)")
                          (("1" (replace -1)
                            (("1" (hide -) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (expand "#") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -3 2)
                      (("2" (expand* "defined_pos?" "wgt_walk")
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (expand "wgt_aux")
                              (("2"
                                (expand "id")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "rest(x!1)")
                  (("1" (expand "rest" -1 1)
                    (("1" (expand* "^" "min")
                      (("1" (assert)
                        (("1" (lemma "wgt_walk_decomposed")
                          (("1" (inst -1 "G1" "1" "x!1")
                            (("1" (assert)
                              (("1"
                                (lemma "same_walks")
                                (("1"
                                  (inst -1 "G" "x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (lemma
                                           "defined_pos_decomposition")
                                          (("1"
                                            (inst
                                             -1
                                             "wgt_walk(G1, x!1 ^ (0, 1))"
                                             "wgt_walk(G1, x!1 ^ (1, length(x!1) - 1))"
                                             "i"
                                             "j")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -3 "k" "j")
                                                  (("1"
                                                    (expand
                                                     "rest"
                                                     -3
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (name
                                                           "mc1"
                                                           "#(i) o #(k)")
                                                          (("1"
                                                            (lemma
                                                             "gte_mc_comp")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "G"
                                                               "x!1 ^ (0, 1)"
                                                               "rest(x!1)"
                                                               "mc1"
                                                               "mc")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (case-replace
                                                                     "x!1 ^ (0, 1) o rest(rest(x!1)) = x!1")
                                                                    (("1"
                                                                      (inst
                                                                       2
                                                                       "mc1 o rest(mc)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-3
                                                                            -7
                                                                            -8
                                                                            1
                                                                            2))
                                                                          (("1"
                                                                            (rewrite
                                                                             "first_compo")
                                                                            (("1"
                                                                              (expand
                                                                               "rest")
                                                                              (("1"
                                                                                (typepred
                                                                                 "mc")
                                                                                (("1"
                                                                                  (expand
                                                                                   "rest"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "min")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand*
                                                                                           "first"
                                                                                           "last")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "o"
                                                                                               2
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 2
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand*
                                                                                                   "min"
                                                                                                   "empty_seq")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "x!1`length = 2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "o"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "#")
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (decompose-equality
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 2
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst-cp
                                                                                                                     -1
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "o"
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -5
                                                                                                                           -7)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -7)
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "#")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "#")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "#")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (expand
                                                                                                                 "#")
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "#")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "#")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (expand
                                                                                                               "#")
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "o"
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "# "
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               3
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (decompose-equality
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "o"
                                                                                                                         3)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           3
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "^"
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "#")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "#")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (expand
                                                                                                                     "#")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "#")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "#")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (expand
                                                                                                               "#")
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -3
                                                                                 -4
                                                                                 +)
                                                                                (("2"
                                                                                  (expand*
                                                                                   "#"
                                                                                   "o")
                                                                                  (("2"
                                                                                    (decompose-equality)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (1
                                                                        2))
                                                                      (("2"
                                                                        (expand
                                                                         "rest")
                                                                        (("2"
                                                                          (expand
                                                                           "^"
                                                                           1
                                                                           (2
                                                                            6))
                                                                          (("2"
                                                                            (expand
                                                                             "min")
                                                                            (("2"
                                                                              (expand
                                                                               "o")
                                                                              (("2"
                                                                                (decompose-equality)
                                                                                (("1"
                                                                                  (expand*
                                                                                   "^"
                                                                                   "min"
                                                                                   "empty_seq")
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (decompose-equality)
                                                                                  (("1"
                                                                                    (expand*
                                                                                     "^"
                                                                                     "min")
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("1"
                                                                                            (expand*
                                                                                             "^"
                                                                                             "min")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "empty_seq"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("2"
                                                                                            (expand*
                                                                                             "^"
                                                                                             "min")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "empty_seq"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "n")
                                                                                      (("2"
                                                                                        (expand*
                                                                                         "^"
                                                                                         "min")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (expand*
                                                                                     "^"
                                                                                     "min")
                                                                                    (("3"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty_seq")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "empty_seq")
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -2
                                                                      -8
                                                                      1
                                                                      2))
                                                                    (("2"
                                                                      (expand
                                                                       "gte_mc?")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "^"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "ccg_to_mwg")
                                                                            (("2"
                                                                              (decompose-equality
                                                                               -3)
                                                                              (("2"
                                                                                (expand
                                                                                 "weight")
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "(x!1(0), x!1(1))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "i")
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "k")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "indi_func")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "defined_pos?")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "wgt_walk")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       -4
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "min")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "wgt_aux")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "^"
                                                                                                               2
                                                                                                               (2
                                                                                                                3))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "wgt_aux")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "id_is_identity")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "identity?")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "wgt(G1)(x!1`seq(0), x!1`seq(1))")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "i!1")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "^")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "min")
                                                                                                                                    (("1"
                                                                                                                                      (case-replace
                                                                                                                                       "i!1 = 0")
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand*
                                                                                                                                             "#"
                                                                                                                                             "o")
                                                                                                                                            (("1"
                                                                                                                                              (decompose-equality
                                                                                                                                               -3)
                                                                                                                                              (("1"
                                                                                                                                                (decompose-equality
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (inst-cp
                                                                                                                                                   -1
                                                                                                                                                   "0")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "1")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         1
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -2
                                                                                                                                                           1
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("1"
                                                                                                                                                                (ground)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "gt")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (skeep)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (insteep
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-2
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand*
                                                                                                   "walk?"
                                                                                                   "vert?")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "verts_in?")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "0")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (hide-all-but
                                                                                             (-2
                                                                                              1))
                                                                                            (("2"
                                                                                              (expand*
                                                                                               "walk?"
                                                                                               "vert?")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "verts_in?")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "0")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-2
                                                                                          1))
                                                                                        (("2"
                                                                                          (expand*
                                                                                           "walk?")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "x!2")
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "dg(G)")
                                                                                        (("2"
                                                                                          (expand*
                                                                                           "edge?"
                                                                                           "vert?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "(x!2`1, x!2`2)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     (1
                                                                      2))
                                                                    (("3"
                                                                      (expand*
                                                                       "last"
                                                                       "first")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           "^")
                                                                          (("3"
                                                                            (expand
                                                                             "min")
                                                                            (("3"
                                                                              (expand
                                                                               "rest")
                                                                              (("3"
                                                                                (expand
                                                                                 "^")
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -5
                                                                      1))
                                                                    (("4"
                                                                      (replaces
                                                                       -2)
                                                                      (("4"
                                                                        (expand*
                                                                         "last"
                                                                         "#"
                                                                         "o")
                                                                        (("4"
                                                                          (decompose-equality
                                                                           -1)
                                                                          (("4"
                                                                            (decompose-equality
                                                                             -2)
                                                                            (("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (inst
                                                                                 -1
                                                                                 "1")
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  1))
                                                                (("2"
                                                                  (expand*
                                                                   "#"
                                                                   "o"
                                                                   "^"
                                                                   "min")
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "x!1")
                                                                (("3"
                                                                  (hide-all-but
                                                                   (-2
                                                                    1))
                                                                  (("3"
                                                                    (expand
                                                                     "rest")
                                                                    (("3"
                                                                      (rewrite
                                                                       "walk?_caret")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (rewrite
                                                                 "walk?_caret")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (rewrite
                                                 "id_is_identity")
                                                nil
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3"
                                                (rewrite
                                                 "measure_matrix_assoc")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 2))
                    (("2" (expand "rest")
                      (("2" (rewrite "walk?_caret")
                        (("2" (expand "^")
                          (("2" (assert)
                            (("2" (expand "min")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (rewrite "id_is_identity") nil nil)) nil)
             ("3" (hide-all-but 1)
              (("3" (rewrite "measure_matrix_assoc") nil nil)) nil)
             ("4" (typepred "y!1")
              (("4" (hide-all-but (-2 1))
                (("4" (lemma "same_walks")
                  (("4" (inst -1 "G" "y!1") (("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide-all-but 1)
              (("5" (rewrite "id_is_identity") nil nil)) nil)
             ("6" (hide-all-but 1)
              (("6" (rewrite "measure_matrix_assoc") nil nil)) nil)
             ("7" (typepred "w!1")
              (("7" (hide-all-but (-2 1))
                (("7" (lemma "same_walks")
                  (("7" (inst -1 "G" "w!1") (("7" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (wgt_walk_decomposed formula-decl nil weighted_digraphs
     "digraphs/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (defined_pos_decomposition formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (O const-decl "finseq" finite_sequences nil)
    (mc1 skolem-const-decl "finseq[below[N]]" ccg_to_mwg nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (k skolem-const-decl "below(N)" ccg_to_mwg nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (first_compo formula-decl nil seq_extras "structures/")
    (weight const-decl "[below(N) -> [below(N) -> Sign3]]" ccg_to_mwg
     nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (indi_func const-decl "Sign3" ccg_to_mwg nil)
    (vert type-eq-decl nil digraphs "digraphs/")
    (vert? const-decl "bool" digraphs "digraphs/")
    (verts_in? const-decl "bool" walks "digraphs/")
    (id_is_identity formula-decl nil measures nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (Environment type-eq-decl nil ccg_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (walk?_caret formula-decl nil walks "digraphs/")
    (gte_mc_comp formula-decl nil ccg nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (same_walks formula-decl nil ccg_to_mwg nil)
    (wgt_aux def-decl "Weight" weighted_digraphs "digraphs/")
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (|#| const-decl "finite_sequence[T]" set2seq "structures/")
    (i skolem-const-decl "below(N)" ccg_to_mwg nil)
    (x!1 skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G))" ccg_to_mwg
     nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (last const-decl "T" seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (not_empty_seq type-eq-decl nil seq_extras "structures/")
    (/= const-decl "boolean" notequal nil)
    (gte_mc? const-decl "bool" ccg nil)
    (FunMeasure type-eq-decl nil ccg_def nil)
    (measures_combination type-eq-decl nil ccg nil)
    (wgt_walk const-decl "Weight" weighted_digraphs "digraphs/")
    (defined_pos? const-decl "bool" measures nil)
    (identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (G1 skolem-const-decl
     "wdg[CallingContext, measure_matrix[N], measures[N].*, measures[N].id]"
     ccg_to_mwg nil)
    (G skolem-const-decl "CCG[Val, Exprs, Conditions, Vars, MT, >, N]"
     ccg_to_mwg nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (prewalk type-eq-decl nil walks "digraphs/")
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (measure_induction formula-decl nil measure_induction nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil))
   shostak))
 (no_defined_pos_iff_no_gte_mc 0
  (no_defined_pos_iff_no_gte_mc-1 nil 3590515080
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
        (("" (assert)
          (("" (prop)
            (("1" (skeep)
              (("1" (lemma "gte_mc_to_defined_pos")
                (("1" (inst -1 "G" "w" "mc")
                  (("1" (replace -4)
                    (("1" (assert)
                      (("1" (assert)
                        (("1"
                          (inst -2 "mc`seq(0)" "mc`seq(length(w) - 1)")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lemma "defined_pos_to_gte_mc")
                (("2" (inst -1 "G" "w")
                  (("2" (replace -4)
                    (("2" (assert)
                      (("2" (inst -1 "i" "j")
                        (("2" (assert)
                          (("2" (skeep) (("2" (inst -4 "mc") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((defined_pos_to_gte_mc formula-decl nil ccg_to_mwg nil)
    (measures_combination type-eq-decl nil ccg nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (prewalk type-eq-decl nil walks "digraphs/")
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gte_mc_to_defined_pos formula-decl nil ccg_to_mwg nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil))
   shostak))
 (gt_mc_to_positive_pos_TCC1 0
  (gt_mc_to_positive_pos_TCC1-1 nil 3590501078
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (measures_combination type-eq-decl nil ccg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (gt_mc? const-decl "bool" ccg nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (walk? const-decl "bool" walks "digraphs/"))
   nil))
 (gt_mc_to_positive_pos_TCC2 0
  (gt_mc_to_positive_pos_TCC2-1 nil 3590501078
   ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (gt_mc? const-decl "bool" ccg nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil))
   nil))
 (gt_mc_to_positive_pos_TCC3 0
  (gt_mc_to_positive_pos_TCC3-1 nil 3590501078
   ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (gt_mc? const-decl "bool" ccg nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil))
   nil))
 (gt_mc_to_positive_pos 0
  (gt_mc_to_positive_pos-2 nil 3631659789
   ("" (auto-rewrite "finseq_appl")
    (("" (skosimp*)
      (("" (assert)
        (("" (flatten)
          (("" (expand* "positive_pos?" "gt_mc?")
            (("" (flatten)
              (("" (assert)
                (("" (skeep)
                  (("" (lemma "gte_mc_to_defined_pos")
                    (("" (inst -1 "G!1" "w!1" "mc!1")
                      (("" (assert)
                        (("" (expand "defined_pos?")
                          (("" (flatten)
                            ((""
                              (name-replace "G1" "ccg_to_mwg(G!1)"
                               :hide? nil)
                              ((""
                                (copy -1)
                                ((""
                                  (expand "ccg_to_mwg" -1)
                                  ((""
                                    (decompose-equality -1)
                                    ((""
                                      (expand "weight")
                                      ((""
                                        (decompose-equality -2)
                                        (("1"
                                          (name "a" "i+1")
                                          (("1"
                                            (name
                                             "edg"
                                             "(w!1`seq(i), w!1`seq(a))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -3 "edg")
                                                (("1"
                                                  (decompose-equality
                                                   -3)
                                                  (("1"
                                                    (expand
                                                     "indi_func")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "mc!1`seq(i)")
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "mc!1`seq(a)")
                                                          (("1"
                                                            (replace
                                                             -3
                                                             -1
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "wgt_walk_decomposed")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "G1"
                                                                   "i"
                                                                   "w!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "G1"
                                                                       "1"
                                                                       "w!1 ^ (i, length(w!1) - 1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "walk?_caret")
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "min")
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -1
                                                                                 6)
                                                                                (("1"
                                                                                  (expand
                                                                                   "min")
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "w!1 ^ (i, length(w!1) - 1) ^ (0, 1) = w!1 ^ (i,a)")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "w!1 ^ (i, length(w!1) - 1) ^ (1, w!1`length - 1 - i)
                                             = w!1 ^ (a, length(w!1) - 1)")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -5
                                                                                           -1
                                                                                           rl)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "wgt_walk"
                                                                                                 -1
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "wgt_aux")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "min")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "^"
                                                                                                           -1
                                                                                                           (3
                                                                                                            5
                                                                                                            7))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "min")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "^"
                                                                                                               -1
                                                                                                               (3
                                                                                                                4))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "wgt_aux")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "id_is_identity")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "identity?")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "wgt(G1)(w!1`seq(i), w!1`seq(a))")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -6
                                                                                                                           -2
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "gte_mc_sub_walk")
                                                                                                                                (("1"
                                                                                                                                  (inst-cp
                                                                                                                                   -1
                                                                                                                                   "G!1"
                                                                                                                                   "w!1"
                                                                                                                                   "0"
                                                                                                                                   "i"
                                                                                                                                   "mc!1")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "G!1"
                                                                                                                                     "w!1"
                                                                                                                                     "a"
                                                                                                                                     "length(w!1) - 1"
                                                                                                                                     "mc!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "gte_mc_to_defined_pos")
                                                                                                                                        (("1"
                                                                                                                                          (inst-cp
                                                                                                                                           -1
                                                                                                                                           "G!1"
                                                                                                                                           "w!1 ^ (0, i)"
                                                                                                                                           "mc!1 ^ (0, i)")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "G!1"
                                                                                                                                             "w!1 ^ (a, length(w!1) - 1)"
                                                                                                                                             "mc!1 ^ (a, length(w!1) - 1)")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -10)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "^"
                                                                                                                                                   -1
                                                                                                                                                   (2
                                                                                                                                                    3
                                                                                                                                                    4))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "^"
                                                                                                                                                     -2
                                                                                                                                                     (2
                                                                                                                                                      3
                                                                                                                                                      4))
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "min")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "defined_pos?")
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (name-replace
                                                                                                                                                             "Mw1"
                                                                                                                                                             "wgt_walk(G1, w!1 ^ (0, i))")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -6)
                                                                                                                                                              (("1"
                                                                                                                                                                (name-replace
                                                                                                                                                                 "Mw2"
                                                                                                                                                                 "wgt_walk(G1, w!1 ^ (a, length(w!1) - 1))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -5)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (name-replace
                                                                                                                                                                     "Medg"
                                                                                                                                                                     "wgt(G1)(edg)")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         -1
                                                                                                                                                                         -2
                                                                                                                                                                         -3
                                                                                                                                                                         -5
                                                                                                                                                                         -6
                                                                                                                                                                         -7
                                                                                                                                                                         -8
                                                                                                                                                                         -9
                                                                                                                                                                         -10
                                                                                                                                                                         3)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (name-replace
                                                                                                                                                                           "k0"
                                                                                                                                                                           "mc!1`seq(0)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (name-replace
                                                                                                                                                                             "kn"
                                                                                                                                                                             "mc!1`seq(length(w!1) - 1)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (name-replace
                                                                                                                                                                               "ki"
                                                                                                                                                                               "mc!1`seq(i)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (name-replace
                                                                                                                                                                                 "kj"
                                                                                                                                                                                 "mc!1`seq(a)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "positive_pos_mul")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (inst-cp
                                                                                                                                                                                     -1
                                                                                                                                                                                     "Mw1"
                                                                                                                                                                                     "Medg * Mw2"
                                                                                                                                                                                     "k0"
                                                                                                                                                                                     "ki"
                                                                                                                                                                                     "kn")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -1
                                                                                                                                                                                       "Medg"
                                                                                                                                                                                       "Mw2"
                                                                                                                                                                                       "ki"
                                                                                                                                                                                       "kj"
                                                                                                                                                                                       "kn")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "MPlus")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "id_is_identity")
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "measure_matrix_assoc")
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "id_is_identity")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "measure_matrix_assoc")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -7
                                                                                                                                               1
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "walk?_caret")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (rewrite
                                                                                                                                             "walk?_caret")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (typepred
                                                                                                                         "w!1")
                                                                                                                        (("2"
                                                                                                                          (hide-all-but
                                                                                                                           (-2
                                                                                                                            1
                                                                                                                            -6))
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -2
                                                                                                                             1
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "walk?")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -2
                                                                                                                                       "i")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-6
                                                                                          1))
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (decompose-equality)
                                                                                              (("1"
                                                                                                (expand*
                                                                                                 "^"
                                                                                                 "min")
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (decompose-equality)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "^"
                                                                                                     "min")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-5
                                                                                        1))
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1
                                                                                         1
                                                                                         rl)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (decompose-equality)
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "^"
                                                                                               "min")
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (decompose-equality)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (expand*
                                                                                                   "^"
                                                                                                   "min")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -4 1 rl)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "w!1")
                                                        (("2"
                                                          (hide-all-but
                                                           (-2 -9 1))
                                                          (("2"
                                                            (expand
                                                             "walk?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (expand
                                                                   "verts_in?")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "i")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1 1 rl)
                                                  (("2"
                                                    (replace -2 1 rl)
                                                    (("2"
                                                      (typepred "w!1")
                                                      (("2"
                                                        (hide-all-but
                                                         (-2 1))
                                                        (("2"
                                                          (expand
                                                           "walk?")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "i")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 1 rl)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "x!1")
                                          (("2"
                                            (hide-all-but (-1 -6 1))
                                            (("2"
                                              (expand "edge?")
                                              (("2"
                                                (expand "vert?")
                                                (("2"
                                                  (typepred "dg(G!1)")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "(x!1`1, x!1`2)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Exprs formal-type-decl nil ccg_to_mwg nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (Val formal-type-decl nil ccg_to_mwg nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (walk? const-decl "bool" walks "digraphs/")
    (Walk type-eq-decl nil walks "digraphs/")
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measures_combination type-eq-decl nil ccg nil)
    (defined_pos? const-decl "bool" measures nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (walk?_caret formula-decl nil walks "digraphs/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (wgt_aux def-decl "Weight" weighted_digraphs "digraphs/")
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (id_is_identity formula-decl nil measures nil)
    (G1 skolem-const-decl
     "wdg[CallingContext, measure_matrix[N], measures[N].*, measures[N].id]"
     ccg_to_mwg nil)
    (w!1 skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G!1))"
     ccg_to_mwg nil)
    (i skolem-const-decl "below(length(w!1) - 1)" ccg_to_mwg nil)
    (a skolem-const-decl "posint" ccg_to_mwg nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (positive_pos_mul formula-decl nil measures nil)
    (MPlus const-decl "measures" measures nil)
    (associative? const-decl "bool" operator_defs nil)
    (gte_mc_sub_walk formula-decl nil ccg nil)
    (identity? const-decl "bool" operator_defs nil)
    (wgt_walk const-decl "Weight" weighted_digraphs "digraphs/")
    (wgt_walk_decomposed formula-decl nil weighted_digraphs
     "digraphs/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (FunMeasure type-eq-decl nil ccg_def nil)
    (gt const-decl "bool" ccg nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (edg skolem-const-decl "[CallingContext[Exprs, Conditions, Vars],
 CallingContext[Exprs, Conditions, Vars]]" ccg_to_mwg nil)
    (G!1 skolem-const-decl
     "CCG[Val, Exprs, Conditions, Vars, MT, >, N]" ccg_to_mwg nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vert? const-decl "bool" digraphs "digraphs/")
    (vert type-eq-decl nil digraphs "digraphs/")
    (indi_func const-decl "Sign3" ccg_to_mwg nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (edge? const-decl "bool" digraphs "digraphs/")
    (Sign3 type-eq-decl nil sign3 "reals/")
    (weight const-decl "[below(N) -> [below(N) -> Sign3]]" ccg_to_mwg
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (gte_mc_to_defined_pos formula-decl nil ccg_to_mwg nil)
    (positive_pos? const-decl "bool" measures nil)
    (gt_mc? const-decl "bool" ccg nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)
  (gt_mc_to_positive_pos-1 nil 3589734556
   ("" (auto-rewrite "finseq_appl")
    (("" (skosimp*)
      (("" (assert)
        (("" (flatten)
          (("" (expand* "positive_pos?" "gt_mc?")
            (("" (flatten)
              (("" (assert)
                (("" (skeep)
                  (("" (lemma "gte_mc_to_defined_pos")
                    (("" (inst -1 "G!1" "w!1" "mc!1")
                      (("" (assert)
                        (("" (expand "defined_pos?")
                          (("" (flatten)
                            ((""
                              (name-replace "G1" "ccg_to_mwg(G!1)"
                               :hide? nil)
                              ((""
                                (copy -1)
                                ((""
                                  (expand "ccg_to_mwg" -1)
                                  ((""
                                    (decompose-equality -1)
                                    ((""
                                      (expand "weight")
                                      ((""
                                        (decompose-equality -2)
                                        (("1"
                                          (name
                                           "a"
                                           "number_fields.+(i,1)")
                                          (("1"
                                            (name
                                             "edg"
                                             "(w!1`seq(i), w!1`seq(a))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -3 "edg")
                                                (("1"
                                                  (decompose-equality
                                                   -3)
                                                  (("1"
                                                    (expand
                                                     "indi_func")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "mc!1`seq(i)")
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "mc!1`seq(a)")
                                                          (("1"
                                                            (replace
                                                             -3
                                                             -1
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "wgt_walk_decomposed")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "G1"
                                                                   "i"
                                                                   "w!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "G1"
                                                                       "1"
                                                                       "w!1 ^ (i, length(w!1) - 1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "walk?_caret")
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "min")
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -1
                                                                                 6)
                                                                                (("1"
                                                                                  (expand
                                                                                   "min")
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "w!1 ^ (i, length(w!1) - 1) ^ (0, 1) = w!1 ^ (i,a)")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "w!1 ^ (i, length(w!1) - 1) ^ (1, w!1`length - 1 - i)
                                 = w!1 ^ (a, length(w!1) - 1)")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -5
                                                                                           -1
                                                                                           rl)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "wgt_walk"
                                                                                                 -1
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "wgt_aux")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "min")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "^"
                                                                                                           -1
                                                                                                           (3
                                                                                                            5
                                                                                                            7))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "min")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "^"
                                                                                                               -1
                                                                                                               (3
                                                                                                                4))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "wgt_aux")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "id_is_identity")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "identity?")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "wgt(G1)(w!1`seq(i), w!1`seq(a))")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -6
                                                                                                                           -2
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "gte_mc_sub_walk")
                                                                                                                                (("1"
                                                                                                                                  (inst-cp
                                                                                                                                   -1
                                                                                                                                   "G!1"
                                                                                                                                   "w!1"
                                                                                                                                   "0"
                                                                                                                                   "i"
                                                                                                                                   "mc!1")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "G!1"
                                                                                                                                     "w!1"
                                                                                                                                     "a"
                                                                                                                                     "length(w!1) - 1"
                                                                                                                                     "mc!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "gte_mc_to_defined_pos")
                                                                                                                                        (("1"
                                                                                                                                          (inst-cp
                                                                                                                                           -1
                                                                                                                                           "G!1"
                                                                                                                                           "w!1 ^ (0, i)"
                                                                                                                                           "mc!1 ^ (0, i)")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "G!1"
                                                                                                                                             "w!1 ^ (a, length(w!1) - 1)"
                                                                                                                                             "mc!1 ^ (a, length(w!1) - 1)")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -10)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "^"
                                                                                                                                                   -1
                                                                                                                                                   (2
                                                                                                                                                    3
                                                                                                                                                    4))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "^"
                                                                                                                                                     -2
                                                                                                                                                     (2
                                                                                                                                                      3
                                                                                                                                                      4))
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "min")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "defined_pos?")
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (name-replace
                                                                                                                                                             "Mw1"
                                                                                                                                                             "wgt_walk(G1, w!1 ^ (0, i))")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -6)
                                                                                                                                                              (("1"
                                                                                                                                                                (name-replace
                                                                                                                                                                 "Mw2"
                                                                                                                                                                 "wgt_walk(G1, w!1 ^ (a, length(w!1) - 1))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -5)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (name-replace
                                                                                                                                                                     "Medg"
                                                                                                                                                                     "wgt(G1)(edg)")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         -1
                                                                                                                                                                         -2
                                                                                                                                                                         -3
                                                                                                                                                                         -5
                                                                                                                                                                         -6
                                                                                                                                                                         -7
                                                                                                                                                                         -8
                                                                                                                                                                         -9
                                                                                                                                                                         -10
                                                                                                                                                                         3)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (name-replace
                                                                                                                                                                           "k0"
                                                                                                                                                                           "mc!1`seq(0)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (name-replace
                                                                                                                                                                             "kn"
                                                                                                                                                                             "mc!1`seq(length(w!1) - 1)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (name-replace
                                                                                                                                                                               "ki"
                                                                                                                                                                               "mc!1`seq(i)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (name-replace
                                                                                                                                                                                 "kj"
                                                                                                                                                                                 "mc!1`seq(a)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "positive_pos_mul")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (inst-cp
                                                                                                                                                                                     -1
                                                                                                                                                                                     "Mw1"
                                                                                                                                                                                     "Medg * Mw2"
                                                                                                                                                                                     "k0"
                                                                                                                                                                                     "ki"
                                                                                                                                                                                     "kn")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -1
                                                                                                                                                                                       "Medg"
                                                                                                                                                                                       "Mw2"
                                                                                                                                                                                       "ki"
                                                                                                                                                                                       "kj"
                                                                                                                                                                                       "kn")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "+")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "id_is_identity")
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "measure_matrix_assoc")
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "id_is_identity")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "measure_matrix_assoc")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -7
                                                                                                                                               1
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "walk?_caret")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (rewrite
                                                                                                                                             "walk?_caret")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (typepred
                                                                                                                         "w!1")
                                                                                                                        (("2"
                                                                                                                          (hide-all-but
                                                                                                                           (-2
                                                                                                                            1
                                                                                                                            -6))
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -2
                                                                                                                             1
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "walk?")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -2
                                                                                                                                       "i")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-6
                                                                                          1))
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (decompose-equality)
                                                                                              (("1"
                                                                                                (expand*
                                                                                                 "^"
                                                                                                 "min")
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (decompose-equality)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "^"
                                                                                                     "min")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-5
                                                                                        1))
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1
                                                                                         1
                                                                                         rl)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (decompose-equality)
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "^"
                                                                                               "min")
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (decompose-equality)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (expand*
                                                                                                   "^"
                                                                                                   "min")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -4 1 rl)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "w!1")
                                                        (("2"
                                                          (hide-all-but
                                                           (-2 -9 1))
                                                          (("2"
                                                            (expand
                                                             "walk?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (expand
                                                                   "verts_in?")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "i")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1 1 rl)
                                                  (("2"
                                                    (replace -2 1 rl)
                                                    (("2"
                                                      (typepred "w!1")
                                                      (("2"
                                                        (hide-all-but
                                                         (-2 1))
                                                        (("2"
                                                          (expand
                                                           "walk?")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "i")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 1 rl)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "x!1")
                                          (("2"
                                            (hide-all-but (-1 -6 1))
                                            (("2"
                                              (expand "edge?")
                                              (("2"
                                                (expand "vert?")
                                                (("2"
                                                  (typepred "dg(G!1)")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "(x!1`1, x!1`2)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CallingContext type-eq-decl nil cc_def nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (Walk type-eq-decl nil walks "digraphs/")
    (measures_combination type-eq-decl nil ccg nil)
    (defined_pos? const-decl "bool" measures nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (walk?_caret formula-decl nil walks "digraphs/")
    (wgt_aux def-decl "Weight" weighted_digraphs "digraphs/")
    (id_is_identity formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (positive_pos_mul formula-decl nil measures nil)
    (+ const-decl "measure_matrix" measures nil)
    (gte_mc_sub_walk formula-decl nil ccg nil)
    (wgt_walk const-decl "Weight" weighted_digraphs "digraphs/")
    (wgt_walk_decomposed formula-decl nil weighted_digraphs
     "digraphs/")
    (FunMeasure type-eq-decl nil ccg_def nil)
    (gt const-decl "bool" ccg nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (vert? const-decl "bool" digraphs "digraphs/")
    (vert type-eq-decl nil digraphs "digraphs/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (Sign3 type-eq-decl nil sign3 "reals/")
    (positive_pos? const-decl "bool" measures nil)
    (gt_mc? const-decl "bool" ccg nil))
   shostak))
 (positive_pos_to_gt_mc_TCC1 0
  (positive_pos_to_gt_mc_TCC1-1 nil 3590516191
   ("" (subtype-tcc) nil nil)
   ((ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (wgt_walk const-decl "Weight" weighted_digraphs "digraphs/")
    (positive_pos? const-decl "bool" measures nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (gt_mc? const-decl "bool" ccg nil))
   nil))
 (positive_pos_to_gt_mc 0
  (positive_pos_to_gt_mc-2 nil 3631659852
   ("" (auto-rewrite "finseq_appl")
    (("" (skolem 1 ("G" "_"))
      (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
        (("" (assert)
          (("" (measure-induct+ "length(w)" ("w"))
            (("1" (skeep)
              (("1" (case "length(x!1) = 1 OR length(x!1) = 2")
                (("1" (split)
                  (("1" (hide-all-but (-1 -3))
                    (("1"
                      (expand* "positive_pos?" "wgt_walk" "wgt_aux")
                      (("1" (assert)
                        (("1" (expand "id")
                          (("1" (lift-if) (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "positive_pos?")
                    (("2" (expand "wgt_walk" -3)
                      (("2" (expand "wgt_aux")
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (expand "wgt_aux")
                              (("2"
                                (hide -2)
                                (("2"
                                  (lemma "id_is_identity")
                                  (("2"
                                    (expand "identity?")
                                    (("2"
                                      (inst
                                       -1
                                       "wgt(G1)(x!1`seq(0), x!1`seq(1))")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (hide -1 -2)
                                            (("2"
                                              (expand "gt_mc?")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "defined_pos_to_gte_mc")
                                                  (("2"
                                                    (inst -1 "G" "x!1")
                                                    (("2"
                                                      (replace -4)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "i"
                                                           "j")
                                                          (("2"
                                                            (expand
                                                             "defined_pos?")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wgt_walk")
                                                                (("2"
                                                                  (expand
                                                                   "wgt_aux")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "mc")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "gte_mc?")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "0")
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "ccg_to_mwg")
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           -6)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "weight")
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               -2)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "(x!1`seq(0), x!1`seq(1))")
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i")
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -7)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "indi_func")
                                                                                                            (("1"
                                                                                                              (expand*
                                                                                                               "last"
                                                                                                               "first")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "walk?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "verts_in?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "vert?")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "0")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-5
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "x!1")
                                                                                                      (("2"
                                                                                                        (expand*
                                                                                                         "walk?"
                                                                                                         "verts_in?"
                                                                                                         "vert?")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "walk?")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!2")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "edge?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "vert?")
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "dg(G)")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "(x!2`1, x!2`2)")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma "wgt_walk_decomposed")
                    (("2" (inst -1 "G1" "1" "x!1")
                      (("2" (assert)
                        (("2" (lemma "same_walks")
                          (("2" (inst -1 "G" "x!1")
                            (("2" (assert)
                              (("2"
                                (hide -1)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (lemma
                                     "positive_pos_decomposition")
                                    (("2"
                                      (inst
                                       -1
                                       "wgt_walk(G1, x!1 ^ (0, 1))"
                                       "wgt_walk(G1, x!1 ^ (1, length(x!1) - 1))"
                                       "i"
                                       "j")
                                      (("1"
                                        (expand "positive_pos?")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (expand "MPlus" -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "x!1 ^ (0, 1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "^"
                                                           -2
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "min")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "i"
                                                                 "k")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (lemma
                                                                       "defined_pos_to_gte_mc")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "x!1 ^ (1, length(x!1) - 1)")
                                                                        (("1"
                                                                          (replace
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "k"
                                                                               "j")
                                                                              (("1"
                                                                                (expand
                                                                                 "defined_pos?")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "gt_mc_comp")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "G"
                                                                                       "x!1 ^ (0, 1)"
                                                                                       "x!1 ^ (1, length(x!1) - 1)"
                                                                                       "mc"
                                                                                       "mc!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "gt_mc?"
                                                                                           -6)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand*
                                                                                                   "last"
                                                                                                   "first")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       -1
                                                                                                       (1
                                                                                                        2
                                                                                                        3))
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "min")
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "x!1 ^ (0, 1) o rest(x!1 ^ (1, length(x!1) - 1)) = x!1")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               5
                                                                                                               "mc o rest(mc!1)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-3
                                                                                                                    -4
                                                                                                                    -8
                                                                                                                    -9
                                                                                                                    3
                                                                                                                    4
                                                                                                                    5))
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "mc"
                                                                                                                     "mc!1")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "^")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "min")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "o")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "rest")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "min")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (decompose-equality)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (decompose-equality)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "x!2")
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "walk?_caret")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "walk?_caret")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "walk?_caret")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "walk?_caret")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -2
                                                       "x!1 ^ (1, length(x!1) - 1)")
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "k"
                                                         "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "^"
                                                             -2
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "min")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (lemma
                                                                   "defined_pos_to_gte_mc")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "G"
                                                                     "x!1 ^ (0, 1)")
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "i"
                                                                           "k")
                                                                          (("1"
                                                                            (expand
                                                                             "defined_pos?")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (lemma
                                                                                 "gt_mc_comp")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G"
                                                                                   "x!1 ^ (0, 1)"
                                                                                   "x!1 ^ (1, length(x!1) - 1)"
                                                                                   "mc!1"
                                                                                   "mc")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "gt_mc?"
                                                                                       -6)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "last"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "first"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^"
                                                                                                   -1
                                                                                                   (1
                                                                                                    2
                                                                                                    3))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "min")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       5
                                                                                                       "mc!1 o rest(mc)")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "x!1 ^ (0, 1) o rest(x!1 ^ (1, length(x!1) - 1)) = x!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-4
                                                                                                              -5
                                                                                                              -9
                                                                                                              -10
                                                                                                              3
                                                                                                              4
                                                                                                              5))
                                                                                                            (("1"
                                                                                                              (expand*
                                                                                                               "last"
                                                                                                               "first")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "mc!1"
                                                                                                                   "mc")
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     "o"
                                                                                                                     "rest"
                                                                                                                     "^"
                                                                                                                     "min")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (decompose-equality)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (decompose-equality)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "x!2")
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "mc!1"
                                                                                                           "mc")
                                                                                                          (("2"
                                                                                                            (expand*
                                                                                                             "o"
                                                                                                             "rest"
                                                                                                             "^"
                                                                                                             "min")
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "walk?_caret")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "walk?_caret")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "walk?_caret")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "walk?_caret")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (rewrite "id_is_identity")
                                          nil
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (rewrite
                                           "measure_matrix_assoc")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (rewrite "id_is_identity") nil nil)) nil)
             ("3" (hide-all-but 1)
              (("3" (rewrite "measure_matrix_assoc") nil nil)) nil)
             ("4" (typepred "y!1")
              (("4" (hide-all-but (-2 -5 1))
                (("4" (expand "ccg_to_mwg")
                  (("4" (decompose-equality)
                    (("4" (hide -2) (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide-all-but 1)
              (("5" (rewrite "id_is_identity") nil nil)) nil)
             ("6" (hide-all-but 1)
              (("6" (rewrite "measure_matrix_assoc") nil nil)) nil)
             ("7" (hide-all-but (-1 1))
              (("7" (expand "ccg_to_mwg")
                (("7" (decompose-equality)
                  (("7" (hide -2)
                    (("7" (typepred "w!1") (("7" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same_walks formula-decl nil ccg_to_mwg nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (MPlus const-decl "measures" measures nil)
    (mc!1 skolem-const-decl
     "measures_combination[Val, Exprs, Conditions, Vars, MT, >, N](x!1 ^ (0, 1))"
     ccg_to_mwg nil)
    (mc skolem-const-decl "measures_combination
    [Val, Exprs, Conditions, Vars, MT, >, N](x!1 ^ (1, length(x!1) - 1))"
     ccg_to_mwg nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (walk?_caret formula-decl nil walks "digraphs/")
    (gt_mc_comp formula-decl nil ccg nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (positive_pos_decomposition formula-decl nil measures nil)
    (wgt_walk_decomposed formula-decl nil weighted_digraphs
     "digraphs/")
    (wgt_aux def-decl "Weight" weighted_digraphs "digraphs/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (id_is_identity formula-decl nil measures nil)
    (defined_pos_to_gte_mc formula-decl nil ccg_to_mwg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (weight const-decl "[below(N) -> [below(N) -> Sign3]]" ccg_to_mwg
     nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (indi_func const-decl "Sign3" ccg_to_mwg nil)
    (vert type-eq-decl nil digraphs "digraphs/")
    (vert? const-decl "bool" digraphs "digraphs/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (x!1 skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G))" ccg_to_mwg
     nil)
    (defined_pos? const-decl "bool" measures nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (last const-decl "T" seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (not_empty_seq type-eq-decl nil seq_extras "structures/")
    (/= const-decl "boolean" notequal nil)
    (gt_mc? const-decl "bool" ccg nil)
    (FunMeasure type-eq-decl nil ccg_def nil)
    (measures_combination type-eq-decl nil ccg nil)
    (wgt_walk const-decl "Weight" weighted_digraphs "digraphs/")
    (positive_pos? const-decl "bool" measures nil)
    (identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (G1 skolem-const-decl
     "wdg[CallingContext, measure_matrix[N], measures[N].*, measures[N].id]"
     ccg_to_mwg nil)
    (G skolem-const-decl "CCG[Val, Exprs, Conditions, Vars, MT, >, N]"
     ccg_to_mwg nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (prewalk type-eq-decl nil walks "digraphs/")
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (measure_induction formula-decl nil measure_induction nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil))
   nil)
  (positive_pos_to_gt_mc-1 nil 3590611801
   ("" (auto-rewrite "finseq_appl")
    (("" (skolem 1 ("G" "_"))
      (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
        (("" (assert)
          (("" (measure-induct+ "length(w)" ("w"))
            (("1" (skeep)
              (("1" (case "length(x!1) = 1 OR length(x!1) = 2")
                (("1" (split)
                  (("1" (hide-all-but (-1 -3))
                    (("1"
                      (expand* "positive_pos?" "wgt_walk" "wgt_aux")
                      (("1" (assert)
                        (("1" (expand "id")
                          (("1" (lift-if) (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "positive_pos?")
                    (("2" (expand "wgt_walk" -3)
                      (("2" (expand "wgt_aux")
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (expand "wgt_aux")
                              (("2"
                                (hide -2)
                                (("2"
                                  (lemma "id_is_identity")
                                  (("2"
                                    (expand "identity?")
                                    (("2"
                                      (inst
                                       -1
                                       "wgt(G1)(x!1`seq(0), x!1`seq(1))")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (hide -1 -2)
                                            (("2"
                                              (expand "gt_mc?")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "defined_pos_to_gte_mc")
                                                  (("2"
                                                    (inst -1 "G" "x!1")
                                                    (("2"
                                                      (replace -4)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "i"
                                                           "j")
                                                          (("2"
                                                            (expand
                                                             "defined_pos?")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wgt_walk")
                                                                (("2"
                                                                  (expand
                                                                   "wgt_aux")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "mc")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "gte_mc?")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "0")
                                                                                  (("2"
                                                                                    (inst
                                                                                     1
                                                                                     "0")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "ccg_to_mwg")
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           -6)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "weight")
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               -2)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "(x!1`seq(0), x!1`seq(1))")
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i")
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -7)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "indi_func")
                                                                                                            (("1"
                                                                                                              (expand*
                                                                                                               "last"
                                                                                                               "first")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "walk?")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "verts_in?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "vert?")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "0")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-5
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "x!1")
                                                                                                      (("2"
                                                                                                        (expand*
                                                                                                         "walk?"
                                                                                                         "verts_in?"
                                                                                                         "vert?")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "x!1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "walk?")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "0")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!2")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "edge?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "vert?")
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "dg(G)")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "(x!2`1, x!2`2)")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma "wgt_walk_decomposed")
                    (("2" (inst -1 "G1" "1" "x!1")
                      (("2" (assert)
                        (("2" (lemma "same_walks")
                          (("2" (inst -1 "G" "x!1")
                            (("2" (assert)
                              (("2"
                                (hide -1)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (lemma
                                     "positive_pos_decomposition")
                                    (("2"
                                      (inst
                                       -1
                                       "wgt_walk(G1, x!1 ^ (0, 1))"
                                       "wgt_walk(G1, x!1 ^ (1, length(x!1) - 1))"
                                       "i"
                                       "j")
                                      (("1"
                                        (expand "positive_pos?")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (expand "+" -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "x!1 ^ (0, 1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "^"
                                                           -2
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "min")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "i"
                                                                 "k")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (lemma
                                                                       "defined_pos_to_gte_mc")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "x!1 ^ (1, length(x!1) - 1)")
                                                                        (("1"
                                                                          (replace
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "k"
                                                                               "j")
                                                                              (("1"
                                                                                (expand
                                                                                 "defined_pos?")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "gt_mc_comp")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "G"
                                                                                       "x!1 ^ (0, 1)"
                                                                                       "x!1 ^ (1, length(x!1) - 1)"
                                                                                       "mc"
                                                                                       "mc!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "gt_mc?"
                                                                                           -6)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand*
                                                                                                   "last"
                                                                                                   "first")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       -1
                                                                                                       (1
                                                                                                        2
                                                                                                        3))
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "min")
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "x!1 ^ (0, 1) o rest(x!1 ^ (1, length(x!1) - 1)) = x!1")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               5
                                                                                                               "mc o rest(mc!1)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-3
                                                                                                                    -4
                                                                                                                    -8
                                                                                                                    -9
                                                                                                                    3
                                                                                                                    4
                                                                                                                    5))
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "mc"
                                                                                                                     "mc!1")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "^")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "min")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "o")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "rest")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "min")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (decompose-equality)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (decompose-equality)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "x!2")
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "walk?_caret")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "walk?_caret")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "walk?_caret")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "walk?_caret")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -2
                                                       "x!1 ^ (1, length(x!1) - 1)")
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "k"
                                                         "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "^"
                                                             -2
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "min")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (lemma
                                                                   "defined_pos_to_gte_mc")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "G"
                                                                     "x!1 ^ (0, 1)")
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "i"
                                                                           "k")
                                                                          (("1"
                                                                            (expand
                                                                             "defined_pos?")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (lemma
                                                                                 "gt_mc_comp")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G"
                                                                                   "x!1 ^ (0, 1)"
                                                                                   "x!1 ^ (1, length(x!1) - 1)"
                                                                                   "mc!1"
                                                                                   "mc")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "gt_mc?"
                                                                                       -6)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "last"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "first"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^"
                                                                                                   -1
                                                                                                   (1
                                                                                                    2
                                                                                                    3))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "min")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       5
                                                                                                       "mc!1 o rest(mc)")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "x!1 ^ (0, 1) o rest(x!1 ^ (1, length(x!1) - 1)) = x!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-4
                                                                                                              -5
                                                                                                              -9
                                                                                                              -10
                                                                                                              3
                                                                                                              4
                                                                                                              5))
                                                                                                            (("1"
                                                                                                              (expand*
                                                                                                               "last"
                                                                                                               "first")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "mc!1"
                                                                                                                   "mc")
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     "o"
                                                                                                                     "rest"
                                                                                                                     "^"
                                                                                                                     "min")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (decompose-equality)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (decompose-equality)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "x!2")
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "mc!1"
                                                                                                           "mc")
                                                                                                          (("2"
                                                                                                            (expand*
                                                                                                             "o"
                                                                                                             "rest"
                                                                                                             "^"
                                                                                                             "min")
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "walk?_caret")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "walk?_caret")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "walk?_caret")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "walk?_caret")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (rewrite "id_is_identity")
                                          nil
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (rewrite
                                           "measure_matrix_assoc")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (rewrite "id_is_identity") nil nil)) nil)
             ("3" (hide-all-but 1)
              (("3" (rewrite "measure_matrix_assoc") nil nil)) nil)
             ("4" (typepred "y!1")
              (("4" (hide-all-but (-2 -5 1))
                (("4" (expand "ccg_to_mwg")
                  (("4" (decompose-equality)
                    (("4" (hide -2) (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide-all-but 1)
              (("5" (rewrite "id_is_identity") nil nil)) nil)
             ("6" (hide-all-but 1)
              (("6" (rewrite "measure_matrix_assoc") nil nil)) nil)
             ("7" (hide-all-but (-1 1))
              (("7" (expand "ccg_to_mwg")
                (("7" (decompose-equality)
                  (("7" (hide -2)
                    (("7" (typepred "w!1") (("7" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "measure_matrix" measures nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (walk?_caret formula-decl nil walks "digraphs/")
    (gt_mc_comp formula-decl nil ccg nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (positive_pos_decomposition formula-decl nil measures nil)
    (wgt_walk_decomposed formula-decl nil weighted_digraphs
     "digraphs/")
    (wgt_aux def-decl "Weight" weighted_digraphs "digraphs/")
    (id_is_identity formula-decl nil measures nil)
    (gte_mc? const-decl "bool" ccg nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (vert type-eq-decl nil digraphs "digraphs/")
    (vert? const-decl "bool" digraphs "digraphs/")
    (verts_in? const-decl "bool" walks "digraphs/")
    (defined_pos? const-decl "bool" measures nil)
    (last const-decl "T" seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (not_empty_seq type-eq-decl nil seq_extras "structures/")
    (gt_mc? const-decl "bool" ccg nil)
    (FunMeasure type-eq-decl nil ccg_def nil)
    (measures_combination type-eq-decl nil ccg nil)
    (wgt_walk const-decl "Weight" weighted_digraphs "digraphs/")
    (positive_pos? const-decl "bool" measures nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (prewalk type-eq-decl nil walks "digraphs/")
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (CallingContext type-eq-decl nil cc_def nil))
   shostak))
 (no_positive_pos_no_gt_mc 0
  (no_positive_pos_no_gt_mc-1 nil 3589819870
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
        (("" (assert)
          (("" (prop)
            (("1" (skeep)
              (("1" (lemma "gt_mc_to_positive_pos")
                (("1" (inst -1 "G" "w" "mc")
                  (("1" (replace -4)
                    (("1" (assert)
                      (("1" (assert)
                        (("1"
                          (inst -2 "mc`seq(0)" "mc`seq(length(w) - 1)")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lemma "positive_pos_to_gt_mc")
                (("2" (inst -1 "G" "w")
                  (("2" (replace -4)
                    (("2" (assert)
                      (("2" (inst -1 "i" "j")
                        (("2" (assert)
                          (("2" (skeep) (("2" (inst -4 "mc") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_pos_to_gt_mc formula-decl nil ccg_to_mwg nil)
    (measures_combination type-eq-decl nil ccg nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (prewalk type-eq-decl nil walks "digraphs/")
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gt_mc_to_positive_pos formula-decl nil ccg_to_mwg nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil))
   shostak))
 (positive_iff_gt_mc_TCC1 0
  (positive_iff_gt_mc_TCC1-1 nil 3590489564 ("" (subtype-tcc) nil nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (Val formal-type-decl nil ccg_to_mwg nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs "digraphs/")
    (walk? const-decl "bool" walks "digraphs/"))
   nil))
 (positive_iff_gt_mc_TCC2 0
  (positive_iff_gt_mc_TCC2-1 nil 3590489564 ("" (subtype-tcc) nil nil)
   ((ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)) nil))
 (positive_iff_gt_mc 0
  (positive_iff_gt_mc-1 nil 3590489606
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
        (("" (assert)
          (("" (prop)
            (("1" (lemma "positive_pos_to_gt_mc")
              (("1" (inst -1 "G" "w")
                (("1" (replace -3)
                  (("1" (assert)
                    (("1" (expand* "positive?" "positive_pos?")
                      (("1" (skeep)
                        (("1" (inst -1 "j" "j")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "mc")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "mc")
                (("2" (lemma "gt_mc_to_positive_pos")
                  (("2" (inst -1 "G" "w" "mc")
                    (("2" (replace -5)
                      (("2" (assert)
                        (("2" (assert)
                          (("2" (expand* "last" "first")
                            (("2" (assert)
                              (("2"
                                (name-replace "k" "mc`seq(0)")
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (replace -3 -1 rl)
                                    (("2"
                                      (hide-all-but (-1 1))
                                      (("2"
                                        (expand*
                                         "positive_pos?"
                                         "positive?")
                                        (("2" (inst 1 "k") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt_mc_to_positive_pos formula-decl nil ccg_to_mwg nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (positive_pos_to_gt_mc formula-decl nil ccg_to_mwg nil)
    (positive_pos? const-decl "bool" measures nil)
    (positive? const-decl "bool" measures nil)
    (mc skolem-const-decl
     "measures_combination[Val, Exprs, Conditions, Vars, MT, >, N](w)"
     ccg_to_mwg nil)
    (w skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G))" ccg_to_mwg
     nil)
    (G skolem-const-decl "CCG[Val, Exprs, Conditions, Vars, MT, >, N]"
     ccg_to_mwg nil)
    (measures_combination type-eq-decl nil ccg nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (last const-decl "T" seq_extras "structures/")
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (walk? const-decl "bool" walks "digraphs/")
    (Walk type-eq-decl nil walks "digraphs/")
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil))
   shostak))
 (mwg_termination_iff_ccg_termination 0
  (mwg_termination_iff_ccg_termination-1 nil 3612599578
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      (("" (name-replace "G1" "ccg_to_mwg(G)" :hide? nil)
        (("" (assert)
          (("" (expand* "mwg_termination?" "ccg_termination?")
            (("" (lemma "positive_iff_gt_mc")
              (("" (prop)
                (("1" (skeep)
                  (("1" (inst -1 "c")
                    (("1" (inst -2 "G" "c")
                      (("1" (replace -3) (("1" (assert) nil nil)) nil)
                       ("2" (hide -1 2)
                        (("2" (typepred "c")
                          (("2" (expand* "circuit?" "pre_circuit?")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 2)
                      (("2" (typepred "c")
                        (("2" (expand "ccg_to_mwg")
                          (("2" (decompose-equality -3)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -1 "c")
                    (("1" (inst -2 "G" "c")
                      (("1" (replace -3) (("1" (assert) nil nil)) nil)
                       ("2" (hide -1 2)
                        (("2" (typepred "c")
                          (("2" (expand* "circuit?" "pre_circuit?")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (hide -1 -3 -4)
                                  (("2"
                                    (expand "ccg_to_mwg")
                                    (("2"
                                      (decompose-equality -2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 2)
                      (("2" (typepred "c")
                        (("2" (expand "ccg_to_mwg")
                          (("2" (decompose-equality -3)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_iff_gt_mc formula-decl nil ccg_to_mwg nil)
    (c skolem-const-decl "{c | circuit?(dg(G1), c)}" ccg_to_mwg nil)
    (edge? const-decl "bool" digraphs "digraphs/")
    (Sign3 type-eq-decl nil sign3 "reals/")
    (weight const-decl "[below(N) -> [below(N) -> Sign3]]" ccg_to_mwg
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (walk? const-decl "bool" walks "digraphs/")
    (Walk type-eq-decl nil walks "digraphs/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pre_circuit? const-decl "bool" circuits "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (circuit? const-decl "bool" circuits "digraphs/")
    (G1 skolem-const-decl
     "wdg[CallingContext, measure_matrix[N], measures[N].*, measures[N].id]"
     ccg_to_mwg nil)
    (G skolem-const-decl "CCG[Val, Exprs, Conditions, Vars, MT, >, N]"
     ccg_to_mwg nil)
    (c skolem-const-decl
     "{c: prewalk[CallingContext[Exprs, Conditions, Vars]] | circuit?(dg(G), c)}"
     ccg_to_mwg nil)
    (mwg_termination? const-decl "bool" matrix_wdg nil)
    (ccg_termination? const-decl "bool" ccg nil)
    (ccg_to_mwg const-decl "wdg" ccg_to_mwg nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (> formal-const-decl "(well_founded?[MT])" ccg_to_mwg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg_to_mwg nil)
    (Val formal-type-decl nil ccg_to_mwg nil)
    (wdg type-eq-decl nil weighted_digraphs "digraphs/")
    (id const-decl "measure_matrix" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" ccg_to_mwg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edge type-eq-decl nil digraphs "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg_to_mwg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg_to_mwg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg_to_mwg nil)
    (Exprs formal-type-decl nil ccg_to_mwg nil))
   shostak)))

