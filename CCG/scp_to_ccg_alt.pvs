scp_to_ccg_alt[Val,Expr,Condition: TYPE,
               (IMPORTING cc_def[Val,Expr,Condition]) CCs:finite_set[CallingContext],
               semantic_rel:PRED[[Expr,Val,Val]],eval_conds:PRED[[Condition,Val]]] : THEORY 
BEGIN

  ASSUMING
    IMPORTING scp[Val,Expr,Condition,[nat->(CCs)]]

    scp_termination : ASSUMPTION scp_termination?(semantic_rel,eval_conds)

    semantic_rel_finite_branch: ASSUMPTION
      FORALL(expr: Expr, v: Val):
 	is_finite({ w: Val | semantic_rel(expr,v,w) })
  ENDASSUMING

  Seq_cc: TYPE = [nat->(CCs)]

  R (x,y: Val): bool = 
    EXISTS(cc: (CCs)):
      eval_conds(cc`conds,y) AND
      semantic_rel(cc`actuals,y,x) 

  IMPORTING orders@well_foundedness[Val]

  R_wf: LEMMA
    well_founded?(R)

  IMPORTING finite_sets@finite_sets_eq, finite_sets_of_sets[Val]

  R_no_desc_inf_branch: LEMMA
    FORALL(x: Val):
      is_finite({y: Val | R(y, x)})

  IMPORTING orders@omega[Val,R],
            ccg[Val,Expr,Condition,nat,LAMBDA(n,m:nat):n<m,1,semantic_rel,eval_conds]

  Graph_cc : TYPE = {dg:digraph | subset?(vert(dg),CCs)}

  scp_implies_ccg_termination : THEOREM
    FORALL (dg:Graph_cc):
      EXISTS (fms:FunMeasures) : ccg_termination?(make_ccg(dg,fms))

END scp_to_ccg_alt
