(measures
 (add_commute 0
  (add_commute-1 nil 3575740263 ("" (skeep) (("" (grind) nil nil)) nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (MPlus const-decl "measures" measures nil))
   shostak))
 (add_assoc 0
  (add_assoc-1 nil 3575739351 ("" (skeep) (("" (grind) nil nil)) nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (MPlus const-decl "measures" measures nil))
   shostak))
 (add_measures_positive 0
  (add_measures_positive-1 nil 3631552760 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (MPlus const-decl "measures" measures nil))
   shostak))
 (id_on_measures 0
  (id_on_measures-1 nil 3588610057
   ("" (skeep)
    (("" (expand "MPlus")
      (("" (lift-if)
        (("" (ground)
          (("1" (typepred "x") (("1" (assert) nil nil)) nil)
           ("2" (typepred "x") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((MPlus const-decl "measures" measures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil))
   shostak))
 (card_prep 0
  (card_prep-1 nil 3631015162
   ("" (expand "is_finite")
    (("" (inst 1 "(3^N)^N" "_")
      (("1" (lemma "funset_bijection")
        (("1"
          (case "EXISTS (g:[[below(N)->[below(N)->measures]]->below((3^N)^N)]): bijective?(g)")
          (("1" (skeep -1)
            (("1" (expand "bijective?" -1)
              (("1" (flatten)
                (("1" (inst 1 "g")
                  (("1" (expand "restrict")
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (typepred (N)) (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (case "EXISTS (h: [[below(N)-> measures]->below(3^N)]): bijective?(h)")
              (("1" (skeep -1)
                (("1"
                  (case "LET G = LAMBDA (gg:[below(N) -> [below(N) -> measures]]): LAMBDA (n:below(N)): h(gg(n)) IN bijective?(G) ")
                  (("1" (inst -3 "3^N" "N")
                    (("1" (skolem -3 "H")
                      (("1" (skoletin)
                        (("1" (inst 1 "H o G")
                          (("1"
                            (lemma
                             "composition_bijective[[below(N)->[below(N)->measures]],[below(N)->below(3^N)], below((3^N)^N)]")
                            (("1" (inst -1 "G" "H") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?" 1)
                        (("2" (split 1)
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (expand "G" -1)
                                (("1"
                                  (expand "bijective?")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (typepred (x!1))
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "x1(x!1)"
                                                 "x2(x!1)")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skeep)
                              (("2"
                                (lemma
                                 "bijective_inverse_exists[[below(N)->measures], below(3^N)]")
                                (("2"
                                  (inst -1 "h")
                                  (("2"
                                    (expand "exists1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (skolem -1 "hh")
                                        (("2"
                                          (inst
                                           1
                                           "LAMBDA (n:below(N)): hh(y(n))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "G")
                                              (("2"
                                                (expand "inverse?")
                                                (("2"
                                                  (inst -1 "y(x!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "y(x!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (case "LET (p: [below(3)-> measures]) = LAMBDA (s:below(3)): s-1 IN bijective?(p)")
                  (("1" (skoletin)
                    (("1" (inst -3 "3" "N")
                      (("1" (skeep)
                        (("1"
                          (case "LET (F:[[below(N)->below(3)]->[below(N)->measures]]) = LAMBDA (T:[below(N)->below(3)]): LAMBDA (s:below(N)): p(T(s))  IN bijective?(F)")
                          (("1"
                            (lemma
                             "bijective_inverse_exists[[below(N)->below(3)],[below(N)-> measures]]")
                            (("1" (skoletin)
                              (("1"
                                (inst -3 "F")
                                (("1"
                                  (lemma
                                   "bij_inv_is_bij_alt[[below(N)->below(3)],[below(N)-> measures]]")
                                  (("1"
                                    (expand "exists1")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -4 "FF")
                                        (("1"
                                          (inst -1 "F" "FF")
                                          (("1"
                                            (inst
                                             1
                                             "LAMBDA (row:[below(N)->measures]): f(FF(row))")
                                            (("1"
                                              (case
                                               "LET H = o(f,FF) in bijective?(H)")
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("2"
                                                  (lemma
                                                   "composition_bijective[[below(N)->measures],[below(N)->below(3)], below(3^N)]")
                                                  (("2"
                                                    (inst -1 "FF" "f")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "bijective?" 1)
                              (("2"
                                (expand "injective?")
                                (("2"
                                  (expand "surjective?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "x1(x!1)"
                                                   "x2(x!1)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma
                                         "bijective_inverse_exists[below(3), measures]")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (expand "exists1")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (skolem -1 "q")
                                                (("2"
                                                  (inst
                                                   1
                                                   "LAMBDA(s:below(N)): q(y(s))")
                                                  (("2"
                                                    (expand "inverse?")
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "y(x!1)")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bijective?")
                                                            (("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "y(x!1)")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (ground)
                              (("3"
                                (expand "p")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?")
                        (("2" (expand "injective?")
                          (("2" (expand "surjective?")
                            (("2" (hide -2)
                              (("2"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand "p")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     1
                                     "IF y=-1 THEN 0 ELSIF y=0 THEN 1 ELSE 2 ENDIF")
                                    (("2"
                                      (expand "p")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (typepred (y))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (typepred (N)) (("3" (ground) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (typepred (N)) (("2" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (measure_matrix type-eq-decl nil measures nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "T3" function_props nil)
    (H skolem-const-decl
     "[[below[N] -> below[3 ^ N]] -> below[3 ^ N ^ N]]" measures nil)
    (G skolem-const-decl
     "[[below(N) -> [below(N) -> measures]] -> [below(N) -> below(3 ^ N)]]"
     measures nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G skolem-const-decl
     "[[below(N) -> [below(N) -> measures]] -> [below(N) -> below(3 ^ N)]]"
     measures nil)
    (h skolem-const-decl "[[below(N) -> measures] -> below(3 ^ N)]"
     measures nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (exists1 const-decl "bool" exists1 nil)
    (bijective_inverse_exists formula-decl nil function_inverse_def
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unique? const-decl "bool" exists1 nil)
    (bij_inv_is_bij_alt formula-decl nil function_inverse_def nil)
    (FF skolem-const-decl
     "[[below(N) -> measures] -> [below(N) -> below(3)]]" measures nil)
    (F skolem-const-decl
     "[[below(N) -> below(3)] -> [below(N) -> int]]" measures nil)
    (p skolem-const-decl "[below(3) -> int]" measures nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (p skolem-const-decl "[below(3) -> int]" measures nil)
    (funset_bijection formula-decl nil fun_below_props "sets_aux/")
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (card_measure_matrices_TCC1 0
  (card_measure_matrices_TCC1-1 nil 3631015109
   ("" (lemma "card_prep") (("" (propax) nil nil)) nil)
   ((card_prep formula-decl nil measures nil)) nil))
 (card_measure_matrices_TCC2 0
  (card_measure_matrices_TCC2-1 nil 3631015109
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil))
 (card_measure_matrices 0
  (card_measure_matrices-1 nil 3631033652
   ("" (rewrite "expt_x2")
    (("" (rewrite "expt_times")
      ((""
        (case "EXISTS (g:[[below(N)->[below(N)->measures]]->below((3^N)^N)]): bijective?(g)")
        (("1" (skeep)
          (("1" (lemma "card_bij[measure_matrix]")
            (("1" (inst -1 "(3^N)^N" "fullset[measure_matrix]")
              (("1" (flatten)
                (("1" (hide -1)
                  (("1"
                    (case "EXISTS (G: [(fullset[measure_matrix])->[below(N)->[below(N)->measures]]]): bijective?(G)")
                    (("1" (skeep -1)
                      (("1" (split -2)
                        (("1" (propax) nil nil)
                         ("2"
                          (lemma
                           "composition_bijective[(fullset[measure_matrix]),[below(N)->[below(N)->measures]], below((3^N)^N)]")
                          (("2" (inst -1 "G" "g")
                            (("2" (inst 1 "g o G") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (inst 1
                       "LAMBDA (s:(fullset[measure_matrix])): s")
                      (("2" (hide-all-but 1)
                        (("2" (expand "bijective?")
                          (("2" (expand "injective?")
                            (("2" (expand "surjective?")
                              (("2"
                                (ground)
                                (("1" (skeep) nil nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst 1 "y")
                                    (("2"
                                      (expand "fullset")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "funset_bijection")
            (("2"
              (case "EXISTS (h: [[below(N)-> measures]->below(3^N)]): bijective?(h)")
              (("1" (skeep -1)
                (("1"
                  (case "LET G = LAMBDA (gg:[below(N) -> [below(N) -> measures]]): LAMBDA (n:below(N)): h(gg(n)) IN bijective?(G) ")
                  (("1" (inst -3 "3^N" "N")
                    (("1" (skolem -3 "H")
                      (("1" (skoletin)
                        (("1" (inst 1 "H o G")
                          (("1"
                            (lemma
                             "composition_bijective[[below(N)->[below(N)->measures]],[below(N)->below(3^N)], below((3^N)^N)]")
                            (("1" (inst -1 "G" "H") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?" 1)
                        (("2" (split 1)
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (expand "G" -1)
                                (("1"
                                  (expand "bijective?")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (typepred (x!1))
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "x1(x!1)"
                                                 "x2(x!1)")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skeep)
                              (("2"
                                (lemma
                                 "bijective_inverse_exists[[below(N)->measures], below(3^N)]")
                                (("2"
                                  (inst -1 "h")
                                  (("2"
                                    (expand "exists1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (skolem -1 "hh")
                                        (("2"
                                          (inst
                                           1
                                           "LAMBDA (n:below(N)): hh(y(n))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "G")
                                              (("2"
                                                (expand "inverse?")
                                                (("2"
                                                  (inst -1 "y(x!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "y(x!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (case "LET (p: [below(3)-> measures]) = LAMBDA (s:below(3)): s-1 IN bijective?(p)")
                  (("1" (skoletin)
                    (("1" (inst -3 "3" "N")
                      (("1" (skeep)
                        (("1"
                          (case "LET (F:[[below(N)->below(3)]->[below(N)->measures]]) = LAMBDA (T:[below(N)->below(3)]): LAMBDA (s:below(N)): p(T(s))  IN bijective?(F)")
                          (("1"
                            (lemma
                             "bijective_inverse_exists[[below(N)->below(3)],[below(N)-> measures]]")
                            (("1" (skoletin)
                              (("1"
                                (inst -3 "F")
                                (("1"
                                  (lemma
                                   "bij_inv_is_bij_alt[[below(N)->below(3)],[below(N)-> measures]]")
                                  (("1"
                                    (expand "exists1")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -4 "FF")
                                        (("1"
                                          (inst -1 "F" "FF")
                                          (("1"
                                            (inst
                                             1
                                             "LAMBDA (row:[below(N)->measures]): f(FF(row))")
                                            (("1"
                                              (case
                                               "LET H = o(f,FF) in bijective?(H)")
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("2"
                                                  (lemma
                                                   "composition_bijective[[below(N)->measures],[below(N)->below(3)], below(3^N)]")
                                                  (("2"
                                                    (inst -1 "FF" "f")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "bijective?" 1)
                              (("2"
                                (expand "injective?")
                                (("2"
                                  (expand "surjective?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "x1(x!1)"
                                                   "x2(x!1)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma
                                         "bijective_inverse_exists[below(3), measures]")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (expand "exists1")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (skolem -1 "q")
                                                (("2"
                                                  (inst
                                                   1
                                                   "LAMBDA(s:below(N)): q(y(s))")
                                                  (("2"
                                                    (expand "inverse?")
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "y(x!1)")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bijective?")
                                                            (("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "y(x!1)")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (ground)
                              (("3"
                                (expand "p")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?")
                        (("2" (expand "injective?")
                          (("2" (expand "surjective?")
                            (("2" (hide -2)
                              (("2"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand "p")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     1
                                     "IF y=-1 THEN 0 ELSIF y=0 THEN 1 ELSE 2 ENDIF")
                                    (("2"
                                      (expand "p")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (typepred (y))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_times formula-decl nil exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (H skolem-const-decl
     "[[below[N] -> below[3 ^ N]] -> below[3 ^ N ^ N]]" measures nil)
    (G skolem-const-decl
     "[[below(N) -> [below(N) -> measures]] -> [below(N) -> below(3 ^ N)]]"
     measures nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (G skolem-const-decl
     "[[below(N) -> [below(N) -> measures]] -> [below(N) -> below(3 ^ N)]]"
     measures nil)
    (h skolem-const-decl "[[below(N) -> measures] -> below(3 ^ N)]"
     measures nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (exists1 const-decl "bool" exists1 nil)
    (bijective_inverse_exists formula-decl nil function_inverse_def
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (unique? const-decl "bool" exists1 nil)
    (bij_inv_is_bij_alt formula-decl nil function_inverse_def nil)
    (FF skolem-const-decl
     "[[below(N) -> measures] -> [below(N) -> below(3)]]" measures nil)
    (F skolem-const-decl
     "[[below(N) -> below(3)] -> [below(N) -> int]]" measures nil)
    (p skolem-const-decl "[below(3) -> int]" measures nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (p skolem-const-decl "[below(3) -> int]" measures nil)
    (funset_bijection formula-decl nil fun_below_props "sets_aux/")
    (fullset const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (surjective? const-decl "bool" functions nil)
    (y skolem-const-decl "[below(N) -> [below(N) -> measures]]"
     measures nil)
    (injective? const-decl "bool" functions nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (O const-decl "T3" function_props nil)
    (below type-eq-decl nil nat_types nil)
    (g skolem-const-decl
     "[[below(N) -> [below(N) -> measures]] -> below((3 ^ N) ^ N)]"
     measures nil)
    (G skolem-const-decl
     "[(fullset[measure_matrix]) -> [below(N) -> [below(N) -> measures]]]"
     measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (card_bij formula-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (^ const-decl "real" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x2 formula-decl nil exponentiation nil))
   shostak))
 (matrices_order 0
  (matrices_order-1 nil 3629651071
   ("" (expand "partial_order?")
    (("" (split 1)
      (("1" (expand "preorder?")
        (("1" (split 1)
          (("1" (expand "reflexive?")
            (("1" (skeep)
              (("1" (ground)
                (("1" (expand "<=") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "transitive?")
            (("2" (skeep)
              (("2" (expand "<=")
                (("2" (skeep)
                  (("2" (inst?)
                    (("2" (inst?) (("2" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "antisymmetric?")
        (("2" (skeep)
          (("2" (expand "<=")
            (("2" (decompose-equality 1)
              (("2" (decompose-equality 1)
                (("2" (inst?)
                  (("2" (inst?) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" measures nil)
    (reflexive? const-decl "bool" relations nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil))
   shostak))
 (mult_left_preserves_order 0
  (mult_left_preserves_order-2 nil 3631282752
   ("" (skeep)
    (("" (expand "<=")
      (("" (skeep)
        (("" (expand "*")
          (("" (inst -1 "_" "j")
            ((""
              (case "FORALL (k:below(N)): MPlus(n(i)(k),m1(k)(j))<= MPlus(n(i)(k),m2(k)(j))")
              (("1"
                (typepred
                 "max(LAMBDA (k: below(N)): MPlus(n(i)(k) , m1(k)(j))) ")
                (("1" (skeep -3)
                  (("1" (replaces -3 :dir rl)
                    (("1" (hide -1)
                      (("1" (hide -1)
                        (("1" (inst -1 "jj")
                          (("1"
                            (typepred
                             "max(LAMBDA (k: below(N)): MPlus(n(i)(k) , m2(k)(j))) ")
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "jj")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (inst -1 "k")
                    (("2" (ground)
                      (("2" (expand "MPlus" 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "MPlus")
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "MPlus")
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (typepred
                                                     "m1(k)(j)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (typepred "m2(k)(j)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (ground)
                                              (("2"
                                                (expand "MPlus")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (ground)
                                  (("2"
                                    (typepred "n(i)(k)")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (typepred "m1(k)(j)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "MPlus")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (MPlus const-decl "measures" measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (mult_left_preserves_order-1 nil 3630950036
   ("" (skeep)
    (("" (expand "<=")
      (("" (skeep)
        (("" (expand "*")
          (("" (inst -1 "_" "j")
            ((""
              (case "FORALL (k:below(N)): n(i)(k)+m1(k)(j)<= n(i)(k)+m2(k)(j)")
              (("1"
                (typepred
                 "max(LAMBDA (k: below(N)): (n(i)(k) + m1(k)(j))) ")
                (("1" (skeep -3)
                  (("1" (replaces -3 :dir rl)
                    (("1" (hide -1)
                      (("1" (hide -1)
                        (("1" (inst -1 "jj")
                          (("1"
                            (typepred
                             "max(LAMBDA (k: below(N)): (n(i)(k) + m2(k)(j))) ")
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "jj")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (inst -1 "k")
                    (("2" (ground)
                      (("2" (expand "+ " 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "+ ")
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "+ ")
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (typepred
                                                     "m1(k)(j)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (typepred "m2(k)(j)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (ground)
                                              (("2"
                                                (expand "+ ")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (ground)
                                  (("2"
                                    (typepred "n(i)(k)")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (typepred "m1(k)(j)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "+ ")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/"))
   shostak))
 (mult_right_preserves_order 0
  (mult_right_preserves_order-2 nil 3631282838
   ("" (skeep)
    (("" (expand "<=")
      (("" (skeep)
        (("" (expand "*")
          (("" (inst -1 "i" "_")
            ((""
              (case "FORALL (k:below(N)): MPlus(m1(i)(k),n(k)(j))<= MPlus(m2(i)(k),n(k)(j))")
              (("1"
                (typepred
                 "max(LAMBDA (k: below(N)): MPlus(m1(i)(k) , n(k)(j))) ")
                (("1" (skeep -3)
                  (("1" (replaces -3 :dir rl)
                    (("1" (hide -1)
                      (("1" (hide -1)
                        (("1" (inst -1 "jj")
                          (("1"
                            (typepred
                             "max(LAMBDA (k: below(N)): MPlus(m2(i)(k) , n(k)(j))) ")
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "jj")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (inst -1 "k")
                    (("2" (ground)
                      (("2" (expand "MPlus" 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "MPlus")
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (typepred "m2(i)(k)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand "MPlus")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "MPlus")
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (typepred "m1(i)(k)")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "n(k)(j)")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (typepred "m1(i)(k)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "MPlus")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (MPlus const-decl "measures" measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (mult_right_preserves_order-1 nil 3630952352
   ("" (skeep)
    (("" (expand "<=")
      (("" (skeep)
        (("" (expand "*")
          (("" (inst -1 "i" "_")
            ((""
              (case "FORALL (k:below(N)): m1(i)(k)+n(k)(j)<= m2(i)(k)+n(k)(j)")
              (("1"
                (typepred
                 "max(LAMBDA (k: below(N)): (m1(i)(k) + n(k)(j))) ")
                (("1" (skeep -3)
                  (("1" (replaces -3 :dir rl)
                    (("1" (hide -1)
                      (("1" (hide -1)
                        (("1" (inst -1 "jj")
                          (("1"
                            (typepred
                             "max(LAMBDA (k: below(N)): (m2(i)(k) + n(k)(j))) ")
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "jj")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (inst -1 "k")
                    (("2" (ground)
                      (("2" (expand "+ " 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "+ ")
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (typepred "m2(i)(k)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand "+ ")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "+ ")
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (typepred "m1(i)(k)")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "n(k)(j)")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (typepred "m1(i)(k)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "+ ")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/"))
   shostak))
 (id_is_identity 0
  (id_is_identity-2 nil 3631282959
   ("" (expand "identity?")
    (("" (skosimp)
      (("" (split)
        (("1" (decompose-equality)
          (("1" (decompose-equality)
            (("1" (expand* "*" "id")
              (("1"
                (name-replace "A" "LAMBDA (k: below(N)):
                MPlus(x!1(x!2)(k) , IF k = x!3 THEN 0 ELSE -1 ENDIF)"
                 :hide? nil)
                (("1" (decompose-equality)
                  (("1" (typepred "max(A)")
                    (("1" (hide -1)
                      (("1" (case "max(A) = A(x!3)")
                        (("1" (inst -4 "x!3")
                          (("1" (expand "MPlus" -4)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (typepred "x!1(x!2)(x!3)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (inst -1 "x!3")
                              (("2"
                                (case "jj!1 = x!3")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst -3 "jj!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "MPlus" -3)
                                      (("2"
                                        (expand "<=")
                                        (("2"
                                          (typepred "A(x!3)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (decompose-equality)
          (("2" (decompose-equality)
            (("2" (expand* "*" "id")
              (("2"
                (name-replace "A" "LAMBDA (k: below(N)):
                MPlus(IF x!2 = k THEN 0 ELSE -1 ENDIF , x!1(k)(x!3))"
                 :hide? nil)
                (("2" (decompose-equality)
                  (("2" (typepred "max(A)")
                    (("2" (hide -1)
                      (("2" (case "max(A) = A(x!2)")
                        (("1" (inst -4 "x!2")
                          (("1" (expand "MPlus" -4)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (typepred "x!1(x!2)(x!3)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (inst -1 "x!2")
                              (("2"
                                (case "jj!1 = x!2")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst -3 "jj!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "MPlus" -3)
                                      (("2"
                                        (typepred "A(x!2)")
                                        (("2"
                                          (expand "<=")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measure_matrix type-eq-decl nil measures nil)
    (* const-decl "measure_matrix" measures nil)
    (id const-decl "measure_matrix" measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (MPlus const-decl "measures" measures nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (identity? const-decl "bool" operator_defs nil))
   nil)
  (id_is_identity-1 nil 3562867672
   ("" (expand "identity?")
    (("" (skosimp)
      (("" (split)
        (("1" (decompose-equality)
          (("1" (decompose-equality)
            (("1" (expand* "*" "id")
              (("1"
                (name-replace "A" "LAMBDA (k: below(N)):
            (x!1(x!2)(k) + IF k = x!3 THEN 0 ELSE -1 ENDIF)" :hide?
                 nil)
                (("1" (decompose-equality)
                  (("1" (typepred "max(A)")
                    (("1" (hide -1)
                      (("1" (case "max(A) = A(x!3)")
                        (("1" (inst -4 "x!3")
                          (("1" (expand "+" -4)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (typepred "x!1(x!2)(x!3)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (inst -1 "x!3")
                              (("2"
                                (case "jj!1 = x!3")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst -3 "jj!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "+" -3)
                                      (("2"
                                        (expand "<=")
                                        (("2"
                                          (typepred "A(x!3)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (decompose-equality)
          (("2" (decompose-equality)
            (("2" (expand* "*" "id")
              (("2"
                (name-replace "A" "LAMBDA (k: below(N)):
            (IF x!2 = k THEN 0 ELSE -1 ENDIF + x!1(k)(x!3))" :hide?
                 nil)
                (("2" (decompose-equality)
                  (("2" (typepred "max(A)")
                    (("1" (hide -1)
                      (("1" (case "max(A) = A(x!2)")
                        (("1" (inst -4 "x!2")
                          (("1" (expand "+" -4)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (typepred "x!1(x!2)(x!3)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (inst -1 "x!2")
                              (("2"
                                (case "jj!1 = x!2")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst -3 "jj!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "+" -3)
                                      (("2"
                                        (typepred "A(x!2)")
                                        (("2"
                                          (expand "<=")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/"))
   shostak))
 (max_add 0
  (max_add-2 nil 3570287683
   ("" (grind)
    (("1" (typepred "max(LAMBDA (i: below(N)): -1)")
      (("1" (assert) nil nil)) nil)
     ("2" (typepred "max(A!1)")
      (("2" (hide -1 -3 -4)
        (("2"
          (typepred
           "max(LAMBDA (i: below(N)): IF A!1(i) = -1 THEN -1 ELSE 1 ENDIF)")
          (("2" (hide -1)
            (("2" (skeep -2)
              (("2" (inst -3 "jj")
                (("2" (typepred "A!1(jj)") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 1)
      (("3" (typepred "max(A!1)")
        (("3" (hide -1)
          (("3" (skeep -2)
            (("3"
              (typepred
               "max(LAMBDA (i: below(N)): IF A!1(i) = -1 THEN -1 ELSE 1 ENDIF)")
              (("3" (inst -2 "jj")
                (("3" (assert)
                  (("3"
                    (name-replace "AA"
                     "max(LAMBDA (i: below(N)): IF A!1(i) = -1 THEN -1 ELSE 1 ENDIF)")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4"
      (typepred "max(LAMBDA (i: below(N)):
                 IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
      (("4"
        (name-replace "AA" "max(LAMBDA (i: below(N)):
                 IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
        (("4" (typepred "max(A!1)")
          (("4" (skeep -6)
            (("4" (hide -1 -3 -4 -5)
              (("4" (inst -1 "jj")
                (("4" (assert)
                  (("4" (typepred "A!1(jj)") (("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 1 2)
      (("5" (typepred "max(A!1)")
        (("5"
          (typepred "max(LAMBDA (i: below(N)):
                 IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
          (("5"
            (name-replace "AA" "max(LAMBDA (i: below(N)):
                 IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
            (("5" (hide -4 -3 -5)
              (("5" (skeep -3)
                (("5" (inst -2 "jj")
                  (("5" (assert) (("5" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide 1 2)
      (("6" (typepred "max(A!1)")
        (("6" (assert)
          (("6" (hide 1 2)
            (("6"
              (typepred "max(LAMBDA (i: below(N)):
                 IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
              (("6"
                (name-replace "AA" "max(LAMBDA (i: below(N)):
                 IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
                (("6" (skeep -6)
                  (("6" (inst -2 "jj")
                    (("6" (assert)
                      (("6" (assert)
                        (("6" (skeep -3)
                          (("6" (lift-if)
                            (("6" (assert)
                              (("6"
                                (prop)
                                (("6"
                                  (inst -5 "jj!1")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (MPlus const-decl "measures" measures nil))
   nil)
  (max_add-1 nil 3570287581 ("" (postpone) nil nil) nil shostak))
 (measure_matrix_assoc 0
  (measure_matrix_assoc-3 nil 3631280026
   ("" (expand "associative?")
    (("" (skeep)
      (("" (decompose-equality)
        (("" (decompose-equality)
          (("" (expand "*" 1 (2 3))
            ((""
              (typepred
               "max(LAMBDA (k: below(N)): (MPlus((x * y)(x!1)(k) , z(k)(x!2))))")
              ((""
                (name-replace "XY_Z"
                 "max(LAMBDA (k: below(N)): (MPlus((x * y)(x!1)(k) , z(k)(x!2))))")
                ((""
                  (typepred
                   " max(LAMBDA (k: below(N)): (MPlus(x(x!1)(k) , (y * z)(k)(x!2))))")
                  ((""
                    (name-replace "X_YZ"
                     "max(LAMBDA (k: below(N)): (MPlus(x(x!1)(k) , (y * z)(k)(x!2))))")
                    (("" (skolem -3 "Kx_yz")
                      (("" (skolem -6 "Kxy_z")
                        (("" (hide -1 -4)
                          (("" (expand "*" (-2 -4))
                            (("" (lemma "max_add")
                              ((""
                                (inst-cp
                                 -1
                                 "LAMBDA (k: below(N)): (MPlus(x(x!1)(k) , y(k)(Kxy_z)))"
                                 "z(Kxy_z)(x!2)")
                                ((""
                                  (inst
                                   -1
                                   "LAMBDA (k: below(N)): (MPlus(y(Kx_yz)(k) , z(k)(x!2)))"
                                   "x(x!1)(Kx_yz)")
                                  ((""
                                    (replace -2 -6)
                                    ((""
                                      (case-replace
                                       "MPlus(x(x!1)(Kx_yz) ,
              max(LAMBDA (k: below(N)): MPlus(y(Kx_yz)(k) , z(k)(x!2)))) = max(LAMBDA (i: below(N)): MPlus(MPlus(y(Kx_yz)(i) , z(i)(x!2)) , x(x!1)(Kx_yz)))")
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (typepred
                                           "max(LAMBDA (i: below(N)): MPlus(MPlus(y(Kx_yz)(i) , z(i)(x!2)) , x(x!1)(Kx_yz)))")
                                          (("1"
                                            (name-replace
                                             "YZ"
                                             "max(LAMBDA (i: below(N)): MPlus(MPlus(y(Kx_yz)(i) , z(i)(x!2)) , x(x!1)(Kx_yz)))")
                                            (("1"
                                              (typepred
                                               "max(LAMBDA (i: below(N)): MPlus(MPlus(x(x!1)(i) , y(i)(Kxy_z)) , z(Kxy_z)(x!2)))")
                                              (("1"
                                                (name-replace
                                                 "XY"
                                                 "max(LAMBDA (i: below(N)): MPlus(MPlus(x(x!1)(i) , y(i)(Kxy_z)) , z(Kxy_z)(x!2)))")
                                                (("1"
                                                  (skolem -3 "kxy")
                                                  (("1"
                                                    (skolem -6 "kyz")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("1"
                                                                (lemma
                                                                 "max_add")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): MPlus(y(kxy)(k) , z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "MPlus(x(x!1)(kxy) , max(LAMBDA (k: below(N)): MPlus(y(kxy)(k) , z(k)(x!2)))) = max(LAMBDA (i: below(N)): MPlus(MPlus(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): MPlus(MPlus(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand
                                                             "*"
                                                             -5)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("2"
                                                                (lemma
                                                                 "max_add")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): MPlus(y(kxy)(k) , z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("2"
                                                                    (case-replace
                                                                     "MPlus(x(x!1)(kxy) , max(LAMBDA (k: below(N)): MPlus(y(kxy)(k) , z(k)(x!2)))) = max(LAMBDA (i: below(N)): MPlus(MPlus(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): MPlus(MPlus(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replaces -1)
                                                        (("3"
                                                          (replaces -1)
                                                          (("3"
                                                            (expand
                                                             "*"
                                                             -7)
                                                            (("3"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("3"
                                                                (lemma
                                                                 "max_add")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): MPlus(x(x!1)(k) , y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("3"
                                                                    (replaces
                                                                     -1)
                                                                    (("3"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): MPlus(MPlus(x(x!1)(i) , y(i)(kyz)) , z(kyz)(x!2)))")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (hide
                                                                           -3)
                                                                          (("3"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("3"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (replaces -1)
                                                        (("4"
                                                          (replaces -1)
                                                          (("4"
                                                            (expand
                                                             "*"
                                                             -7)
                                                            (("4"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("4"
                                                                (lemma
                                                                 "max_add")
                                                                (("4"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): MPlus(x(x!1)(k) , y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("4"
                                                                    (replaces
                                                                     -1)
                                                                    (("4"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): MPlus(MPlus(x(x!1)(i) , y(i)(kyz)) , z(kyz)(x!2)))")
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (hide
                                                                           -3)
                                                                          (("4"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("4"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (replaces -1)
                                                        (("5"
                                                          (replaces -1)
                                                          (("5"
                                                            (expand
                                                             "*"
                                                             -7)
                                                            (("5"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("5"
                                                                (lemma
                                                                 "max_add")
                                                                (("5"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): MPlus(x(x!1)(k) , y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("5"
                                                                    (replaces
                                                                     -1)
                                                                    (("5"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): MPlus(MPlus(x(x!1)(i) , y(i)(kyz)) , z(kyz)(x!2)))")
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (hide
                                                                           -3)
                                                                          (("5"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("5"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (replaces -1)
                                                        (("6"
                                                          (replaces -1)
                                                          (("6"
                                                            (expand
                                                             "*"
                                                             -5)
                                                            (("6"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("6"
                                                                (lemma
                                                                 "max_add")
                                                                (("6"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): MPlus(y(kxy)(k) , z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("6"
                                                                    (case-replace
                                                                     "MPlus(x(x!1)(kxy) , max(LAMBDA (k: below(N)): MPlus(y(kxy)(k) , z(k)(x!2)))) = max(LAMBDA (i: below(N)): MPlus(MPlus(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): MPlus(MPlus(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (MPlus const-decl "measures" measures nil)
    (max_add formula-decl nil measures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (* const-decl "measure_matrix" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (associative? const-decl "bool" operator_defs nil))
   nil)
  (measure_matrix_assoc-2 nil 3572774815
   ("" (expand "associative?")
    (("" (skeep)
      (("" (decompose-equality)
        (("" (decompose-equality)
          (("" (expand "*" 1 (2 3))
            ((""
              (typepred
               "max(LAMBDA (k: below(N)): ((x * y)(x!1)(k) + z(k)(x!2)))")
              ((""
                (name-replace "XY_Z"
                 "max(LAMBDA (k: below(N)): ((x * y)(x!1)(k) + z(k)(x!2)))")
                ((""
                  (typepred
                   " max(LAMBDA (k: below(N)): (x(x!1)(k) + (y * z)(k)(x!2)))")
                  ((""
                    (name-replace "X_YZ"
                     "max(LAMBDA (k: below(N)): (x(x!1)(k) + (y * z)(k)(x!2)))")
                    (("" (skolem -3 "Kx_yz")
                      (("" (skolem -6 "Kxy_z")
                        (("" (hide -1 -4)
                          (("" (expand "*" (-2 -4))
                            (("" (lemma "max_add")
                              ((""
                                (inst-cp
                                 -1
                                 "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(Kxy_z))"
                                 "z(Kxy_z)(x!2)")
                                ((""
                                  (inst
                                   -1
                                   "LAMBDA (k: below(N)): (y(Kx_yz)(k) + z(k)(x!2))"
                                   "x(x!1)(Kx_yz)")
                                  ((""
                                    (replace -2 -6)
                                    ((""
                                      (case-replace
                                       "(x(x!1)(Kx_yz) +
          max(LAMBDA (k: below(N)): (y(Kx_yz)(k) + z(k)(x!2)))) = max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (typepred
                                           "max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                          (("1"
                                            (name-replace
                                             "YZ"
                                             "max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                            (("1"
                                              (typepred
                                               "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(Kxy_z)) + z(Kxy_z)(x!2))")
                                              (("1"
                                                (name-replace
                                                 "XY"
                                                 "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(Kxy_z)) + z(Kxy_z)(x!2))")
                                                (("1"
                                                  (skolem -3 "kxy")
                                                  (("1"
                                                    (skolem -6 "kyz")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("1"
                                                                (lemma
                                                                 "max_add")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "x(x!1)(kxy) + max(LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))) = max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand
                                                             "*"
                                                             -5)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("2"
                                                                (lemma
                                                                 "max_add")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("2"
                                                                    (case-replace
                                                                     "(x(x!1)(kxy) + max(LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2)))) = max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replaces -1)
                                                        (("3"
                                                          (replaces -1)
                                                          (("3"
                                                            (expand
                                                             "*"
                                                             -7)
                                                            (("3"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("3"
                                                                (lemma
                                                                 "max_add")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("3"
                                                                    (replaces
                                                                     -1)
                                                                    (("3"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(kyz)) + z(kyz)(x!2))")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (hide
                                                                           -3)
                                                                          (("3"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("3"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (replaces -1)
                                                        (("4"
                                                          (replaces -1)
                                                          (("4"
                                                            (expand
                                                             "*"
                                                             -7)
                                                            (("4"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("4"
                                                                (lemma
                                                                 "max_add")
                                                                (("4"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("4"
                                                                    (replaces
                                                                     -1)
                                                                    (("4"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(kyz)) + z(kyz)(x!2))")
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (hide
                                                                           -3)
                                                                          (("4"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("4"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (replaces -1)
                                                        (("5"
                                                          (replaces -1)
                                                          (("5"
                                                            (expand
                                                             "*"
                                                             -7)
                                                            (("5"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("5"
                                                                (lemma
                                                                 "max_add")
                                                                (("5"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("5"
                                                                    (replaces
                                                                     -1)
                                                                    (("5"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(kyz)) + z(kyz)(x!2))")
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (hide
                                                                           -3)
                                                                          (("5"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("5"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (replaces -1)
                                                        (("6"
                                                          (replaces -1)
                                                          (("6"
                                                            (expand
                                                             "*"
                                                             -5)
                                                            (("6"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("6"
                                                                (lemma
                                                                 "max_add")
                                                                (("6"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("6"
                                                                    (case-replace
                                                                     "x(x!1)(kxy) + max(LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))) = max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/"))
   nil)
  (measure_matrix_assoc-1 nil 3572772046
   ("" (expand "associative?")
    (("" (skeep)
      (("" (decompose-equality)
        (("" (decompose-equality)
          (("" (expand "*" 1 (2 3))
            ((""
              (typepred
               "max(LAMBDA (k: below(N)): ((x * y)(x!1)(k) + z(k)(x!2)))")
              ((""
                (name-replace "XY_Z"
                 "max(LAMBDA (k: below(N)): ((x * y)(x!1)(k) + z(k)(x!2)))")
                ((""
                  (typepred
                   " max(LAMBDA (k: below(N)): (x(x!1)(k) + (y * z)(k)(x!2)))")
                  ((""
                    (name-replace "X_YZ"
                     "max(LAMBDA (k: below(N)): (x(x!1)(k) + (y * z)(k)(x!2)))")
                    (("" (skolem -3 "Kx_yz")
                      (("" (skolem -6 "Kxy_z")
                        (("" (hide -1 -4)
                          (("" (expand "*" (-2 -4))
                            (("" (lemma "max_add")
                              ((""
                                (inst-cp
                                 -1
                                 "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(Kxy_z))"
                                 "z(Kxy_z)(x!2)")
                                ((""
                                  (inst
                                   -1
                                   "LAMBDA (k: below(N)): (y(Kx_yz)(k) + z(k)(x!2))"
                                   "x(x!1)(Kx_yz)")
                                  ((""
                                    (replace -2 -6)
                                    ((""
                                      (case-replace
                                       "(x(x!1)(Kx_yz) +
          max(LAMBDA (k: below(N)): (y(Kx_yz)(k) + z(k)(x!2)))) = max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (typepred
                                           "max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                          (("1"
                                            (name-replace
                                             "YZ"
                                             "max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                            (("1"
                                              (typepred
                                               "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(Kxy_z)) + z(Kxy_z)(x!2))")
                                              (("1"
                                                (name-replace
                                                 "XY"
                                                 "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(Kxy_z)) + z(Kxy_z)(x!2))")
                                                (("1"
                                                  (skolem -3 "kxy")
                                                  (("1"
                                                    (skolem -6 "kyz")
                                                    (("1"
                                                      (replaces -8)
                                                      (("1"
                                                        (replaces -9)
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (positive_multiplication 0
  (positive_multiplication-3 nil 3631283018
   ("" (skeep)
    (("" (prop)
      (("1" (expand "positive?")
        (("1" (skeep)
          (("1" (expand "*")
            (("1"
              (typepred
               "max(LAMBDA (k: below(N)): MPlus(m1(j)(k) , m2(k)(j)))")
              (("1" (hide -1 -2)
                (("1" (skeep)
                  (("1" (replaces -2) (("1" (inst 1 "j" "jj") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "positive?")
          (("2" (expand "*")
            (("2" (inst 1 "j")
              (("2"
                (typepred
                 "max(LAMBDA (k: below(N)): MPlus(m1(j)(k) , m2(k)(j)))")
                (("2" (hide -3)
                  (("2" (inst -2 "k")
                    (("2" (replaces -3) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((measure_matrix type-eq-decl nil measures nil)
    (MPlus const-decl "measures" measures nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (* const-decl "measure_matrix" measures nil)
    (positive? const-decl "bool" measures nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (positive_multiplication-2 nil 3575901626
   ("" (skeep)
    (("" (prop)
      (("1" (expand "positive?")
        (("1" (skeep)
          (("1" (expand "*")
            (("1"
              (typepred
               "max(LAMBDA (k: below(N)): (m1(j)(k) + m2(k)(j)))")
              (("1" (hide -1 -2)
                (("1" (skeep)
                  (("1" (replaces -2) (("1" (inst 1 "j" "jj") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "positive?")
          (("2" (expand "*")
            (("2" (inst 1 "j")
              (("2"
                (typepred
                 "max(LAMBDA (k: below(N)): (m1(j)(k) + m2(k)(j)))")
                (("2" (hide -3)
                  (("2" (inst -2 "k")
                    (("2" (replaces -3) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/"))
   nil)
  (positive_multiplication-1 nil 3563705220
   ("" (skeep)
    (("" (prop)
      (("1" (expand* "positive?" "positive?")
        (("1" (skeep -1)
          (("1" (expand "*")
            (("1"
              (name-replace "A"
               "LAMBDA (k: below(N)): (m1(j)(k) + m2(k)(j))" :hide?
               nil)
              (("1" (typepred "max(A)")
                (("1" (assert)
                  (("1" (skeep -3)
                    (("1" (inst 1 "j" "jj")
                      (("1" (split)
                        (("1" (flatten)
                          (("1" (replace -4 -3 rl)
                            (("1" (assert)
                              (("1"
                                (replace -4)
                                (("1"
                                  (expand "+" -3)
                                  (("1"
                                    (lift-if)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -4 -3 rl)
                          (("2" (assert)
                            (("2" (replace -4)
                              (("2"
                                (expand "+" -3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (replace -4 -3 rl)
                          (("3" (assert)
                            (("3" (replace -4)
                              (("3"
                                (expand "+" -3)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* "positive?" "positive?")
        (("2" (skeep -1)
          (("2" (inst 3 "j")
            (("2" (expand "*")
              (("2"
                (name-replace "A"
                 "LAMBDA (k: below(N)): (m1(j)(k) + m2(k)(j))" :hide?
                 nil)
                (("2" (split)
                  (("1" (typepred "max(A)")
                    (("1" (assert)
                      (("1" (split)
                        (("1" (hide -3)
                          (("1" (inst -2 "k")
                            (("1" (replace -4 -2 rl)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (expand "+" -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "k")
                          (("2" (assert)
                            (("2" (replace -5 -2 rl)
                              (("2"
                                (assert)
                                (("2"
                                  (replace -5)
                                  (("2"
                                    (expand "+" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "max(A)")
                    (("2" (assert)
                      (("2" (hide -3)
                        (("2" (split)
                          (("1" (inst -2 "k")
                            (("1" (replace -4 -2 rl)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (expand "+" -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "k")
                            (("2" (replace -4 -2 rl)
                              (("2"
                                (assert)
                                (("2"
                                  (replace -4)
                                  (("2"
                                    (expand "+" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/"))
   shostak))
 (positive_commute 0
  (positive_commute-1 nil 3572298174
   ("" (skeep)
    (("" (rewrite "positive_multiplication")
      (("" (rewrite "positive_multiplication")
        (("" (skeep)
          (("" (inst 1 "k" "j") (("" (rewrite "add_commute") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_multiplication formula-decl nil measures nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (add_commute formula-decl nil measures nil))
   shostak))
 (positive_mult_pos 0
  (positive_mult_pos-1 nil 3579628915
   ("" (skeep)
    (("" (expand "*")
      ((""
        (name-replace "M"
         "max(LAMBDA (k_1: below(N)): MPlus(m1(k)(k_1) , m2(k_1)(k)))")
        (("" (typepred "M")
          (("" (hide -3)
            (("" (inst -2 "k")
              (("" (expand "MPlus") (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "measure_matrix" measures nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (measure_matrix type-eq-decl nil measures nil)
    (MPlus const-decl "measures" measures nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil))
   shostak))
 (positive_sum 0
  (positive_sum-1 nil 3572272345
   ("" (skeep)
    (("" (expand* "positive?" "positive?")
      (("" (skosimp)
        (("" (expand "+")
          (("" (expand "MPlus")
            (("" (lift-if)
              (("" (ground)
                (("1" (inst 3 "j!1") nil nil)
                 ("2" (inst 4 "j!1") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive? const-decl "bool" measures nil)
    (+ const-decl "measure_matrix" measures nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (MPlus const-decl "measures" measures nil))
   shostak))
 (positive_sum_positive_mult 0
  (positive_sum_positive_mult-1 nil 3564275031
   ("" (skeep)
    (("" (rewrite "positive_multiplication")
      (("" (expand "positive?")
        (("" (skeep)
          (("" (expand "+" -1) (("" (inst 1 "j" "j") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_multiplication formula-decl nil measures nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (+ const-decl "measure_matrix" measures nil)
    (positive? const-decl "bool" measures nil))
   shostak))
 (compatible_is_positive 0
  (compatible_is_positive-2 nil 3575927794
   ("" (skeep)
    (("" (expand "compatible?")
      (("" (rewrite "positive_multiplication")
        (("" (skeep) (("" (inst 1 "j" "j") nil nil)) nil)) nil))
      nil))
    nil)
   ((compatible? const-decl "bool" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (positive_multiplication formula-decl nil measures nil))
   nil)
  (compatible_is_positive-1 nil 3572299450
   ("" (skeep)
    (("" (rewrite "positive_multiplication")
      (("" (expand "compatible?")
        (("" (skeep)
          (("" (expand "*" -1)
            ((""
              (typepred
               "max(LAMBDA (k: below(N)): (m3(j)(k) + m1(k)(j)))")
              ((""
                (name-replace "M_31"
                 "max(LAMBDA (k: below(N)): (m3(j)(k) + m1(k)(j)))")
                (("" (hide -1 -2)
                  (("" (skolem -1 "k")
                    (("" (inst 1 "k" "j")
                      (("" (replace -1 -2 rl)
                        (("" (hide -1)
                          (("" (expand "*" 1)
                            ((""
                              (typepred
                               "max(LAMBDA (k_1: below(N)): (m1(k)(k_1) + m2(k_1)(j)))")
                              ((""
                                (name-replace
                                 "M_12"
                                 "max(LAMBDA (k_1: below(N)): (m1(k)(k_1) + m2(k_1)(j)))")
                                ((""
                                  (hide -3)
                                  ((""
                                    (inst -2 "j")
                                    (("" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/"))
   shostak))
 (compatible_positive_grafting 0
  (compatible_positive_grafting-1 nil 3575927827
   ("" (skeep)
    (("" (rewrite "positive_multiplication")
      (("" (lemma "compatible_is_positive")
        (("" (inst -1 "m2" "m3*m1")
          (("" (assert)
            (("" (hide -2)
              (("" (lemma "measure_matrix_assoc")
                (("" (expand "associative?")
                  (("" (inst -1 "m2" "m3" "m1")
                    (("" (replace -1 -2 rl)
                      (("" (hide -1)
                        (("" (lemma "positive_commute")
                          (("" (inst -1 "m2 * m3" "m1")
                            (("" (assert)
                              ((""
                                (hide -2)
                                ((""
                                  (lemma "measure_matrix_assoc")
                                  ((""
                                    (expand "associative?")
                                    ((""
                                      (inst -1 "m1" "m2" "m3")
                                      ((""
                                        (replace -1 -2 rl)
                                        ((""
                                          (hide -1)
                                          ((""
                                            (rewrite
                                             "positive_multiplication")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_multiplication formula-decl nil measures nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (* const-decl "measure_matrix" measures nil)
    (associative? const-decl "bool" operator_defs nil)
    (positive_commute formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (compatible_is_positive formula-decl nil measures nil))
   shostak))
 (defined_pos_mul 0
  (defined_pos_mul-1 nil 3589198898
   ("" (skeep)
    (("" (expand "defined_pos?")
      (("" (flatten)
        (("" (expand "*")
          ((""
            (typepred
             "max(LAMBDA (k_1: below(N)): MPlus(m1(i)(k_1) , m2(k_1)(k)))")
            (("" (hide -1 -3)
              (("" (inst -1 "j")
                (("" (replace -2 -1)
                  (("" (hide -2)
                    (("" (expand "MPlus")
                      (("" (assert)
                        (("" (lift-if) (("" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((defined_pos? const-decl "bool" measures nil)
    (* const-decl "measure_matrix" measures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (MPlus const-decl "measures" measures nil)
    (measure_matrix type-eq-decl nil measures nil))
   nil))
 (defined_pos_decomposition 0
  (defined_pos_decomposition-1 nil 3590507616
   ("" (skeep)
    (("" (prop)
      (("1" (expand "defined_pos?")
        (("1" (expand "*")
          (("1"
            (name-replace "M"
             "max(LAMBDA (k: below(N)): MPlus(m1(i)(k),m2(k)(j)))")
            (("1" (typepred "M")
              (("1" (hide -1 -2)
                (("1" (skeep)
                  (("1" (inst 2 "jj")
                    (("1" (expand "MPlus")
                      (("1" (lift-if)
                        (("1" (assert) (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "defined_pos?")
          (("2" (flatten)
            (("2" (expand "*")
              (("2"
                (name-replace "M"
                 "max(LAMBDA (k: below(N)): MPlus(m1(i)(k),m2(k)(j)))")
                (("2" (typepred "M")
                  (("2" (hide -1 -3)
                    (("2" (inst -1 "k")
                      (("2" (expand "MPlus")
                        (("2" (assert)
                          (("2" (lift-if) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "measure_matrix" measures nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (measure_matrix type-eq-decl nil measures nil)
    (MPlus const-decl "measures" measures nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (defined_pos? const-decl "bool" measures nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (positive_pos_mul 0
  (positive_pos_mul-1 nil 3589236009
   ("" (skeep)
    (("" (expand "*")
      ((""
        (name-replace "M"
         "max(LAMBDA (k_1: below(N)): MPlus(m1(i)(k_1) , m2(k_1)(k)))")
        (("" (typepred "M")
          (("" (assert)
            (("" (hide -3)
              (("" (inst -2 "j") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "measure_matrix" measures nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (measure_matrix type-eq-decl nil measures nil)
    (MPlus const-decl "measures" measures nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (measures type-eq-decl nil measures nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil))
   shostak))
 (positive_pos_decomposition 0
  (positive_pos_decomposition-1 nil 3590612558
   ("" (skeep)
    (("" (prop)
      (("1" (expand "*")
        (("1"
          (name-replace "M"
           "max(LAMBDA (k: below(N)): MPlus(m1(i)(k),m2(k)(j)))")
          (("1" (typepred "M")
            (("1" (hide -1 -2) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (expand "*")
        (("2"
          (name-replace "M"
           "max(LAMBDA (k: below(N)): MPlus(m1(i)(k),m2(k)(j)))")
          (("2" (typepred "M")
            (("2" (hide -3)
              (("2" (skeep)
                (("2" (inst -2 "k") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (measures type-eq-decl nil measures nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (MPlus const-decl "measures" measures nil)
    (measure_matrix type-eq-decl nil measures nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "measure_matrix" measures nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)))

