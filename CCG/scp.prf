(scp
 (scp_termination 0
  (scp_termination-1 nil 3651143328
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "scp_termination?")
          (("1" (skeep) (("1" (inst?) nil nil)) nil)) nil))
        nil)
       ("2" (flatten)
        (("2" (expand "scp_termination?")
          (("2" (skeep)
            (("2" (inst?)
              (("2" (assert)
                (("2" (skeep)
                  (("2" (typepred "r")
                    (("2" (use "no_infinite_descending_sequence")
                      (("2" (assert)
                        (("2" (expand "empty?")
                          (("2" (inst -1 "vals")
                            (("2" (expand "member")
                              (("2"
                                (expand "descending?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_termination? const-decl "bool" scp nil)
    (seq_val type-eq-decl nil scp nil)
    (Val formal-type-decl nil scp nil)
    (CCs formal-subtype-decl nil scp nil)
    (CCs_pred const-decl
     "[[nat -> CallingContext[Expr, Conditions, Vr]] -> boolean]" scp
     nil)
    (Seq_cc type-eq-decl nil cc_def nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Vr formal-subtype-decl nil scp nil)
    (Vr_pred const-decl "[Expr -> boolean]" scp nil)
    (Conditions formal-type-decl nil scp nil)
    (Expr formal-type-decl nil scp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness
     "orders/")
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (descending? const-decl "bool" monotone_sequences "orders/")
    (sequence type-eq-decl nil sequences nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak)))

