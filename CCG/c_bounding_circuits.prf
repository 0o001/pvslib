(c_bounding_circuits
 (IMP_c_weighted_digraphs_TCC1 0
  (IMP_c_weighted_digraphs_TCC1-1 nil 3660126139
   ("" (rewrite "measure_matrix_assoc") nil nil)
   ((N formal-const-decl "posnat" c_bounding_circuits nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_matrix_assoc formula-decl nil measures nil))
   nil))
 (IMP_c_weighted_digraphs_TCC2 0
  (IMP_c_weighted_digraphs_TCC2-1 nil 3660126139
   ("" (rewrite "id_is_identity") nil nil)
   ((N formal-const-decl "posnat" c_bounding_circuits nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (id_is_identity formula-decl nil measures nil))
   nil))
 (IMP_bounding_circuits__TCC1 0
  (IMP_bounding_circuits__TCC1-1 nil 3660126139
   ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil c_bounding_circuits nil)
    (vert const-decl "bool" c_digraphs_def "digraphs/")
    (edges const-decl "bool" c_digraphs_def "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" c_bounding_circuits nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (wgd_dg const-decl "[wgd_type -> digraph_type]"
     c_weighted_digraphs_def "digraphs/"))
   nil))
 (IMP_bounding_circuits__TCC2 0
  (IMP_bounding_circuits__TCC2-1 nil 3660126139
   ("" (use "concretedigraph_implements_abstractdigraph") nil nil)
   ((make_c_wdg const-decl "wgd_type" c_weighted_digraphs_def
     "digraphs/")
    (get_value def-decl "Weight" c_weighted_digraphs_def "digraphs/")
    (has_key? const-decl "bool" c_weighted_digraphs_def "digraphs/")
    (get_wgt const-decl "Weight" c_weighted_digraphs_def "digraphs/")
    (edges const-decl "bool" c_digraphs_def "digraphs/")
    (c_digraph type-eq-decl nil c_digraphs_def "digraphs/")
    (wgd_dg const-decl "[wgd_type -> digraph_type]"
     c_weighted_digraphs_def "digraphs/")
    (wgd_type type-eq-decl nil c_weighted_digraphs_def "digraphs/")
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def
     "digraphs/")
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_type type-eq-decl nil c_digraphs_imp "digraphs/")
    (cdigraph const-decl "bool" c_digraphs_def "digraphs/")
    (ComputableDigraph type-eq-decl nil c_digraphs_def "digraphs/")
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" c_bounding_circuits nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil c_bounding_circuits nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil
     weighted_digraphs_abs "digraphs/"))
   nil))
 (IMP_bounding_circuits__TCC3 0
  (IMP_bounding_circuits__TCC3-1 nil 3660126139
   ("" (use "concretewd_implements_abstractwd") nil nil)
   ((make_c_wdg const-decl "wgd_type" c_weighted_digraphs_def
     "digraphs/")
    (get_value def-decl "Weight" c_weighted_digraphs_def "digraphs/")
    (has_key? const-decl "bool" c_weighted_digraphs_def "digraphs/")
    (get_wgt const-decl "Weight" c_weighted_digraphs_def "digraphs/")
    (edges const-decl "bool" c_digraphs_def "digraphs/")
    (c_digraph type-eq-decl nil c_digraphs_def "digraphs/")
    (wgd_dg const-decl "[wgd_type -> digraph_type]"
     c_weighted_digraphs_def "digraphs/")
    (wgd_type type-eq-decl nil c_weighted_digraphs_def "digraphs/")
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def
     "digraphs/")
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_type type-eq-decl nil c_digraphs_imp "digraphs/")
    (cdigraph const-decl "bool" c_digraphs_def "digraphs/")
    (ComputableDigraph type-eq-decl nil c_digraphs_def "digraphs/")
    (id const-decl "Measure_Matrix" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" c_bounding_circuits nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil c_bounding_circuits nil)
    (concretewd_implements_abstractwd formula-decl nil
     weighted_digraphs_ "digraphs/"))
   nil)))

