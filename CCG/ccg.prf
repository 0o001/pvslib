(ccg
 (gte_mc?_TCC1 0
  (gte_mc?_TCC1-1 nil 3589197839 ("" (subtype-tcc) nil nil) nil nil))
 (gte_mc?_TCC2 0
  (gte_mc?_TCC2-1 nil 3589197839 ("" (subtype-tcc) nil nil) nil nil))
 (gte_mc?_TCC3 0
  (gte_mc?_TCC3-1 nil 3589197839 ("" (subtype-tcc) nil nil) nil nil))
 (ccg_termination?_TCC1 0
  (ccg_termination?_TCC1-1 nil 3617653700 ("" (subtype-tcc) nil nil)
   nil nil))
 (gt_to_gte 0
  (gt_to_gte-1 nil 3589197852
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep) (("" (expand "gt_mc?") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (gt_mc? const-decl "bool" ccg nil))
   shostak))
 (gte_mc_comp_TCC1 0
  (gte_mc_comp_TCC1-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil)
    (Vars formal-subtype-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg nil)
    (Exprs formal-type-decl nil ccg nil)
    (Vals formal-type-decl nil ccg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil))
   nil))
 (gte_mc_comp_TCC2 0
  (gte_mc_comp_TCC2-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil)
    (Vars formal-subtype-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg nil)
    (Exprs formal-type-decl nil ccg nil)
    (Vals formal-type-decl nil ccg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil))
   nil))
 (gte_mc_comp_TCC3 0
  (gte_mc_comp_TCC3-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg nil)
    (Exprs formal-type-decl nil ccg nil)
    (last const-decl "T" seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil)
    (Vals formal-type-decl nil ccg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil))
   nil))
 (gte_mc_comp_TCC4 0
  (gte_mc_comp_TCC4-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg nil)
    (Exprs formal-type-decl nil ccg nil)
    (last const-decl "T" seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil)
    (Vals formal-type-decl nil ccg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil))
   nil))
 (gte_mc_comp_TCC5 0
  (gte_mc_comp_TCC5-1 nil 3590508528
   ("" (skeep)
    (("" (typepred "w1" "mc1" "w2" "mc2")
      (("" (hide-all-but (-3 -6 1))
        (("" (expand* "o" "rest" "^" "min" "empty_seq")
          (("" (replaces -1) (("" (replaces -1) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((measures_combination type-eq-decl nil ccg nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg nil)
    (Vals formal-type-decl nil ccg nil)
    (walk? const-decl "bool" walks "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (prewalk type-eq-decl nil walks "digraphs/")
    (finseq type-eq-decl nil finite_sequences nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (Conditions formal-type-decl nil ccg nil)
    (Exprs formal-type-decl nil ccg nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil))
   nil))
 (gte_mc_comp_TCC6 0
  (gte_mc_comp_TCC6-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measures_combination type-eq-decl nil ccg nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (edge? const-decl "bool" digraphs "digraphs/")
    (verts_in? const-decl "bool" walks "digraphs/")
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil)
    (Vars formal-subtype-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg nil)
    (Exprs formal-type-decl nil ccg nil)
    (Vals formal-type-decl nil ccg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (last const-decl "T" seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (O const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (gte_mc_comp 0
  (gte_mc_comp-1 nil 3590508528
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep*)
      (("" (expand "gte_mc?")
        (("" (assert)
          (("" (skeep)
            (("" (typepred "i")
              (("" (expand "o" -1)
                (("" (case "i < w1`length - 1")
                  (("1" (expand "o")
                    (("1" (assert) (("1" (inst -3 "i") nil nil)) nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (case "length(w2) = 1")
                      (("1" (expand "rest" -2)
                        (("1" (expand "^" -2)
                          (("1" (assert)
                            (("1" (expand "empty_seq")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "i = w1`length - 1")
                        (("1" (expand "o")
                          (("1" (assert)
                            (("1" (expand "rest")
                              (("1"
                                (expand "^")
                                (("1"
                                  (expand* "last" "first")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "mc1")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -5)
                                              (("1"
                                                (replace -6)
                                                (("1"
                                                  (inst -4 "0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "o")
                          (("2" (assert)
                            (("2" (expand "rest")
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "min")
                                  (("2"
                                    (typepred "mc1")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (inst -3 "1 - w1`length + i")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (Walk type-eq-decl nil walks "digraphs/")
    (CCG type-eq-decl nil ccg_def nil)
    (Measures type-eq-decl nil ccg_def nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg nil)
    (Vals formal-type-decl nil ccg nil)
    (walk? const-decl "bool" walks "digraphs/")
    (digraph type-eq-decl nil digraphs "digraphs/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (prewalk type-eq-decl nil walks "digraphs/")
    (> const-decl "bool" reals nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Vars formal-subtype-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (Conditions formal-type-decl nil ccg nil)
    (Exprs formal-type-decl nil ccg nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (i skolem-const-decl "below(length(w1 o rest(w2)) - 1)" ccg nil)
    (w2 skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G))" ccg nil)
    (w1 skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G))" ccg nil)
    (G skolem-const-decl "CCG[Vals, Exprs, Conditions, Vars, MT, >, N]"
     ccg nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (first const-decl "T" seq_extras "structures/")
    (last const-decl "T" seq_extras "structures/")
    (measures_combination type-eq-decl nil ccg nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (gte_mc? const-decl "bool" ccg nil))
   nil))
 (gte_mc_sub_walk_TCC1 0
  (gte_mc_sub_walk_TCC1-1 nil 3611241472 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measures_combination type-eq-decl nil ccg nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil)
    (Vars formal-subtype-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg nil)
    (Exprs formal-type-decl nil ccg nil)
    (Vals formal-type-decl nil ccg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (gte_mc_sub_walk_TCC2 0
  (gte_mc_sub_walk_TCC2-1 nil 3611241472 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measures_combination type-eq-decl nil ccg nil)
    (verts_in? const-decl "bool" walks "digraphs/")
    (edge? const-decl "bool" digraphs "digraphs/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil)
    (Vars formal-subtype-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Conditions formal-type-decl nil ccg nil)
    (Exprs formal-type-decl nil ccg nil)
    (Vals formal-type-decl nil ccg nil)
    (>= const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (gte_mc_sub_walk 0
  (gte_mc_sub_walk-1 nil 3611241638
   ("" (skeep)
    (("" (expand "gte_mc?")
      (("" (assert)
        (("" (expand "finseq_appl")
          (("" (skosimp)
            (("" (expand "^")
              (("" (inst -2 "i!1 + i")
                (("1" (assert) nil nil)
                 ("2" (typepred "i!1")
                  (("2" (expand "^" -1)
                    (("2" (expand "min")
                      (("2" (typepred "i" "j") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gte_mc? const-decl "bool" ccg nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (Exprs formal-type-decl nil ccg nil)
    (Conditions formal-type-decl nil ccg nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (Vars formal-subtype-decl nil ccg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (walk? const-decl "bool" walks "digraphs/")
    (Vals formal-type-decl nil ccg nil)
    (MT formal-type-decl nil ccg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg nil)
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (G skolem-const-decl "CCG[Vals, Exprs, Conditions, Vars, MT, >, N]"
     ccg nil)
    (Walk type-eq-decl nil walks "digraphs/")
    (w skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G))" ccg nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(w))" ccg nil)
    (j skolem-const-decl "below(length(w))" ccg nil)
    (i!1 skolem-const-decl "below(length(w ^ (i, j)) - 1)" ccg nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (gt_mc_comp 0
  (gt_mc_comp-1 nil 3590517387
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep*)
      (("" (expand "gt_mc?" 1)
        (("" (assert)
          (("" (split 1)
            (("1" (hide -3 -4 -5)
              (("1" (lemma "gte_mc_comp")
                (("1" (inst -1 "G" "w1" "w2" "mc1" "mc2")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (split)
              (("1" (expand "gt_mc?")
                (("1" (skeep)
                  (("1" (assert)
                    (("1" (typepred "i")
                      (("1" (inst 1 "i")
                        (("1" (expand "o") (("1" (propax) nil nil))
                          nil)
                         ("2" (expand "o")
                          (("2" (expand "rest")
                            (("2" (expand "^")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "min")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (expand "empty_seq")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "gt_mc?")
                (("2" (skeep)
                  (("2" (assert)
                    (("2" (typepred "i")
                      (("2" (inst 1 "i + length(w1) - 1")
                        (("1" (expand "o")
                          (("1" (assert)
                            (("1" (case "i = 0")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand* "first" "last")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -6)
                                          (("1"
                                            (typepred "mc1")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -8)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "rest")
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "rest")
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (typepred "mc1")
                                      (("2"
                                        (replace -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand* "o" "rest" "^" "min")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (G skolem-const-decl "CCG[Vals, Exprs, Conditions, Vars, MT, >, N]"
     ccg nil)
    (w1 skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G))" ccg nil)
    (i skolem-const-decl "below(length(w1) - 1)" ccg nil)
    (O const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (w2 skolem-const-decl
     "Walk[CallingContext[Exprs, Conditions, Vars]](dg(G))" ccg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (last const-decl "T" seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (i skolem-const-decl "below(length(w2) - 1)" ccg nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Exprs formal-type-decl nil ccg nil)
    (Conditions formal-type-decl nil ccg nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars_pred const-decl "[Exprs -> boolean]" ccg nil)
    (Vars formal-subtype-decl nil ccg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (digraph type-eq-decl nil digraphs "digraphs/")
    (Vals formal-type-decl nil ccg nil)
    (MT formal-type-decl nil ccg nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (> formal-const-decl "(well_founded?[MT])" ccg nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg nil)
    (Measures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks "digraphs/")
    (edgetype type-eq-decl nil digraphs "digraphs/")
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (walk? const-decl "bool" walks "digraphs/")
    (Walk type-eq-decl nil walks "digraphs/")
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measures_combination type-eq-decl nil ccg nil)
    (gte_mc_comp formula-decl nil ccg nil)
    (gt_mc? const-decl "bool" ccg nil))
   shostak)))

