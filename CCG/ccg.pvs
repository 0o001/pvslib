%********************************************************************************%
%                                                                                %
%   Authors:                                                                     %
%                                                                                %
%       Andréia Borges Avelar -- Universidade de Brasília - Brasil               %
%       Mauricio Ayala-Rincon -- Universidade de Brasília - Brasil               %
%                 Cesar Muñoz -- NASA Langley Research Center - US               %
%                                                                                %
%********************************************************************************%
%                    last modified: Mar - 03 - 2014                              %
%********************************************************************************%

ccg[Val,Expr,Condition: TYPE, MT: TYPE, lt : (well_founded?[MT]), N: posnat,
    semantic_rel:PRED[[Expr,Val,Val]],eval_conds:PRED[[Condition,Val]]]: THEORY
BEGIN

 IMPORTING ccg_def[Val,Expr,Condition,MT,lt,N]

% ------------------------------------------------------------------------------- %
%                      On sequences of call contexts
% ------------------------------------------------------------------------------- %

 G:   VAR CCG
 w:   VAR prewalk
 e:   VAR edgetype
 m,n: VAR nat
 i,j: VAR below(N)
 M:   VAR FunMeasures
 c:   VAR CallingContext

 measures_combination(w): TYPE =
   {seq: finseq[below[N]] | length(seq) = length(w)}

 gt(M,c,i,j,(oreq:bool)): bool = FORALL(env:Environment,val1,val2:Val): 
     eval_conds(c`conds,env) AND
     semantic_rel(c`actuals,env,val2) 
   IMPLIES
     ge(M(i)(val1),M(j)(val2)) AND (M(i)(val1) = M(j)(val2) IMPLIES oreq)

 gte_mc?(M,w)(mc: measures_combination(w)): bool =
   FORALL(i:below(length(w)-1)): gt(M,w`seq(i),mc(i),mc(i+1),TRUE)  

 gt_mc?(M,w)(mc: measures_combination(w)): bool =
   gte_mc?(M, w)(mc) AND
   EXISTS(i:below(length(w)-1)): gt(M,w`seq(i),mc(i),mc(i+1),FALSE)
  
 ccg_termination?(G): bool =
   FORALL(c: prewalk | circuit?(dg(G), c)):
     EXISTS(mc: measures_combination(c) | first(mc) = last(mc)):
       gt_mc?(ms(G),c)(mc)

% ------------------------------------------------------------------------------- %

 gt_to_gte: LEMMA
   FORALL(w: Walk(dg(G)), mc: measures_combination(w)):
     gt_mc?(ms(G), w)(mc) IMPLIES gte_mc?(ms(G), w)(mc)

 gte_mc_comp: LEMMA
   FORALL(w1, w2: Walk(dg(G))):
     FORALL(mc1: measures_combination(w1), mc2: measures_combination(w2)):
       gte_mc?(ms(G), w1)(mc1) AND gte_mc?(ms(G), w2)(mc2) AND
       last(w1) = first(w2) AND last(mc1) = first(mc2)
       IMPLIES gte_mc?(ms(G), w1 o rest(w2))(mc1 o rest(mc2))

 gte_mc_sub_walk: LEMMA
   FORALL(w: Walk(dg(G)), i,j: below(length(w)), mc: measures_combination(w)):
     i <= j AND gte_mc?(ms(G), w)(mc) IMPLIES gte_mc?(ms(G), w^(i,j))(mc^(i,j))

 gt_mc_comp: LEMMA
   FORALL(w1, w2: Walk(dg(G))):
     FORALL(mc1: measures_combination(w1), mc2: measures_combination(w2)):
         gte_mc?(ms(G), w1)(mc1) AND gte_mc?(ms(G), w2)(mc2) AND 
         (gt_mc?(ms(G), w1)(mc1) OR gt_mc?(ms(G), w2)(mc2)) AND
         last(w1) = first(w2) AND last(mc1) = first(mc2)
       IMPLIES
         gt_mc?(ms(G), w1 o rest(w2))(mc1 o rest(mc2))

 END ccg
