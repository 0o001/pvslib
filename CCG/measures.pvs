%********************************************************************************%
%                                                                                %
%   Authors:                                                                     %
%                                                                                %
%       Andréia Borges Avelar -- Universidade de Brasília - Brasil               %
%       Mauricio Ayala-Rincon -- Universidade de Brasília - Brasil               %
%                 Cesar Muñoz -- NASA Langley Research Center - US               %
%                                                                                %
%********************************************************************************%
%                    last modified: Mar - 03 - 2014                              %
%********************************************************************************%

measures[N: posnat]: THEORY

BEGIN

	IMPORTING reals@sign3
              
    
% ------------------------------------------------------------------------------- %
%  measures and matrices
% ------------------------------------------------------------------------------- %

 measures : TYPE = Sign3
 
 measure_matrix : TYPE = [below(N) -> [below(N) -> measures]]

 Undefined : MACRO Sign3 = -1


% ------------------------------------------------------------------------------- %
%  operations
% ------------------------------------------------------------------------------- %

       IMPORTING structures@max_array[N, measures, <=]

 ;+(x, y : measures) : measures =
      IF (x = Undefined OR y = Undefined) THEN Undefined
      ELSIF (x = 1 OR y = 1) THEN 1
      ELSE 0
      ENDIF

 ;*(m1, m2: measure_matrix): measure_matrix =
      LAMBDA(i: below(N))(j: below(N)): 
            max( LAMBDA(k: below(N)): ( m1(i)(k) + m2(k)(j) ) )

 ;+(m1, m2: measure_matrix): measure_matrix =
      LAMBDA(i: below(N))(j: below(N)): m1(i)(j) + m2(i)(j)

 id : measure_matrix = 
      LAMBDA(i : below(N))(j : below(N)) : IF i = j THEN 0 ELSE -1 ENDIF


% ------------------------------------------------------------------------------- %
%  Properties
% ------------------------------------------------------------------------------- %

 x, y, z: VAR measures

 add_commute: LEMMA x + y = y + x

 add_assoc: LEMMA x + (y + z) = (x + y) + z

 id_on_measures: LEMMA
   0 + x = x AND x + 0 = x


%---------------------------------------------------

 id_is_identity: LEMMA
   identity?(*)(id)

 max_add: LEMMA
   FORALL(A: ARRAY[below(N) -> measures], a: measures):
       max(A) + a = max(LAMBDA (i: below(N)): A(i) + a)

 measure_matrix_assoc: LEMMA
   associative?(*)


% ------------------------------------------------------------------------------- %
%  Positivity and Compatibility
% ------------------------------------------------------------------------------- %

 positive?(m: measure_matrix) : bool =
   EXISTS(j: below(N)) : m(j)(j) = 1

 compatible?(m1, m2: measure_matrix): bool =
   EXISTS(j: below(N)) : m1(j)(j) + m2(j)(j) = 1

 defined?(m: measure_matrix): bool = 
   EXISTS(j: below(N)) : m(j)(j) /= Undefined

 defined_pos?(m: measure_matrix, i, j: below(N)): bool = m(i)(j) /= Undefined

 positive_pos?(m: measure_matrix, i, j: below(N)): bool = m(i)(j) = 1


% ------------------------------------------------------------------------------- %
%  Properties
% ------------------------------------------------------------------------------- %

 add_measures_positive: LEMMA
   FORALL(a, b: measures):
     a >= 0 AND b >= 0 AND (a = 1 OR b = 1) IFF a + b = 1

 positive_multiplication: LEMMA
   FORALL(m1, m2: measure_matrix):
     positive?(m1*m2) IFF
     EXISTS(j, k: below(N)): m1(j)(k) + m2(k)(j) = 1

 positive_commute: LEMMA
   FORALL (m1, m2: measure_matrix):
     positive?(m1*m2) IMPLIES positive?(m2*m1)

 positive_mult_pos: LEMMA
   FORALL(m1, m2: measure_matrix, k: below(N)):
     m1(k)(k) + m2(k)(k) = 1 IMPLIES (m1 * m2)(k)(k) = 1

 positive_sum: LEMMA
   FORALL (m1, m2: measure_matrix):
     positive?(m1 + m2) IMPLIES positive?(m1) OR positive?(m2)
 
 positive_sum_positive_mult: LEMMA
   FORALL (m1, m2: measure_matrix):
      positive?(m1 + m2) IMPLIES positive?(m1*m2)

 compatible_is_positive: LEMMA
   FORALL(m1, m2: measure_matrix):
      compatible?(m1, m2) IMPLIES positive?(m1*m2)

 compatible_positive_grafting: LEMMA
   FORALL(m1, m2, m3: measure_matrix):
      compatible?(m2, m3*m1) IMPLIES positive?(m1*m2*m3)

 defined_pos_mul: LEMMA
   FORALL(m1, m2: measure_matrix, i, j, k: below(N)):
     defined_pos?(m1, i, j) AND defined_pos?(m2, j, k)
     IMPLIES defined_pos?(m1*m2, i, k)

 defined_pos_decomposition: LEMMA
   FORALL(m1, m2: measure_matrix, i, j: below(N)):
     defined_pos?(m1*m2, i, j) IFF
     EXISTS(k: below(N)): defined_pos?(m1, i, k) AND defined_pos?(m2, k, j)

 positive_pos_mul: LEMMA
   FORALL(m1, m2: measure_matrix, i, j, k: below(N)):
     m1(i)(j) + m2(j)(k) = 1 IMPLIES (m1*m2)(i)(k) = 1

 positive_pos_decomposition: LEMMA
   FORALL(m1, m2: measure_matrix, i, j: below(N)):
     (m1*m2)(i)(j) = 1 IFF EXISTS(k: below(N)): m1(i)(k) + m2(k)(j) = 1
 

END measures
