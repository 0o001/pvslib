%********************************************************************************%
%                                                                                %
%   Authors:                                                                     %
%                                                                                %
%       Andréia Borges Avelar -- Universidade de Brasília - Brasil               %
%       Mauricio Ayala-Rincon -- Universidade de Brasília - Brasil               %
%                 Cesar Muñoz -- NASA Langley Research Center - US               %
%                 Aaron Dutle -- NASA Langley Research Center - US               %
%                                                                                %
%********************************************************************************%

measures[N: posnat]: THEORY

BEGIN

	IMPORTING reals@sign3, sets_aux@fun_below_props
              
    
% ------------------------------------------------------------------------------- %
%  measures and matrices
% ------------------------------------------------------------------------------- %

 Measure_Matrix : TYPE = [below(N) -> [below(N) -> Sign3]]

 Undefined : MACRO Sign3 = -1

% ------------------------------------------------------------------------------- %
%  operations
% ------------------------------------------------------------------------------- %

       IMPORTING structures@max_array[N, Sign3, <=]

 Plus3(x, y : Sign3) : Sign3 =
      IF (x = Undefined OR y = Undefined) THEN Undefined
      ELSIF (x = 1 OR y = 1) THEN 1
      ELSE 0
      ENDIF

 ;*(m1, m2: Measure_Matrix): Measure_Matrix =
      LAMBDA(i: below(N))(j: below(N)): 
            max( LAMBDA(k: below(N)): ( Plus3(m1(i)(k) , m2(k)(j)) ) )

 ;+(m1, m2: Measure_Matrix): Measure_Matrix =
      LAMBDA(i: below(N))(j: below(N)): Plus3(m1(i)(j) , m2(i)(j))

 id : Measure_Matrix = 
      LAMBDA(i : below(N))(j : below(N)) : IF i = j THEN 0 ELSE -1 ENDIF



 ;<=(m1, m2: Measure_Matrix): bool = 
      FORALL (i,j: below(N)): m1(i)(j)<=m2(i)(j)

 ;<(m1, m2: Measure_Matrix): bool = (NOT m1=m2) AND m1<=m2  


% ------------------------------------------------------------------------------- %
%  Properties
% ------------------------------------------------------------------------------- %

 x, y, z: VAR Sign3

 add_commute: LEMMA Plus3(x , y) = Plus3(y , x)

 add_assoc: LEMMA Plus3(x , Plus3(y , z)) = Plus3(Plus3(x , y) , z)

 add_measures_positive: LEMMA
   FORALL(a, b: Sign3):
     a >= 0 AND b >= 0 AND (a = 1 OR b = 1) IFF Plus3(a,b) = 1

 id_on_measures: LEMMA
   Plus3(0 , x) = x AND Plus3(x , 0) = x

 card_prep: LEMMA is_finite[Measure_Matrix](fullset[Measure_Matrix])

 card_measure_matrices: LEMMA card(fullset[Measure_Matrix]) = 3^(N^2)

 matrices_order: LEMMA partial_order?(<=)

 mult_left_preserves_order: LEMMA FORALL (n, m1, m2:Measure_Matrix):
    m1<=m2 IMPLIES n*m1<=n*m2  

 mult_right_preserves_order: LEMMA FORALL (n, m1, m2:Measure_Matrix):
    m1<=m2 IMPLIES m1*n<=m2*n

%---------------------------------------------------

 id_is_identity: LEMMA
   identity?(*)(id)

 max_add: LEMMA
   FORALL(A: ARRAY[below(N) -> Sign3], a: Sign3):
       Plus3(max(A) , a) = max(LAMBDA (i: below(N)): Plus3(A(i) , a))

 measure_matrix_assoc: LEMMA
   associative?(*)


% ------------------------------------------------------------------------------- %
%  Positivity and Compatibility
% ------------------------------------------------------------------------------- %

 positive?(m: Measure_Matrix) : bool =
   EXISTS(j: below(N)) : m(j)(j) = 1

 compatible?(m1, m2: Measure_Matrix): bool =
   EXISTS(j: below(N)) : Plus3(m1(j)(j) , m2(j)(j)) = 1

 defined?(m: Measure_Matrix): bool = 
   EXISTS(j: below(N)) : m(j)(j) /= Undefined

 defined_pos?(m: Measure_Matrix, i, j: below(N)): bool = m(i)(j) /= Undefined

 positive_pos?(m: Measure_Matrix, i, j: below(N)): bool = m(i)(j) = 1


% ------------------------------------------------------------------------------- %
%  Properties
% ------------------------------------------------------------------------------- %

 positive_multiplication: LEMMA
   FORALL(m1, m2: Measure_Matrix):
     positive?(m1*m2) IFF
     EXISTS(j, k: below(N)): Plus3(m1(j)(k) , m2(k)(j)) = 1

 positive_commute: LEMMA
   FORALL (m1, m2: Measure_Matrix):
     positive?(m1*m2) IMPLIES positive?(m2*m1)

 positive_mult_pos: LEMMA
   FORALL(m1, m2: Measure_Matrix, k: below(N)):
     Plus3(m1(k)(k),m2(k)(k)) = 1 IMPLIES (m1 * m2)(k)(k) = 1

 positive_sum: LEMMA
   FORALL (m1, m2: Measure_Matrix):
     positive?(m1 + m2) IMPLIES positive?(m1) OR positive?(m2)
 
 positive_sum_positive_mult: LEMMA
   FORALL (m1, m2: Measure_Matrix):
      positive?(m1 + m2) IMPLIES positive?(m1*m2)

 compatible_is_positive: LEMMA
   FORALL(m1, m2: Measure_Matrix):
      compatible?(m1, m2) IMPLIES positive?(m1*m2)

 compatible_positive_grafting: LEMMA
   FORALL(m1, m2, m3: Measure_Matrix):
      compatible?(m2, m3*m1) IMPLIES positive?(m1*m2*m3)

 defined_pos_mul: LEMMA
   FORALL(m1, m2: Measure_Matrix, i, j, k: below(N)):
     defined_pos?(m1, i, j) AND defined_pos?(m2, j, k)
     IMPLIES defined_pos?(m1*m2, i, k)

 defined_pos_decomposition: LEMMA
   FORALL(m1, m2: Measure_Matrix, i, j: below(N)):
     defined_pos?(m1*m2, i, j) IFF
     EXISTS(k: below(N)): defined_pos?(m1, i, k) AND defined_pos?(m2, k, j)

 positive_pos_mul: LEMMA
   FORALL(m1, m2: Measure_Matrix, i, j, k: below(N)):
     Plus3(m1(i)(j),m2(j)(k)) = 1 IMPLIES (m1*m2)(i)(k) = 1

 positive_pos_decomposition: LEMMA
   FORALL(m1, m2: Measure_Matrix, i, j: below(N)):
     (m1*m2)(i)(j) = 1 IFF EXISTS(k: below(N)): Plus3(m1(i)(k),m2(k)(j)) = 1

END measures
