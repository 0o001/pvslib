%********************************************************************************%
%                                                                                %
%   Authors:                                                                     %
%                                                                                %
%       Andréia Borges Avelar -- Universidade de  Brasília  -  Brasil            %
%       Mauricio Ayala-Rincon -- Universidade de  Brasília  -  Brasil            %
%                 Cesar Muñoz -- NASA  Langley  Research  Center - US            %
%             Mariano Moscato -- National Institute of Aerospace - US            %
%                                                                                %
%********************************************************************************%
ccg_to_mwg[Val,Expr,Condition,NodeId: TYPE, 
           MT: TYPE, lt : (well_founded?[MT]), N: posnat,
           semantic_rel:PRED[[Expr,Val,Val]],eval_conds:PRED[[Condition,Val]]] : THEORY
BEGIN
  % concrete digraphs and weigthed digraphs
  IMPORTING cc_def[Val,Expr,Condition,NodeId],
    	    measures[N],
            ccg[Val,Expr,Condition,NodeId,MT,lt,N,semantic_rel,eval_conds],
            matrix_wdg[CallingContext,N]

   G: VAR CCG
   w: VAR prewalk
   e: VAR edgetype
   v: VAR CallingContext
 i,j: VAR below(N)

 indi_f(G: CCG): TYPE = [vert(dg(G)) -> Measure_Matrix[N]]

 % soundness
 indi_f_sound(G)(f: indi_f(G)): bool = 
   FORALL(i, j: below(N), c: vert(dg(G))):
     (get(f(c))(i,j) = 1 IMPLIES gt(ms(G),c,i,j,FALSE)) AND
     (get(f(c))(i,j) = 0 IMPLIES gt(ms(G),c,i,j,TRUE))

 indi_f_sound_all_vertex(G)(f:indi_f(G),i,j:below(N),l:list[CallingContext]|FORALL (i:below(length(l))):
 vert?(G`dg)(nth[CallingContext[Val, Expr, Condition,NodeId]](l, i))) : RECURSIVE bool =
   IF null?(l) THEN TRUE
   ELSE
     LET c = car(l) IN
     (get(f(c))(i,j) = 1 IMPLIES gt(ms(G),c,i,j,FALSE)) AND
     (get(f(c))(i,j) = 0 IMPLIES gt(ms(G),c,i,j,TRUE)) AND
     indi_f_sound_all_vertex(G)(f,i,j,cdr(l))
   ENDIF
 MEASURE l BY <<

 indi_f_sound_all_vertex_correctness: LEMMA
 FORALL(f: indi_f(G),i,j:below(N), l:list[CallingContext]|FORALL (i:below(length(l))):  vert?(G`dg)(nth(l, i))):
   ( FORALL(c: vert(dg(G)) | member(c,l) ):
     (get(f(c))(i,j) = 1 IMPLIES gt(ms(G),c,i,j,FALSE)) AND
     (get(f(c))(i,j) = 0 IMPLIES gt(ms(G),c,i,j,TRUE)) ) = indi_f_sound_all_vertex(G)(f,i,j,l) 

 indi_f_sound_iter(G)(f:indi_f(G),i,j:upto(N)) : RECURSIVE
   { b: bool | 
   ( FORALL(i_:below(N),j_:below(N)):
     i_ > i OR (i_ = i AND j_ >= j)
     IMPLIES
    FORALL(c: vert(dg(G))):
     (get(f(c))(i_,j_) = 1 IMPLIES gt(ms(G),c,i_,j_,FALSE)) AND
     (get(f(c))(i_,j_) = 0 IMPLIES gt(ms(G),c,i_,j_,TRUE)) ) = b }  =
     
   IF i = N THEN TRUE
   ELSIF i < N AND j = N THEN
      indi_f_sound_iter(G)(f,i+1,0)
   ELSE
     indi_f_sound_all_vertex(G)(f,i,j,G`dg`data) AND
     indi_f_sound_iter(G)(f,i,j+1)
   ENDIF
 MEASURE lex2(N-i,N-j)

 indi_f_sound_iter_correctness: LEMMA
 FORALL(f: indi_f(G)):
  FORALL(m,n:below(N)):
  ( FORALL(i:below(N),j:below(N)):
    i > m OR (i = m AND j >= n) IMPLIES
     FORALL(c: vert(dg(G))):
      (get(f(c))(i,j) = 1 IMPLIES gt(ms(G),c,i,j,FALSE)) AND
      (get(f(c))(i,j) = 0 IMPLIES gt(ms(G),c,i,j,TRUE)) )
     = indi_f_sound_iter(G)(f,m,n)

 indi_f_equiv : LEMMA
   FORALL(f: indi_f(G)):
     indi_f_sound(G)(f) = indi_f_sound_iter(G)(f,0,0)

% completeness
 indi_f_complete(G)(f: indi_f(G)): bool = 
   FORALL(i, j: below(N), c: vert(dg(G))):
     (gt(ms(G),c,i,j,FALSE) IMPLIES get(f(c))(i,j) = 1) AND
     (NOT gt(ms(G),c,i,j,FALSE) AND gt(ms(G),c,i,j,TRUE)  IMPLIES get(f(c))(i,j) = 0)

 % soundness and completeness
 indi_f_sc(G)(f: indi_f(G)): bool = indi_f_sound(G)(f) AND indi_f_complete(G)(f)

 indi_f_sc_is_sound: JUDGEMENT (indi_f_sc(G)) SUBTYPE_OF (indi_f_sound(G))
 indi_f_sc_is_complete: JUDGEMENT (indi_f_sc(G)) SUBTYPE_OF (indi_f_complete(G))

 indi_func(G): indi_f(G) =
  LAMBDA(c: vert(dg(G))): form_matrix(
   LAMBDA(i: below(N)): LAMBDA(j: below(N)):
     IF    gt(ms(G),c,i,j,FALSE) THEN 1
     ELSIF gt(ms(G),c,i,j,TRUE) THEN 0
     ELSE -1
     ENDIF )

 indi_func_is_sc: JUDGEMENT indi_func(G) HAS_TYPE (indi_f_sc(G))

 weight(G)(f: indi_f(G))(e: edge(dg(G))): Measure_Matrix[N] = f(e`1)

 IMPORTING structures@more_list_props[[CallingContext,CallingContext,Measure_Matrix[N]]]

 wlist_from_edges(G,(f:indi_f(G)))
		 (es: list[(edges(dg(G)))] | 
 		      no_repetitions?[[CallingContext,CallingContext]](es)): 
 RECURSIVE {l: list[[CallingContext,CallingContext,Measure_Matrix]] | 
              (FORALL(e:(edges(dg(G)))): member[[CallingContext,CallingContext]](e,es) IFF
                 member( (e`1,e`2,weight(G)(f)(e)) , l)) AND
	      no_repetitions?(l) AND
	      keys_no_rep?(l) 
   AND (FORALL(k1,k2:CallingContext,v:Measure_Matrix): 
              edges(dg(G))(k1,k2) AND
              member((k1,k2,v),l) 
	      IMPLIES v = weight(G)(f)((k1,k2)))  } =
   CASES es OF 
     null: null,
     cons(e,es_): cons( (e`1,e`2,weight(G)(f)(e)) , 
     		  	wlist_from_edges(G,f)(es_) )
   ENDCASES
 MEASURE length(es)

 build_weights_list(G)(f: indi_f(G)): {l: list[[CallingContext,
					        CallingContext,
					        Measure_Matrix]] | 
				      all_edges_in_map?(dg(G))(l) AND
				      FORALL(e:(edges(dg(G)))):
					get_value(l,e) = weight(G)(f)(e) } =
  wlist_from_edges(G,f)(edges_list(dg(G)))

 ccg_to_mwg(G)(f: indi_f(G)) : {W: wgd_type | dg(W) = dg(G) AND
 		  	         FORALL(e:(edges(dg(G)))): 
				   get_wgt(W,e) = weight(G)(f)(e) } = 
    make_c_wdg(dg(G),build_weights_list(G)(f))


% ------------------------------------------------------------------------------- %
% Some basic properties between a G: CCG and a G1:= ccg_to_mwg(G: CCG) 
% ------------------------------------------------------------------------------- %

 same_edges: LEMMA 
  FORALL(f: indi_f(G)):
   LET G1 = ccg_to_mwg(G)(f) IN edge?(dg(G))(e) IFF edge?(dg(G1))(e)

 same_verts: LEMMA
  FORALL(f: indi_f(G)):
   LET G1 = ccg_to_mwg(G)(f) IN vert?(dg(G))(v) IFF vert?(dg(G1))(v)

 same_walks: LEMMA
  FORALL(f: indi_f(G)):
   LET G1 = ccg_to_mwg(G)(f) IN walk?(dg(G), w) IFF walk?(dg(G1), w)

% ------------------------------------------------------------------------------- %
% Lemmas associating the operators gte_mc? and defined_pos?
% ------------------------------------------------------------------------------- %

 gte_mc_to_defined_pos: LEMMA
   FORALL(G: CCG, f: (indi_f_complete(G)),  w: Walk(dg(G))): 
   FORALL(mc: measures_combination(w)):
     LET G1 = ccg_to_mwg(G)(f) IN
       gte_mc?(ms(G), w)(mc) IMPLIES
       defined_pos?(wgt_walk(G1, w), mc(0), mc(length(w) - 1))

 defined_pos_to_gte_mc: LEMMA
   FORALL(G: CCG, f: (indi_f_sound(G)), w: Walk(dg(G))): LET G1 = ccg_to_mwg(G)(f) IN
     FORALL(i, j: below(N)): 
       defined_pos?(wgt_walk(G1, w), i, j) IMPLIES 
       EXISTS(mc: measures_combination(w)): gte_mc?(ms(G), w)(mc)
       AND first(mc) = i AND last(mc) = j

 no_defined_pos_iff_no_gte_mc: LEMMA
   FORALL(G: CCG, f: (indi_f_sc(G)), w: Walk(dg(G))): LET G1 = ccg_to_mwg(G)(f) IN 
      (FORALL(i, j: below(N)): NOT defined_pos?(wgt_walk(G1, w), i, j))
     IFF
      (FORALL(mc: measures_combination(w)): NOT gte_mc?(ms(G), w)(mc))

% ------------------------------------------------------------------------------- %
% Lemmas associating the operators gt_mc? and positive_pos?
% ------------------------------------------------------------------------------- %

 gt_mc_to_positive_pos: LEMMA
   FORALL(G: CCG, f: (indi_f_complete(G)), w: Walk(dg(G))): 
    FORALL(mc: measures_combination(w)):
     LET G1 = ccg_to_mwg(G)(f) IN
       gt_mc?(ms(G), w)(mc) IMPLIES
       positive_pos?(wgt_walk(G1, w), mc(0), mc(length(w) - 1))

 positive_pos_to_gt_mc: LEMMA
   FORALL(G: CCG, f: (indi_f_sound(G)), w: Walk(dg(G))): LET G1 = ccg_to_mwg(G)(f) IN
     FORALL(i, j: below(N)):
       positive_pos?(wgt_walk(G1, w), i, j) IMPLIES
       EXISTS(mc: measures_combination(w)): gt_mc?(ms(G), w)(mc)
       AND first(mc) = i AND last(mc) = j

 no_positive_pos_no_gt_mc: LEMMA
   FORALL(G: CCG, f: (indi_f_sc(G)), w: Walk(dg(G))): LET G1 = ccg_to_mwg(G)(f) IN 
      (FORALL(i, j: below(N)): NOT positive_pos?(wgt_walk(G1, w), i, j))
     IFF
      (FORALL(mc: measures_combination(w)): NOT gt_mc?(ms(G), w)(mc))

% ------------------------------------------------------------------------------- %
%    Lemma associating positive measure-matrixes 
%    and greater than measure-combinations
% ------------------------------------------------------------------------------- %

 positive_to_gt_mc: LEMMA
   FORALL(G: CCG, f: (indi_f_sound(G)), w: Walk(dg(G))): LET G1 = ccg_to_mwg(G)(f) IN
      positive?(wgt_walk(G1, w))
    IMPLIES
      (EXISTS(mc: measures_combination(w) | first(mc) = last(mc)):
       gt_mc?(ms(G), w)(mc))

 gt_mc_to_positive: LEMMA
   FORALL(G: CCG, f: (indi_f_complete(G)), w: Walk(dg(G))): LET G1 = ccg_to_mwg(G)(f) IN
      (EXISTS(mc: measures_combination(w) | first(mc) = last(mc)):
       gt_mc?(ms(G), w)(mc))
    IMPLIES
      positive?(wgt_walk(G1, w))

 positive_iff_gt_mc: LEMMA
   FORALL(G: CCG, f: (indi_f_sc(G)), w: Walk(dg(G))): LET G1 = ccg_to_mwg(G)(f) IN
      positive?(wgt_walk(G1, w))
    IFF
      (EXISTS(mc: measures_combination(w) | first(mc) = last(mc)):
       gt_mc?(ms(G), w)(mc))

 mwg_termination_to_ccg_termination: LEMMA
   FORALL(f: (indi_f_sound(G))): LET G1 = ccg_to_mwg(G)(f) IN
     mwg_termination?(G1) IMPLIES ccg_termination?(G)

 ccg_termination_to_mwg_termination: LEMMA
   FORALL(f: (indi_f_complete(G))): LET G1 = ccg_to_mwg(G)(f) IN
     ccg_termination?(G) IMPLIES mwg_termination?(G1) 

 mwg_termination_iff_ccg_termination: THEOREM
   FORALL(f: (indi_f_sc(G))): LET G1 = ccg_to_mwg(G)(f) IN
     mwg_termination?(G1) IFF ccg_termination?(G)

 END ccg_to_mwg
