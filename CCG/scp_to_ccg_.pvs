scp_to_ccg_[Val,Expr,Condition: TYPE, 
           (IMPORTING cc_def[Val,Expr,Condition]) CCs:set[CallingContext],
           semantic_rel:PRED[[Expr,Val,Val]],eval_conds:PRED[[Condition,Val]],
    % Importings needed to work with uninterpreted digraphs
    ConcreteDigraph: TYPE,
    (IMPORTING cc_def[Val,Expr,Condition]) 
    vert:  [ConcreteDigraph-> [CallingContext -> bool]],
    edges: [ConcreteDigraph -> [CallingContext,CallingContext -> bool]],
    size:  [ConcreteDigraph -> nat],
    make:  [ v:(is_finite[CallingContext]),
             {e: (is_finite[[CallingContext,CallingContext]]) | 
	         FORALL(x,y:CallingContext): 
    	          e(x,y) IMPLIES v(x) AND v(y) } -> ConcreteDigraph] ]: THEORY 
BEGIN
  ASSUMING
    % This theory only makes sense if the parametric type ConcreteDigraph is a 
    % correct interpretation for (uninterpreted) digraphs. That is checked using 
    % the predicate defined in digraphs_abs.
    IMPORTING digraphs@digraphs_abs[CallingContext,ConcreteDigraph,vert,edges,size,make]
    concretedigraph_implements_abstractdigraph: ASSUMPTION
      digraphs_abs.correct_implementation

    IMPORTING scp[Val,Expr,Condition,[nat->(CCs)]]

    scp_termination : ASSUMPTION 
      scp_termination?(semantic_rel,eval_conds)

    sem_rel_finite: ASSUMPTION 
      FORALL(val1:Val): is_finite[Val]({val2:Val| EXISTS (cc:(CCs)) : 
        eval_conds(cc`conds,val1) AND semantic_rel(cc`actuals,val1,val2)})
  ENDASSUMING

  IMPORTING digraphs@digraphs_[CallingContext, ConcreteDigraph,vert,edges,size,make]

  Seq_cc: TYPE = [nat->(CCs)]

  R(val1,val2:Val) : bool = 
    EXISTS (cc:(CCs)) : eval_conds(cc`conds,val2) AND semantic_rel(cc`actuals,val2,val1)

  omega_is_wf: LEMMA well_founded?[Val](R);

  omega_is_finite: LEMMA FORALL (x: Val): is_finite[Val]({y: Val | R(y, x)});

  IMPORTING orders@omega[Val,R],
            ccg_[Val,Expr,Condition,nat,LAMBDA(n,m:nat):n < m,1,semantic_rel,eval_conds,
	         ConcreteDigraph,vert,edges,size,make]

  Graph_cc : TYPE = {dg:ConcreteDigraph | subset?(vert(dg),CCs)}

  scp_implies_ccg_termination : THEOREM
    FORALL (dg:Graph_cc):
      EXISTS (fms:FunMeasures) : ccg_termination?(make_ccg(dg,fms))

END scp_to_ccg_

