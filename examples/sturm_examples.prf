(sturm_examples
 (example_1_TCC1 0
  (example_1_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_1_TCC2 0
  (example_1_TCC2-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_1_TCC3 0
  (example_1_TCC3-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_1 0
  (example_1-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (example_2 0
  (example_2-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/"))
   shostak))
 (example_3_TCC1 0
  (example_3_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC2 0
  (example_3_TCC2-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC3 0
  (example_3_TCC3-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC4 0
  (example_3_TCC4-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC5 0
  (example_3_TCC5-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC6 0
  (example_3_TCC6-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC7 0
  (example_3_TCC7-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC8 0
  (example_3_TCC8-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC9 0
  (example_3_TCC9-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC10 0
  (example_3_TCC10-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC11 0
  (example_3_TCC11-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC12 0
  (example_3_TCC12-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC13 0
  (example_3_TCC13-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3_TCC14 0
  (example_3_TCC14-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_3 0
  (example_3-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_4_TCC1 0
  (example_4_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_4 0
  (example_4-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_neg formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pneg const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_5 0
  (example_5-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_6_TCC1 0
  (example_6_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_6 0
  (example_6-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_7 0
  (example_7-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_8 0
  (example_8-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (example_9_TCC1 0
  (example_9_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_9_TCC2 0
  (example_9_TCC2-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_9 0
  (example_9-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_sos_TCC1 0
  (example_sos_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_sos_TCC2 0
  (example_sos_TCC2-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_sos 0
  (example_sos-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_div formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pdiv const-decl "Polylist" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_10 0
  (example_10-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (example_11 0
  (example_11-1 nil 3703615632 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (example_12 0
  (example_12-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_neg formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pneg const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_13 0
  (example_13-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (abs_le formula-decl nil abs_lems "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/"))
   shostak))
 (example_14_TCC1 0
  (example_14_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_14_TCC2 0
  (example_14_TCC2-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_14_TCC3 0
  (example_14_TCC3-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_14_TCC4 0
  (example_14_TCC4-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (example_14 0
  (example_14-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_15 0
  (example_15-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/"))
   shostak))
 (example_16 0
  (example_16-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/"))
   shostak))
 (example_17 0
  (example_17-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (open adt-constructor-decl "[real -> (open?)]" RealInt "reals/")
    (open? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (oo adt-constructor-decl "(inf?)" RealInt "reals/")
    (- const-decl "nInf" RealInt "reals/")
    (nInf type-eq-decl nil RealInt "reals/")
    (ninf? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (Inf type-eq-decl nil RealInt "reals/")
    (inf? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (RealInf type-decl nil RealInt "reals/")
    (|##| const-decl "bool" RealInt "reals/")
    (RealInt type-eq-decl nil RealInt "reals/"))
   shostak))
 (example_18 0
  (example_18-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (open adt-constructor-decl "[real -> (open?)]" RealInt "reals/")
    (open? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (oo adt-constructor-decl "(inf?)" RealInt "reals/")
    (- const-decl "nInf" RealInt "reals/")
    (nInf type-eq-decl nil RealInt "reals/")
    (ninf? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (Inf type-eq-decl nil RealInt "reals/")
    (inf? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (RealInf type-decl nil RealInt "reals/")
    (|##| const-decl "bool" RealInt "reals/")
    (RealInt type-eq-decl nil RealInt "reals/"))
   shostak))
 (example_19 0
  (example_19-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/"))
   shostak))
 (example_20 0
  (example_20-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_neg formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pneg const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (oo adt-constructor-decl "(inf?)" RealInt "reals/")
    (inf? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (RealInf type-decl nil RealInt "reals/")
    (|##| const-decl "bool" RealInt "reals/")
    (RealInt type-eq-decl nil RealInt "reals/"))
   shostak))
 (example_21 0
  (example_21-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_neg formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pneg const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (oo adt-constructor-decl "(inf?)" RealInt "reals/")
    (inf? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (open adt-constructor-decl "[real -> (open?)]" RealInt "reals/")
    (open? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (RealInf type-decl nil RealInt "reals/")
    (|##| const-decl "bool" RealInt "reals/")
    (RealInt type-eq-decl nil RealInt "reals/"))
   shostak))
 (example_22 0
  (example_22-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInf type-decl nil RealInt "reals/")
    (inf? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (Inf type-eq-decl nil RealInt "reals/")
    (ninf? adt-recognizer-decl "[RealInf -> boolean]" RealInt "reals/")
    (nInf type-eq-decl nil RealInt "reals/")
    (- const-decl "nInf" RealInt "reals/")
    (oo adt-constructor-decl "(inf?)" RealInt "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (|##| const-decl "bool" RealInt "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (n_example_1 0
  (n_example_1-1 nil 3703615633 ("" (sturm -1) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (n_example_2 0
  (n_example_2-1 nil 3703615633 ("" (sturm -1) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (n_example_3 0
  (n_example_3-1 nil 3703615633 ("" (sturm -1) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_neg formula-decl nil polylist "Sturm/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pneg const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (n_example_4 0
  (n_example_4-1 nil 3703615633 ("" (sturm -1) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (n_example_5 0
  (n_example_5-1 nil 3703615633 ("" (sturm -1) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (mono_example_1_TCC1 0
  (mono_example_1_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil
   nil))
 (mono_example_1 0
  (mono_example_1-1 nil 3703615633 ("" (mono-poly) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (mono_def formula-decl nil compute_sturm "Sturm/")
    (mono const-decl "bool" compute_sturm "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (realorder? const-decl "bool" real_orders "reals/")
    (RealOrder type-eq-decl nil real_orders "reals/")
    (list2array def-decl "T" array2list "structures/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mono_example_2_TCC1 0
  (mono_example_2_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil
   nil))
 (mono_example_2 0
  (mono_example_2-1 nil 3703615633 ("" (mono-poly) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (mono_def formula-decl nil compute_sturm "Sturm/")
    (mono const-decl "bool" compute_sturm "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (realorder? const-decl "bool" real_orders "reals/")
    (RealOrder type-eq-decl nil real_orders "reals/")
    (list2array def-decl "T" array2list "structures/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mono_example_3_TCC1 0
  (mono_example_3_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil
   nil))
 (mono_example_3_TCC2 0
  (mono_example_3_TCC2-1 nil 3703615613 ("" (subtype-tcc) nil) nil
   nil))
 (mono_example_3 0
  (mono_example_3-1 nil 3703615633 ("" (mono-poly) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (mono_def formula-decl nil compute_sturm "Sturm/")
    (mono const-decl "bool" compute_sturm "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_div formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (realorder? const-decl "bool" real_orders "reals/")
    (RealOrder type-eq-decl nil real_orders "reals/")
    (list2array def-decl "T" array2list "structures/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (pdiv const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mono_example_4_TCC1 0
  (mono_example_4_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil
   nil))
 (mono_example_4 0
  (mono_example_4-1 nil 3703615633 ("" (mono-poly) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (mono_def formula-decl nil compute_sturm "Sturm/")
    (mono const-decl "bool" compute_sturm "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (list2array def-decl "T" array2list "structures/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mono_example_5 0
  (mono_example_5-1 nil 3703615633 ("" (mono-poly) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (mono_def formula-decl nil compute_sturm "Sturm/")
    (mono const-decl "bool" compute_sturm "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_sq formula-decl nil polylist "Sturm/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (realorder? const-decl "bool" real_orders "reals/")
    (RealOrder type-eq-decl nil real_orders "reals/")
    (list2array def-decl "T" array2list "structures/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (psq const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mono_example_6_TCC1 0
  (mono_example_6_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil
   nil))
 (mono_example_6 0
  (mono_example_6-1 nil 3703615633 ("" (mono-poly) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (mono_def formula-decl nil compute_sturm "Sturm/")
    (mono const-decl "bool" compute_sturm "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (realorder? const-decl "bool" real_orders "reals/")
    (RealOrder type-eq-decl nil real_orders "reals/")
    (list2array def-decl "T" array2list "structures/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (legendre_TCC1 0
  (legendre_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (legendre_TCC2 0
  (legendre_TCC2-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (legendre_TCC3 0
  (legendre_TCC3-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (legendre 0
  (legendre-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (abs_lt formula-decl nil abs_lems "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (legendre3_TCC1 0
  (legendre3_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (legendre3 0
  (legendre3-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (abs_lt formula-decl nil abs_lems "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/"))
   shostak))
 (Turan_9_TCC1 0
  (Turan_9_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil) nil nil))
 (Turan_9 0
  (Turan_9-1 nil 3703615633 ("" (sturm) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_div formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (abs_lt formula-decl nil abs_lems "reals/")
    (sturm const-decl "bool" poly_strategy "Sturm/")
    (sturm_def formula-decl nil poly_strategy "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (deg const-decl "{d: below(length(pl)) |
         (d > 0 IFF
           (EXISTS (j: below(length(pl))): j > 0 AND nth(pl, j) /= 0))
          AND
          (d > 0 IMPLIES
            (FORALL (j: below(length(pl))): j > d IMPLIES nth(pl, j) = 0))
           AND (d > 0 IMPLIES nth(pl, d) /= 0)}" polylist "Sturm/")
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polylist type-eq-decl nil polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pdiv const-decl "Polylist" polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (Legendre_10_TCC1 0
  (Legendre_10_TCC1-1 nil 3703615613 ("" (subtype-tcc) nil)
   ((|##| const-decl "bool" interval "interval_arith/")) nil))
 (Legendre_10_TCC2 0
  (Legendre_10_TCC2-1 nil 3703615613 ("" (subtype-tcc) nil)
   ((|##| const-decl "bool" interval "interval_arith/")) nil))
 (Legendre_10_TCC3 0
  (Legendre_10_TCC3-1 nil 3703615613 ("" (subtype-tcc) nil)
   ((|##| const-decl "bool" interval "interval_arith/")) nil))
 (Legendre_10_TCC4 0
  (Legendre_10_TCC4-1 nil 3703615613 ("" (subtype-tcc) nil)
   ((|##| const-decl "bool" interval "interval_arith/")) nil))
 (Legendre_10_TCC5 0
  (Legendre_10_TCC5-1 nil 3703615613 ("" (subtype-tcc) nil)
   ((|##| const-decl "bool" interval "interval_arith/")) nil))
 (Legendre_10 0
  (Legendre_10-1 nil 3703615633 ("" (mono-poly) nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (mono_def formula-decl nil compute_sturm "Sturm/")
    (mono const-decl "bool" compute_sturm "Sturm/")
    (contains? const-decl "bool" RealInt "reals/")
    (polylist_div formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (RealInt type-eq-decl nil RealInt "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (realorder? const-decl "bool" real_orders "reals/")
    (RealOrder type-eq-decl nil real_orders "reals/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (list2array def-decl "T" array2list "structures/")
    (listn_0 name-judgement "listn(0)" gcd_coeff "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polynomial_division "Sturm/")
    (listn_0 name-judgement "listn[T](0)" polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
         length(pl) = deg + 1 AND
          (FORALL (x: real): polylist(pl)(x) = c * x ^ deg)}" polylist
     "Sturm/")
    (psum def-decl "{pql: Polylist |
         FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pdiv const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil))
   shostak)))

