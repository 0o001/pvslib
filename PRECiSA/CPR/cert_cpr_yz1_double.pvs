% This file is automatically generated by PRECiSA 
% 2016-11-25 20:19:58.010636 UTC

cert_cpr_yz1_double: THEORY
BEGIN
IMPORTING PRECiSA@strategies, cpr_yz1_double

%|- *_TCC* : PROOF
%|- (try (then (grind-reals) (fail)) (skip) (subtype-tcc))
%|- QED

modu_0 : LEMMA
FORALL(e_A, e_B: nonneg_real, r_A, r_B: real, A, B: unb_double):
abs(DtoR(A) - r_A)<=e_A AND abs(DtoR(B) - r_B)<=e_B
AND (((r_B + e_B) < 0) OR ((r_B - e_B) > 0))
AND TRUE
IMPLIES
abs(DtoR(modu(A, B)) - (r_A - (r_B * floor((r_A / r_B)))))<=aebounddp_sub(r_A, e_A, (r_B * floor((r_A / r_B))), aebounddp_mul(r_B, e_B, floor((r_A / r_B)), aebounddp_flr((r_A / r_B), aebounddp_div(r_A, e_A, r_B, e_B))))

%|- modu_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "modu" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_A"
%|-    "aebounddp_mul(r_B, e_B, floor((r_A / r_B)), aebounddp_flr((r_A / r_B), aebounddp_div(r_A, e_A, r_B, e_B)))"
%|-    "r_A"
%|-    "(r_B * floor((r_A / r_B)))"
%|-    "A"
%|-    "Dmul(B, Dfloor(Ddiv(A, B)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_flr((r_A / r_B), aebounddp_div(r_A, e_A, r_B, e_B))"
%|-    "r_B"
%|-    "floor((r_A / r_B))"
%|-    "B"
%|-    "Dfloor(Ddiv(A, B))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dfloor_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_div(r_A, e_A, r_B, e_B)"
%|-    "(r_A / r_B)"
%|-    "Ddiv(A, B)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_A"
%|-    "e_B"
%|-    "r_A"
%|-    "r_B"
%|-    "A"
%|-    "B"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED

yz1_0 : LEMMA
FORALL(e_Lat: nonneg_real, r_Lat: real, Lat: unb_double):
abs(DtoR(Lat) - r_Lat)<=e_Lat
AND (((((((360 / 59) + aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))) < 0) OR (((360 / 59) - aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))) > 0)) AND (((59 + aebounddp_sub(60, 0, 1, 0)) < 0) OR ((59 - aebounddp_sub(60, 0, 1, 0)) > 0))) AND (((59 + aebounddp_sub(60, 0, 1, 0)) < 0) OR ((59 - aebounddp_sub(60, 0, 1, 0)) > 0))) AND ((((360 / 59) + aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))) < 0) OR (((360 / 59) - aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))) > 0)))
AND TRUE
IMPLIES
abs(DtoR(yz1(Lat)) - floor(((((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1))) * 131072) + 0.5)))<=aebounddp_flr(((((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1))) * 131072) + 0.5), aebounddp_add((((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1))) * 131072), aebounddp_mul(((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1))), aebounddp_div((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))), aebounddp_sub(r_Lat, e_Lat, ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1))))), aebounddp_mul((360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)), floor((r_Lat / (360 / (60 - 1)))), aebounddp_flr((r_Lat / (360 / (60 - 1))), aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)))))), (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))), 131072, 0), 0.5, 0))

%|- yz1_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "yz1" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Dfloor_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1))) * 131072), aebounddp_mul(((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1))), aebounddp_div((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))), aebounddp_sub(r_Lat, e_Lat, ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1))))), aebounddp_mul((360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)), floor((r_Lat / (360 / (60 - 1)))), aebounddp_flr((r_Lat / (360 / (60 - 1))), aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)))))), (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))), 131072, 0), 0.5, 0)"
%|-    "((((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1))) * 131072) + 0.5)"
%|-    "Dadd(Dmul(Ddiv(modu(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))), Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))), RtoD(131072)), RtoD(0.5))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1))), aebounddp_div((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))), aebounddp_sub(r_Lat, e_Lat, ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1))))), aebounddp_mul((360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)), floor((r_Lat / (360 / (60 - 1)))), aebounddp_flr((r_Lat / (360 / (60 - 1))), aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)))))), (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))), 131072, 0)"
%|-    "0"
%|-    "(((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1))) * 131072)"
%|-    "0.5"
%|-    "Dmul(Ddiv(modu(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))), Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))), RtoD(131072))"
%|-    "RtoD(0.5)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_div((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))), aebounddp_sub(r_Lat, e_Lat, ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1))))), aebounddp_mul((360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)), floor((r_Lat / (360 / (60 - 1)))), aebounddp_flr((r_Lat / (360 / (60 - 1))), aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)))))), (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)))"
%|-    "0"
%|-    "((r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1)))))) / (360 / (60 - 1)))"
%|-    "131072"
%|-    "Ddiv(modu(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))), Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1))))"
%|-    "RtoD(131072)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_sub(r_Lat, e_Lat, ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1))))), aebounddp_mul((360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)), floor((r_Lat / (360 / (60 - 1)))), aebounddp_flr((r_Lat / (360 / (60 - 1))), aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))))))"
%|-    "aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))"
%|-    "(r_Lat - ((360 / (60 - 1)) * floor((r_Lat / (360 / (60 - 1))))))"
%|-    "(360 / (60 - 1))"
%|-    "modu(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1))))"
%|-    "Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("modu_0")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Lat"
%|-    "aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))"
%|-    "r_Lat"
%|-    "(360 / (60 - 1))"
%|-    "Lat"
%|-    "Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aebounddp_sub(60, 0, 1, 0)"
%|-    "360"
%|-    "(60 - 1)"
%|-    "RtoD(360)"
%|-    "Dsub(RtoD(60), RtoD(1))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas +)
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "0"
%|-    "60"
%|-    "1"
%|-    "RtoD(60)"
%|-    "RtoD(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas +)
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aebounddp_sub(60, 0, 1, 0)"
%|-    "360"
%|-    "(60 - 1)"
%|-    "RtoD(360)"
%|-    "Dsub(RtoD(60), RtoD(1))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas +)
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "0"
%|-    "60"
%|-    "1"
%|-    "RtoD(60)"
%|-    "RtoD(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas +)
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas +)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END cert_cpr_yz1_double