#! /usr/bin/env python

# Copyright (c) 2012 United States Government as represented by
# the National Aeronautics and Space Administration.  No copyright
# is claimed in the United States under Title 17, U.S.Code. All Other
# Rights Reserved.
#
# The software in this package has been released as open-source software
# under the NASA Open Source Agreement.  See the accompanying file
# NASA_Open_Source_Agreement.pdf for a full description of the terms.


'''lib_deps : Find PVS library dependencies and generate a processing
order consistent with the dependencies.
If $1 supplied, it is the directory to find libraries; otherwise,
use the current directory.
Prints to standard output.
'''

import os, sys, time, glob, re
from operator import add

if len(sys.argv) > 1:
    base_dir = sys.argv[1]
else:
    base_dir = os.getcwd()

print '''
PVS Library Dependencies        Generated %s

Directory: %s
''' % (time.asctime(), os.path.realpath(base_dir))


importing_pattern     = re.compile(r'IMPORTING', re.I)  # ignore case
lib_thy_pattern       = re.compile(r'\s*(\w+)\s*@')
thy_name_pattern      = re.compile(r'\s*\w+')
thy_param_pattern     = re.compile(r'\s*\[')
left_bracket_pattern  = re.compile(r'[^]]*?\[')         # non-greedy scan
right_bracket_pattern = re.compile(r'.*?\]')            # non-greedy scan
as_name_pattern       = re.compile(r'\s+AS\s+\w+', re.I)  # ignore case
continuation_pattern  = re.compile(r'\s*,')

# Given the lines of a theory (PVS file), find occurrences of IMPORTING
# directives and every clause of the form library@theory.  Extract all
# library references from each theory file.

def collect_lib_imports(thy_src):
    lines = []
    for src_line in thy_src:
        comment = src_line.find('%')
        if comment < 0:
            lines.append(src_line)
        elif comment > 0:
            lines.append(src_line[:comment] + ' ')
        # comment = 0 -> drop entirely
    source = ''.join(lines).replace('\n', ' ')

    imports = {}
    hits = importing_pattern.finditer(source)
    # Parse forward from each occurrence of the IMPORTING keyword.
    for imp in hits:
        i = imp.end() + 1
        while True:
            # find next theory reference
            lib_thy = lib_thy_pattern.match(source, i)
            if lib_thy:
                imports[lib_thy.group(1)] = 1    # extract lib name
                i = lib_thy.end()
            thy_name = thy_name_pattern.match(source, i)
            i = thy_name.end()                   # skip over theory reference
            i = skip_thy_params(source, i, 0)
            as_name = as_name_pattern.match(source, i)
            if as_name:
                i = as_name.end()
            cont = continuation_pattern.match(source, i)
            if not cont: break
            i = cont.end()
    return imports

# Parse and skip over theory parameter expression lists of the form
# [e1,...,en].  Handle nesting of bracketed expression lists.

def skip_thy_params(source, left, level):
    if level == 0:
        bracket = thy_param_pattern.match(source, left)
        if bracket:
            return skip_thy_params(source, bracket.end(), 1)
        else:
            return left
    else:
        bracket = left_bracket_pattern.match(source, left)
        while bracket:
            left = skip_thy_params(source, bracket.end(), level + 1)
            bracket = left_bracket_pattern.match(source, left)
        bracket = right_bracket_pattern.match(source, left)
        if bracket:
            return bracket.end()
        return left   ### unmatched brackets

print '\nLibraries:\n'


# Find plausible library directories in the base directory and scan
# them for theory imports.  A dependency of library A on library B
# exists if any theory in A imports some theory in B.
# Filter out symbolic links and any directory starting with 'test'.

all_libs = []
imports = {}
path_list = glob.glob(os.path.join(base_dir, '*'))
#path_list = map(os.path.realpath, glob.glob(os.path.join(base_dir, '*')))
path_list.sort()

for d in path_list:
    if os.path.isdir(d) and os.path.exists(os.path.join(d, 'top.pvs')):
        lib = os.path.basename(d)
        if os.path.islink(d) or lib.startswith('test'): continue
        all_libs.append(lib)
        lib_imports = {}
        theories = glob.glob(os.path.join(d, '*.pvs'))
        print '%-20s  %s theories' % (lib, len(theories))
        for f in theories:
            lib_imports.update(collect_lib_imports(file(f).readlines()))
        # resolve symbolic links to their real names
        imports[lib] = \
            [ os.path.basename(os.path.realpath(os.path.join(base_dir, name)))
              for name in lib_imports.keys() ]


print '\n\nDependencies (A -> B means a theory in A imports a theory in B):\n'

import_seq = imports.items()
import_seq.sort()

# Find and save all library-level dependencies expressed via importings.

imp_by = {}
for dep, libs  in import_seq:
    for imp in libs:
        print '%20s  ->  %s' % (dep, imp)
        if imp in imp_by: imp_by[imp].append(dep)
        else:             imp_by[imp] = [dep]

# Check for circular dependencies and issue warning messages.

mutual = []
for imp in imp_by:
    for dep in imp_by[imp]:
        if imp in imp_by.get(dep, []):
            mutual.append((imp, dep))
if mutual:
    print '\n'
    for imp, dep in mutual:
        print 'Libraries %s and %s have mutually recursive dependencies.' \
            % (imp, dep)


# Determine an ordering of the libraries consistent with the
# dependencies.  The algorithm computes the 'height' of each
# library in the directed acyclic graph induced by the dependencies.

height = {}
for d in range(len(all_libs)):
    # In each pass, identify libraries that don't import anything.  Use their
    # heights to update those of the libraries that import them.  Then remove
    # them from the imports and imp_by dictionaries (i.e., prune the lower
    # part of the graph).
    for imp, deps in imp_by.items():
        if imp not in imports or not imports[imp]:
            # Only libraries in this collection contribute to the height.
            if imp in all_libs:
                imp_ht = height.get(imp, 0) + 1 
                for dep in deps:
                    height[dep] = max(imp_ht, height.get(dep, 0))
            for dep in deps:
                imports[dep].remove(imp)
            del imp_by[imp]
    if not imp_by: break

for lib in all_libs:
    if lib not in height: height[lib] = 0


print '\n\nLibrary processing order (height, name):\n'

height_seq = height.items()
height_first = []
for lib, ht in height_seq:
    height_first.append((ht, lib))
height_first.sort()

for ht, lib in height_first:
    print '%10s   %s' % (ht, lib)

print ''
