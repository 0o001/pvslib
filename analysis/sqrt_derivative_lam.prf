(sqrt_derivative_lam
 (derivable_sqrt_lam 0
  (derivable_sqrt_lam-1 nil 3828009602
   ("" (skeep :preds? t)
    (("" (lemma "composition_derivable_fun")
      (("" (inst -1 "p" "LAMBDA(x:posreal):sqrt(x)")
        (("" (assert)
          (("" (split -1)
            (("1" (expand "o") (("1" (propax) nil nil)) nil)
             ("2" (hide (-1 2))
              (("2" (lemma "sqrt_derivable_fun")
                (("2" (expand "restrict") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((composition_derivable_fun formula-decl nil chain_rule nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sqrt_derivable_fun formula-decl nil sqrt_derivative nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (derivable? const-decl "bool" derivatives nil))
   shostak))
 (derivable_sqrt_lam_point 0
  (derivable_sqrt_lam_point-1 nil 3828010215
   ("" (skeep :preds? t)
    (("" (lemma "comp_derivable_point")
      (("" (inst -1 "pp" "LAMBDA(x:posreal):sqrt(x)" "x")
        (("" (assert)
          (("" (lemma "sqrt_derivable_fun")
            (("" (expand "restrict")
              (("" (expand "derivable?" -1)
                (("" (inst -1 "pp(x)") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil sqrt_derivative_lam nil)
    (T_pred const-decl "[real -> boolean]" sqrt_derivative_lam nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (comp_derivable_point formula-decl nil chain_rule nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (restrict const-decl "R" restrict nil)
    (derivable? const-decl "bool" derivatives nil)
    (sqrt_derivable_fun formula-decl nil sqrt_derivative nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (pos_fun type-eq-decl nil sqrt_derivative_lam nil))
   shostak))
 (deriv_sqrt_lam_TCC1 0
  (deriv_sqrt_lam_TCC1-1 nil 3828010662
   ("" (skeep :preds? t)
    (("" (lemma "derivable_sqrt_lam") (("" (insteep) nil nil)) nil))
    nil)
   ((derivable? const-decl "bool" derivatives nil)) nil
   (deriv_sqrt_lam subtype
    "LAMBDA (t): sqrt.sqrt(sqrt_derivative_lam.p(sqrt_derivative_lam.t))"
    "deriv_fun[T]")))
 (deriv_sqrt_lam 0
  (deriv_sqrt_lam-1 nil 3828010669
   ("" (skeep :preds? t)
    (("" (lemma "sqrt_derivable_fun")
      (("" (lemma "chain_rule")
        (("" (inst -1 "p" "LAMBDA(x:posreal):sqrt(x)")
          (("1" (lemma "deriv_sqrt")
            (("1" (assert)
              (("1" (expand "restrict")
                (("1" (replaces -1)
                  (("1" (replaces -1)
                    (("1" (beta)
                      (("1" (expand "*") (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "restrict") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_derivable_fun formula-decl nil sqrt_derivative nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_sqrt formula-decl nil sqrt_derivative nil)
    (chain_rule formula-decl nil chain_rule nil))
   shostak)))

