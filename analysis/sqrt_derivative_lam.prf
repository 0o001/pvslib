(sqrt_derivative_lam
 (IMP_derivatives_lam_TCC1 0
  (IMP_derivatives_lam_TCC1-1 nil 3828026099
   ("" (lemma "deriv_domain") (("" (propax) nil nil)) nil)
   ((deriv_domain formula-decl nil sqrt_derivative_lam nil)) nil
   (IMP_derivatives_lam assuming "derivatives_lam[T].derivatives_lam"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (IMP_derivatives_lam_TCC2 0
  (IMP_derivatives_lam_TCC2-1 nil 3828026099
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil sqrt_derivative_lam nil)) nil
   (IMP_derivatives_lam assuming "derivatives_lam[T].derivatives_lam"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (IMP_chain_rule_TCC1 0
  (IMP_chain_rule_TCC1-1 nil 3828026099
   ("" (lemma "deriv_domain_posreal") (("" (propax) nil nil)) nil)
   ((deriv_domain_posreal formula-decl nil deriv_domain nil)) nil
   (IMP_chain_rule assuming "chain_rule[T, posreal].chain_rule"
    "deriv_domain2: ASSUMPTION deriv_domain_def[T2].deriv_domain?")))
 (IMP_chain_rule_TCC2 0
  (IMP_chain_rule_TCC2-1 nil 3828026099
   ("" (lemma "not_one_element_posreal") (("" (propax) nil nil)) nil)
   ((not_one_element_posreal formula-decl nil deriv_domain nil)) nil
   (IMP_chain_rule assuming "chain_rule[T, posreal].chain_rule"
    "not_one_element2: ASSUMPTION deriv_domain_def[T2].not_one_element?")))
 (derivable_sqrt_lam 0
  (derivable_sqrt_lam-1 nil 3828009602
   ("" (skeep :preds? t)
    (("" (lemma "composition_derivable_fun")
      (("" (inst -1 "p" "LAMBDA(x:posreal):sqrt(x)")
        (("" (assert)
          (("" (split -1)
            (("1" (expand "o") (("1" (propax) nil nil)) nil)
             ("2" (hide (-1 2))
              (("2" (lemma "sqrt_derivable_fun")
                (("2" (expand "restrict") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((composition_derivable_fun formula-decl nil chain_rule nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sqrt_derivable_fun formula-decl nil sqrt_derivative nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (derivable? const-decl "bool" derivatives nil))
   shostak))
 (derivable_sqrt_lam_point 0
  (derivable_sqrt_lam_point-1 nil 3828010215
   ("" (skeep :preds? t)
    (("" (lemma "comp_derivable_point")
      (("" (inst -1 "pp" "LAMBDA(x:posreal):sqrt(x)" "x")
        (("" (assert)
          (("" (lemma "sqrt_derivable_fun")
            (("" (expand "restrict")
              (("" (expand "derivable?" -1)
                (("" (inst -1 "pp(x)") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comp_derivable_point formula-decl nil chain_rule nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (derivable? const-decl "bool" derivatives nil)
    (sqrt_derivable_fun formula-decl nil sqrt_derivative nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals))
   shostak))
 (deriv_sqrt_lam_TCC1 0
  (deriv_sqrt_lam_TCC1-1 nil 3828010662
   ("" (skeep :preds? t)
    (("" (lemma "derivable_sqrt_lam") (("" (insteep) nil nil)) nil))
    nil)
   ((derivable? const-decl "bool" derivatives nil)) nil
   (deriv_sqrt_lam subtype
    "LAMBDA (t): sqrt.sqrt(sqrt_derivative_lam.p(sqrt_derivative_lam.t))"
    "deriv_fun[T]")))
 (deriv_sqrt_lam 0
  (deriv_sqrt_lam-1 nil 3828010669
   ("" (skeep :preds? t)
    (("" (lemma "sqrt_derivable_fun")
      (("" (lemma "chain_rule")
        (("" (inst -1 "p" "LAMBDA(x:posreal):sqrt(x)")
          (("1" (lemma "deriv_sqrt")
            (("1" (assert)
              (("1" (expand "restrict")
                (("1" (replaces -1)
                  (("1" (replaces -1)
                    (("1" (beta)
                      (("1" (expand "*") (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "restrict") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_derivable_fun formula-decl nil sqrt_derivative nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_sqrt formula-decl nil sqrt_derivative nil)
    (chain_rule formula-decl nil chain_rule nil))
   shostak)))

