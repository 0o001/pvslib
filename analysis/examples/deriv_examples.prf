(deriv_examples
 (f_TCC1 0
  (f_TCC1-1 nil 3780487472 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (derivable_f 0
  (derivable_f-1 nil 3780487477 ("" (derivable) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_const_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_mult_lam formula-decl nil derivatives_lam "analysis/")
    (f const-decl "real" deriv_examples nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_g 0
  (derivable_g-1 nil 3780492832 ("" (derivable) nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_div_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (g const-decl "real" deriv_examples nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_f_plus_g 0
  (derivable_f_plus_g-1 nil 3780492892 ("" (derivable) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (g const-decl "real" deriv_examples nil)
    (f const-decl "real" deriv_examples nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (derivable_div_lam formula-decl nil derivatives_lam "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_const_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_mult_lam formula-decl nil derivatives_lam "analysis/"))
   shostak))
 (derivable_f_div_h 0
  (derivable_f_div_h-1 nil 3780494057
   ("" (then (flatten) (derivable)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (derivable_mult_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_const_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_div_lam formula-decl nil derivatives_lam "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (f const-decl "real" deriv_examples nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (h const-decl "[real -> nzreal]" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/ const-decl "[T -> real]" real_fun_ops "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_sq_f 0
  (derivable_sq_f-1 nil 3780494962 ("" (derivable) nil)
   ((comp_derivable_fun formula-decl nil chain_rule "analysis/")
    (f const-decl "real" deriv_examples nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_const_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_mult_lam formula-decl nil derivatives_lam "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq_f const-decl "real" deriv_examples nil))
   shostak))
 (derivable_f_o_g 0
  (derivable_f_o_g-1 nil 3780496707 ("" (derivable) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (derivable_mult_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_const_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (derivable_div_lam formula-decl nil derivatives_lam "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (f const-decl "real" deriv_examples nil)
    (g const-decl "real" deriv_examples nil)
    (comp_derivable_fun formula-decl nil chain_rule "analysis/")
    (O const-decl "T3" function_props nil))
   shostak)))

