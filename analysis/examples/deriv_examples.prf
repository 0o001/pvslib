(deriv_examples
 (f_TCC1 0
  (f_TCC1-1 nil 3780487472 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (derivable_f 0
  (derivable_f-1 nil 3780487477 ("" (derivable) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (f const-decl "real" deriv_examples nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_g 0
  (derivable_g-1 nil 3780492832 ("" (derivable) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (g const-decl "real" deriv_examples nil)
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_f_plus_g 0
  (derivable_f_plus_g-1 nil 3780492892 ("" (derivable) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (f const-decl "real" deriv_examples nil)
    (g const-decl "real" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (derivable_f_div_h 0
  (derivable_f_div_h-1 nil 3780494057
   ("" (then (flatten) (derivable)) nil deriv_f_div_h_TCC1)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (h const-decl "[real -> nzreal]" deriv_examples nil)
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (f const-decl "real" deriv_examples nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_div_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_sq_f 0
  (derivable_sq_f-1 nil 3780494962 ("" (derivable) nil nil)
   ((sq_f const-decl "real" deriv_examples nil)
    (derivable_mult_lam formula-decl nil derivatives_lam "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (f const-decl "real" deriv_examples nil)
    (comp_derivable_fun formula-decl nil chain_rule "analysis/"))
   shostak))
 (derivable_f_o_g 0
  (derivable_f_o_g-1 nil 3780496707 ("" (derivable) nil nil)
   ((comp_derivable_fun formula-decl nil chain_rule "analysis/")
    (g const-decl "real" deriv_examples nil)
    (f const-decl "real" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (O const-decl "T3" function_props nil))
   shostak))
 (deriv_f_TCC1 0
  (deriv_f_TCC1-1 nil 3780513655 ("" (derivable) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (f const-decl "real" deriv_examples nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (deriv_f 0
  (deriv_f-1 nil 3780504039
   ("" (then (skeep) (deriv "f") (assert)) nil nil)
   ((expt_x1 formula-decl nil exponentiation nil)
    (deriv_id_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_add_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (f const-decl "real" deriv_examples nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (deriv_g_TCC1 0
  (deriv_g_TCC1-1 nil 3780521596 ("" (derivable) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (g const-decl "real" deriv_examples nil)
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil))
 (deriv_g 0
  (deriv_g-1 nil 3780521597
   ("" (then (skeep) (deriv "g") (assert)) nil nil)
   ((g const-decl "real" deriv_examples nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (deriv_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (deriv_neg_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/"))
   shostak))
 (deriv_f_plus_g_TCC1 0
  (deriv_f_plus_g_TCC1-1 nil 3780521855 ("" (derivable) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (f const-decl "real" deriv_examples nil)
    (g const-decl "real" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (deriv_f_plus_g 0
  (deriv_f_plus_g-1 nil 3780521860
   ("" (then (skeep) (deriv "f+g") (assert)) nil nil)
   ((expt_x1 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (deriv_neg_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_id_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_add_lam formula-decl nil derivatives_lam "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (g const-decl "real" deriv_examples nil)
    (f const-decl "real" deriv_examples nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (deriv_f_div_h_TCC1 0
  (deriv_f_div_h_TCC1-1 nil 3780522090
   ("" (flatten) (("" (derivable) nil nil)) nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (h const-decl "[real -> nzreal]" deriv_examples nil)
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (f const-decl "real" deriv_examples nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_div_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (deriv_f_div_h 0
  (deriv_f_div_h-1 nil 3780522092
   ("" (then (skeep) (deriv "f/h") (assert)) nil nil)
   ((expt_x1 formula-decl nil exponentiation nil)
    (deriv_id_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_add_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_div_lam formula-decl nil derivatives_lam "analysis/")
    (nz_deriv_fun type-eq-decl nil derivatives "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (f const-decl "real" deriv_examples nil)
    (h const-decl "[real -> nzreal]" deriv_examples nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (deriv_sq_f_TCC1 0
  (deriv_sq_f_TCC1-1 nil 3780523603 ("" (derivable) nil nil)
   ((sq_f const-decl "real" deriv_examples nil)
    (derivable_mult_lam formula-decl nil derivatives_lam "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (f const-decl "real" deriv_examples nil)
    (comp_derivable_fun formula-decl nil chain_rule "analysis/"))
   nil))
 (deriv_sq_f_TCC2 0
  (deriv_sq_f_TCC2-1 nil 3780525052 ("" (subtype-tcc) nil nil) nil
   nil))
 (deriv_sq_f 0
  (deriv_sq_f-1 nil 3780523611
   ("" (skeep)
    (("" (deriv "sq_f")
      (("" (hide-all-but 1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (sq_f const-decl "real" deriv_examples nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (chain_rule formula-decl nil chain_rule "analysis/")
    (f const-decl "real" deriv_examples nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_mult_lam formula-decl nil derivatives_lam "analysis/")
    nil (deriv_mult_lam formula-decl nil derivatives_lam "analysis/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (deriv_pow_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_add_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_id_lam formula-decl nil derivatives_lam "analysis/")
    (expt_x1 formula-decl nil exponentiation nil) nil
    (expt def-decl "real" exponentiation nil))
   shostak))
 (deriv_f_o_g_TCC1 0
  (deriv_f_o_g_TCC1-1 nil 3780523603 ("" (derivable) nil nil)
   ((comp_derivable_fun formula-decl nil chain_rule "analysis/")
    (g const-decl "real" deriv_examples nil)
    (f const-decl "real" deriv_examples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (TRUE const-decl "bool" booleans nil)
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (O const-decl "T3" function_props nil))
   nil))
 (deriv_f_o_g 0
  (deriv_f_o_g-1 nil 3780523760
   ("" (skeep) (("" (deriv "f o g") (("" (real-props) nil nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (O const-decl "T3" function_props nil)
    (f const-decl "real" deriv_examples nil)
    (g const-decl "real" deriv_examples nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (chain_rule formula-decl nil chain_rule "analysis/")
    (derivable_neg_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (minus_real_is_real application-judgement "real" reals nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (derivable_pow_lam formula-decl nil derivatives_lam "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (deriv_pow_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_scal1_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_add_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_scald2_lam formula-decl nil derivatives_lam "analysis/")
    (deriv_id_lam formula-decl nil derivatives_lam "analysis/")
    (times_div1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (deriv_neg_lam formula-decl nil derivatives_lam "analysis/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (d__68 skolem-const-decl "[real -> real]" deriv_examples nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cross_mult formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (div_distributes_minus formula-decl nil real_props nil))
   shostak)))

