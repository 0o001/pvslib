vsLO  % [ parameters ]
		: THEORY

  BEGIN

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

    
  IMPORTING util, 
	 interface_analysis, 
	% integral_split_fun, 
	 reals@real_fun_ops[real], 
         vectors@vectors_3D, 
	 vectors@vectors_2D, 
	 vectors@vect_3D_2D, 
	 vsLevelOut

vsLO_acc(a1:real, a2:real, t1:real, t2:real, t3:real)(t:real): 
  real = 
  IF t<t1 THEN a1
  ELSIF t<t2 THEN 0
  ELSIF t<t3 THEN a2
  ELSE 0 
  ENDIF

vsLO_vel(voz:real, a1:real, a2:real, t1:real, t2:real, t3:real)(t:real):
  real = 
  IF t<t1 THEN voz+a1*t
  ELSIF t<t2 THEN voz+a1*t1
  ELSIF t<t3 THEN voz+a1*t1+a2*(t-t2)
  ELSE voz+a1*t1+a2*(t3-t2)
  ENDIF

vsLO_pos(soz:real, voz:real, a1:real, a2:real, t1:real, t2:real, t3:real)(t:real):
  real = 
  IF t<t1 THEN soz + voz*t + 0.5*a1*t
  ELSIF t<t2 THEN soz + voz*t+ 0.5*a1*t1 +(a1*t1)*(t-t1)
  ELSIF t<t3 THEN soz + voz*t+ 0.5*a1*t1 +(a1*t1)*(t2-t1) 
                  +(a1*t1-a2*t2)*(t-t2) +0.5*a2*(t^2-t2^2)  
  ELSE soz +voz*t+  0.5*a1*t1 +(a1*t1)*(t2-t1) 
           +(a1*t1-a2*t2)*(t3-t2) +0.5*a2*(t3^2-t2^2) 
           +(a1*t1+a2*(t3-t2))*(t-t3)  
  ENDIF 

vsLO_acc3d(a1:real, a2:real, t1:real, t2:real, t3:real)(t:real):
  Vect3 = 
  (# x:=0, 
     y:=0, 
     z:= vsLO_acc(a1,a2, t1, t2, t3)(t) #)

vsLO_vel3d(vo:Vect3, a1:real, a2:real, t1:real, t2:real, t3:real)(t:real):
  Vect3 = 
  (# x:=vo`x, 
     y:=vo`y, 
     z:=vsLO_vel(vo`z,a1,a2,t1,t2,t3)(t) #)

vsLO_pos3d(so:Vect3, vo:Vect3, a1:real, a2:real, t1:real, t2:real, t3:real)(t:real):
  Vect3 = 
  (# x:=so`x+vo`x*t, 
     y:=so`y+vo`y*t, 
     z:=vsLO_pos(so`z, vo`z, a1, a2, t1, t2, t3)(t) #)

vsLO_param(soz:real, voz:real, climbRate: posreal, targetAlt: nnreal, 
           accelup:posreal, acceldown:negreal, alterCR?:bool):
           [real, real, real, real, real] = 
  LET LOT = vsLevelOutTimes(soz, voz, climbRate, targetAlt, accelup, acceldown, alterCR?) IN 
  (LOT`1, LOT`2, LOT`3, LOT`5, LOT`6)

%Functions as in Kinematics. Might be problematic until the old vsLevelOut file is cleaned up...      

%vsLevelOutTimes(soz:real, voz:real, climbRate: posreal, targetAlt: nnreal, accelup:posreal, acceldown:negreal, alterCR?:bool): 

vsLevelOutCalculation(so:Vect3, vo:Vect3, targetAlt:nnreal, a1:real, a2:real, t1:real, t2:real, t3:real, t:real):
  [Vect3, Vect3] = 
  (vsLO_pos3d(so, vo, a1, a2, t1, t2, t3)(t), 
   vsLO_vel3d(vo, a1, a2, t1, t2, t3)(t))


vsLevelOut(so:Vect3, vo:Vect3, t:nnreal, climbRate:posreal, targetAlt:nnreal, accelup:posreal, acceldown:negreal, alterCR?:bool):
  [Vect3, Vect3] = 
  LET vsLOParam = vsLO_param(so`z, vo`z, climbRate, targetAlt, accelup, acceldown, alterCR?) IN
  ( vsLO_pos3d(so, vo, vsLOParam`4, vsLOParam`5, vsLOParam`1, vsLOParam`2, vsLOParam`3)(t), 
    vsLO_vel3d(vo, vsLOParam`4, vsLOParam`5, vsLOParam`1, vsLOParam`2, vsLOParam`3)(t) ) 


  


  END vsLO
