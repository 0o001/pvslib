(motion
 (deriv_domain 0
  (deriv_domain-1 nil 3602258980
   ("" (lemma "connected_deriv_domain[T]")
    (("" (lemma "connected_domain")
      (("" (assert)
        (("" (lemma "not_one_element") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((connected_domain formula-decl nil motion nil)
    (not_one_element formula-decl nil motion nil)
    (connected_deriv_domain formula-decl nil deriv_domain_def
     "analysis_ax/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (T formal-nonempty-subtype-decl nil motion nil))
   shostak))
 (Rate_fun_TCC1 0
  (Rate_fun_TCC1-1 nil 3579874474
   ("" (lemma "deriv_domain[T]")
    (("1" (propax) nil nil)
     ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
     ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
    nil)
   ((deriv_domain formula-decl nil motion nil)) nil))
 (Rate_fun_TCC2 0
  (Rate_fun_TCC2-1 nil 3579874474
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil motion nil)) nil))
 (integrable_Rate_fun_TCC1 0
  (integrable_Rate_fun_TCC1-1 nil 3598267628
   ("" (lemma "connected_domain") (("" (skosimp*) nil nil)) nil)
   ((connected_domain formula-decl nil motion nil)) nil))
 (integrable_Rate_fun 0
  (integrable_Rate_fun-1 nil 3598268044
   ("" (skeep)
    (("" (lemma "derivable_Integrable?[T]")
      (("1" (inst -1 "t0" "t" "rate")
        (("1" (typepred "rate") (("1" (assert) nil nil)) nil)) nil)
       ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
       ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Rate_fun type-eq-decl nil motion nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (not_one_element formula-decl nil motion nil)
    (connected_domain formula-decl nil motion nil))
   shostak))
 (derivable_integral_Rate_fun_TCC1 0
  (derivable_integral_Rate_fun_TCC1-1 nil 3598267111
   ("" (skosimp*)
    (("" (lemma "derivable_Integrable?[T]")
      (("1" (inst -1 "t0!1" "t!1" "rate!1") (("1" (assert) nil nil))
        nil)
       ("2" (lemma "connected_domain")
        (("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil))
        nil)
       ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Rate_fun type-eq-decl nil motion nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (not_one_element formula-decl nil motion nil)
    (connected_domain formula-decl nil motion nil))
   nil))
 (derivable_integral_Rate_fun 0
  (derivable_integral_Rate_fun-1 nil 3598267146
   ("" (skeep)
    (("" (lemma "derivable_add_lam[T]")
      (("1"
        (inst -1 "LAMBDA(t:T):x0"
         "LAMBDA(t:T):Integral[T](t0, t, rate)")
        (("1" (lemma "fundamental[T]")
          (("1"
            (inst -1 "LAMBDA(t:T): Integral[T](t0, t, rate)" "t0"
             "rate")
            (("1" (lemma "derivable_cont_fun[T]")
              (("1" (inst -1 "rate")
                (("1" (typepred "rate") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lemma "derivable_Integrable?[T]")
                (("2" (inst -1 "t0" "t" "rate")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "connected_domain") (("2" (propax) nil nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (lemma "derivable_Integrable?[T]")
            (("1" (inst -1 "t0" "t" "rate")
              (("1" (typepred "rate") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (lemma "connected_domain") (("2" (propax) nil nil))
              nil))
            nil))
          nil)
         ("3" (lemma "derivable_const_lam[T]")
          (("3" (inst -1 "x0") nil nil)) nil))
        nil)
       ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
       ("3" (lemma "deriv_domain[T]")
        (("1" (propax) nil nil)
         ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
         ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_const_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (fundamental formula-decl nil fundamental_theorem "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/")
    (derivable_cont_fun formula-decl nil derivatives "analysis_ax/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (connected_domain formula-decl nil motion nil)
    (t0 skolem-const-decl "T" motion nil)
    (rate skolem-const-decl "Rate_fun" motion nil)
    (x0 skolem-const-decl "real" motion nil)
    (Rate_fun type-eq-decl nil motion nil)
    (Integral const-decl "real" integral_def "analysis_ax/")
    (Integrable_funs type-eq-decl nil integral_def "analysis_ax/")
    (Integrable? const-decl "bool" integral_def "analysis_ax/")
    (deriv_fun type-eq-decl nil derivatives "analysis_ax/")
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (not_one_element formula-decl nil motion nil)
    (deriv_domain formula-decl nil motion nil))
   nil))
 (integrate_TCC1 0
  (integrate_TCC1-1 nil 3579874474
   ("" (skeep)
    (("" (lemma "derivable_integral_Rate_fun") (("" (inst?) nil nil))
      nil))
    nil)
   ((derivable_integral_Rate_fun formula-decl nil motion nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (T formal-nonempty-subtype-decl nil motion nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (Rate_fun type-eq-decl nil motion nil))
   nil))
 (integrate2_TCC1 0
  (integrate2_TCC1-1 nil 3579874474
   ("" (skeep)
    (("" (typepred "integrate(rate, v0, t0)")
      (("" (lemma "derivable_Integrable?[T]")
        (("1" (inst -1 "t0" "t" "integrate(rate, v0, t0)")
          (("1" (assert) nil nil)) nil)
         ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
         ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((integrate const-decl "Rate_fun" motion nil)
    (Rate_fun type-eq-decl nil motion nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (connected_domain formula-decl nil motion nil)
    (not_one_element formula-decl nil motion nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/"))
   nil))
 (integrate2_TCC2 0
  (integrate2_TCC2-1 nil 3579874474
   ("" (skeep)
    (("" (lemma "derivable_add_lam[T]")
      (("1"
        (inst -1 "LAMBDA(t:T):x0"
         "LAMBDA(t:T):Integral[T](t0, t, integrate(rate, v0, t0))")
        (("1" (hide 2)
          (("1" (typepred "integrate(rate, v0, t0)")
            (("1" (lemma "fundamental[T]")
              (("1"
                (inst -1
                 "LAMBDA(t:T): Integral[T](t0, t, integrate(rate, v0, t0))"
                 "t0" "integrate(rate, v0, t0)")
                (("1" (assert)
                  (("1" (lemma "derivable_cont_fun[T]")
                    (("1" (inst -1 "integrate(rate, v0, t0)")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (lemma "derivable_Integrable?[T]")
                    (("2" (inst -1 "t0" "t" "integrate(rate, v0, t0)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "connected_domain[T]")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (typepred "integrate(rate,v0,t0)")
              (("2" (lemma "derivable_Integrable?[T]")
                (("1" (inst -1 "t0" "t" "integrate(rate, v0, t0)")
                  (("1" (assert) nil nil)) nil)
                 ("2" (lemma "connected_domain[T]")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (lemma "derivable_const_lam[T]")
            (("3" (inst -1 "x0") nil nil)) nil))
          nil))
        nil)
       ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
       ("3" (lemma "deriv_domain[T]")
        (("1" (propax) nil nil)
         ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
         ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_const_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (fundamental formula-decl nil fundamental_theorem "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/")
    (derivable_cont_fun formula-decl nil derivatives "analysis_ax/")
    (connected_domain formula-decl nil motion nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (t0 skolem-const-decl "T" motion nil)
    (rate skolem-const-decl "Rate_fun" motion nil)
    (v0 skolem-const-decl "real" motion nil)
    (x0 skolem-const-decl "real" motion nil)
    (integrate const-decl "Rate_fun" motion nil)
    (Rate_fun type-eq-decl nil motion nil)
    (Integral const-decl "real" integral_def "analysis_ax/")
    (Integrable_funs type-eq-decl nil integral_def "analysis_ax/")
    (Integrable? const-decl "bool" integral_def "analysis_ax/")
    (deriv_fun type-eq-decl nil derivatives "analysis_ax/")
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (not_one_element formula-decl nil motion nil)
    (deriv_domain formula-decl nil motion nil))
   nil))
 (derive2_TCC1 0
  (derive2_TCC1-1 nil 3579874474
   ("" (skeep) (("" (typepred "rate") (("" (propax) nil nil)) nil))
    nil)
   ((deriv const-decl "[T -> real]" derivatives "analysis_ax/")
    (deriv_fun type-eq-decl nil derivatives "analysis_ax/")
    (Rate_fun type-eq-decl nil motion nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (speed_TCC1 0
  (speed_TCC1-1 nil 3598269850 ("" (subtype-tcc) nil nil)
   ((zero_in formula-decl nil motion nil)) nil))
 (speed_TCC2 0
  (speed_TCC2-1 nil 3598269850
   ("" (skeep)
    (("" (lemma "integrable_Rate_fun") (("" (inst?) nil nil)) nil))
    nil)
   ((integrable_Rate_fun formula-decl nil motion nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (T formal-nonempty-subtype-decl nil motion nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (Rate_fun type-eq-decl nil motion nil)
    (Acceleration_fun type-eq-decl nil motion nil))
   nil))
 (speed_TCC3 0
  (speed_TCC3-1 nil 3598269850
   ("" (skeep)
    (("" (lemma "derivable_integral_Rate_fun") (("" (inst?) nil nil))
      nil))
    nil)
   ((derivable_integral_Rate_fun formula-decl nil motion nil)
    (zero_in formula-decl nil motion nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (T formal-nonempty-subtype-decl nil motion nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (Rate_fun type-eq-decl nil motion nil)
    (Acceleration_fun type-eq-decl nil motion nil))
   nil))
 (position_TCC1 0
  (position_TCC1-1 nil 3579874474
   ("" (skeep)
    (("" (lemma "derivable_Integrable?[T]")
      (("1" (inst -1 "0" "t" "speed(a, v0)") (("1" (assert) nil nil))
        nil)
       ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
       ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (speed const-decl "Rate_fun" motion nil)
    (Rate_fun type-eq-decl nil motion nil)
    (Acceleration_fun type-eq-decl nil motion nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (not_one_element formula-decl nil motion nil)
    (connected_domain formula-decl nil motion nil))
   nil))
 (position_TCC2 0
  (position_TCC2-1 nil 3579874474
   ("" (skeep)
    (("" (lemma "derivable_integral_Rate_fun") (("" (inst?) nil nil))
      nil))
    nil)
   ((derivable_integral_Rate_fun formula-decl nil motion nil)
    (zero_in formula-decl nil motion nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (T formal-nonempty-subtype-decl nil motion nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (Rate_fun type-eq-decl nil motion nil)
    (Acceleration_fun type-eq-decl nil motion nil)
    (speed const-decl "Rate_fun" motion nil))
   nil))
 (no_accel_TCC1 0
  (no_accel_TCC1-1 nil 3579880472
   ("" (lemma "derivable_const_lam[T]")
    (("1" (inst -1 "0") nil nil)
     ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
     ("3" (lemma "deriv_domain[T]")
      (("1" (propax) nil nil)
       ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
       ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   ((deriv_domain formula-decl nil motion nil)
    (not_one_element formula-decl nil motion nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (derivable_const_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (T formal-nonempty-subtype-decl nil motion nil))
   nil))
 (const_accel_TCC1 0
  (const_accel_TCC1-1 nil 3579880472
   ("" (skeep)
    (("" (tccs-formula 1)
      (("" (lemma "derivable_const_lam[T]")
        (("1" (inst -1 "a") nil nil)
         ("2" (tccs-formula)
          (("2" (lemma "not_one_element") (("2" (propax) nil nil))
            nil))
          nil)
         ("3" (lemma "deriv_domain[T]")
          (("1" (propax) nil nil)
           ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
           ("3" (lemma "connected_domain") (("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain formula-decl nil motion nil)
    (not_one_element formula-decl nil motion nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (derivable_const_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (T formal-nonempty-subtype-decl nil motion nil))
   nil))
 (linear_accel_TCC1 0
  (linear_accel_TCC1-1 nil 3579880472
   ("" (skeep)
    (("" (lemma "derivable_add_lam[T]")
      (("1" (inst -1 "LAMBDA(t:T):a*t" "LAMBDA(t:T):b")
        (("1" (lemma "derivable_const_lam[T]")
          (("1" (inst -1 "b") nil nil)) nil)
         ("2" (lemma "derivable_scal1_lam[T]")
          (("2" (inst -1 "a" "LAMBDA(t:T):t")
            (("2" (lemma "derivable_id_lam[T]")
              (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
       ("3" (lemma "deriv_domain[T]")
        (("1" (propax) nil nil)
         ("2" (tccs-formula 3)
          (("2" (tccs-formula 2)
            (("2" (tccs-formula 1)
              (("2" (lemma "not_one_element") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "connected_domain") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_add_lam formula-decl nil derivatives_lam "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_scal1_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis_ax/")
    (derivable_const_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (b skolem-const-decl "real" motion nil)
    (a skolem-const-decl "real" motion nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives "analysis_ax/")
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (not_one_element formula-decl nil motion nil)
    (deriv_domain formula-decl nil motion nil))
   nil))
 (const_accel_speed 0
  (const_accel_speed-1 nil 3579880752
   ("" (skeep)
    (("" (expand "const_accel")
      (("" (expand "speed")
        (("" (apply-extensionality 1)
          (("1" (hide 2)
            (("1" (lemma "Integral_const_fun[T]")
              (("1" (inst -1 "a" "0" "x!1")
                (("1" (expand "const_fun") (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (lemma "not_one_element") (("2" (propax) nil nil))
                nil)
               ("3" (lemma "connected_domain") (("3" (propax) nil nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (lemma "derivable_Integrable?[T]")
              (("1" (inst -1 "0" "t_1" "LAMBDA(t:T):a")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (lemma "derivable_const_lam[T]")
                      (("1" (inst -1 "a") nil nil)
                       ("2" (lemma "deriv_domain[T]")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "not_one_element") (("2" (propax) nil nil))
                nil)
               ("3" (lemma "connected_domain") (("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((const_accel const-decl "Acceleration_fun" motion nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (T formal-nonempty-subtype-decl nil motion nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Integral const-decl "real" integral_def "analysis_ax/")
    (Integrable_funs type-eq-decl nil integral_def "analysis_ax/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_in formula-decl nil motion nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Integrable? const-decl "bool" integral_def "analysis_ax/")
    (a skolem-const-decl "real" motion nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Integral_const_fun formula-decl nil integral "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (not_one_element formula-decl nil motion nil)
    (connected_domain formula-decl nil motion nil)
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/")
    (derivable_const_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (deriv_domain formula-decl nil motion nil)
    (speed const-decl "Rate_fun" motion nil))
   shostak))
 (zero_accel_speed 0
  (zero_accel_speed-1 nil 3579880901
   ("" (skeep)
    (("" (expand "no_accel")
      (("" (lemma "const_accel_speed")
        (("" (inst -1 "0" "v")
          (("" (expand "const_accel") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((no_accel const-decl "Acceleration_fun" motion nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (const_accel const-decl "Acceleration_fun" motion nil)
    (const_accel_speed formula-decl nil motion nil))
   shostak))
 (zero_accel_pos 0
  (zero_accel_pos-1 nil 3579881240
   ("" (skeep)
    (("" (expand "position")
      (("" (apply-extensionality 1)
        (("1" (hide 2)
          (("1" (lemma "Integral_const_fun[T]")
            (("1" (inst -1 "v" "0" "x!1")
              (("1" (flatten)
                (("1" (hide -1)
                  (("1"
                    (case-replace "speed(no_accel, v)=const_fun(v)")
                    (("1" (assert) nil nil)
                     ("2" (hide -1 2)
                      (("2" (expand "const_fun")
                        (("2" (expand "speed")
                          (("2" (apply-extensionality 1)
                            (("1" (hide 2)
                              (("1"
                                (lemma "Integral_const_fun[T]")
                                (("1"
                                  (inst -1 "0" "0" "x!2")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "no_accel")
                                        (("1"
                                          (case-replace
                                           "(LAMBDA(t:T):0)=const_fun(0)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2 -1)
                                            (("2"
                                              (expand "const_fun")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "no_accel")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (lemma "derivable_Integrable?[T]")
                                    (("2"
                                      (inst -1 "0" "t" "no_accel")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "not_one_element") (("2" (propax) nil nil))
              nil)
             ("3" (lemma "connected_domain") (("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (typepred "speed(no_accel, v)")
              (("2" (lemma "derivable_Integrable?[T]")
                (("1" (inst -1 "0" "t" "speed(no_accel, v)")
                  (("1" (assert) nil nil)) nil)
                 ("2" (lemma "not_one_element")
                  (("2" (propax) nil nil)) nil)
                 ("3" (lemma "connected_domain")
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((position const-decl "Rate_fun" motion nil)
    (connected_domain formula-decl nil motion nil)
    (not_one_element formula-decl nil motion nil)
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_const_fun formula-decl nil integral "analysis_ax/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (v skolem-const-decl "real" motion nil)
    (no_accel const-decl "Acceleration_fun" motion nil)
    (speed const-decl "Rate_fun" motion nil)
    (Rate_fun type-eq-decl nil motion nil)
    (Acceleration_fun type-eq-decl nil motion nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (Integrable? const-decl "bool" integral_def "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (zero_in formula-decl nil motion nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Integrable_funs type-eq-decl nil integral_def "analysis_ax/")
    (Integral const-decl "real" integral_def "analysis_ax/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (const_accel_pos 0
  (const_accel_pos-2 nil 3601209146
   ("" (skeep)
    (("" (expand "position")
      (("" (apply-extensionality 1)
        (("1" (hide 2)
          (("1" (lemma "const_accel_speed")
            (("1" (hide -1)
              (("1" (lemma "const_accel_speed")
                (("1" (inst -1 "a" "v")
                  (("1" (replace -1)
                    (("1" (hide -1)
                      (("1" (lemma "Integral_sum[T]")
                        (("1"
                          (inst -1 "0" "x!1" "LAMBDA(t:T):v"
                           "LAMBDA(t:T):t*a")
                          (("1" (split)
                            (("1"
                              (case-replace
                               "(LAMBDA (x: T): v + x * a)=(LAMBDA (t: T): v + t * a)")
                              (("1"
                                (hide -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma
                                           "Integral_const_fun[T]")
                                          (("1"
                                            (inst -1 "v" "0" "x!1")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (expand "const_fun")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "integral_x_to_n[T]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "0"
                                                           "x!1"
                                                           "1"
                                                           "a")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (case-replace
                                                                   "(LAMBDA (t: T): t * a)=(LAMBDA (x: T): a * x ^ 1)")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (field)
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (expand
                                                                               "expt")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     2)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       1)
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "^")
                                                                          (("2"
                                                                            (expand
                                                                             "expt")
                                                                            (("2"
                                                                              (expand
                                                                               "expt")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (lemma "derivable_Integrable?[T]")
                                (("2"
                                  (inst
                                   -1
                                   "0"
                                   "x!1"
                                   "LAMBDA (t: T): v")
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma
                                         "derivable_const_lam[T]")
                                        (("1" (inst -1 "v") nil nil)
                                         ("2"
                                          (lemma "deriv_domain[T]")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (lemma "derivable_Integrable?[T]")
                                (("3"
                                  (inst
                                   -1
                                   "0"
                                   "x!1"
                                   "LAMBDA (t: T): t * a")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (lemma "derivable_scal2_lam[T]")
                                      (("1"
                                        (inst -1 "a" "LAMBDA(t:T): t")
                                        (("1"
                                          (hide 2 3)
                                          (("1"
                                            (lemma
                                             "derivable_id_lam[T]")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "deriv_domain[T]")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "not_one_element")
                          (("2" (propax) nil nil)) nil)
                         ("3" (lemma "connected_domain")
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (typepred "speed(const_accel(a), v)")
              (("2" (lemma "derivable_Integrable?[T]")
                (("1" (inst -1 "0" "t" "speed(const_accel(a), v)")
                  (("1" (assert) nil nil)) nil)
                 ("2" (lemma "not_one_element")
                  (("2" (propax) nil nil)) nil)
                 ("3" (lemma "connected_domain")
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (position const-decl "Rate_fun" motion nil)
    (connected_domain formula-decl nil motion nil)
    (not_one_element formula-decl nil motion nil)
    (derivable_scal2_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis_ax/")
    (deriv_fun type-eq-decl nil derivatives "analysis_ax/")
    (deriv_domain formula-decl nil motion nil)
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (derivable_const_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Integral_const_fun formula-decl nil integral "analysis_ax/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integral_x_to_n formula-decl nil table_of_integrals
     "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_sum formula-decl nil integral "analysis_ax/")
    (const_accel_speed formula-decl nil motion nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (v skolem-const-decl "real" motion nil)
    (a skolem-const-decl "real" motion nil)
    (const_accel const-decl "Acceleration_fun" motion nil)
    (speed const-decl "Rate_fun" motion nil)
    (Rate_fun type-eq-decl nil motion nil)
    (Acceleration_fun type-eq-decl nil motion nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (Integrable? const-decl "bool" integral_def "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (zero_in formula-decl nil motion nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Integrable_funs type-eq-decl nil integral_def "analysis_ax/")
    (Integral const-decl "real" integral_def "analysis_ax/")
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (T formal-nonempty-subtype-decl nil motion nil)
    (T_pred const-decl "[real -> boolean]" motion nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (const_accel_pos-1 nil 3579883585
   ("" (skeep)
    (("" (expand "position")
      (("" (apply-extensionality 1)
        (("1" (hide 2)
          (("1" (lemma "const_accel_speed")
            (("1" (inst -1 "a" "t0" "v")
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (lemma "Integral_sum[T]")
                    (("1"
                      (inst -1 "t0" "x!1" "LAMBDA(t:T):v-t0*a"
                       "LAMBDA(t:T):t*a")
                      (("1" (split)
                        (("1"
                          (case-replace
                           "(LAMBDA (x: T): v - t0 * a + x * a)=(LAMBDA (t: T): v + (t - t0) * a)")
                          (("1" (hide -1)
                            (("1" (flatten)
                              (("1"
                                (hide -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "Integral_const_fun[T]")
                                      (("1"
                                        (inst -1 "v-t0*a" "t0" "x!1")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand "const_fun")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (lemma
                                                     "integral_x_to_n[T]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "t0"
                                                       "x!1"
                                                       "1"
                                                       "a")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case-replace
                                                               "(LAMBDA (t: T): t * a)=(LAMBDA (x: T): a * x ^ 1)")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (field)
                                                                      (("1"
                                                                        (expand
                                                                         "^")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "expt")
                                                                            (("1"
                                                                              (expand
                                                                               "expt")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "^")
                                                                      (("2"
                                                                        (expand
                                                                         "expt")
                                                                        (("2"
                                                                          (expand
                                                                           "expt")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2" (apply-extensionality 1) nil nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (lemma "derivable_Integrable?[T]")
                            (("2"
                              (inst -1 "t0" "x!1"
                               "LAMBDA (t: T): v - t0 * a")
                              (("2"
                                (split)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "derivable_const_lam[T]")
                                    (("1" (inst -1 "v-t0*a") nil nil)
                                     ("2"
                                      (lemma "deriv_domain[T]")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (lemma "derivable_Integrable?[T]")
                            (("3"
                              (inst -1 "t0" "x!1"
                               "LAMBDA (t: T): t * a")
                              (("3"
                                (assert)
                                (("3"
                                  (lemma "derivable_scal2_lam[T]")
                                  (("1"
                                    (inst -1 "a" "LAMBDA(t:T): t")
                                    (("1"
                                      (hide 2 3)
                                      (("1"
                                        (lemma "derivable_id_lam[T]")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "deriv_domain[T]")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "not_one_element")
                      (("2" (propax) nil nil)) nil)
                     ("3" (lemma "connected_domain")
                      (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (typepred "speed(const_accel(a), v, t0)")
              (("2" (lemma "derivable_Integrable?[T]")
                (("1" (inst -1 "t0" "t" "speed(const_accel(a), v, t0)")
                  (("1" (assert) nil nil)) nil)
                 ("2" (lemma "not_one_element")
                  (("2" (propax) nil nil)) nil)
                 ("3" (lemma "connected_domain")
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_scal2_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (derivable_id_lam formula-decl nil derivatives_lam "analysis_ax/")
    (deriv_fun type-eq-decl nil derivatives "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (derivable_const_lam formula-decl nil derivatives_lam
     "analysis_ax/")
    (derivable_Integrable? formula-decl nil fundamental_theorem
     "analysis_ax/")
    (Integral_const_fun formula-decl nil integral "analysis_ax/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_sum formula-decl nil integral "analysis_ax/")
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (Integrable? const-decl "bool" integral_def "analysis_ax/")
    (Integrable_funs type-eq-decl nil integral_def "analysis_ax/")
    (Integral const-decl "real" integral_def "analysis_ax/"))
   shostak)))

