vsAUprops  % [ parameters ]
		: THEORY

  BEGIN

IMPORTING vsAU
          

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

vsAccelUntil_vel_fnd(voz:real, a:real, t1:real)(t:nnreal): 
  real = voz + Integral(0,t, vsAccelUntil_acc(a,t1))

vsAccelUntil_vel_equal: LEMMA FORALL (voz:real, a:real, t1:real, t:real):
  t>0 IMPLIES 
  vsAccelUntil_vel(voz, a,t1)(t) = 
  vsAccelUntil_vel_fnd(voz, a,t1)(t)

vsAccelUntil_pos_fnd(soz:real, voz:real, a:real, t1:real)(t:nnreal):
  real = soz + Integral(0,t, vsAccelUntil_vel(voz, a,t1))
  
vsAccelUntil_pos_equal: LEMMA FORALL (soz:real, voz:real, a:real, t1:real, t:real):
  t>0 IMPLIES 
  vsAccelUntil_pos(soz, voz, a,t1)(t) = 
  vsAccelUntil_pos_fnd(soz, voz, a,t1)(t)

vsAccelUntil_vel3d_fnd(vo:Vect3, a:real, t1:real)(t:nnreal):
  Vect3 = 
  (# x:=vo`x+Integral(0,t, LAMBDA(s:real): vsAccelUntil_acc3d(a,t1)(s)`x), 
     y:=vo`y+Integral(0,t, LAMBDA(s:real): vsAccelUntil_acc3d(a,t1)(s)`y), 
     z:=vo`z+Integral(0,t, LAMBDA(s:real): vsAccelUntil_acc3d(a,t1)(s)`z) #)

vsAccelUntil_vel3d_equal: LEMMA FORALL (vo:Vect3, a:real, t1:real, t:real):
  t>0 IMPLIES 
  vsAccelUntil_vel3d(vo, a,t1)(t) = 
  vsAccelUntil_vel3d_fnd(vo, a,t1)(t)

vsAccelUntil_pos3d_fnd(so:Vect3, vo:Vect3, a:real, t1:real)(t:nnreal):
  Vect3 = 
  (# x:=so`x+Integral(0,t, LAMBDA(s:real): vsAccelUntil_vel3d(vo,a,t1)(s)`x), 
     y:=so`y+Integral(0,t, LAMBDA(s:real): vsAccelUntil_vel3d(vo,a,t1)(s)`y), 
     z:=so`z+Integral(0,t, LAMBDA(s:real): vsAccelUntil_vel3d(vo,a,t1)(s)`z) #)

vsAccelUntil_pos3d_equal: LEMMA FORALL (so:Vect3, vo:Vect3, a:real, t1:real, t:real):
  t>0 IMPLIES 
  vsAccelUntil_pos3d(so,vo,a,t1)(t) = 
  vsAccelUntil_pos3d_fnd(so,vo,a,t1)(t)

vsAccelUntil_reach_goalVs: LEMMA FORALL (so:Vect3, vo:Vect3, t:nnreal, goalVs:real, accel:posreal):
  t > vsAccelUntil_param(vo`z, goalVs, accel)`2 IMPLIES 
  vsAccelUntil(so, vo, t, goalVs, accel)`2 = (# x:=vo`x, y:=vo`y, z:=goalVs #)


  END vsAUprops
