simple_motion_props : THEORY

  BEGIN

  IMPORTING simple_motion, 
            interface_analysis, 
            integral_split_fun[nnreal]

% Constant acceleration

accel_int?: LEMMA FORALL (a:real, t:nnreal):
  Integrable?(0,t,accel_comp(a))
            
vel_fnd(v:real, a:real)(t:nnreal):
  real = 
  v+Integral(0, t, accel_comp(a))

vel_equal: LEMMA FORALL (v:real, a:real):
  vel_comp(v, a) = vel_fnd(v,a)

vel_int?: LEMMA FORALL (v:real, a:real, t:nnreal):
  Integrable?(0,t,vel_comp(v,a))
 
pos_fnd(s:real, v:real, a:real)(t:nnreal):
  real = 
  s+Integral(0,t, vel_comp(v,a))

pos_equal: LEMMA FORALL (s:real, v:real, a:real):
  pos_fnd(s,v,a) = pos_comp(s,v,a)

% accelUntil functions 

accelUntil_int?: LEMMA FORALL (a:real, t1:nnreal, t:nnreal):
  Integrable?(0, t, accelUntil_comp(a,t1))
    
velUntil_fnd(v:real, a:real, t1:nnreal)(t:nnreal):
  real = 
  v+Integral(0, t, accelUntil_comp(a, t1))

velUntil_equal: LEMMA FORALL (v:real, a:real, t1:nnreal):
  velUntil_comp(v,a,t1) = velUntil_fnd(v, a, t1)

velUntil_int?: LEMMA FORALL (v:real, a:real, t1:nnreal, t:nnreal):
  Integrable?(0,t,velUntil_comp(v, a, t1))

posUntil_fnd(s:real, v:real, a:real, t1:nnreal)(t:nnreal):
  real = 
  s+Integral(0, t, velUntil_comp(v,a,t1))

posUntil_equal: LEMMA FORALL (s:real, v:real, a:real, t1:nnreal):
  posUntil_comp(s,v,a,t1) = posUntil_fnd(s,v,a,t1)

% Shows that the parameters for accelUntil are correct. 
% I.e., goalV is reached and maintained. 

accelUntil_reach_goal: LEMMA FORALL (s:real, v:real, goalV:real, accel:posreal, t:nnreal):
  t>accelUntil_param(v,goalV,accel)`2 IMPLIES
  accelUntil(s,v,goalV,accel)(t)`2 = goalV

% accelUntilRamp functions. 

accelUntilRamp_int?: LEMMA FORALL (a:real, t1:nnreal, t2:{x:nnreal|t1<=x}, t:nnreal):
  Integrable?(0,t,accelUntilRamp_comp(a, t1, t2))

velUntilRamp_fnd(v:real, a:real, t1:nnreal, t2:{x:nnreal|t1<=x})(t:nnreal):
  real =
  v+Integral(0,t,accelUntilRamp_comp(a, t1, t2))

velUntilRamp_equal: LEMMA FORALL (v:real, a:real, t1:nnreal, t2:{x:nnreal|t1<=x}):
  velUntilRamp_fnd(v, a, t1, t2) = velUntilRamp_comp(v, a, t1, t2) 

velUntilRamp_int?: LEMMA FORALL (v:real, a:real, t1:nnreal, t2:{x:nnreal|t1<=x}, t:nnreal):
  Integrable?(0,t,velUntilRamp_comp(v,a, t1, t2))  

posUntilRamp_fnd(s:real, v:real, a:real, t1:nnreal, t2:{x:nnreal|t1<=x})(t:nnreal):
  real = 
  s+Integral(0, t, velUntilRamp_comp(v,a,t1,t2))

posUntilRamp_equal: LEMMA FORALL (s:real, v:real, a:real, t1:nnreal, t2:{x:nnreal|t1<=x}):
  posUntilRamp_comp(s,v,a,t1,t2) = posUntilRamp_fnd(s,v,a,t1,t2)

% Show that the calculated parameters are in the correct order. 

accelUntilRamp_param_ordered: LEMMA FORALL (v:real, goalV:real, accel:posreal, rt:posreal,  t:nnreal):
  in_order?(0, 
           accelUntilRamp_param(v,goalV,accel,rt)`2, 
           accelUntilRamp_param(v,goalV,accel,rt)`3,
           max(t, accelUntilRamp_param(v,goalV,accel,rt)`3))

% Show that the parameters for accelUntilRamp are correct. 
% I.e., goalV is reached and maintained. 

accelUntilRamp_reach_goal: LEMMA FORALL (s:real, v:real, goalV:real, accel:posreal, rt:posreal, t:nnreal):
  t>accelUntilRamp_param(v,goalV,accel,rt)`3 IMPLIES
  accelUntilRamp(s,v,goalV,accel,rt)(t)`2 = goalV
     
END simple_motion_props
