(util
 (nnreal_lt_pi_TCC1 0
  (nnreal_lt_pi_TCC1-1 nil 3569326947 ("" (assert) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (posreal_lt_pi_TCC1 0
  (posreal_lt_pi_TCC1-1 nil 3569326947 ("" (assert) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (nnreal_lt_pi2_TCC1 0
  (nnreal_lt_pi2_TCC1-1 nil 3569326947 ("" (assert) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (posreal_lt_pi2_TCC1 0
  (posreal_lt_pi2_TCC1-1 nil 3569326947 ("" (assert) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (nnreal_le_pi_TCC1 0
  (nnreal_le_pi_TCC1-1 nil 3569326947 ("" (assert) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (posreal_le_pi_TCC1 0
  (posreal_le_pi_TCC1-1 nil 3569326947 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nnreal_le_pi2_TCC1 0
  (nnreal_le_pi2_TCC1-1 nil 3569326947 ("" (assert) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (posreal_le_pi2_TCC1 0
  (posreal_le_pi2_TCC1-1 nil 3569326947 ("" (assert) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (nnreal_le_2pi_TCC1 0
  (nnreal_le_2pi_TCC1-1 nil 3569332176 ("" (assert) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (nnreal_lt_2pi_TCC1 0
  (nnreal_lt_2pi_TCC1-1 nil 3569848526 ("" (assert) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (to2pi_near_sep 0
  (to2pi_near_sep-1 nil 3579333844
   ("" (skosimp*)
    (("" (expand "to2pi")
      (("" (factor 1)
        (("" (typepred "floor(alpha!1 / (2 * pi))")
          (("" (typepred "floor(beta!1 / (2 * pi))")
            (("" (hide -1 -2 -4 -5)
              (("" (div-by -2 "2*pi")
                (("" (lemma "floor_plus_int")
                  (("" (inst -1 "1" "alpha!1 / (2 * pi)")
                    (("" (lemma "floor_lt")
                      ((""
                        (inst -1 "beta!1 / (2 * pi)"
                         "(alpha!1 + 2 * pi) / (2 * pi)")
                        (("" (div-by -5 "2*pi")
                          (("" (neg-formula 1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (floor_lt formula-decl nil prelude_aux "reals/")
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_mult formula-decl nil extra_tegies nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (to2pi_near_same 0
  (to2pi_near_same-1 nil 3579330818
   ("" (skosimp*)
    (("" (expand "to2pi")
      (("" (factor 1)
        (("" (typepred "floor(alpha!1 / (2 * pi))")
          (("" (typepred "floor(beta!1 / (2 * pi))")
            (("" (lemma "floor_lt")
              (("" (div-by -6 "2*pi")
                (("" (inst -1 "alpha!1 / (2 * pi)" "beta!1 / (2 * pi)")
                  (("" (div-by -8 "2*pi")
                    (("" (hide -2 -3 -4 -7)
                      ((""
                        (name-replace "fa" "floor(alpha!1 / (2 * pi))")
                        ((""
                          (name-replace "fb"
                           "floor(beta!1 / (2 * pi))")
                          (("" (name-replace "a" "alpha!1 / (2 * pi)")
                            (("" (name-replace "b" "beta!1 / (2 * pi)")
                              (("" (mult-cases 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (floor_lt formula-decl nil prelude_aux "reals/")
    (zero_times3 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (groundSpeed_nzv 0
  (groundSpeed_nzv-1 nil 3601830121
   ("" (skosimp*)
    (("" (typepred "v!1")
      (("" (flatten)
        (("" (expand "groundSpeed")
          (("" (lemma "vectors_2D.norm_eq_0")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Nz_vect2 type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (groundSpeed const-decl "nnreal" util nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D
     "vectors/")
    (norm_eq_0 formula-decl nil vectors_2D "vectors/"))
   nil))
 (atan2_scal_lt2pi_TCC1 0
  (atan2_scal_lt2pi_TCC1-1 nil 3579436788
   ("" (skosimp*)
    (("" (typepred "k!1")
      (("" (hide -1)
        (("" (mult-cases -2)
          (("" (mult-cases -3)
            (("" (hide -1)
              (("" (lemma "sin2_cos2")
                (("" (inst -1 "a!1")
                  (("" (replace -2)
                    (("" (hide -2)
                      (("" (expand "sq") (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (nnreal_lt_2pi nonempty-type-eq-decl nil util nil)
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (cos const-decl "real" trig_basic "trig/")
    (zero_times3 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (sq const-decl "nonneg_real" sq "reals/")
    (sin2_cos2 formula-decl nil trig_basic "trig/")
    (sin const-decl "real" trig_basic "trig/"))
   nil))
 (atan2_scal_lt2pi 0
  (atan2_scal_lt2pi-1 nil 3579515885
   ("" (skeep)
    (("" (typepred "k")
      (("" (hide -1)
        (("" (lemma "atan2_cos_sin")
          (("" (inst -1 "a")
            (("" (expand "atan2")
              (("" (case "k*cos(a)>0")
                (("1" (assert)
                  (("1" (case "k*sin(a)>=0")
                    (("1" (assert)
                      (("1" (mult-cases -1)
                        (("1" (mult-cases -2) nil nil)) nil))
                      nil)
                     ("2" (mult-cases -1)
                      (("2" (mult-cases 1) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flip-ineq 1)
                  (("2" (assert)
                    (("2" (mult-cases -1)
                      (("2" (case "k*cos(a)=0")
                        (("1" (assert)
                          (("1" (mult-cases -1)
                            (("1" (hide -2)
                              (("1"
                                (case "k*sin(a)>0")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (mult-cases -1)
                                    (("1"
                                      (mult-ineq -1 -3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1)
                                  (("2"
                                    (flip-ineq 1)
                                    (("2"
                                      (assert)
                                      (("2" (mult-cases -1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (mult-cases 1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (atan2_cos_sin formula-decl nil atan2 "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (atan2 const-decl "real" atan2 "trig/")
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (abs_0 formula-decl nil abs_lems "reals/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (zero_times3 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (sin const-decl "real" trig_basic "trig/")
    (cos const-decl "real" trig_basic "trig/")
    (nnreal_lt_2pi nonempty-type-eq-decl nil util nil)
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil))
   shostak))
 (atan2_scal_TCC1 0
  (atan2_scal_TCC1-1 nil 3579436788
   ("" (skeep)
    (("" (typepred "k")
      (("" (hide -1)
        (("" (mult-cases -2)
          (("" (mult-cases -3)
            (("" (lemma "sin2_cos2")
              (("" (inst - "alpha")
                (("" (replace -4)
                  (("" (expand "sq") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (cos const-decl "real" trig_basic "trig/")
    (zero_times3 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (sin2_cos2 formula-decl nil trig_basic "trig/")
    (sq const-decl "nonneg_real" sq "reals/")
    (sin const-decl "real" trig_basic "trig/"))
   nil))
 (atan2_scal 0
  (atan2_scal-1 nil 3579519148
   ("" (skeep)
    (("" (lemma "atan2_scal_lt2pi")
      (("" (inst -1 "k" "to2pi(alpha)")
        (("" (expand "to2pi" -1 1)
          (("" (lemma "cos_period")
            (("" (inst -1 "alpha" "(-1)*(floor(alpha / (2 * pi)))")
              (("" (expand "to2pi" -2 1)
                (("" (lemma "sin_period")
                  ((""
                    (inst -1 "alpha"
                     "(-1) * (floor(alpha / (2 * pi)))")
                    (("" (name-replace "fa" "floor(alpha / (2 * pi))")
                      ((""
                        (case-replace
                         "alpha - 2 * (fa * pi)=alpha + 2 * ((-1) * fa) * pi")
                        (("1" (assert) nil nil)
                         ("2" (hide -1 -2 -3 2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan2_scal_lt2pi formula-decl nil util nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sin_period formula-decl nil trig_basic "trig/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 "trig/")
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_period formula-decl nil trig_basic "trig/")
    (to2pi const-decl "nnreal_lt_2pi" to2pi nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil atan2 "trig/")
    (nnreal_lt_2pi nonempty-type-eq-decl nil util nil)
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (mkTrkGsVs_nonzero 0
  (mkTrkGsVs_nonzero-1 nil 3610273119
   ("" (skeep)
    (("" (expand "mkTrkGsVs")
      (("" (expand "vect2")
        (("" (lemma "trkgs2vect_nonzero")
          (("" (inst - "gsp" "trk")
            (("" (expand "trkgs2vect")
              (("" (expand "*") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mkTrkGsVs const-decl "Vect3" util nil)
    (trkgs2vect_nonzero judgement-tcc nil track nil)
    (trkgs2vect const-decl "Vect2" track nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/"))
   nil))
 (track_mktrk 0
  (track_mktrk-1 nil 3579437397
   ("" (skeep)
    (("" (expand "track")
      (("" (expand "mkTrkGsVs")
        (("" (lemma "atan2_scal") (("" (inst - "trk" "gs!1") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((track const-decl "nnreal_lt_2pi" track_3D nil)
    (atan2_scal formula-decl nil util nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mkTrkGsVs const-decl "Vect3" util nil))
   shostak))
 (mkTrkGsVs_def 0
  (mkTrkGsVs_def-1 nil 3634319792
   ("" (skeep)
    (("" (expand "trk")
      (("" (lift-if)
        (("" (case "vect2(v)`x = 0 AND vect2(v)`y = 0")
          (("1" (hide +)
            (("1" (flatten)
              (("1" (expand "gs")
                (("1" (expand "vect2")
                  (("1" (expand "norm")
                    (("1" (expand "sqv")
                      (("1" (expand "*")
                        (("1" (replaces -1)
                          (("1" (replaces -1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace 1)
            (("2" (lemma "trkgs2vect_id")
              (("2" (inst - "v")
                (("2" (expand "gs")
                  (("2" (expand "mkTrkGsVs")
                    (("2" (expand "trkgs2vect")
                      (("2" (expand "*" -1)
                        (("2" (decompose-equality -1)
                          (("2" (decompose-equality 2)
                            (("1" (expand "vect2" -1 3)
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "vect2" -2 3)
                              (("2" (propax) nil nil)) nil)
                             ("3" (expand "vs" 1)
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trk const-decl "nnreal_lt_2pi" track nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (sqrt_0 formula-decl nil sqrt "reals/")
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (* const-decl "real" vectors_2D "vectors/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (gs const-decl "nnreal" util nil)
    (trkgs2vect_id formula-decl nil track nil)
    (trkgs2vect const-decl "Vect2" track nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sin const-decl "real" trig_basic "trig/")
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (nnreal_lt_2pi nonempty-type-eq-decl nil atan2 "trig/")
    (track const-decl "nnreal_lt_2pi" track nil)
    (cos const-decl "real" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (vs const-decl "real" util nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (mkTrkGsVs const-decl "Vect3" util nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D "vectors/")
    (Nz_vect2 type-eq-decl nil vectors_2D "vectors/"))
   shostak))
 (util_turnDelta_TCC1 0
  (util_turnDelta_TCC1-1 nil 3569326947
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "to2pi")
          (("" (expand "abs")
            (("" (case "a-b<0")
              (("1" (grind-reals) nil nil) ("2" (grind-reals) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil atan2 "trig/")
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (cos_util_turnDelta 0
  (cos_util_turnDelta-1 nil 3603634197
   ("" (skeep)
    (("" (expand "util_turnDelta")
      (("" (lift-if)
        (("" (ground)
          (("1" (case "FORALL (aa:real): cos(abs(aa)) = cos(aa)")
            (("1" (rewrite -1)
              (("1" (hide -1)
                (("1" (rewrite "cos_minus")
                  (("1" (rewrite "cos_minus")
                    (("1"
                      (case "FORALL (aa:real): cos(to2pi(aa)) = cos(aa)")
                      (("1" (rewrite -1)
                        (("1" (rewrite -1)
                          (("1"
                            (case "FORALL (aa:real): sin(to2pi(aa)) = sin(aa)")
                            (("1" (rewrite -1)
                              (("1" (rewrite -1) nil nil)) nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "to2pi")
                                  (("2"
                                    (lemma "sin_period")
                                    (("2"
                                      (inst
                                       -
                                       "aa"
                                       "-floor(aa / (2 * pi))")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skeep)
                          (("2" (expand "to2pi")
                            (("2" (lemma "cos_period")
                              (("2"
                                (inst - "aa" "-floor(aa / (2 * pi))")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (skeep)
                (("2" (expand "abs")
                  (("2" (lift-if)
                    (("2" (ground) (("2" (rewrite "cos_neg") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "cos_period")
            (("2" (inst - "- abs(to2pi(alpha) - to2pi(beta))" "1")
              (("2" (assert)
                (("2" (replaces -1 :dir rl)
                  (("2" (rewrite "cos_neg")
                    (("2"
                      (case "FORALL (aa:real): cos(abs(aa)) = cos(aa)")
                      (("1" (rewrite -1)
                        (("1" (rewrite "cos_minus")
                          (("1" (rewrite "cos_minus")
                            (("1"
                              (case "FORALL (aa:real): cos(to2pi(aa)) = cos(aa)")
                              (("1"
                                (rewrite -1)
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (case
                                     "FORALL (aa:real): sin(to2pi(aa)) = sin(aa)")
                                    (("1"
                                      (rewrite -1)
                                      (("1" (rewrite -1) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "to2pi")
                                          (("2"
                                            (lemma "sin_period")
                                            (("2"
                                              (inst
                                               -
                                               "aa"
                                               "-floor(aa / (2 * pi))")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "to2pi")
                                    (("2"
                                      (lemma "cos_period")
                                      (("2"
                                        (inst
                                         -
                                         "aa"
                                         "-floor(aa / (2 * pi))")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skeep)
                          (("2" (expand "abs")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("2" (rewrite "cos_neg") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (util_turnDelta const-decl "nnreal_le_pi" util nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_neg formula-decl nil trig_basic "trig/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (nnreal_lt_2pi nonempty-type-eq-decl nil atan2 "trig/")
    (to2pi const-decl "nnreal_lt_2pi" to2pi nil)
    (cos_minus formula-decl nil trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (sin_period formula-decl nil trig_basic "trig/")
    (sin const-decl "real" trig_basic "trig/")
    (cos_period formula-decl nil trig_basic "trig/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" trig_basic "trig/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (sin_util_turnDelta 0
  (sin_util_turnDelta-1 nil 3603635295
   ("" (skeep)
    (("" (assert)
      (("" (expand "det")
        (("" (case "NOT sin(util_turnDelta(alpha, beta))>=0")
          (("1" (hide 2)
            (("1" (typepred "util_turnDelta(alpha,beta)")
              (("1" (assert)
                (("1" (lemma "sin_ge_0")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "util_turnDelta")
            (("2" (expand "abs")
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (case
                                 "FORALL (aa:real): cos(to2pi(aa)) = cos(aa)")
                                (("1"
                                  (label "c1" -1)
                                  (("1"
                                    (case
                                     "FORALL (aa:real): sin(to2pi(aa)) = sin(aa)")
                                    (("1"
                                      (label "s1" -1)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (rewrite "sin_neg")
                                          (("1"
                                            (rewrite "sin_minus")
                                            (("1"
                                              (rewrite "s1")
                                              (("1"
                                                (rewrite "s1")
                                                (("1"
                                                  (rewrite "c1")
                                                  (("1"
                                                    (rewrite "c1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "sin_neg")
                                          (("2"
                                            (rewrite "sin_minus")
                                            (("2"
                                              (rewrite "s1")
                                              (("2"
                                                (rewrite "s1")
                                                (("2"
                                                  (rewrite "c1")
                                                  (("2"
                                                    (rewrite "c1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "sin_plus")
                                          (("3"
                                            (inst
                                             -
                                             "2*pi"
                                             "to2pi(alpha) - to2pi(beta)")
                                            (("3"
                                              (replaces -1)
                                              (("3"
                                                (rewrite "sin_2pi")
                                                (("3"
                                                  (rewrite "cos_2pi")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (rewrite
                                                       "sin_minus")
                                                      (("3"
                                                        (rewrite "s1")
                                                        (("3"
                                                          (rewrite
                                                           "s1")
                                                          (("3"
                                                            (rewrite
                                                             "c1")
                                                            (("3"
                                                              (rewrite
                                                               "c1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (lemma "sin_plus")
                                          (("4"
                                            (inst
                                             -
                                             "2*pi"
                                             "to2pi(alpha) - to2pi(beta)")
                                            (("4"
                                              (replaces -1)
                                              (("4"
                                                (rewrite "sin_2pi")
                                                (("4"
                                                  (rewrite "cos_2pi")
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (rewrite
                                                       "sin_minus")
                                                      (("4"
                                                        (rewrite "s1")
                                                        (("4"
                                                          (rewrite
                                                           "s1")
                                                          (("4"
                                                            (rewrite
                                                             "c1")
                                                            (("4"
                                                              (rewrite
                                                               "c1")
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (rewrite "sin_minus")
                                          (("5"
                                            (rewrite "s1")
                                            (("5"
                                              (rewrite "s1")
                                              (("5"
                                                (rewrite "c1")
                                                (("5"
                                                  (rewrite "c1")
                                                  (("5"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (rewrite "sin_minus")
                                          (("6"
                                            (rewrite "s1")
                                            (("6"
                                              (rewrite "s1")
                                              (("6"
                                                (rewrite "c1")
                                                (("6"
                                                  (rewrite "c1")
                                                  (("6"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("7"
                                          (rewrite "sin_plus")
                                          (("7"
                                            (rewrite "sin_2pi")
                                            (("7"
                                              (rewrite "cos_2pi")
                                              (("7"
                                                (assert)
                                                (("7"
                                                  (rewrite "sin_minus")
                                                  (("7"
                                                    (rewrite "s1")
                                                    (("7"
                                                      (rewrite "s1")
                                                      (("7"
                                                        (rewrite "c1")
                                                        (("7"
                                                          (rewrite
                                                           "c1")
                                                          (("7"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("8"
                                          (rewrite "sin_plus")
                                          (("8"
                                            (rewrite "sin_2pi")
                                            (("8"
                                              (rewrite "cos_2pi")
                                              (("8"
                                                (assert)
                                                (("8"
                                                  (rewrite "sin_minus")
                                                  (("8"
                                                    (rewrite "s1")
                                                    (("8"
                                                      (rewrite "s1")
                                                      (("8"
                                                        (rewrite "c1")
                                                        (("8"
                                                          (rewrite
                                                           "c1")
                                                          (("8"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "to2pi")
                                            (("2"
                                              (lemma "sin_period")
                                              (("2"
                                                (inst
                                                 -
                                                 "aa"
                                                 "-floor(aa / (2 * pi))")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "to2pi")
                                      (("2"
                                        (lemma "cos_period")
                                        (("2"
                                          (inst
                                           -
                                           "aa"
                                           "-floor(aa / (2 * pi))")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (util_turnDelta const-decl "nnreal_le_pi" util nil)
    (nnreal_le_pi nonempty-type-eq-decl nil util nil)
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (< const-decl "bool" reals nil)
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sin const-decl "real" trig_basic "trig/")
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sin_ge_0 formula-decl nil trig_ineq "trig/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_period formula-decl nil trig_basic "trig/")
    (sin_period formula-decl nil trig_basic "trig/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (sin_plus formula-decl nil trig_basic "trig/")
    (cos_2pi formula-decl nil trig_basic "trig/")
    (sin_2pi formula-decl nil trig_basic "trig/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_neg formula-decl nil trig_basic "trig/")
    (sin_minus formula-decl nil trig_basic "trig/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil atan2 "trig/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" trig_basic "trig/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (det const-decl "real" det_2D "vectors/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (util_turnDelta_TCC2 0
  (util_turnDelta_TCC2-1 nil 3610203985 ("" (subtype-tcc) nil nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi nil))
   nil))
 (util_turnDelta_TCC3 0
  (util_turnDelta_TCC3-1 nil 3610203985 ("" (subtype-tcc) nil nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (to2pi const-decl "nnreal_lt_2pi" to2pi nil))
   nil))
 (mkAlt_TCC1 0
  (mkAlt_TCC1-1 nil 3607084869 ("" (subtype-tcc) nil nil)
   ((vect2 const-decl "Vect2" vect_3D_2D "vectors/")) nil))
 (Vect3_TCC1 0
  (Vect3_TCC1-1 nil 3607084869
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (Hat_TCC1 0
  (Hat_TCC1-1 nil 3610203985
   ("" (skeep)
    (("" (assert)
      (("" (ground)
        (("" (lemma "vectors_2D.norm_eq_0")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (Hat_TCC2 0
  (Hat_TCC2-1 nil 3610203985
   ("" (skeep)
    (("" (assert)
      (("" (lemma "vectors_2D.norm_eq_0")
        (("" (inst - "w") (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((norm_zero formula-decl nil vectors_2D "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (norm_eq_0 formula-decl nil vectors_2D "vectors/"))
   nil))
 (Hat_TCC3 0
  (Hat_TCC3-1 nil 3610204324 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (Hat_TCC4 0
  (Hat_TCC4-1 nil 3610204324
   ("" (skeep)
    (("" (assert)
      (("" (split)
        (("1" (ground)
          (("1" (case "NOT vectors_2D.zero`x = w`x/n")
            (("1" (replaces -1 :dir rl)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)) nil)
             ("2" (case "NOT vectors_2D.zero`y = w`y/n")
              (("1" (replace -2 :dir rl)
                (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil))
                nil)
               ("2" (decompose-equality 1) nil nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2"
            (case "w`x=vectors_2D.zero`x AND w`y=vectors_2D.zero`y")
            (("1" (flatten)
              (("1" (replaces -1)
                (("1" (replaces -1) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (decompose-equality -1) nil nil))
            nil))
          nil)
         ("3" (flatten)
          (("3" (split)
            (("1" (rewrite "sq_eq" :dir rl)
              (("1" (rewrite "sq_norm")
                (("1" (replaces -1)
                  (("1" (rewrite "sqv_sos")
                    (("1" (expand "sos")
                      (("1" (expand "Vect2")
                        (("1" (expand "norm")
                          (("1" (rewrite "sq_div")
                            (("1" (rewrite "sq_div")
                              (("1"
                                (assert)
                                (("1"
                                  (mult-by 1 "sqv(w)")
                                  (("1"
                                    (real-props)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1 :dir rl) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("4" (flatten)
          (("4" (replaces -3) (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (scal_zero formula-decl nil vectors_2D "vectors/")
    (norm_zero formula-decl nil vectors_2D "vectors/")
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (sq_eq formula-decl nil sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sq_1 formula-decl nil sq "reals/")
    (sos const-decl "nnreal" vectors_2D "vectors/")
    (sq_sqrt formula-decl nil sqrt "reals/")
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_distributes formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_div formula-decl nil sq "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (sqv_sos formula-decl nil vectors_2D "vectors/")
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (sqrt_0 formula-decl nil sqrt "reals/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (comp_zero_x formula-decl nil vectors_2D "vectors/")
    (comp_zero_y formula-decl nil vectors_2D "vectors/")
    (Vect2 const-decl "{vv: Vect2 | vv`x = x AND vv`y = y}" util nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil))
   nil)))

