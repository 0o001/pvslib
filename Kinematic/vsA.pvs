vsA  % [ parameters ]
		: THEORY

  BEGIN

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

 IMPORTING util, 
	 interface_analysis, 
	% integral_split_fun, 
	 reals@real_fun_ops[real], 
         vectors@vectors_3D, 
	 vectors@vectors_2D, 
	 vectors@vect_3D_2D

vsAccel_acc(a:real)(t:real):
  real = 
  a

vsAccel_vel(voz:real, a:real)(t:real):
  real = 
  voz+a*t

vsAccel_pos(soz:real, voz:real, a:real)(t:real):
  real = 
  soz+voz*t+0.5*a*t*t

vsAccel_acc3d(a:real)(t:real):
  Vect3 = 
  (# x:=0, 
     y:=0, 
     z:= vsAccel_acc(a)(t) #)

vsAccel_vel3d(vo:Vect3, a:real)(t:real):
  Vect3 = 
  (# x:=vo`x, 
     y:=vo`y, 
     z:=vsAccel_vel(vo`z,a)(t) #)

vsAccel_pos3d(so:Vect3, vo:Vect3, a:real)(t:real):
  Vect3 = 
  (# x:=so`x+vo`x*t, 
     y:=so`y+vo`y*t, 
     z:=vsAccel_pos(so`z, vo`z, a)(t) #)

%Functions with signatures as in Kinematics.

vsAccelPos(so:Vect3, vo:Vect3, t:nnreal, a:real):
  Vect3 = 
  vsAccel_pos3d(so, vo, a)(t)

vsAccel(so:Vect3, vo:Vect3, t:nnreal, a:real):
  [Vect3, Vect3] = 
  ( vsAccel_pos3d(so, vo, a)(t), 
    vsAccel_vel3d(vo, a)(t) )
  

  END vsA
