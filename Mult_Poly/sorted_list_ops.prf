(sorted_list_ops
 (leq_first_filter 0
  (leq_first_filter-1 nil 3813072421
   ("" (induct "l")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (expand "filter" +)
            (("3" (lift-if 1)
              (("3" (split 1)
                (("1" (flatten) nil nil)
                 ("2" (flatten)
                  (("2" (case "null?(cons2_var)")
                    (("1" (assert)
                      (("1" (hide -2)
                        (("1" (expand "filter" -4)
                          (("1" (assert)
                            (("1" (expand "filter" -4)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "filter" -4)
                        (("2" (assert)
                          (("2" (inst -1 "t" "P")
                            (("2" (lemma "cdr_of_sorted_is_sorted")
                              (("2"
                                (inst -1 "cons(cons1_var, cons2_var)")
                                (("2"
                                  (split -2)
                                  (("1" (propax) nil nil)
                                   ("2" (assert) nil nil)
                                   ("3"
                                    (hide -1)
                                    (("3"
                                      (expand "is_sorted?" -)
                                      (("3"
                                        (inst -1 "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "length" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "nth" -1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -1)
                                                        (("1"
                                                          (typepred
                                                           "leq")
                                                          (("1"
                                                            (expand
                                                             "total_preorder?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "preorder?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "transitive?")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "t"
                                                                       "cons1_var"
                                                                       "car(cons2_var)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "length")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons1_var skolem-const-decl "T" sorted_list_ops nil)
    (cons2_var skolem-const-decl "list[T]" sorted_list_ops nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sorted_list_ops nil)
    (filter def-decl "list[T]" filters nil)
    (pred type-eq-decl nil defined_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq formal-const-decl "(total_preorder?[T])" sorted_list_ops nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (filter_is_sorted 0
  (filter_is_sorted-1 nil 3813072161
   ("" (induct " l ")
    (("1" (skeep)
      (("1" (assert)
        (("1" (expand "is_sorted?")
          (("1" (skeep :preds? T)
            (("1" (expand "filter" -1) (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (expand "filter" 1)
            (("2" (assert)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (lemma "cdr_of_sorted_is_sorted")
                    (("1" (inst -1 "cons(cons1_var, cons2_var)")
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (inst -3 "P")
                            (("1" (lemma "leq_first_filter")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst -1 "cons1_var")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "is_sorted?" -5)
                                      (("1"
                                        (case "null?(cons2_var)")
                                        (("1"
                                          (expand " filter" +)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (inst -5 "0")
                                          (("1"
                                            (expand "length" -5)
                                            (("1"
                                              (expand "length" -5)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" -5)
                                                    (("1"
                                                      (expand "nth" -5)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (expand
                                                             "is_sorted?"
                                                             2)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (case
                                                                 " k =0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       +)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "is_sorted?"
                                                                       -5)
                                                                      (("2"
                                                                        (inst
                                                                         -5
                                                                         "k-1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -4)
                                                                            (("2"
                                                                              (typepred
                                                                               "k")
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "is_sorted?"
                                                             3)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (typepred
                                                                 "k")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -4)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             " length"
                                                                             -4)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "filter" 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst -1 "P")
                    (("2" (assert)
                      (("2" (lemma "cdr_of_sorted_is_sorted")
                        (("2" (inst -1 "cons(cons1_var, cons2_var)")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (leq_first_filter formula-decl nil sorted_list_ops nil)
    (cons1_var skolem-const-decl "T" sorted_list_ops nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons2_var skolem-const-decl "list[T]" sorted_list_ops nil)
    (cdr_of_sorted_is_sorted formula-decl nil sorting sorting)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sorted_list_ops nil)
    (filter def-decl "list[T]" filters nil)
    (pred type-eq-decl nil defined_types nil)
    (is_sorted? const-decl "bool" sorting sorting)
    (leq formal-const-decl "(total_preorder?[T])" sorted_list_ops nil)
    (total_preorder? const-decl "bool" total_preorder sorting)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))

