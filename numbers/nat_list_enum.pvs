nat_list_enum: THEORY

BEGIN

  IMPORTING reals@log_nat,reals@sqrt_approx

  i,j,k,n,m : VAR nat

  sum_upto_floor_search(n,(k|k*(k+1)<=2*n)): RECURSIVE {j | j*(j+1)/2<=n AND n<(j+1)*(j+2)/2} =
      IF (k+1)*(k+2)>2*n THEN k
      ELSE sum_upto_floor_search(n,k+1) ENDIF
      MEASURE 4*n-k

  sum_upto_floor(n): {j | j*(j+1)/2<=n AND n<(j+1)*(j+2)/2} =
    IF n<1 THEN 0 ELSE
    sum_upto_floor_search(n,max(floor(sqrt_lb(2*n,4))-1,0)) ENDIF

  sum_upto_floor_unique: LEMMA
    j*(j+1)/2<=n AND n<(j+1)*(j+2)/2 IMPLIES
    j = sum_upto_floor(n)

  double_nat_enum(n): [nat,nat]=
    LET k = sum_upto_floor(n),
    	fix = n-k*(k+1)/2
    IN (fix,k-fix)

  double_nat_enum_inv(n,m): nat =
    (n+m+1)*(n+m+2)/2-1-m

  double_nat_enum_inv_def: LEMMA
    double_nat_enum(double_nat_enum_inv(n,m))=(n,m)

  double_nat_enum_inv_def2: LEMMA
    double_nat_enum_inv(double_nat_enum(n))=n

  nat_pair_to_list_length(n,m): RECURSIVE {l:list[nat] | length(l)=n+1} =
    IF n=0 THEN cons[nat](m,null[nat])
    ELSE LET (i,j)=double_nat_enum(m) IN
      cons[nat](j,nat_pair_to_list_length(n-1,i))
    ENDIF MEASURE n

  nat_pair_to_list_length_inv(n,(l:list[nat] | length(l)=n+1)): RECURSIVE [nat,nat] =
    IF n=0 THEN (n,car(l))
    ELSE (n,double_nat_enum_inv(nat_pair_to_list_length_inv(n-1,cdr(l))`2,car(l))) ENDIF MEASURE n

  nat_pair_to_list_length_inv_def: LEMMA FORALL (n,(l:list[nat] | length(l)=n+1)):
    nat_pair_to_list_length(nat_pair_to_list_length_inv(n,l))=l

  nat_pair_to_list_length_inv_def2: LEMMA 
    nat_pair_to_list_length_inv(n,nat_pair_to_list_length(n,m))=(n,m)

  nat_list_enum(n:nat): list[nat] = 
    IF n=0 THEN null[nat]
    ELSE LET (i,j) = double_nat_enum(n-1) IN
      nat_pair_to_list_length(i,j)
    ENDIF

  nat_list_enum_inv(l:list[nat]): nat =
    IF null?(l) THEN 0
    ELSE double_nat_enum_inv(nat_pair_to_list_length_inv(length(l)-1,l))+1 ENDIF

  nat_list_enum_inv_def: LEMMA FORALL (l:list[nat]):
    nat_list_enum(nat_list_enum_inv(l))=l

  nat_list_enum_inv_def2: LEMMA
    nat_list_enum_inv(nat_list_enum(n))=n

  nat_list_enum_inv_bijective: LEMMA bijective?[nat,list[nat]](nat_list_enum)

  nat_list_enum_test: LEMMA nat_list_enum(9921997352295461495916968083046817497847888441) = (: 4, 5, 6, 2, 4, 5 :)




END nat_list_enum
