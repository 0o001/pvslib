tuple2nat : THEORY
BEGIN

  tuple2nat(m,n : nat): nat = (m+n+1)*(m+n)/2 + n

  tuple2nat2(m,n : nat): RECURSIVE nat=
    IF m=0 AND n=0 THEN 0
    ELSIF n = 0 THEN tuple2nat2(0,m-1)+1
    ELSE tuple2nat2(m+1,n-1)+1
    ENDIF
  MEASURE tuple2nat(m,n)

  tuple2nat_eq: LEMMA
    FORALL(m,n:nat): tuple2nat(m,n)=tuple2nat2(m,n)

  nat2tuple(i : nat) : RECURSIVE [nat,nat] =
    IF i = 0 THEN (0,0)
    ELSIF nat2tuple(i-1)`1 = 0 THEN (nat2tuple(i-1)`2+1,0)
    ELSE (nat2tuple(i-1)`1-1, nat2tuple(i-1)`2+1)
    ENDIF
  MEASURE i

  nat2tuple_first: LEMMA
    FORALL(n:nat): nat2tuple(n)`1 <= n AND nat2tuple(n)`2 <= n

  tuple2nat_nat2tuple: LEMMA
    FORALL(n : nat): tuple2nat(nat2tuple(n)) = n

  nat2tuple_tuple2nat: LEMMA
    FORALL(m,n : nat): nat2tuple(tuple2nat(m,n)) = (m,n)

END tuple2nat
