(Shroeder_Bernstein
 (comp_n_TCC1 0
  (comp_n_TCC1-1 nil 3822150017 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (comp_n subtype "(number_fields.-)(Shroeder_Bernstein.n, 1)"
    "nat")))
 (comp_n_TCC2 0
  (comp_n_TCC2-1 nil 3822150017 ("" (termination-tcc) nil nil) nil nil
   (comp_n termination
    "Shroeder_Bernstein.comp_n((number_fields.-)(Shroeder_Bernstein.n, 1))"
    "nil")))
 (psinv_TCC1 0
  (psinv_TCC1-1 nil 3822150025
   (""
    (inst 1
     "LAMBDA(g:[B -> A]): LAMBDA( a1: {a: A | EXISTS (b: B): g(b) = a}): choose({b:B | g(b)=a1 })")
    (("" (skeep)
      (("" (expand "nonempty?" 1)
        (("" (expand "empty?" -1)
          (("" (typepred "a1")
            (("" (skeep)
              (("" (inst?)
                (("" (expand "member" 1) (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (A formal-type-decl nil Shroeder_Bernstein nil)
    (B formal-type-decl nil Shroeder_Bernstein nil))
   nil
   (psinv existence ""
    "[g: [Shroeder_Bernstein.B -> Shroeder_Bernstein.A] -> [a1: {a: Shroeder_Bernstein.A | EXISTS (b: Shroeder_Bernstein.B): g(b) = a} -> {b: Shroeder_Bernstein.B | g(b) = a1}]]")))
 (h_bij_TCC1 0
  (h_bij_TCC1-1 nil 3822150290
   ("" (skeep)
    (("" (skeep)
      (("" (expand "descendent?" -1)
        (("" (assert)
          (("" (skeep)
            (("" (expand "comp_n" -1)
              (("" (assert)
                (("" (case "n=0")
                  (("1" (assert)
                    (("1" (typepred "b0")
                      (("1" (expand "lonely?" -1)
                        (("1" (inst -1 "a") nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "o")
                      (("2" (typepred "f")
                        (("2" (expand "injective?" -1)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comp_n def-decl "[B -> B]" Shroeder_Bernstein nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (A formal-type-decl nil Shroeder_Bernstein nil)
    (B formal-type-decl nil Shroeder_Bernstein nil)
    (lonely? const-decl "bool" Shroeder_Bernstein nil)
    (injective? const-decl "bool" functions nil)
    (O const-decl "T3" function_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (composition_injective application-judgement "(injective?[T1, T3])"
     function_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (descendent? const-decl "bool" Shroeder_Bernstein nil))
   nil
   (h_bij subtype "Shroeder_Bernstein.a"
    "{a: Shroeder_Bernstein.A | EXISTS (b: Shroeder_Bernstein.B): Shroeder_Bernstein.g(b) = a}")))
 (desc_lonely_iff 0
  (desc_lonely_iff-1 nil 3822212075
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "h_bij" 1)
            (("1" (expand "descendent?")
              (("1" (expand "psinv" 1)
                (("1" (inst 1 "b0")
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (skeep -1)
                          (("1" (case "n=0")
                            (("1" (expand "comp_n" -2)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "b0")
                                  (("1"
                                    (expand "lonely?" -1)
                                    (("1" (inst -1 "a") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (inst 2 "n-1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "f")
                                    (("2"
                                      (typepred "g")
                                      (("2"
                                        (case
                                         "f(g(choose({b: B | g(b) = a}))) = f(g(comp_n(n - 1)(f, g)(b0)))")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (inst? -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "nonempty?"
                                                     1)
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (lemma
                                                           "h_bij_TCC1")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "g")
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "b")
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     1
                                                                     "b0")
                                                                    (("2"
                                                                      (expand
                                                                       "descendent?")
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "n")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nonempty?")
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (lemma "h_bij_TCC1")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (inst -1 "g")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "b_1")
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "b0")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "descendent?")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "n")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 1)
                                                      (("2"
                                                        (lemma
                                                         "h_bij_TCC1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "f"
                                                           "g"
                                                           "a")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (skeep
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "b")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 1
                                                                 "b0")
                                                                (("2"
                                                                  (expand
                                                                   "descendent?")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "n")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "comp_n" -3)
                                            (("2"
                                              (expand "o")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "nonempty?")
                                          (("3"
                                            (expand "empty?")
                                            (("3"
                                              (lemma "h_bij_TCC1")
                                              (("3"
                                                (inst -1 "f" "g" "a")
                                                (("3"
                                                  (split -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -2 "b")
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst 1 "b0")
                                                    (("2"
                                                      (expand
                                                       "descendent?")
                                                      (("2"
                                                        (inst 1 "n")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (expand "h_bij" -1)
            (("2" (assert)
              (("2" (split -1)
                (("1" (flatten) nil nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (hide 2) (("2" (inst 1 "b0") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((descendent? const-decl "bool" Shroeder_Bernstein nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (comp_n def-decl "[B -> B]" Shroeder_Bernstein nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (g skolem-const-decl "(injective?[B, A])" Shroeder_Bernstein nil)
    (a skolem-const-decl "A" Shroeder_Bernstein nil)
    (psinv const-decl "{b: B | g(b) = a}" Shroeder_Bernstein nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (h_bij_TCC1 subtype-tcc nil Shroeder_Bernstein nil)
    (O const-decl "T3" function_props nil)
    (injective? const-decl "bool" functions nil)
    (lonely? const-decl "bool" Shroeder_Bernstein nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (A formal-type-decl nil Shroeder_Bernstein nil)
    (B formal-type-decl nil Shroeder_Bernstein nil)
    (h_bij const-decl "B" Shroeder_Bernstein nil))
   shostak))
 (Shroeder_Bernstein 0
  (Shroeder_Bernstein-1 nil 3822150412
   ("" (skeep)
    (("" (with-tccs (inst 1 "h_bij(f,g)"))
      (("" (expand "bijective?" 1)
        (("" (split 1)
          (("1" (lemma "desc_lonely_iff")
            (("1" (inst -1 "f" "g" "_")
              (("1" (expand "injective?" 1)
                (("1" (skeep)
                  (("1" (expand "h_bij" -2)
                    (("1" (lift-if -2)
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (lift-if -2)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "psinv" -2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (case "g(f(x2)) = x1")
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (skeep -3)
                                        (("1"
                                          (inst 1 "b0")
                                          (("1"
                                            (expand "descendent?" 1)
                                            (("1"
                                              (expand "descendent?" -3)
                                              (("1"
                                                (skeep -3)
                                                (("1"
                                                  (case "n=0")
                                                  (("1"
                                                    (expand "comp_n")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred "b0")
                                                        (("1"
                                                          (expand
                                                           "lonely?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst 2 "n-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "comp_n"
                                                         -3)
                                                        (("1"
                                                          (expand "o")
                                                          (("1"
                                                            (case
                                                             " g(f(x2)) = g(comp_n(n - 1)(f, g)(b0))")
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4
                                                               -5)
                                                              (("1"
                                                                (expand
                                                                 "injective?"
                                                                 -2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 lr)
                                                                (("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -5)
                                                                  (("2"
                                                                    (expand
                                                                     "injective?"
                                                                     -2)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (expand "psinv" -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (lift-if -1)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -3)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "g(f(x1)) = x2")
                                            (("1"
                                              (inst 1 "b0")
                                              (("1"
                                                (expand "descendent?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (case " n=0")
                                                    (("1"
                                                      (expand
                                                       "comp_n"
                                                       -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "b0")
                                                          (("1"
                                                            (expand
                                                             "lonely?"
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "x2")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (inst 2 "n-1")
                                                        (("2"
                                                          (expand
                                                           "comp_n"
                                                           -2)
                                                          (("2"
                                                            (expand
                                                             "o")
                                                            (("2"
                                                              (expand
                                                               "injective?"
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "x2"
                                                                 "g(comp_n(n - 1)(f, g)(b0))")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "injective?"
                                                                     -5)
                                                                    (("2"
                                                                      (inst
                                                                       -5
                                                                       "f(x1)"
                                                                       "comp_n(n - 1)(f, g)(b0)")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "psinv" -2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "injective?" -3)
                                      (("2"
                                        (inst -3 "x1" "x2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "surjective?" 1)
            (("2" (skeep)
              (("2"
                (case "EXISTS(b0:(lonely?(f))): descendent?(f,g,b0)(y)")
                (("1" (skeep -1)
                  (("1" (expand "descendent?" -1)
                    (("1" (skeep)
                      (("1" (case "n=0")
                        (("1" (expand "comp_n" -2)
                          (("1" (assert)
                            (("1" (inst 1 "g(y)")
                              (("1"
                                (expand "h_bij" 1)
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "psinv" 1)
                                        (("1"
                                          (typepred
                                           " choose({b: B | g(b) = g(y)})")
                                          (("1"
                                            (expand "injective?" -6)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand
                                                   "nonempty?"
                                                   1)
                                                  (("2"
                                                    (expand
                                                     "empty?"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "y")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "nonempty?" 1)
                                              (("2"
                                                (expand "empty?" -1)
                                                (("2"
                                                  (inst -1 "y")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "b0")
                                          (("2"
                                            (expand "lonely?" -1)
                                            (("2"
                                              (inst 1 "b0")
                                              (("2"
                                                (expand
                                                 "descendent?"
                                                 1)
                                                (("2"
                                                  (inst 1 "1")
                                                  (("2"
                                                    (expand "comp_n" 1)
                                                    (("2"
                                                      (expand "o")
                                                      (("2"
                                                        (expand
                                                         "comp_n"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "injective?")
                                                          (("2"
                                                            (inst? -4)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "comp_n" -1)
                            (("2" (inst 2 "g(y)")
                              (("2"
                                (expand "h_bij" 2)
                                (("2"
                                  (lift-if 2)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "psinv" 1)
                                        (("1"
                                          (typepred
                                           " choose({b: B | g(b) = g(y)})")
                                          (("1"
                                            (expand "injective?" -5)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "nonempty?" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "empty?"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "y")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nonempty?" 1)
                                            (("2"
                                              (expand "empty?" -1)
                                              (("2"
                                                (inst -1 "y")
                                                (("2"
                                                  (expand "member" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst 1 "b0")
                                          (("2"
                                            (expand "descendent?" 1)
                                            (("2"
                                              (expand "o" -1)
                                              (("2"
                                                (expand "comp_n" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "o")
                                                    (("2"
                                                      (inst 1 "n+1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "NOT lonely?(f)(y)")
                  (("1" (expand "h_bij" 3)
                    (("1" (assert)
                      (("1" (expand "lonely?" 1)
                        (("1" (skeep 1)
                          (("1" (inst 2 "a")
                            (("1" (assert)
                              (("1"
                                (lift-if 2)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "lonely?" -1)
                      (("2" (inst 1 "y")
                        (("2" (expand "descendent?" 1)
                          (("2" (inst 1 "0")
                            (("2" (expand "comp_n" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (h_bij const-decl "B" Shroeder_Bernstein nil)
    (g skolem-const-decl "[B -> A]" Shroeder_Bernstein nil)
    (A formal-type-decl nil Shroeder_Bernstein nil)
    (B formal-type-decl nil Shroeder_Bernstein nil)
    (injective? const-decl "bool" functions nil)
    (f skolem-const-decl "[A -> B]" Shroeder_Bernstein nil)
    (lonely? const-decl "bool" Shroeder_Bernstein nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (comp_n def-decl "[B -> B]" Shroeder_Bernstein nil)
    (O const-decl "T3" function_props nil)
    (n skolem-const-decl "nat" Shroeder_Bernstein nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (descendent? const-decl "bool" Shroeder_Bernstein nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (desc_lonely_iff formula-decl nil Shroeder_Bernstein nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (psinv const-decl "{b: B | g(b) = a}" Shroeder_Bernstein nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (surjective? const-decl "bool" functions nil))
   shostak)))

