%------------------------------------------------------------------------
%
% This theory defines additional properties of lists.
%
%    Author: Kristin Y. Rozier,
%                      Formal Methods Group, NASA Langley Research Center
%            with thanks to Paul Miner and Ben Di Vito for their helpful
%                 comments and suggestions
%            Cesar Munoz 2012, Anthony Narkawicz 2013, Mariano Moscato (NIA) 2015
%------------------------------------------------------------------------

more_list_props   [ T : TYPE ]
		: THEORY

  BEGIN

  m, n: VAR nat
  L: VAR list[T]
  p: VAR PRED[T]
  A: VAR finite_set[T]
  B: VAR list[T]
  X, Y: VAR list[T]
  l, l1, l2, l3: VAR list[T]
  pair: VAR [nat, nat]
  a, t: VAR T

%
% Functions
%

  prefix?(x: list[T], 
          y: list[T]): RECURSIVE bool = 
    IF length(y) < length(x) THEN FALSE 
    ELSE 
      CASES x OF
        null: TRUE,
        cons(sigma_x, x1):
          CASES y OF
            null: FALSE,
	    cons(sigma_y, y1): 
              IF sigma_x = sigma_y AND prefix?(x1, y1) THEN TRUE
              ELSE FALSE
              ENDIF
          ENDCASES
      ENDCASES
    ENDIF
    MEASURE length(x)


  suffix?(x: list[T], 
          y: list[T]): RECURSIVE bool = 
    IF length(y) < length(x) THEN FALSE 
    ELSE 
      CASES reverse(x) OF
        null: TRUE,
        cons(sigma_x, x1):
          CASES reverse(y) OF
            null: FALSE,
	    cons(sigma_y, y1): 
              IF sigma_x = sigma_y AND suffix?(reverse(x1), reverse(y1)) THEN TRUE
              ELSE FALSE
              ENDIF
          ENDCASES
      ENDCASES
    ENDIF
    MEASURE length(x)


%Multiple concatenation of a list: w^3 means (: w  w  w :).
;
  ^(l1, n): RECURSIVE list[T] = 
    IF n = 0 THEN (null)
    ELSE append( l1, ^(l1, n-1) )
    ENDIF
    MEASURE n


% Just like for sequences, a sub-list can be extracted with the operator '^'.
% Note that ^ allows any natural numbers m and n to define the range; 
% if m > n then the empty sequence is returned.
;
  ^(l1, pair): RECURSIVE list[T] =
    LET (m, n) = pair
     IN IF m > n OR m >= length(l1) OR m < 0
        THEN null
        ELSIF m = n THEN cons( nth(l1, m), null)
        ELSE cons( nth(l1, m), ^(l1, (m+1, n)))
        ENDIF
  MEASURE IF pair`2 > pair`1 THEN pair`2 - pair`1 ELSE 0 ENDIF


  prefixes(l1:list[T])(l2:list[T]) : bool
    = EXISTS(l3: list[T]): append(l2,l3) = l1

  suffixes(l1:list[T])(l2:list[T]) : bool
    = EXISTS(l3: list[T]): append(l3,l2) = l1

%
% Lemmas and Theorems
%

  prefix_length: LEMMA
    prefix?(X,Y) IMPLIES length(X) <= length(Y)

  suffix_length: LEMMA
    suffix?(X,Y) IMPLIES length(X) <= length(Y)

  every_forall: LEMMA
    every(p)(L) IFF FORALL (n:below(length(L))): p(nth(L,n))

  some_exists: LEMMA
    some(p)(L) IFF EXISTS (n:below(length(L))): p(nth(L,n))

  list_extensionality : LEMMA
    l1=l2 IFF length(l1) = length(l2) AND FORALL(n:below(length(l1))): nth(l1,n) = nth(l2,n)


  %If the length of the list of elements from set A is greater than the 
  %cardinality of the set, then there is at least one repeated element
  %in the list.
  list_pigeonhole: THEOREM
      every(A)(B) AND 
      length(B) > card(A)
    IMPLIES
      EXISTS (n:below[length(B)], m:below[length(B)]):
         n /= m 
         AND nth(B, n) = nth(B, m)  

   nth_append : LEMMA
     FORALL(i:nat): i < length(l1)+length(l2) IMPLIES
       nth(append(l1,l2),i) = IF i < length(l1) THEN nth(l1,i)
                              ELSE nth(l2,i-length(l1))
                              ENDIF

  length_null : LEMMA
    length(null[T]) = 0

  length_singleton : LEMMA
    length((:t:)) = 1

  AUTO_REWRITE+ length_singleton
  AUTO_REWRITE+ length_null

  length_null_list: LEMMA
    length(L)=0 IFF null?(L)

  reverse_def: LEMMA FORALL (j:nat): 
    j<length(L) IMPLIES nth(reverse(L),j) = nth(L,length(L)-1-j)

  cons_append: LEMMA
    cons(t,L) = append((: t :),L)

  expand_list: LEMMA
    null?(L) OR L = cons(car(L),cdr(L))

  append_null_left: LEMMA append(null,L) = L

  %

  member_append_fi: LEMMA
   FORALL(i: T, l1,l2: list[T]):
    member(i, append(l1, l2)) IMPLIES (member(i, l1) OR member(i, l2))

  null_append: LEMMA
   FORALL(l1,l2: list[T]):
    null?(append(l1, l2)) IFF null?(l1) AND null?(l2)

  member_nth: LEMMA
   FORALL(l: list[T], t: T): 
    member(t, l) IMPLIES EXISTS(i: below(length(l))): nth(l,i) = t

  nnprefixes_same_head: LEMMA
   FORALL(l1: list[T], l2: (prefixes[T](l1))): 
    NOT null?(l1) AND NOT null?(l2) IMPLIES car(l1) = car(l2)

  member_append_r: LEMMA
   FORALL(i: T, l1,l2: list[T]):
    member(i, l2) IMPLIES member(i, append(l1, l2))

  member_append_l: LEMMA   
   FORALL(i: T, l1,l2: list[T]):
    member(i, l1) IMPLIES member(i, append(l1, l2))

  every_implies: LEMMA
   FORALL(P,Q: PRED[T], l: list[T]):
    (FORALL(x: T): P(x) IMPLIES Q(x))
    IMPLIES every(P)(l) IMPLIES every(Q)(l)

  append_right_inj: LEMMA
    append(l, l1) = append(l, l2) IMPLIES l1 = l2

  % Lemmas involving ^
  
  subl_over_len: LEMMA FORALL(m:nat, l: list[T] | m < length(l), i: upfrom(length(l))):
  l^(m, i) = l^(m, length(l)-1)
  
  subl_shr: LEMMA FORALL(m,n: above(0)):
  cons(a,l)^(m,n) = l^(m-1,n-1)

  subl_idemp: LEMMA FORALL(l: (cons?[T])):
  l^(0, length(l)-1) = l

  length_subl: LEMMA
   FORALL(m:nat, n:upfrom(m), l: list[T] | length(l) >= m):
    length(l^(m,n)) = min(length(l), n+1)-m

  cdr_subl: LEMMA FORALL(m: nat,n: above(m)):
   NOT null?(l^(m,n)) 
    IMPLIES cdr(l^(m,n)) = cdr(l)^(m,n-1)

  member_nth_subl: LEMMA
   FORALL(j: nat, l: list[T] | j < length(l), m: upto(j), n: upfrom(j)): 
    member(nth(l, j), l^(m,n))

  nth_subl_prefix: LEMMA
   FORALL(j: nat, l: list[T], m : nat, n: nat | j < length(l^(m,n))): 
    nth(l^(m,n), j) = nth(l, m+j)

  subl_incl: LEMMA
   FORALL(l: list[T], m, n: nat): 
    member(a, l^(m,n)) 
     IMPLIES 
      FORALL(m_: upto(m), n_: upfrom(n)): member(a, l^(m_,n_))

  % The following definitions and lemmas are used in affine_arith

  appin(l:list[T])(i:T): bool = member(i,l)

  take(l: list[T], n: nat): RECURSIVE list[T]
    = IF length(l) < n THEN take(l, n-1)
      ELSIF n = 0 THEN null
      ELSE cons(car(l), take(cdr(l), n-1)) ENDIF
    MEASURE n

  length_take: LEMMA FORALL(l:list[T],n:nat):
  length(take(l,n)) = min(length(l), n)

  nth_take: LEMMA
  FORALL(l: list[T], i: below(length(l)+1), (j: nat | j<i)): 
  member(nth(l, j), take(l, i))

  nth_take2: LEMMA
  FORALL(l: list[T], i: nat, (j: nat | j<i and j<length(l))): 
  nth(take(l, i), j) = nth(l, j)

  take_null: LEMMA FORALL(i: nat):
  take(null, i) = null

  take_prop_1: LEMMA FORALL(l: list[T], i: above(length(l))):
  take(l, i) = take(l, length(l))

  take_prop_2: LEMMA FORALL(l: list[T]):
  take(l, length(l)) = l

  member_take_1: LEMMA
  FORALL(l: list[T], i: nat, j: above(i), x: T): 
  member(x, take(l, i)) IMPLIES member(x, take(l, j))

  % Suffix and prefix properties

  suffix_rev_prefix: LEMMA
    suffix?(l1,l2) IFF prefix?(reverse(l1),reverse(l2))

  prefix_rev_suffix:  COROLLARY
    prefix?(l1,l2)  IFF suffix?(reverse(l1),reverse(l2))

  prefix_first: LEMMA
    prefix?(append(l1,l2),L) => prefix?(l1,L)

  suffix_last: COROLLARY
    suffix?(append(l1,l2),L) => suffix?(l2,L)

  prefix_app: LEMMA
    prefix?(append(l1,l2),append(l1,L)) IFF prefix?(l2,L)

  suffix_app: COROLLARY 
    suffix?(append(l1,l2),append(L,l2)) IFF suffix?(l1,L)

  prefix_supl: LEMMA
    prefix?(l1,l2) IFF EXISTS(L): append(l1,L) = l2

  suffix_supl: COROLLARY
    suffix?(l1,l2) IFF EXISTS(L): append(L,l1) = l2

  %% rdc and rac (as opposites to the list functions rdc and rac).

  rdc((l: list[T] | NOT null?(l))):  list[T]
  = reverse(cdr(reverse(l)))

  rac((l: list[T] | NOT null?(l))):  T
  = nth(l, length(l)-1)

  rac_append: LEMMA 
    FORALL (l1: list[T], (l2: list[T] | NOT null?(l2))) : 
      rac(append(l1, l2)) = rac(l2)
  
  rdc_append: LEMMA 
    FORALL (l1: list[T], (l2: list[T] | NOT null?(l2))) : 
       rdc(append(l1, l2)) = append(l1, rdc(l2))
  
  rdc_rac: COROLLARY
    FORALL (l1 : list[T] | NOT null?(l1)) :
       append(rdc(l1),(:rac(l1):)) = l1


END more_list_props

