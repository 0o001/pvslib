%------------------------------------------------------------------------
%
% This theory defines permuations on lists
%
%            Mariano Moscato (NIA) 2015
%------------------------------------------------------------------------

permutations_list[T : TYPE]: THEORY
 
  BEGIN

   IMPORTING more_list_props

   l, l1, l2, l3, l4 : VAR list[T]
   a, t: VAR T

  % counting and permutations

  count(t)(l): RECURSIVE nat =
    CASES l OF
      null: 0,
      cons(x,xs): IF x=t THEN 1 ELSE 0 ENDIF + count(t)(xs)
    ENDCASES
  MEASURE length(l)

  count_nth: LEMMA
   FORALL(i:below(length(l))):
    count(nth(l,i))(l) > 0

  count_member: LEMMA
    count(a)(l) > 0 IMPLIES member(a,l)

  count_append: LEMMA
    count(a)(append(l1,l2)) = count(a)(l1) + count(a)(l2)

  includes?(l1,l2): bool =
    FORALL(t:T): count(t)(l2) <= count(t)(l1)

  permutation?(l1,l2): bool =
    includes?(l1,l2) AND includes?(l2,l1)

  permutation_list(l1)(l2):bool = permutation?(l1,l2)

  permutation_grow: LEMMA
    permutation_list(append(l1,l2))(append(l3,l4))
    IMPLIES permutation_list(append(l1,append((:a:),l2)))(append(l3,append((:a:),l4)))

  permutation_decrease: LEMMA
    permutation_list(l)(cons(a,l3))
    IMPLIES 
      EXISTS(l1,l2:list[T]): 
        l = append(l1,append((:a:),l2)) AND 
    	permutation_list(append(l1,l2))(l3)

  permutation_reverse: LEMMA
    permutation_list(l1)(l2) IMPLIES permutation_list(l1)(reverse(l2))

  permutation_reflexive: LEMMA permutation_list(l)(l)

END permutations_list

