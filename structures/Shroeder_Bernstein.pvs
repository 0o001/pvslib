Shroeder_Bernstein[A, B: Type]   % Welcome
% A,B - generic types,
%       domain and range of functions

		: THEORY

%Created by         J Tanner Slagel
%	 	           Feb 2021
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| This is a formalization of the
%| Shroeder Bernstein Theorem
%| which shows that if there is
%| and injection going to and from
%| one type to another, then there
%| there is a bijection between
%| those two types.
%|
%| In in other words this shows
%| the two types have the same
%| cardinality
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last updated	           Feb 2021

%-----     %
  BEGIN
%     -----%

%----------------------------------------
%% f - function from A -> B
%  g - function from B -> A
%----------------------------------------

%----------------------------------------
%% Define lonely point of f in b.
%  A point in B that f does not map to
%----------------------------------------

  lonely?(f:[A -> B])(b:B): bool =
    FORALL(a:A):
     NOT f(a) = b

%----------------------------------------
%% Define psuedo-inverse psinv of g
%  that maps a point in the range of
%  g to a point that is mapped to it
%----------------------------------------

  psinv(g:[B->A])
  (a:A | EXISTS(b:B): g(b)=a):
   {b:B | g(b)=a }

%----------------------------------------
%% Define n-times composition
%  (f o g) ^ n
%----------------------------------------

  comp_n(n:nat)(f:[A->B], g:[B->A]):
   RECURSIVE [B -> B] =
    IF
      n = 0
    THEN
      LAMBDA(b:B): b
    ELSE
      (f o g) o comp_n(n-1)(f, g)
    ENDIF
    MEASURE n
    
%----------------------------------------
%% Define descendent. Point b1 is a
%  descendent of b0 under f and g
%  if (f o g) ^ n (b0) = b1 for some n
%----------------------------------------

  descendent?(f:[A -> B], g:[B -> A], b0:B)
  (b1:B):
   bool =
    EXISTS(n:nat):
      b1 = comp_n(n)(f, g)(b0)
%----------------------------------------
%% Define h_bij, which is the bijection
%  from A to B made from the injections
%  f and g
%----------------------------------------

  h_bij(f:(injective?[A,B]), g:(injective?[B,A]))
  (a:A):
   B =
   IF EXISTS(b0:(lonely?(f))):
      descendent?(f,g,b0)(f(a)) 
   THEN
     psinv(g)(a)
   ELSE
     f(a)
   ENDIF

%----------------------------------------
%% f(a) is a descedent of a lonely point
%  if and only if
%  h_bij(f,g)(a) a is a descendent
%  of a lonely point
%----------------------------------------

  desc_lonely_iff:  LEMMA
   FORALL(f:(injective?[A,B]),
   g:(injective?[B,A]), a:A):
    (EXISTS(b0:(lonely?(f))):
     descendent?(f, g, b0)(f(a)))
    IFF
    (EXISTS(b0:(lonely?(f))):
     descendent?(f, g, b0)(h_bij(f, g)(a)))

%----------------------------------------
%% Shroeder Bernstein -
%  If there is an injection from A to B
%  and an injection from B to A
%  then there is a bijection from A to B
%----------------------------------------
   
  Shroeder_Bernstein: THEOREM
  FORALL(f:[A -> B], g:[B -> A]):
   injective?[A,B](f) AND injective?[B,A](g)
    IMPLIES 
     EXISTS(h:[A -> B]):
      bijective?[A,B](h)
 
  %~~~    The  End  ~~~% 
  END Shroeder_Bernstein
