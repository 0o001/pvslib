map_with_index[T: TYPE, T1: TYPE]: THEORY
BEGIN

  IMPORTING list_adt

  map_with_index_rec(len:nat,
                     index: nat,
                     f: [nat,T -> T1],
                     a: list[T] | length(a) <= len
                     ):
                     RECURSIVE {
                        r: list[T1] | length(r)=length(a)
                           AND FORALL (i: subrange(0,length(r)-1)): nth(r,i) = f(index + i,nth(a,i))
                     } =
    CASES a
      OF null: null,
         cons(cons1_var, cons2_var):
           cons(f(index, cons1_var), map_with_index_rec(len,succ(index),f,cons2_var))
    ENDCASES
  MEASURE length(a)

  map_with_index_rec__relaxes_length : LEMMA
    FORALL (f: [nat,T -> T1], a: list[T], i: nat, len: nat | length(a) <= len):
           map_with_index_rec(len,i,f,a) = map_with_index_rec(succ(len),i,f,a)

  map_with_index_rec__preserves_length : LEMMA
    FORALL (f: [nat,T -> T1], a: list[T], i: nat):
           length(a) = length(map_with_index_rec(length(a), i, f,a))


  map_with_index(f: [nat,T -> T1])(a: list[T]):  list[T1] = map_with_index_rec(length(a),0,f,a)

  map_with_index__preserves_length : LEMMA
    FORALL (f: [nat,T -> T1], a: list[T]):
           length(a) = length(map_with_index(f)(a))

  map_with_index__nth : LEMMA
    FORALL (f: [nat,T -> T1], a: list[T], i: nat):
            i < length(a) IMPLIES nth(map_with_index(f)(a),i) = f(i,nth(a,i))

END map_with_index
