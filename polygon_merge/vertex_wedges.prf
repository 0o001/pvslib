(vertex_wedges
 (vertex_bisect_vector_nonzero 0
  (vertex_bisect_vector_nonzero-1 nil 3874129019
   ("" (skeep)
    (("" (expand "vertex_bisect_vector")
      (("" (lift-if)
        (("" (lemma "vertex_neq_prev")
          (("" (lemma "vertex_neq_next")
            (("" (inst - "G" "i")
              (("" (inst - "G" "i")
                (("" (ground)
                  (("1" (use "prev_edge_not_dir_parallel")
                    (("1" (assert)
                      (("1" (expand "edges_of_polygon")
                        (("1" (assert)
                          (("1" (rewrite "dir_parallel_diff")
                            (("1" (expand "dir_parallel?")
                              (("1"
                                (rewrite
                                 "parallel_equiv_cross_eq_0"
                                 :dir
                                 rl)
                                (("1"
                                  (expand "parallel?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (case "nzk > 0")
                                      (("1"
                                        (inst + "1/nzk")
                                        (("1"
                                          (replace -2)
                                          (("1" (real-props) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (ground)
                                            (("1"
                                              (cross-mult 1)
                                              nil
                                              nil)
                                             ("2"
                                              (cross-mult 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "perp_right")
                                        (("2"
                                          (decompose-equality -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "-" (-1 -2))
                                              (("2"
                                                (apply-extensionality
                                                 4
                                                 :hide?
                                                 t)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "parallel_equiv_cross_eq_0" :dir rl)
                    (("2" (expand "parallel?")
                      (("2"
                        (name-replace*
                         ("P"
                          "G`vertices(prev_index(G, i)) - G`vertices(i)"
                          "N"
                          "G`vertices(next_index(G, i)) - G`vertices(i)"))
                        (("2" (move-terms -4 l 2)
                          (("2" (assert)
                            (("2" (case "norm(N) = 0")
                              (("1"
                                (use "norm_eq_0")
                                (("1"
                                  (ground)
                                  (("1"
                                    (replace -4 -2 :dir rl)
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (div-by -4 "norm(N)")
                                (("2"
                                  (replace -1 2)
                                  (("2"
                                    (inst + "-norm(P)/norm(N)")
                                    (("1"
                                      (rewrite "scal_neg")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (ground)
                                      (("2"
                                        (cross-mult -1)
                                        (("2"
                                          (real-props)
                                          (("2"
                                            (lemma "norm_eq_0")
                                            (("2"
                                              (inst - "P")
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (replace
                                                   -6
                                                   -2
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "parallel_equiv_cross_eq_0" :dir rl)
                    (("3" (expand "parallel?")
                      (("3" (rewrite "neg_distr_add")
                        (("3"
                          (name-replace*
                           ("P"
                            "G`vertices(prev_index(G, i)) - G`vertices(i)"
                            "N"
                            "G`vertices(next_index(G, i)) - G`vertices(i)"))
                          (("3" (move-terms -3 l 2)
                            (("3" (assert)
                              (("3"
                                (case "norm(P) = 0")
                                (("1"
                                  (use "norm_eq_0")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (replace -5 -2 :dir rl)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (div-by -3 "norm(P)")
                                  (("2"
                                    (rewrite "scal_neg" -1)
                                    (("2"
                                      (replace -1 3 :dir rl)
                                      (("2"
                                        (inst + "-norm(P)/norm(N)")
                                        (("1" (real-props) nil nil)
                                         ("2"
                                          (ground)
                                          (("2"
                                            (lemma "norm_eq_0")
                                            (("2"
                                              (inst - "N")
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (replace
                                                   -5
                                                   -2
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (parallel? const-decl "bool" vectors_2D vectors)
    (> const-decl "bool" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (div_cancel2 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nzk skolem-const-decl "nzreal" vertex_wedges nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (parallel_equiv_cross_eq_0 formula-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (dir_parallel_diff formula-decl nil vectors_cross_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (prev_edge_not_dir_parallel formula-decl nil polygons_2d nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (zero_times1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (N skolem-const-decl "Vector" vertex_wedges nil)
    (P skolem-const-decl "Vector" vertex_wedges nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (sub_zero_left formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (nonzero_times3 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (N skolem-const-decl "Vector" vertex_wedges nil)
    (neg_distr_add formula-decl nil vectors_2D vectors)
    (vertex_neq_next formula-decl nil polygons_2d nil))
   shostak))
 (vertex_wedge_apex_TCC1 0
  (vertex_wedge_apex_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (use "vertex_bisect_vector_nonzero") (("" (ground) nil nil))
      nil))
    nil)
   ((vertex_bisect_vector_nonzero formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (vertex_wedge_apex subtype
    "vertex_wedges.vertex_bisect_vector(vertex_wedges.G, vertex_wedges.i)"
    "Nz_vector"))
  (vertex_wedge_apex_TCC1-1 nil 3874128960 ("" (subtype-tcc) nil nil)
   nil nil
   (vertex_wedge_apex subtype
    "vertex_wedges.vertex_bisect_vector(vertex_wedges.G, vertex_wedges.i)"
    "Nz_vector")))
 (wedge_connector_sine_TCC1 0
  (wedge_connector_sine_TCC1-2 nil 3874129019
   ("" (skeep)
    (("" (expand "empty?")
      (("" (expand "member")
        ((""
          (inst - "LET u = G`vertices(prev_index(G, 0)),
            v = G`vertices(0),
            w = G`vertices(next_index(G, 0)),
	    cos_a = ^(u - v) * ^(w - v),
	    sin_a = cross(^(u - v), ^(w - v))
	IN IF sin_a < 0 OR cos_a < 0 THEN 1 ELSE sin_a ENDIF")
          (("1" (expand "sines_of_edge_angles")
            (("1" (inst + "0")
              (("1" (typepred "G")
                (("1" (expand "simple_polygon_2d?")
                  (("1" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skeep*)
            (("2" (lemma "vertex_neq_next")
              (("2" (inst - "G" "0") (("2" (ground) nil nil)) nil))
              nil))
            nil)
           ("3" (skeep*)
            (("3" (lemma "vertex_neq_prev")
              (("3" (inst - "G" "0") (("3" (ground) nil nil)) nil))
              nil))
            nil)
           ("4" (skeep*)
            (("4" (lemma "vertex_neq_next")
              (("4" (inst - "G" "0") (("4" (ground) nil nil)) nil))
              nil))
            nil)
           ("5" (skeep*)
            (("5" (lemma "vertex_neq_prev")
              (("5" (inst - "G" "0") (("5" (ground) nil nil)) nil))
              nil))
            nil)
           ("6" (skeep*)
            (("6" (typepred "G")
              (("6" (expand "simple_polygon_2d?")
                (("6" (ground) nil nil)) nil))
              nil))
            nil)
           ("7" (skeep)
            (("7" (typepred "G")
              (("7" (expand "simple_polygon_2d?")
                (("7" (ground) nil nil)) nil))
              nil))
            nil)
           ("8" (typepred "G")
            (("8" (expand "simple_polygon_2d?")
              (("8" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "real" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (sines_of_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (member const-decl "bool" sets nil))
   shostak
   (wedge_connector_sine subtype
    "polygon_attributes.sines_of_edge_angles(vertex_wedges.G)"
    "non_empty_finite_set[real]"))
  (wedge_connector_sine_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (wedge_connector_sine subtype
    "polygon_attributes.sines_of_edge_angles(vertex_wedges.G)"
    "non_empty_finite_set[real]")))
 (wedge_connector_sine_TCC2 0
  (wedge_connector_sine_TCC2-2 nil 3874129019
   ("" (skeep)
    ((""
      (case "min[real, <=](sines_of_edge_angles(G)) / 2 > 0 AND
                      min[real, <=](sines_of_edge_angles(G)) / 2 <= 1/2")
      (("1" (ground) nil nil)
       ("2" (hide 2)
        (("2" (typepred "min[real, <=](sines_of_edge_angles(G))")
          (("2" (hide -2)
            (("2" (expand "sines_of_edge_angles" -1 1)
              (("2" (skeep)
                (("2" (lift-if)
                  (("2" (split +)
                    (("1" (ground)
                      (("1" (cross-mult 3)
                        (("1" (replace -1 :hide? t)
                          (("1" (use "cross_eq_0_imp_dot_neg")
                            (("1" (ground)
                              (("1"
                                (skeep)
                                (("1"
                                  (use "prev_edge_not_dir_parallel")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "edges_of_polygon")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite
                                           "dir_parallel_diff"
                                           1)
                                          (("1"
                                            (expand "dir_parallel?")
                                            (("1"
                                              (hide-all-but (-1 1))
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (real-props)
                                                  (("1"
                                                    (inst
                                                     +
                                                     "norm(G`vertices(next_index(G, i)) - G`vertices(i)) / (a * norm(G`vertices(prev_index(G, i)) - G`vertices(i)))")
                                                    (("1"
                                                      (mult-by
                                                       -1
                                                       "norm(G`vertices(prev_index(G, i)) - G`vertices(i))")
                                                      (("1"
                                                        (name-replace
                                                         "N"
                                                         "norm(G`vertices(next_index(G, i)) - G`vertices(i))")
                                                        (("1"
                                                          (name-replace
                                                           "P"
                                                           "norm(G`vertices(prev_index(G, i)) - G`vertices(i))")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (real-props)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "norm(G`vertices(next_index(G, i)) - G`vertices(i)) /
                       (a * norm(G`vertices(prev_index(G, i)) - G`vertices(i))) > 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide -1 2)
                                                        (("2"
                                                          (cross-mult
                                                           1)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (real-props)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         1)
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (real-props)
                                                            (("3"
                                                              (use
                                                               "norm_vertex_diff_prev_pos")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -)
                                                      (("3"
                                                        (ground)
                                                        (("3"
                                                          (real-props)
                                                          (("3"
                                                            (use
                                                             "norm_vertex_diff_prev_pos")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground)
                      (("2" (cross-mult 3)
                        (("2" (replace -1)
                          (("2" (use "abs_dot_and_cross_le_1")
                            (("2" (flatten)
                              (("2"
                                (expand "abs")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "G")
        (("3" (expand "simple_polygon_2d?")
          (("3" (ground)
            (("3" (use "wedge_connector_sine_TCC1") nil nil)) nil))
          nil))
        nil)
       ("4" (use "wedge_connector_sine_TCC1") nil nil))
      nil))
    nil)
   ((sines_of_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_dot_and_cross_le_1 formula-decl nil vectors_cross_2d nil)
    (times_div2 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prev_edge_not_dir_parallel formula-decl nil polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (dir_parallel_diff formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (div_mult_pos_neg_gt1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (norm_vertex_diff_prev_pos formula-decl nil polygons_2d nil)
    (pos_times_gt formula-decl nil real_props nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_times2 formula-decl nil real_props nil)
    (nonzero_times1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (a skolem-const-decl "posreal" vertex_wedges nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross_eq_0_imp_dot_neg formula-decl nil vectors_cross_2d nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (wedge_connector_sine_TCC1 subtype-tcc nil vertex_wedges nil))
   shostak
   (wedge_connector_sine subtype
    "number_fields./(finite_sets_minmax[real, reals.<=].min(polygon_attributes.sines_of_edge_angles(vertex_wedges.G)), 2)"
    "{a: real_types.posreal | reals.<=(a, 1/2)}"))
  (wedge_connector_sine_TCC2-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (wedge_connector_sine subtype
    "number_fields./(finite_sets_minmax[real, reals.<=].min(polygon_attributes.sines_of_edge_angles(vertex_wedges.G)), 2)"
    "{a: real_types.posreal | reals.<=(a, 1/2)}")))
 (wedge_connector_sine_sq_bound 0
  (wedge_connector_sine_sq_bound-1 nil 3874129019
   ("" (skeep)
    (("" (typepred "wedge_connector_sine(G)")
      (("" (expand "sq") (("" (mult-cases 1) nil nil)) nil)) nil))
    nil)
   ((wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sq const-decl "nonneg_real" sq reals))
   shostak))
 (wedge_connector_endpoint_TCC1 0
  (wedge_connector_endpoint_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (typepred "sin_a")
      (("" (hide-all-but (-2 -3 1))
        (("" (grind)
          (("" (move-terms 1 l 2)
            (("" (assert) (("" (mult-cases 1) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (wedge_connector_endpoint subtype
    "(number_fields.-)(1, sq.sq(vertex_wedges.sin_a))" "nonneg_real"))
  (wedge_connector_endpoint_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (wedge_connector_endpoint subtype
    "(number_fields.-)(1, sq.sq(vertex_wedges.sin_a))" "nonneg_real")))
 (wedge_connector_endpoint_TCC2 0
  (wedge_connector_endpoint_TCC2-2 nil 3874129019
   ("" (skeep*)
    (("" (hide -3 -4 -5)
      (("" (case "u=v")
        (("1" (use "vertex_neq_next") (("1" (ground) nil nil)) nil)
         ("2" (hide -1 -2)
          (("2" (rewrite "comps_eq" -) (("2" (grind-with-ext) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (comps_eq formula-decl nil vectors_2D vectors)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sq_nz_pos application-judgement "posreal" sq reals))
   shostak
   (wedge_connector_endpoint subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(vertex_wedges.v, vertex_wedges.u))"
    "Nz_vector"))
  (wedge_connector_endpoint_TCC2-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (wedge_connector_endpoint subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(vertex_wedges.v, vertex_wedges.u))"
    "Nz_vector")))
 (wedge_connector_endpoint_TCC3 0
  (wedge_connector_endpoint_TCC3-2 nil 3874129019
   ("" (skeep*)
    (("" (hide -3 -4 -5 -6)
      (("" (use "vertex_neq_next") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sq_nz_pos application-judgement "posreal" sq reals))
   shostak
   (wedge_connector_endpoint subtype
    "(vectors_2D.-)(vertex_wedges.v, vertex_wedges.u)" "Nz_vector"))
  (wedge_connector_endpoint_TCC3-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (wedge_connector_endpoint subtype
    "(vectors_2D.-)(vertex_wedges.v, vertex_wedges.u)" "Nz_vector")))
 (index_from_offset_injective 0
  (index_from_offset_injective-1 nil 3874129019
   ("" (skeep)
    (("" (expand "injective?")
      (("" (skeep)
        (("" (expand "index_from_offset")
          (("" (rewrite "rem_sum_elim1")
            (("" (rewrite* "rem_mod") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((injective? const-decl "bool" functions nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (index_from_offset const-decl "below(G`num_vertices)" vertex_wedges
     nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rem_sum_elim1 formula-decl nil modulo_arithmetic nil))
   shostak))
 (index_from_offset_surjective 0
  (index_from_offset_surjective-1 nil 3874129019
   ("" (skeep)
    (("" (expand "surjective?")
      (("" (skeep)
        (("" (expand "index_from_offset")
          ((""
            (inst +
             "if y >= offset then y - offset else G`num_vertices + y - offset endif")
            (("1" (lift-if)
              (("1" (ground)
                (("1" (rewrite "rem_mod") nil nil)
                 ("2" (use "rem_def")
                  (("2" (ground)
                    (("2" (inst + "1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (ground) nil nil) ("3" (ground) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((surjective? const-decl "bool" functions nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (index_from_offset const-decl "below(G`num_vertices)" vertex_wedges
     nil)
    (rem_def formula-decl nil modulo_arithmetic nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (y skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (offset skolem-const-decl "below(G`num_vertices)" vertex_wedges
            nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (in_out_on_segment_have_crossing_between 0
  (in_out_on_segment_have_crossing_between-1 nil 3874129019
   ("" (skeep)
    (("" (case "p=q")
      (("1" (use "point_out_not_in") (("1" (ground) nil nil)) nil)
       ("2" (lemma "point_out_not_in")
        (("2" (inst - "q" "G")
          (("2" (ground)
            (("1" (use "perimeter_not_outside")
              (("1" (ground) nil nil)) nil)
             ("2" (lemma "point_in_polygon_conds_equiv")
              (("2" (inst-cp - "p" "^(q - p)" "G")
                (("2" (inst - "q" "^(q - p)" "G")
                  (("2" (ground)
                    (("2" (hide -1 -3 -4 2 3)
                      (("2" (expand "point_in_polygon_arb?")
                        (("2" (ground)
                          (("1" (use "perimeter_not_outside")
                            (("1" (ground) nil nil)) nil)
                           ("2" (lemma "arb_crossings_subset")
                            (("2" (inst - "p" "q" "^(q-p)" "G")
                              (("2"
                                (ground)
                                (("1"
                                  (use "smaller_card_subset[point_2d]")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "card_subset[point_2d]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case
                                             "point_on_segment?(x, (# p1 := p, p2 := q #))")
                                            (("1"
                                              (lemma
                                               "member_arb_crossings_on_perimeter")
                                              (("1"
                                                (inst
                                                 -
                                                 "p"
                                                 "x"
                                                 "^(q - p)"
                                                 "G")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "point_on_polygon_perimeter?")
                                                    (("1"
                                                      (skeep - t)
                                                      (("1"
                                                        (inst 5 "x")
                                                        (("1"
                                                          (lemma
                                                           "point_on_subsegment")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x"
                                                             "(# p1 := p, p2 := q #)"
                                                             "e")
                                                            (("1"
                                                              (expand
                                                               "subsegment?")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "point_on_segment_has_offset")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x"
                                                                     "(# p1 := p, p2 := q #)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "e!1")
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "norm_scal")
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "d=1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (cancel-add
                                                                                         -2)
                                                                                        (("1"
                                                                                          (use
                                                                                           "perimeter_not_outside")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case-replace
                                                                                       "d = 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-cases
                                                                                         3
                                                                                         :mult-op
                                                                                         1*)
                                                                                        (("2"
                                                                                          (use
                                                                                           "norm_diff_pos")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (case-replace
                                                                             "x = q")
                                                                            (("1"
                                                                              (lemma
                                                                               "perimeter_not_outside")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "q"
                                                                                 "G")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-6
                                                                                1
                                                                                2
                                                                                6))
                                                                              (("2"
                                                                                (rewrite
                                                                                 "point_on_segment_has_offset")
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "norm_scal")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "abs")
                                                                                          (("2"
                                                                                            (cancel-by
                                                                                             2
                                                                                             "norm(q - p)")
                                                                                            (("2"
                                                                                              (equate
                                                                                               "d!1"
                                                                                               "1"
                                                                                               (assert))
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (grind-with-ext)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "point_on_segment_has_offset"
                                               1)
                                              (("2"
                                                (expand
                                                 "arb_crossing_set"
                                                 (-2 2))
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "point_on_arb_ray?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "^"
                                                           -2)
                                                          (("2"
                                                            (case
                                                             "d/norm(q-p) <= 1")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "d/norm(q-p)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (cross-mult
                                                               1)
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   3)
                                                                  (("2"
                                                                    (inst
                                                                     3
                                                                     "d-norm(q-p)")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "point_on_arb_ray?")
                                  (("2"
                                    (expand "^")
                                    (("2"
                                      (inst + "norm(q-p)")
                                      (("2"
                                        (real-props)
                                        (("2"
                                          (move-terms 1 r 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (div_cancel1 formula-decl nil real_props nil)
    (smaller_card_subset formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (card_subset formula-decl nil finite_sets nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (adjacent_edges_counted? const-decl "bool" arb_direc_edge_crossing
     nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d skolem-const-decl "nonneg_real" vertex_wedges nil)
    (q skolem-const-decl "point_2d" vertex_wedges nil)
    (p skolem-const-decl "point_2d" vertex_wedges nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (member_arb_crossings_on_perimeter formula-decl nil
     arb_direc_edge_crossing nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (pos_times_lt formula-decl nil real_props nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "Vector" vectors_2D vectors)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (div_560 skolem-const-decl "nnreal" vertex_wedges nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (arb_crossings_subset formula-decl nil arb_direc_edge_crossing nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (perimeter_not_outside formula-decl nil polygon_membership nil))
   shostak))
 (in_out_have_crossing_on_subsegment_TCC1 0
  (in_out_have_crossing_on_subsegment_TCC1-2 nil 3874129019
   ("" (skeep)
    (("" (use "point_out_not_in") (("" (assert) nil nil)) nil)) nil)
   ((point_out_not_in formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak
   (in_out_have_crossing_on_subsegment subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}"))
  (in_out_have_crossing_on_subsegment_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (in_out_have_crossing_on_subsegment subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}")))
 (in_out_have_crossing_on_subsegment 0
  (in_out_have_crossing_on_subsegment-1 nil 3874129019
   ("" (auto-rewrite "sets.member")
    (("" (skeep)
      (("" (use "point_out_not_in")
        (("" (assert)
          (("" (ground)
            (("1" (inst + "p")
              (("1" (assert)
                (("1" (expand "point_on_segment?")
                  (("1" (inst + "0") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "p=q")
              (("1" (use "point_out_not_in") (("1" (ground) nil nil))
                nil)
               ("2" (lemma "point_out_not_in")
                (("2" (inst - "q" "G")
                  (("2" (ground)
                    (("1" (use "perimeter_not_outside")
                      (("1" (ground) nil nil)) nil)
                     ("2" (lemma "point_in_polygon_conds_equiv")
                      (("2" (inst-cp - "p" "^(q - p)" "G")
                        (("2" (inst - "q" "^(q - p)" "G")
                          (("2" (ground)
                            (("2" (hide -1 -3 -4 2 3)
                              (("2"
                                (expand "point_in_polygon_arb?")
                                (("2"
                                  (ground)
                                  (("1"
                                    (use "perimeter_not_outside")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (lemma "arb_crossings_subset")
                                    (("2"
                                      (inst - "p" "q" "^(q-p)" "G")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (use
                                           "smaller_card_subset[point_2d]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use
                                               "card_subset[point_2d]")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (case
                                                     "point_on_segment?(x, (# p1 := p, p2 := q #))")
                                                    (("1"
                                                      (lemma
                                                       "member_arb_crossings_on_perimeter")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "p"
                                                         "x"
                                                         "^(q - p)"
                                                         "G")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "x")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "point_on_segment_has_offset"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "arb_crossing_set"
                                                         (-2 2))
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "point_on_arb_ray?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   -2)
                                                                  (("2"
                                                                    (case
                                                                     "d/norm(q-p) <= 1")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "d/norm(q-p)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (cross-mult
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (cross-mult
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "^"
                                                                           3)
                                                                          (("2"
                                                                            (inst
                                                                             3
                                                                             "d-norm(q-p)")
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               3)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "point_on_arb_ray?")
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (inst + "norm(q-p)")
                                              (("2"
                                                (real-props)
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind-with-ext)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_out_not_in formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (perimeter_not_outside formula-decl nil polygon_membership nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (arb_crossings_subset formula-decl nil arb_direc_edge_crossing nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (member_arb_crossings_on_perimeter formula-decl nil
     arb_direc_edge_crossing nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (p skolem-const-decl "point_2d" vertex_wedges nil)
    (q skolem-const-decl "point_2d" vertex_wedges nil)
    (d skolem-const-decl "nonneg_real" vertex_wedges nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (adjacent_edges_counted? const-decl "bool" arb_direc_edge_crossing
     nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (card_subset formula-decl nil finite_sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (smaller_card_subset formula-decl nil finite_sets nil)
    (div_cancel1 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (nearest_perimeter_offset_TCC1 0
  (nearest_perimeter_offset_TCC1-2 nil 3874129019
   ("" (skeep)
    (("" (typepred "p" "q")
      (("" (use "point_out_not_in") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (point_out_not_in formula-decl nil polygon_membership nil))
   shostak
   (nearest_perimeter_offset subtype
    "(vectors_2D.-)(vertex_wedges.p, vertex_wedges.q)" "Nz_vector"))
  (nearest_perimeter_offset_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (nearest_perimeter_offset subtype
    "(vectors_2D.-)(vertex_wedges.p, vertex_wedges.q)" "Nz_vector")))
 (nearest_perimeter_offset_TCC2 0
  (nearest_perimeter_offset_TCC2-2 nil 3874129019
   (""
    (inst + "lambda (G: simple_polygon_2d):
                     lambda (d1: [{p: point_2d | NOT point_outside_polygon?(p, G)},
                                  {q: point_2d | point_outside_polygon?(q, G)}]):
                       min({d: posreal | EXISTS (v: point_2d):
                           point_on_segment?(v, (# p1 := d1`1, p2 := d1`2 #)) AND
                           point_on_polygon_perimeter?(G)(v) AND
                           d = norm(d1`2 - v)})")
    (("1" (skeep)
      (("1" (typepred "d1`1")
        (("1" (typepred "d1`2")
          (("1"
            (typepred "min[posreal,
                                          restrict
                                              [[real, real],
                                               [posreal, posreal],
                                               boolean]
                                              (<=)]
                                          ({d: posreal |
                                            EXISTS
                                            (v: point_2d):
                                            point_on_segment?
                                            (v, (# p1 := d1`1, p2 := d1`2 #))
                                            AND
                                            point_on_polygon_perimeter?(G)(v)
                                            AND
                                            d = norm(d1`2 - v)})")
            (("1"
              (name-replace "m"
               "min[posreal, restrict[[real, real], [posreal, posreal], boolean](<=)]
                      ({d: posreal |
                          EXISTS (v: point_2d):
                            point_on_segment?(v, (# p1 := d1`1, p2 := d1`2 #)) AND
                             point_on_polygon_perimeter?(G)(v) AND d = norm(d1`2 - v)})")
              (("1" (skeep)
                (("1" (expand "next_arb_intersection?")
                  (("1" (rewrite "point_on_reverse_segment" :dir rl)
                    (("1" (expand "reverse_segment")
                      (("1"
                        (rewrite "point_on_segment_has_norm_offset")
                        (("1" (skeep)
                          (("1" (case-replace "d=m")
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst - "norm(u - d1`2)")
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand "restrict")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (inst + "u")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "norm_sym" 1)
                                            (("2"
                                              (rewrite
                                               "point_on_reverse_segment"
                                               :dir
                                               rl)
                                              (("2"
                                                (expand
                                                 "reverse_segment")
                                                (("2"
                                                  (rewrite
                                                   "point_on_segment_has_norm_offset")
                                                  (("2"
                                                    (expand
                                                     "point_on_arb_ray?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst + "d!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length")
                                                            (("2"
                                                              (replace
                                                               -9)
                                                              (("2"
                                                                (equate
                                                                 "d1`2 - (d1`2 + d!1 * ^(d1`1 - d1`2))"
                                                                 "-d!1 * ^(d1`1 - d1`2)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case-replace "u = d1`2")
                                    (("1"
                                      (lemma "perimeter_not_outside")
                                      (("1"
                                        (inst - "d1`2" "G")
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-3 -6 1))
                              (("2"
                                (replace -1)
                                (("2"
                                  (equate
                                   "d1`2 - (d1`2 + d * ^(d1`1 - d1`2))"
                                   "-d * ^(d1`1 - d1`2)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "abs")
                                      (("1"
                                        (lift-if)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "empty?")
                (("2" (use "in_out_have_crossing_on_subsegment")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst - "norm(d1`2 - v)")
                        (("1" (expand "member")
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (case "v = d1`2")
                          (("1" (use "perimeter_not_outside")
                            (("1" (ground) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 3) (("3" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep + t)
      (("2" (expand "empty?")
        (("2" (use "in_out_have_crossing_on_subsegment")
          (("2" (assert)
            (("2" (typepred "d1`1")
              (("2" (typepred "d1`2")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst - "norm(d1`2 - v)")
                      (("1" (expand "member")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (case "v = d1`2")
                        (("1" (use "perimeter_not_outside")
                          (("1" (ground) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   ((next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (vector_from_point_to_point const-decl "vector_2d" vectors_cross_2d
     nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (are_vectors_collinear? const-decl
     "{b: bool | b = (abs(v1 * v2) = norm(v1) * norm(v2))}"
     vectors_cross_2d nil)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (polygon_edges_do_not_cross? const-decl "bool" polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (d1 skolem-const-decl
     "[{p: point_2d | NOT point_outside_polygon?(p, G)},
 {q: point_2d | point_outside_polygon?(q, G)}]" vertex_wedges nil)
    (v skolem-const-decl "point_2d" vertex_wedges nil)
    (in_out_have_crossing_on_subsegment formula-decl nil vertex_wedges
     nil)
    (v skolem-const-decl "point_2d" vertex_wedges nil)
    (member const-decl "bool" sets nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_on_arb_ray_add formula-decl nil vectors_cross_2d nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (u skolem-const-decl "point_2d" vertex_wedges nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (d1 skolem-const-decl
     "[{p: point_2d | NOT point_outside_polygon?(p, G)},
 {q: point_2d | point_outside_polygon?(q, G)}]" vertex_wedges nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (length const-decl "posreal" segments_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (perimeter_not_outside formula-decl nil polygon_membership nil)
    (point_on_segment_has_norm_offset formula-decl nil segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (next_arb_intersection? const-decl "bool" arb_direc_edge_crossing
     nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil))
   shostak
   (nearest_perimeter_offset existence ""
    "[G: polygons_2d.simple_polygon_2d -> [d1: [{p: vectors_cross_2d.point_2d | (booleans.NOT)(polygon_membership.point_outside_polygon?(p, G))}, {q: vectors_cross_2d.point_2d | polygon_membership.point_outside_polygon?(q, G)}] -> {d: real_types.posreal | arb_direc_edge_crossing.next_arb_intersection?(d1`2, vectors_2D.^((vectors_2D.-)(d1`1, d1`2)), G)((vectors_2D.+)(d1`2, vectors_2D.*(d, vectors_2D.^((vectors_2D.-)(d1`1, d1`2)))))}]]"))
  (nearest_perimeter_offset_TCC2-1 nil 3874128960
   ("" (existence-tcc) nil nil) nil nil
   (nearest_perimeter_offset existence ""
    "[G: polygons_2d.simple_polygon_2d -> [d1: [{p: vectors_cross_2d.point_2d | (booleans.NOT)(polygon_membership.point_outside_polygon?(p, G))}, {q: vectors_cross_2d.point_2d | polygon_membership.point_outside_polygon?(q, G)}] -> {d: real_types.posreal | arb_direc_edge_crossing.next_arb_intersection?(d1`2, vectors_2D.^((vectors_2D.-)(d1`1, d1`2)), G)((vectors_2D.+)(d1`2, vectors_2D.*(d, vectors_2D.^((vectors_2D.-)(d1`1, d1`2)))))}]]")))
 (nearest_perimeter_offset_bound 0
  (nearest_perimeter_offset_bound-1 nil 3874129019
   ("" (skeep)
    (("" (use "point_out_not_in")
      (("" (typepred "nearest_perimeter_offset(G)(p, q)")
        (("" (ground)
          (("1" (expand "next_arb_intersection?")
            (("1" (flatten)
              (("1" (inst - "p")
                (("1" (ground)
                  (("1" (hide-all-but 1)
                    (("1" (expand "^")
                      (("1" (expand "point_on_arb_ray?")
                        (("1" (inst + "norm(p-q)")
                          (("1" (assert)
                            (("1" (grind-with-ext) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "in_out_have_crossing_on_subsegment")
            (("2" (inst - "G" "p" "q")
              (("2" (assert)
                (("2" (skeep)
                  (("2" (expand "next_arb_intersection?")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "abs")
                          (("2"
                            (rewrite "point_on_reverse_segment" -1 :dir
                             rl)
                            (("2" (expand "reverse_segment")
                              (("2"
                                (rewrite "point_on_segment_has_offset")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (case
                                     "norm(v-q) < nearest_perimeter_offset(G)(p, q)")
                                    (("1"
                                      (inst - "v")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "point_on_arb_ray?")
                                          (("1"
                                            (inst + "d*norm(p-q)")
                                            (("1"
                                              (expand "^")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "norm_scal" 1)
                                          (("2"
                                            (expand "abs")
                                            (("2"
                                              (hide-all-but (-2 1 5 6))
                                              (("2"
                                                (case
                                                 "d * norm(p - q) > norm(p - q)")
                                                (("1"
                                                  (cancel-by
                                                   -1
                                                   "norm(p-q)")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_out_not_in formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (point_on_arb_ray_add formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (pos_div_gt formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_561 skolem-const-decl "nnreal" vertex_wedges nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (in_out_have_crossing_on_subsegment formula-decl nil vertex_wedges
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (next_arb_intersection? const-decl "bool" arb_direc_edge_crossing
     nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nearest_perimeter_offset const-decl
     "{d: posreal | next_arb_intersection?(q, ^(p - q), G)(q + d * ^(p - q))}"
     vertex_wedges nil))
   shostak))
 (between_points_on_perimeter 0
  (between_points_on_perimeter-1 nil 3874129019
   ("" (skeep)
    (("" (case "p=q")
      (("1" (ground) nil nil)
       ("2"
        (case "exists (v: point_2d): v = q + nearest_perimeter_offset(G)(p,q) * ^(p-q)")
        (("1" (skeep)
          (("1" (typepred "nearest_perimeter_offset(G)(p, q)")
            (("1" (expand "next_arb_intersection?")
              (("1" (flatten)
                (("1"
                  (name-replace "N"
                   "nearest_perimeter_offset(G)(p, q)")
                  (("1" (expand "point_on_polygon_perimeter?")
                    (("1" (skeep - t)
                      (("1" (expand "edge_of_polygon?")
                        (("1" (skeep)
                          (("1" (inst + "v" "i")
                            (("1" (case "N <= norm(p-q)")
                              (("1"
                                (ground)
                                (("1"
                                  (lemma "point_on_subsegment")
                                  (("1"
                                    (inst
                                     -
                                     "v"
                                     "(# p1 := p, p2 := q #)"
                                     "e")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (replace -8 1)
                                        (("1"
                                          (expand
                                           "point_on_segment?"
                                           1)
                                          (("1"
                                            (inst + "1-N/norm(p-q)")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (move-terms 1 r 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (move-terms 1 l 2)
                                                (("2"
                                                  (cancel-add 1)
                                                  (("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "subsegment?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (lemma
                                     "extend_points_outside_polygon_excl")
                                    (("2"
                                      (inst
                                       -
                                       "q"
                                       "(# p1 := q, p2 := v #)"
                                       "G")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (inst - "u")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (rewrite
                                                 "point_on_segment_has_offset"
                                                 1)
                                                (("1"
                                                  (inst + "1-d")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (ground)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide-all-but
                                                       (-7 -11 3))
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (real-props)
                                                          (("2"
                                                            (name-replace
                                                             "M"
                                                             "N / norm(p - q)")
                                                            (("2"
                                                              (cancel-add
                                                               -2)
                                                              (("2"
                                                                (use
                                                                 "scal_eq_zero")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "q=v")
                                              (("1"
                                                (use
                                                 "perimeter_not_outside")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (hide-all-but (-2 1))
                                                  (("2"
                                                    (move-terms -1 r 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "scal_eq_zero")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (inst - "q_1")
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (expand
                                                   "point_on_polygon_perimeter?")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "point_on_segment_has_offset"
                                                   -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand
                                                       "point_on_arb_ray?")
                                                      (("1"
                                                        (replace
                                                         -12
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (ground)
                                                    (("2"
                                                      (lemma
                                                       "perimeter_not_outside")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "q"
                                                         "G")
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (expand
                                                             "point_on_polygon_perimeter?")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "e!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (rewrite
                                                   "point_on_segment_has_offset")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -12
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "abs")
                                                              (("1"
                                                                (case-replace
                                                                 "d!1=1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (cancel-add
                                                                     -2)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (mult-cases
                                                                   2
                                                                   :mult-op
                                                                   1*)
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "perimeter_not_outside")
                                                    (("2"
                                                      (inst - "q" "G")
                                                      (("2"
                                                        (ground)
                                                        (("2"
                                                          (expand
                                                           "point_on_polygon_perimeter?")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "e!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "perimeter_not_outside")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (expand
                                             "point_on_polygon_perimeter?")
                                            (("2"
                                              (inst + "e!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 4)
                                (("2"
                                  (hide -6)
                                  (("2"
                                    (expand "N")
                                    (("2"
                                      (use
                                       "nearest_perimeter_offset_bound")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (inst + "q + nearest_perimeter_offset(G)(p, q) * ^(p - q)")
          nil nil)
         ("3" (propax) nil nil) ("4" (propax) nil nil)
         ("5" (propax) nil nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (p skolem-const-decl "point_2d" vertex_wedges nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (<= const-decl "bool" reals nil)
    (v skolem-const-decl "point_2d" vertex_wedges nil)
    (q skolem-const-decl "point_2d" vertex_wedges nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perimeter_not_outside formula-decl nil polygon_membership nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (extend_points_outside_polygon_excl formula-decl nil
     polygon_membership nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (point_on_arb_ray_add formula-decl nil vectors_cross_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nearest_perimeter_offset_bound formula-decl nil vertex_wedges nil)
    (N skolem-const-decl
     "{d: posreal | next_arb_intersection?(q, ^(p - q), G)(q + d * ^(p - q))}"
     vertex_wedges nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (next_arb_intersection? const-decl "bool" arb_direc_edge_crossing
     nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nearest_perimeter_offset const-decl
     "{d: posreal | next_arb_intersection?(q, ^(p - q), G)(q + d * ^(p - q))}"
     vertex_wedges nil))
   shostak))
 (extend_points_between_edges 0
  (extend_points_between_edges-1 nil 3874129019
   ("" (skeep*)
    (("" (expand "point_between_edges?")
      (("" (expand "edges_of_polygon")
        (("" (expand "reverse_segment")
          (("" (assert)
            (("" (rewrite* "point_on_segment_has_offset")
              (("" (skeep*)
                (("" (case "d=0")
                  (("1" (hide 3) (("1" (grind) nil nil)) nil)
                   ("2" (case "d!1 = 0")
                    (("1" (hide -3 4)
                      (("1" (replace -1) (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (replace -3 -2)
                      (("2" (replace -5 5)
                        (("2" (ground)
                          (("1" (lemma "same_line_between_rays")
                            (("1" (inst?)
                              (("1"
                                (inst - "d")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "same_line_between_rays")
                            (("2" (inst?)
                              (("2"
                                (inst - "d")
                                (("2"
                                  (ground)
                                  (("1"
                                    (replace -3)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (lemma "vertex_neq_next")
                                    (("2"
                                      (inst - "G" "i")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma "vertex_neq_prev")
                                    (("3"
                                      (inst - "G" "i")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (replace -2)
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_between_edges? const-decl "bool" polygon_attributes nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vertex_neq_prev_2 formula-decl nil polygons_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (same_line_between_rays formula-decl nil between_rays nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (extend_points_between_edges_ray_TCC1 0
  (extend_points_between_edges_ray_TCC1-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)) shostak
   (extend_points_between_edges_ray subtype
    "(vectors_2D.-)(vertex_wedges.e`p2, vertex_wedges.e`p1)"
    "Nz_vector"))
  (extend_points_between_edges_ray_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (extend_points_between_edges_ray subtype
    "(vectors_2D.-)(vertex_wedges.e`p2, vertex_wedges.e`p1)"
    "Nz_vector")))
 (extend_points_between_edges_ray 0
  (extend_points_between_edges_ray-1 nil 3874129019
   ("" (skeep*)
    (("" (expand "point_between_edges?")
      (("" (expand "edges_of_polygon")
        (("" (expand "reverse_segment")
          (("" (assert)
            (("" (expand "point_on_arb_ray?")
              (("" (skeep*)
                (("" (case "d=0")
                  (("1" (hide-all-but (-1 -4 1))
                    (("1" (replace -1) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (case "d!1 = 0")
                    (("1" (hide -3 4)
                      (("1" (replace -1) (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (replace -3 -2)
                      (("2" (replace -4 5)
                        (("2" (ground)
                          (("1" (lemma "same_line_between_rays")
                            (("1" (inst?)
                              (("1"
                                (inst - "d")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "same_line_between_rays")
                            (("2" (inst?)
                              (("2"
                                (inst - "d")
                                (("2"
                                  (ground)
                                  (("1"
                                    (replace -3)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (lemma "vertex_neq_next")
                                    (("2"
                                      (inst - "G" "i")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma "vertex_neq_prev")
                                    (("3"
                                      (inst - "G" "i")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (replace -2)
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_between_edges? const-decl "bool" polygon_attributes nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vertex_neq_prev_2 formula-decl nil polygons_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (same_line_between_rays formula-decl nil between_rays nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (all_interior_points_inside 0
  (all_interior_points_inside-1 nil 3874129019
   ("" (skeep*)
    (("" (expand "only_vertex_intersections?")
      (("" (lemma "extend_points_inside_polygon")
        (("" (inst - "q" "(# p1 := q, p2 := p #)" "G")
          (("1" (ground)
            (("1" (inst -1 "p")
              (("1" (assert)
                (("1" (hide-all-but 1)
                  (("1" (expand "point_on_segment?")
                    (("1" (inst + "1") (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (case "q_1 = q")
                (("1" (expand "point_in_polygon?")
                  (("1" (ground) nil nil)) nil)
                 ("2" (expand "point_on_polygon_perimeter?")
                  (("2" (skeep)
                    (("2" (inst - "e!1")
                      (("2" (expand "point_in_polygon?")
                        (("2" (expand "point_on_polygon_perimeter?")
                          (("2" (split -3)
                            (("1" (flatten)
                              (("1"
                                (inst + "e!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (rewrite
                                       "point_on_reverse_segment"
                                       2)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst - "q_1")
                                (("2"
                                  (hide 6)
                                  (("2"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "proper_subsegment_excludes_endpoints")
                                      (("1"
                                        (inst
                                         -
                                         "q_1"
                                         "(# p1 := q, p2 := p #)"
                                         "e")
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "point_on_subsegment")
                                      (("2"
                                        (inst
                                         -
                                         "q_1"
                                         "(# p1 := q, p2 := p #)"
                                         "e")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "subsegment?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((only_vertex_intersections? const-decl "bool" injection_props nil)
    (q skolem-const-decl "point_2d" vertex_wedges nil)
    (p skolem-const-decl "point_2d" vertex_wedges nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (proper_subsegment_excludes_endpoints formula-decl nil
     segments_2d_props nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (extend_points_inside_polygon formula-decl nil polygon_membership
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (opposite_wedge_apex_point 0
  (opposite_wedge_apex_point-1 nil 3874129019
   ("" (skeep)
    (("" (expand "vertex_wedge_apex")
      (("" (expand "vertex_bisect_vector")
        (("" (apply (repeat (lift-if)))
          (("" (expand "^")
            (("" (real-props)
              ((""
                (name-replace "nn"
                 "norm(G`vertices(next_index(G, i)) - G`vertices(i)) *
                         (G`vertices(prev_index(G, i)) - G`vertices(i))
                         +
                         norm(G`vertices(prev_index(G, i)) - G`vertices(i)) *
                          (G`vertices(next_index(G, i)) - G`vertices(i))")
                (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (norm_neg formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil))
   shostak))
 (opposite_points_between_narrow 0
  (opposite_points_between_narrow-1 nil 3874129019 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (between_rays? const-decl "bool" between_rays nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (opposite_points_between_wide_TCC1 0
  (opposite_points_between_wide_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (opposite_points_between_wide subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.e`p2)}"))
  (opposite_points_between_wide_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (opposite_points_between_wide subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.e`p2)}")))
 (opposite_points_between_wide_TCC2 0
  (opposite_points_between_wide_TCC2-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (opposite_points_between_wide subtype
    "(vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.s`p1)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}"))
  (opposite_points_between_wide_TCC2-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (opposite_points_between_wide subtype
    "(vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.s`p1)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}")))
 (opposite_points_between_wide 0
  (opposite_points_between_wide-1 nil 3874129019 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cross_wide_opposite_narrow 0
  (cross_wide_opposite_narrow-1 nil 3874129019 ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cross_wide_opposite_vertex_between_TCC1 0
  (cross_wide_opposite_vertex_between_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (cross_wide_opposite_vertex_between subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.u}"))
  (cross_wide_opposite_vertex_between_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (cross_wide_opposite_vertex_between subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.u}")))
 (cross_wide_opposite_vertex_between_TCC2 0
  (cross_wide_opposite_vertex_between_TCC2-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (cross_wide_opposite_vertex_between subtype
    "(vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.u)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}"))
  (cross_wide_opposite_vertex_between_TCC2-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (cross_wide_opposite_vertex_between subtype
    "(vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.u)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}")))
 (cross_wide_opposite_vertex_between 0
  (cross_wide_opposite_vertex_between-1 nil 3874129019
   ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cross_wide_point_between_opposite_1_TCC1 0
  (cross_wide_point_between_opposite_1_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (cross_wide_point_between_opposite_1 subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.w)}"))
  (cross_wide_point_between_opposite_1_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (cross_wide_point_between_opposite_1 subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.w)}")))
 (cross_wide_point_between_opposite_1 0
  (cross_wide_point_between_opposite_1-1 nil 3874129019
   ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cross_wide_point_between_opposite_2_TCC1 0
  (cross_wide_point_between_opposite_2_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (cross_wide_point_between_opposite_2 subtype "vertex_wedges.w"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}"))
  (cross_wide_point_between_opposite_2_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (cross_wide_point_between_opposite_2 subtype "vertex_wedges.w"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}")))
 (cross_wide_point_between_opposite_2 0
  (cross_wide_point_between_opposite_2-1 nil 3874129019
   ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cross_wide_point_between_opposite_3_TCC1 0
  (cross_wide_point_between_opposite_3_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (cross_wide_point_between_opposite_3 subtype "vertex_wedges.w"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}"))
  (cross_wide_point_between_opposite_3_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (cross_wide_point_between_opposite_3 subtype "vertex_wedges.w"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}")))
 (cross_wide_point_between_opposite_3 0
  (cross_wide_point_between_opposite_3-1 nil 3874129019
   ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cross_wide_point_between_opposite_4 0
  (cross_wide_point_between_opposite_4-1 nil 3874129019
   ("" (grind) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cross_wide_point_between_opposite_5 0
  (cross_wide_point_between_opposite_5-1 nil 3874129019
   ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (between_rays? const-decl "bool" between_rays nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (weighted_vector_sum_between 0
  (weighted_vector_sum_between-1 nil 3874129019
   ("" (skeep)
    (("" (assert)
      (("" (expand "between_rays?")
        (("" (name-replace* ("u" "s`p1 - e`p1" "w" "e`p2 - e`p1"))
          (("" (equate "e`p1 + b * u + a * w - e`p1" "b * u + a * w" t)
            ((""
              (equate "e`p1 - b * u - a * w - e`p1" "-b * u - a * w" t)
              (("" (rewrite "cross_scal_add_1")
                (("" (rewrite "cross_scal_add_2")
                  (("" (rewrite "cross_scal_sub_1")
                    (("" (lemma "cross_scal_sub_2")
                      (("" (inst - "w" "b*u" "a")
                        (("" (equate "-(b*u)" "-b*u" t)
                          (("" (replace -1)
                            (("" (rewrite* "cross_scales_2")
                              ((""
                                (real-props)
                                ((""
                                  (ground)
                                  (("1"
                                    (move-terms 1 l)
                                    (("1"
                                      (elim-unary 1)
                                      (("1"
                                        (assert)
                                        (("1" (real-props) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "cross_antisymmetric" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cross_scal_add_2 formula-decl nil vectors_cross_2d nil)
    (cross_scal_sub_2 formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (neg_times_gt formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (pos_times_gt formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_scal_sub_1 formula-decl nil vectors_cross_2d nil)
    (cross_scal_add_1 formula-decl nil vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil))
   shostak))
 (weighted_vector_sum_between_neg 0
  (weighted_vector_sum_between_neg-1 nil 3874129019
   ("" (skeep)
    (("" (assert)
      (("" (expand "between_rays?")
        (("" (name-replace* ("u" "s`p1 - e`p1" "w" "e`p2 - e`p1"))
          (("" (equate "e`p1 + b * u + a * w - e`p1" "b * u + a * w" t)
            ((""
              (equate "e`p1 - b * u - a * w - e`p1" "-b * u - a * w" t)
              (("" (rewrite "cross_scal_add_1")
                (("" (rewrite "cross_scal_add_2")
                  (("" (rewrite "cross_scal_sub_1")
                    (("" (lemma "cross_scal_sub_2")
                      (("" (inst - "w" "b*u" "a")
                        (("" (equate "-(b*u)" "-b*u" t)
                          (("" (replace -1)
                            (("" (rewrite* "cross_scales_2")
                              ((""
                                (real-props)
                                ((""
                                  (ground)
                                  (("1"
                                    (move-terms 1 l)
                                    (("1"
                                      (elim-unary 1)
                                      (("1"
                                        (assert)
                                        (("1" (real-props) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (move-terms 1 l)
                                    (("2"
                                      (elim-unary 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (real-props)
                                          (("2"
                                            (rewrite
                                             "cross_antisymmetric"
                                             1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cross_scal_add_2 formula-decl nil vectors_cross_2d nil)
    (cross_scal_sub_2 formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (neg_times_gt formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pos_times_lt formula-decl nil real_props nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (pos_times_gt formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_scal_sub_1 formula-decl nil vectors_cross_2d nil)
    (cross_scal_add_1 formula-decl nil vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil))
   shostak))
 (bisect_vector_between 0
  (bisect_vector_between-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (expand "vertex_bisect_vector")
        (("" (lift-if)
          (("" (expand "edges_of_polygon")
            (("" (assert)
              ((""
                (name-replace*
                 ("P" "G`vertices(prev_index(G, i)) - G`vertices(i)"
                  "N" "G`vertices(next_index(G, i)) - G`vertices(i)"))
                (("" (lemma "vertex_neq_prev")
                  (("" (inst - "G" "i")
                    (("" (lemma "vertex_neq_next")
                      (("" (inst - "G" "i")
                        (("" (flatten)
                          (("" (case "P /= zero and N /= zero")
                            (("1" (case "norm(P) /= 0 and norm(N) /=0")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "between_rays?")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 7)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case
                                               "perp_right(P) = zero")
                                              (("1"
                                                (expand "perp_right")
                                                (("1"
                                                  (decompose-equality
                                                   -1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "cross_perp_right_pos")
                                                (("2"
                                                  (rewrite
                                                   "parallel_equiv_cross_eq_0"
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (expand
                                                     "parallel?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (use
                                                         "prev_edge_not_dir_parallel")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "dir_parallel_diff")
                                                                (("2"
                                                                  (expand
                                                                   "dir_parallel?")
                                                                  (("2"
                                                                    (case
                                                                     "nzk > 0")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "1/nzk")
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (real-props)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("2"
                                                                          (ground)
                                                                          (("1"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (equate
                                                                           "perp_right(nzk * N)"
                                                                           "nzk * perp_right(N)"
                                                                           t)
                                                                          (("2"
                                                                            (rewrite
                                                                             "cross_scales_2")
                                                                            (("2"
                                                                              (real-props)
                                                                              (("2"
                                                                                (use
                                                                                 "cross_perp_right_pos")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "weighted_vector_sum_between")
                                              (("2"
                                                (inst
                                                 -
                                                 "edges_of_polygon(G)(prev_index(G,i))"
                                                 "edges_of_polygon(G)(i)"
                                                 "norm(P)"
                                                 "norm(N)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "edges_of_polygon")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (expand
                                                             "between_rays?")
                                                            (("2"
                                                              (equate
                                                               "G`vertices(i) - norm(N) * P - norm(P) * N -
                                    G`vertices(i)"
                                                               "-(norm(N) * P + norm(P) * N)")
                                                              (("1"
                                                                (equate
                                                                 "G`vertices(i) + norm(N) * P + norm(P) * N -
                                        G`vertices(i)"
                                                                 "norm(N) * P + norm(P) * N")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (cancel-add
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (cancel-add
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 4)
                                (("2"
                                  (ground)
                                  (("1" (rewrite "norm_eq_0") nil nil)
                                   ("2" (rewrite "norm_eq_0") nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 4)
                              (("2"
                                (replace -1 :dir rl)
                                (("2"
                                  (replace -2 :dir rl)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add_neg_sub formula-decl nil vectors_2D vectors)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sqrt_square formula-decl nil sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (parallel_equiv_cross_eq_0 formula-decl nil vectors_cross_2d nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (neg_times_lt formula-decl nil real_props nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzk skolem-const-decl "nzreal" vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (div_cancel2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (dir_parallel_diff formula-decl nil vectors_cross_2d nil)
    (prev_edge_not_dir_parallel formula-decl nil polygons_2d nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (cross_perp_right_pos formula-decl nil vectors_cross_2d nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (weighted_vector_sum_between formula-decl nil vertex_wedges nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (sub_cancel formula-decl nil vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil))
   shostak))
 (bisect_vector_between_rev 0
  (bisect_vector_between_rev-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (expand "vertex_bisect_vector")
        (("" (lift-if)
          (("" (expand "edges_of_polygon")
            (("" (assert)
              (("" (expand "reverse_segment")
                ((""
                  (name-replace*
                   ("P" "G`vertices(prev_index(G, i)) - G`vertices(i)"
                    "N"
                    "G`vertices(next_index(G, i)) - G`vertices(i)"))
                  (("" (lemma "vertex_neq_prev")
                    (("" (inst - "G" "i")
                      (("" (lemma "vertex_neq_next")
                        (("" (inst - "G" "i")
                          (("" (flatten)
                            (("" (case "P /= zero and N /= zero")
                              (("1"
                                (case "norm(P) /= 0 and norm(N) /=0")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "between_rays?")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (equate
                                             "cross(N,P)"
                                             "-cross(P,N)")
                                            (("1"
                                              (split 7)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite*
                                                     "neg_cross_neg")
                                                    (("1"
                                                      (case
                                                       "perp_right(P) = zero")
                                                      (("1"
                                                        (expand
                                                         "perp_right")
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (ground)
                                                        (("1"
                                                          (move-terms
                                                           1
                                                           l)
                                                          (("1"
                                                            (elim-unary
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "parallel_equiv_cross_eq_0"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "parallel?")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (use
                                                                       "prev_edge_not_dir_parallel")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (rewrite
                                                                               "dir_parallel_diff")
                                                                              (("1"
                                                                                (expand
                                                                                 "dir_parallel?")
                                                                                (("1"
                                                                                  (case
                                                                                   "nzk > 0")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "1/nzk")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (real-props)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("2"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (equate
                                                                                         "perp_right(nzk * N)"
                                                                                         "nzk * perp_right(N)"
                                                                                         t)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "cross_scales_2")
                                                                                          (("2"
                                                                                            (real-props)
                                                                                            (("2"
                                                                                              (use
                                                                                               "cross_perp_right_pos")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (move-terms
                                                           1
                                                           l)
                                                          (("2"
                                                            (elim-unary
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (use
                                                                 "cross_perp_right_pos")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "weighted_vector_sum_between")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "reverse_segment(edges_of_polygon(G)(i))"
                                                       "reverse_segment(edges_of_polygon(G)(prev_index(G,i)))"
                                                       "norm(N)"
                                                       "norm(P)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "edges_of_polygon")
                                                          (("2"
                                                            (expand
                                                             "reverse_segment")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (equate
                                                                     "cross(N,P)"
                                                                     "-cross(P,N)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "between_rays?")
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (equate
                                                                               "G`vertices(i) + norm(P) * N + norm(N) * P -
               G`vertices(i)"
                                                                               "norm(P) * N + norm(N) * P")
                                                                              (("1"
                                                                                (equate
                                                                                 "G`vertices(i) - norm(P) * N - norm(N) * P -
               G`vertices(i)"
                                                                                 "-norm(P) * N - norm(N) * P")
                                                                                (("1"
                                                                                  (equate
                                                                                   "cross(N,P)"
                                                                                   "-cross(P,N)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (equate
                                                                                       "-(norm(N) * P + norm(P) * N)"
                                                                                       "-norm(P) * N - norm(N) * P")
                                                                                      (("1"
                                                                                        (equate
                                                                                         "norm(N) * P + norm(P) * N"
                                                                                         "norm(P) * N + norm(N) * P")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "cross_antisymmetric")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (cancel-add
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (cancel-add
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "cross_antisymmetric")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (rewrite
                                                 "cross_antisymmetric")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 4)
                                  (("2"
                                    (ground)
                                    (("1"
                                      (rewrite "norm_eq_0")
                                      nil
                                      nil)
                                     ("2"
                                      (rewrite "norm_eq_0")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 4)
                                (("2"
                                  (replace -1 :dir rl)
                                  (("2"
                                    (replace -2 :dir rl)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((next_prev_is_original formula-decl nil polygons_2d nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (sub_cancel formula-decl nil vectors_2D vectors)
    (neg_neg formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sqrt_square formula-decl nil sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (prev_edge_not_dir_parallel formula-decl nil polygons_2d nil)
    (dir_parallel_diff formula-decl nil vectors_cross_2d nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nzk skolem-const-decl "nzreal" vertex_wedges nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (cross_perp_right_pos formula-decl nil vectors_cross_2d nil)
    (neg_times_gt formula-decl nil real_props nil)
    (* const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (parallel_equiv_cross_eq_0 formula-decl nil vectors_cross_2d nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (neg_cross_neg formula-decl nil vectors_cross_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (weighted_vector_sum_between formula-decl nil vertex_wedges nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (between_rays? const-decl "bool" between_rays nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil))
   shostak))
 (apex_point_neq_next_apex 0
  (apex_point_neq_next_apex-1 nil 3874129019
   ("" (skeep)
    (("" (expand "vertex_wedge_apex")
      (("" (lift-if)
        (("" (use "separation_distance_bounds_edge_length")
          (("" (inst - "edges_of_polygon(G)(i)")
            (("" (expand "vertex_wedge_radius")
              (("" (expand "edges_of_polygon")
                (("" (expand "length")
                  (("" (ground)
                    (("1"
                      (name-replace*
                       ("b" "^(vertex_bisect_vector(G, i))" "nb"
                        "^(vertex_bisect_vector(G, next_index(G,i)))"))
                      (("1" (move-terms -4 l 1)
                        (("1" (move-terms -4 r 2)
                          (("1" (factor -4 l)
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (rewrite "norm_scal")
                                (("1"
                                  (expand "abs")
                                  (("1"
                                    (cancel-by -5 "min_edge_sep(G)")
                                    (("1"
                                      (cross-mult -1)
                                      (("1"
                                        (use "norm_sub_le")
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (replace -5 :dir rl)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (name-replace*
                       ("b" "-^(vertex_bisect_vector(G, i))" "nb"
                        "-^(vertex_bisect_vector(G, next_index(G,i)))"))
                      (("2" (move-terms -3 l 1)
                        (("2" (move-terms -3 r 2)
                          (("2" (factor -3 l)
                            (("2" (replace -3 :dir rl)
                              (("2"
                                (rewrite "norm_scal")
                                (("2"
                                  (expand "abs")
                                  (("2"
                                    (cancel-by -4 "min_edge_sep(G)")
                                    (("2"
                                      (cross-mult -1)
                                      (("2"
                                        (use "norm_sub_le")
                                        (("2"
                                          (replace -4 :dir rl)
                                          (("2"
                                            (replace -5 :dir rl)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (length const-decl "posreal" segments_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm_neg formula-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (norm_normalize formula-decl nil vectors_2D vectors)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm_sub_le formula-decl nil vectors_2D vectors)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (edge_is_edge formula-decl nil polygons_2d nil))
   shostak))
 (connector_endpoints_neq 0
  (connector_endpoints_neq-1 nil 3874129019
   ("" (skeep)
    (("" (expand "wedge_connector_endpoint")
      (("" (case "1 - sq(wedge_connector_sine(G)) > 0")
        (("1" (case "1 - sq(wedge_connector_sine(G)) < 1")
          (("1"
            (name-replace "D"
             "vertex_wedge_radius(G) * sqrt(1 - sq(wedge_connector_sine(G))) *
            ^(G`vertices(next_index(G, i)) - G`vertices(i))")
            (("1" (cancel-add -3)
              (("1" (name-replace "v" "G`vertices(next_index(G, i))")
                (("1" (move-terms -3 r 2)
                  (("1" (move-terms -3 l 1)
                    (("1"
                      (lemma "separation_distance_bounds_edge_length")
                      (("1" (inst - "G" "edges_of_polygon(G)(i)")
                        (("1" (expand "length")
                          (("1" (expand "edges_of_polygon")
                            (("1" (factor -4 l)
                              (("1"
                                (assert)
                                (("1"
                                  (transform-both -4 "norm(%1)")
                                  (("1"
                                    (hide -5)
                                    (("1"
                                      (expand "v")
                                      (("1"
                                        (replace -1 :dir rl :hide? t)
                                        (("1"
                                          (expand "D")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (expand
                                                 "vertex_wedge_radius")
                                                (("1"
                                                  (real-props)
                                                  (("1"
                                                    (cancel-by
                                                     -1
                                                     "min_edge_sep(G)")
                                                    (("1"
                                                      (lemma
                                                       "sqrt_lt1")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "1 - sq(wedge_connector_sine(G))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil)
           ("2" (hide -)
            (("2" (typepred "wedge_connector_sine(G)")
              (("2" (expand "sq") (("2" (real-props) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -)
          (("2" (expand "sq")
            (("2" (typepred "wedge_connector_sine(G)")
              (("2" (move-terms 1 l 2)
                (("2" (assert) (("2" (mult-cases 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (length const-decl "posreal" segments_2d nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (v skolem-const-decl "point_2d" vertex_wedges nil)
    (D skolem-const-decl "Vector" vertex_wedges nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqrt_lt1 formula-decl nil sqrt reals)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (nnreal type-eq-decl nil real_types nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil))
   shostak))
 (connector_segment_TCC1 0
  (connector_segment_TCC1-2 nil 3874129019
   ("" (skeep)
    (("" (use "connector_endpoints_neq") (("" (ground) nil nil)) nil))
    nil)
   ((connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak
   (connector_segment subtype
    "vertex_wedges.wedge_connector_endpoint(vertex_wedges.G, vertex_wedges.i, booleans.FALSE)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.wedge_connector_endpoint(vertex_wedges.G, vertex_wedges.i, booleans.TRUE)}"))
  (connector_segment_TCC1-1 nil 3874128960 ("" (subtype-tcc) nil nil)
   nil nil
   (connector_segment subtype
    "vertex_wedges.wedge_connector_endpoint(vertex_wedges.G, vertex_wedges.i, booleans.FALSE)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.wedge_connector_endpoint(vertex_wedges.G, vertex_wedges.i, booleans.TRUE)}")))
 (acute_angle_coeff_between 0
  (acute_angle_coeff_between-1 nil 3874129019
   ("" (skeep)
    (("" (grind)
      (("" (equate "uv`x * -wv`x * a" "-(uv`x * wv`x * a)" t)
        (("" (real-props)
          (("" (move-terms 1 l (1 3))
            (("" (elim-unary 1)
              (("" (assert)
                (("" (factor 1)
                  (("" (claim "uv`x * wv`y - uv`y * wv`x > 0" t)
                    (("" (name-replace "C" "uv`x * wv`y - uv`y * wv`x")
                      ((""
                        (name-replace "D" "uv`x * wv`x + uv`y * wv`y")
                        (("" (case-replace "D=0")
                          (("1" (assert) (("1" (mult-cases 1) nil nil))
                            nil)
                           ("2" (mult-by -3 "C")
                            (("2" (mult-by 2 "normu * normw")
                              (("2"
                                (claim "D * C > a * D * normu * normw")
                                (("1" (assert) nil nil)
                                 ("2" (cancel-by 1 "D") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (pos_times_gt formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_565 skolem-const-decl "real" vertex_wedges nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (C skolem-const-decl "real" vertex_wedges nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (pos_coeff_between_TCC1 0
  (pos_coeff_between_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (replace -7)
      (("" (equate "u" "v")
        (("1" (assert) nil nil)
         ("2" (move-terms -4 r 2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak (pos_coeff_between subtype "vertex_wedges.uv" "Nz_vector"))
  (pos_coeff_between_TCC1-1 nil 3874128960 ("" (subtype-tcc) nil nil)
   nil nil (pos_coeff_between subtype "vertex_wedges.uv" "Nz_vector")))
 (pos_coeff_between_TCC2 0
  (pos_coeff_between_TCC2-2 nil 3874129019
   ("" (skeep*)
    (("" (equate "w" "v")
      (("1" (assert) nil nil)
       ("2" (replace -7)
        (("2" (move-terms -5 r 2) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak (pos_coeff_between subtype "vertex_wedges.wv" "Nz_vector"))
  (pos_coeff_between_TCC2-1 nil 3874128960 ("" (subtype-tcc) nil nil)
   nil nil (pos_coeff_between subtype "vertex_wedges.wv" "Nz_vector")))
 (pos_coeff_between_TCC3 0
  (pos_coeff_between_TCC3-2 nil 3874129019
   ("" (skeep*)
    (("" (hide-all-but (-2 -3 -7 -8))
      (("" (replace -3)
        (("" (rewrite "comps_eq" -4)
          (("" (typepred "e`p2") (("" (grind-with-ext) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (comps_eq formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (pos_coeff_between subtype
    "vectors_cross_2d.perp_left(vertex_wedges.wv)" "Nz_vector"))
  (pos_coeff_between_TCC3-1 nil 3874128960 ("" (subtype-tcc) nil nil)
   nil nil
   (pos_coeff_between subtype
    "vectors_cross_2d.perp_left(vertex_wedges.wv)" "Nz_vector")))
 (pos_coeff_between_TCC4 0
  (pos_coeff_between_TCC4-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (sqrt_0 formula-decl nil sqrt reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (pos_coeff_between subtype "vertex_wedges.wv" "Nz_vector"))
  (pos_coeff_between_TCC4-1 nil 3874128960 ("" (subtype-tcc) nil nil)
   nil nil (pos_coeff_between subtype "vertex_wedges.wv" "Nz_vector")))
 (pos_coeff_between 0
  (pos_coeff_between-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (flatten)
        (("" (case "e`p2=e`p1")
          (("1" (assert) nil nil)
           ("2" (case "norm(e`p2-e`p1) > 0 and norm(s`p1-e`p1) > 0")
            (("1" (flatten)
              (("1" (lemma "perp_left_segment_nonzero")
                (("1" (inst - "e")
                  (("1" (case "^(perp_left(e`p2 - e`p1)) = zero")
                    (("1" (hide -6 3)
                      (("1" (expand "^")
                        (("1" (use "scal_eq_zero")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "between_rays?")
                        (("2" (assert)
                          (("2"
                            (case "cross(s`p1 - e`p1, e`p2 - e`p1) < 0 OR
                                                            (s`p1 - e`p1) * (e`p2 - e`p1) < 0")
                            (("1" (hide -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -1 1)
                                    (("1"
                                      (expand "^" 1)
                                      (("1"
                                        (rewrite
                                         "norm_perp_left_is_norm_left")
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (equate
                                             "a / norm(e`p2 - e`p1) * perp_left(e`p2 - e`p1) +
                                                                                       b / norm(e`p2 - e`p1) * (e`p2 - e`p1)"
                                             "1/norm(e`p2 - e`p1) * (a * perp_left(e`p2 - e`p1) +
                                                                                       b * (e`p2 - e`p1))")
                                            (("1"
                                              (rewrite*
                                               "cross_scales_2")
                                              (("1"
                                                (real-props)
                                                (("1"
                                                  (rewrite*
                                                   "cross_distrib_add_2")
                                                  (("1"
                                                    (rewrite*
                                                     "cross_scales_2")
                                                    (("1"
                                                      (rewrite
                                                       "cross_self_zero")
                                                      (("1"
                                                        (use
                                                         "cross_perp_left_equals_neg_norm_product")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite*
                                                             "cross_scales_2")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (rewrite
                                                                 "norm_scal")
                                                                (("1"
                                                                  (rewrite
                                                                   "norm_perp_left_is_norm_left")
                                                                  (("1"
                                                                    (mult-cases
                                                                     1)
                                                                    (("1"
                                                                      (real-props)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite* "cross_distrib_add_2")
                                  (("2"
                                    (expand "^" 5)
                                    (("2"
                                      (real-props)
                                      (("2"
                                        (rewrite
                                         "norm_perp_left_is_norm_left")
                                        (("2"
                                          (rewrite* "cross_scales_2")
                                          (("2"
                                            (rewrite "cross_self_zero")
                                            (("2"
                                              (real-props)
                                              (("2"
                                                (rewrite
                                                 "cross_perp_left_neg")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (case
                                                     "cross(s`p1 - e`p1, perp_left(e`p2 - e`p1)) * a > 0 and
                                                                            b * cross(s`p1 - e`p1, e`p2 - e`p1) >= 0")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 3)
                                                      (("2"
                                                        (real-props)
                                                        (("2"
                                                          (rewrite
                                                           "dot_neg_cross_pos_cross_perp_left_pos")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground)
                              (("1"
                                (expand "^")
                                (("1"
                                  (rewrite "cross_scales")
                                  (("1"
                                    (rewrite
                                     "norm_perp_left_is_norm_left")
                                    (("1"
                                      (factor! (! 1 l 2))
                                      (("1"
                                        (rewrite* "cross_scales_2")
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (rewrite*
                                             "cross_distrib_add_2")
                                            (("1"
                                              (rewrite*
                                               "cross_scales_2")
                                              (("1"
                                                (cross-mult -2)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (use
                                                     "acute_angle_coeff_between")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (mult-cases 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite* "cross_distrib_add_2")
                                (("2"
                                  (rewrite* "cross_scales_2")
                                  (("2"
                                    (expand "^" 1)
                                    (("2"
                                      (rewrite
                                       "norm_perp_left_is_norm_left")
                                      (("2"
                                        (rewrite* "cross_scales_2")
                                        (("2"
                                          (factor 1 l)
                                          (("2"
                                            (cross-mult 1)
                                            (("2"
                                              (rewrite
                                               "cross_self_zero")
                                              (("2"
                                                (real-props)
                                                (("2"
                                                  (rewrite
                                                   "cross_perp_left_neg")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 4)
              (("2" (ground)
                (("1" (use "norm_eq_0") (("1" (ground) nil nil)) nil)
                 ("2" (lemma "norm_eq_0")
                  (("2" (inst - "s`p1-s`p2") (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (add_cancel_add_2 formula-decl nil vectors_cross_2d nil)
    (cross_scales formula-decl nil vectors_cross_2d nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (dot_scal_canon formula-decl nil vectors_2D vectors)
    (nonzero_times3 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (acute_angle_coeff_between formula-decl nil vertex_wedges nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_gt2 formula-decl nil extra_real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pos_div_gt formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (dot_neg_cross_pos_cross_perp_left_pos formula-decl nil
     vectors_cross_2d nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cross_perp_left_neg formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (pos_times_lt formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_perp_left_equals_neg_norm_product formula-decl nil
     vectors_cross_2d nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (between_rays? const-decl "bool" between_rays nil)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (perp_left_segment_nonzero formula-decl nil segments_2d_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors))
   shostak))
 (neg_coeff_between_TCC1 0
  (neg_coeff_between_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (sqrt_0 formula-decl nil sqrt reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (neg_coeff_between subtype "vertex_wedges.uv" "Nz_vector"))
  (neg_coeff_between_TCC1-1 nil 3874128960 ("" (subtype-tcc) nil nil)
   nil nil (neg_coeff_between subtype "vertex_wedges.uv" "Nz_vector")))
 (neg_coeff_between_TCC2 0
  (neg_coeff_between_TCC2-2 nil 3874129019
   ("" (skeep*)
    (("" (equate "u" "v")
      (("1" (assert) nil nil)
       ("2" (replace -4)
        (("2" (hide-all-but (-8 1))
          (("2" (lemma "scaled_perp_left_neq_scaled_vector")
            (("2" (inst - "1" "0" "u - v") (("2" (ground) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scaled_perp_left_neq_scaled_vector formula-decl nil
     vectors_cross_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (neg_coeff_between subtype
    "vectors_cross_2d.perp_left(vertex_wedges.uv)" "Nz_vector"))
  (neg_coeff_between_TCC2-1 nil 3874128960 ("" (subtype-tcc) nil nil)
   nil nil
   (neg_coeff_between subtype
    "vectors_cross_2d.perp_left(vertex_wedges.uv)" "Nz_vector")))
 (neg_coeff_between 0
  (neg_coeff_between-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (flatten)
        (("" (case "e`p2=e`p1")
          (("1" (assert) nil nil)
           ("2" (case "norm(e`p2-e`p1) > 0 and norm(s`p1-e`p1) > 0")
            (("1" (flatten)
              (("1" (lemma "perp_left_segment_nonzero")
                (("1" (inst - "s")
                  (("1" (case "^(perp_left(s`p2 - s`p1)) = zero")
                    (("1" (hide -6 3)
                      (("1" (expand "^")
                        (("1" (use "scal_eq_zero")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "between_rays?")
                        (("2" (assert)
                          (("2"
                            (case "cross(s`p1 - e`p1, e`p2 - e`p1) < 0 OR
                                                            (s`p1 - e`p1) * (e`p2 - e`p1) < 0")
                            (("1" (hide -5)
                              (("1"
                                (split -1)
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -1 2)
                                    (("1"
                                      (expand "^" 1)
                                      (("1"
                                        (rewrite
                                         "norm_perp_left_is_norm_left")
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (equate
                                             "b / norm(s`p1 - e`p1) * (s`p1 - e`p1) -
                                                             a / norm(s`p1 - e`p1) * perp_left(s`p1 - e`p1)"
                                             "(1 / norm(s`p1 - e`p1)) * (b * (s`p1 - e`p1) -
                                                             a * perp_left(s`p1 - e`p1))"
                                             t)
                                            (("1"
                                              (rewrite*
                                               "cross_scales_2")
                                              (("1"
                                                (real-props)
                                                (("1"
                                                  (rewrite*
                                                   "cross_distrib_sub_2"
                                                   1)
                                                  (("1"
                                                    (rewrite*
                                                     "cross_scales_2")
                                                    (("1"
                                                      (rewrite
                                                       "cross_self_zero")
                                                      (("1"
                                                        (lemma
                                                         "cross_perp_left_equals_neg_norm_product")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "s`p1 - e`p1"
                                                           "a")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite*
                                                               "cross_scales_2")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "norm_scal")
                                                                  (("1"
                                                                    (rewrite
                                                                     "norm_perp_left_is_norm_left")
                                                                    (("1"
                                                                      (mult-cases
                                                                       1)
                                                                      (("1"
                                                                        (real-props)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite* "cross_distrib_sub_2")
                                  (("1"
                                    (expand "^" 5)
                                    (("1"
                                      (real-props)
                                      (("1"
                                        (rewrite
                                         "norm_perp_left_is_norm_left")
                                        (("1"
                                          (rewrite* "cross_scales_2")
                                          (("1"
                                            (rewrite "cross_self_zero")
                                            (("1"
                                              (real-props)
                                              (("1"
                                                (lemma
                                                 "cross_perp_left_neg")
                                                (("1"
                                                  (inst
                                                   -
                                                   "s`p1 - e`p1")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "cross_distrib_sub_2"
                                                       2
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (case
                                                         "b * cross(e`p2 - e`p1, s`p1 - e`p1) <= 0 and
                                                                                    cross(e`p2 - e`p1, perp_left(s`p1 - e`p1)) * a > 0")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (real-props)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (use
                                                                 "cross_antisymmetric")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 -4
                                                                 3)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -2 -3 2 6)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (rewrite* "comps_eq")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but (-4 1 3))
                                    (("3"
                                      (ground)
                                      (("3"
                                        (rewrite* "comps_eq")
                                        (("3"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "^")
                                    (("1"
                                      (rewrite "cross_scales")
                                      (("1"
                                        (rewrite
                                         "norm_perp_left_is_norm_left")
                                        (("1"
                                          (factor! (! 1 l 2))
                                          (("1"
                                            (rewrite* "cross_scales_2")
                                            (("1"
                                              (real-props)
                                              (("1"
                                                (rewrite*
                                                 "cross_distrib_sub_2"
                                                 1)
                                                (("1"
                                                  (rewrite*
                                                   "cross_scales_2")
                                                  (("1"
                                                    (cross-mult -5)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (rewrite
                                                         "cross_self_zero")
                                                        (("1"
                                                          (lemma
                                                           "cross_perp_left_neg")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "s`p1 - e`p1")
                                                            (("1"
                                                              (real-props)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (mult-cases 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite* "cross_distrib_sub_2" 1)
                                    (("2"
                                      (rewrite* "cross_scales_2")
                                      (("2"
                                        (expand "^" 1)
                                        (("2"
                                          (rewrite
                                           "norm_perp_left_is_norm_left")
                                          (("2"
                                            (rewrite* "cross_scales_2")
                                            (("2"
                                              (factor 1 l)
                                              (("2"
                                                (cross-mult 1)
                                                (("2"
                                                  (real-props)
                                                  (("2"
                                                    (hide 4)
                                                    (("2"
                                                      (expand "^")
                                                      (("2"
                                                        (rewrite
                                                         "cross_scales")
                                                        (("2"
                                                          (real-props)
                                                          (("2"
                                                            (cross-mult
                                                             -5)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (move-terms
                                                                 1
                                                                 l
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (name-replace*
                                                                     ("NU"
                                                                      "norm(s`p1 - e`p1)"
                                                                      "NW"
                                                                      "norm(e`p2 - e`p1)")
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (use
                                                                       "cross_antisymmetric")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (name-replace
                                                                           "C"
                                                                           "cross(s`p1 - e`p1, e`p2 - e`p1)")
                                                                          (("1"
                                                                            (case-replace
                                                                             "C=0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "cross_perp_left_eq_neg_dot")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "dot_comm"
                                                                                 2)
                                                                                (("2"
                                                                                  (mult-by
                                                                                   -6
                                                                                   "b")
                                                                                  (("2"
                                                                                    (mult-by
                                                                                     -2
                                                                                     "a")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (mult-cases
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 4)
              (("2" (ground)
                (("1" (use "norm_eq_0") (("1" (ground) nil nil)) nil)
                 ("2" (lemma "norm_eq_0")
                  (("2" (inst - "s`p1-s`p2") (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (add_cancel_sub_2 formula-decl nil vectors_cross_2d nil)
    (cross_scales formula-decl nil vectors_cross_2d nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (dot_scal_canon formula-decl nil vectors_2D vectors)
    (nonzero_times3 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_gt2 formula-decl nil extra_real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cross_perp_left_eq_neg_dot formula-decl nil vectors_cross_2d nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (dot_comm formula-decl nil vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (neg_times_le formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (cross_perp_left_neg formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (cross_distrib_sub_2 formula-decl nil vectors_cross_2d nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cross_perp_left_equals_neg_norm_product formula-decl nil
     vectors_cross_2d nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (between_rays? const-decl "bool" between_rays nil)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (perp_left_segment_nonzero formula-decl nil segments_2d_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors))
   shostak))
 (connector_endpoint_between 0
  (connector_endpoint_between-1 nil 3874129019
   ("" (skeep)
    (("" (expand "wedge_connector_endpoint")
      (("" (expand "point_between_edges?")
        (("" (assert)
          (("" (ground)
            (("1" (factor! (! 1 1) (2 3))
              (("1" (lemma "scaled_vector_between_rays")
                (("1"
                  (inst - "edges_of_polygon(G)(prev_index(G, i))"
                   "edges_of_polygon(G)(i)" _ _)
                  (("1"
                    (inst - "(wedge_connector_sine(G) *
                                                   ^(perp_left(G`vertices(next_index(G, i)) - G`vertices(i)))
                                                   +
                                                   sqrt(1 - sq(wedge_connector_sine(G))) *
                                                    ^(G`vertices(next_index(G, i)) - G`vertices(i)))"
                     "vertex_wedge_radius(G)")
                    (("1"
                      (equate "edges_of_polygon(G)(i)`p1"
                       "G`vertices(i)" t)
                      (("1" (ground)
                        (("1"
                          (name-replace "W" "vertex_wedge_radius(G) *
                                                         (wedge_connector_sine(G) *
                                                           ^(perp_left(G`vertices(next_index(G, i)) -
                                                                        G`vertices(i)))
                                                           +
                                                           sqrt(1 - sq(wedge_connector_sine(G))) *
                                                            ^(G`vertices(next_index(G, i)) - G`vertices(i)))")
                          (("1"
                            (equate "G`vertices(i) + W"
                             "W + G`vertices(i)" t)
                            nil nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (lemma "pos_coeff_between")
                            (("2"
                              (inst -
                               "edges_of_polygon(G)(prev_index(G, i))"
                               "edges_of_polygon(G)(i)" _ _)
                              (("2"
                                (inst
                                 -
                                 "wedge_connector_sine(G)"
                                 "sqrt(1 - sq(wedge_connector_sine(G)))")
                                (("1"
                                  (ground)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (expand "edges_of_polygon")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "add_assoc")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "edges_of_polygon")
                                        (("2"
                                          (use
                                           "prev_vertex_neq_next_vertex")
                                          (("1" (ground) nil nil)
                                           ("2"
                                            (typepred "G")
                                            (("2"
                                              (expand
                                               "simple_polygon_2d?")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (expand "edges_of_polygon")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide 2)
                                      (("4"
                                        (flatten)
                                        (("4"
                                          (expand "edges_of_polygon")
                                          (("4"
                                            (typepred
                                             "wedge_connector_sine(G)")
                                            (("4"
                                              (hide -1)
                                              (("4"
                                                (expand
                                                 "wedge_connector_sine")
                                                (("4"
                                                  (real-props)
                                                  (("4"
                                                    (typepred
                                                     "min(sines_of_edge_angles(G))")
                                                    (("4"
                                                      (inst
                                                       -
                                                       "cross(^(G`vertices(prev_index(G, i)) - G`vertices(i)),
                         ^(G`vertices(next_index(G, i)) - G`vertices(i)))")
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (equate
                                                             "^(G`vertices(prev_index(G, i)) - G`vertices(i)) *
                      ^(G`vertices(next_index(G, i)) - G`vertices(i))"
                                                             "sqrt(sq(^(G`vertices(prev_index(G, i)) - G`vertices(i)) *
                      ^(G`vertices(next_index(G, i)) - G`vertices(i))))")
                                                            (("1"
                                                              (rewrite
                                                               "sqrt_gt")
                                                              (("1"
                                                                (use
                                                                 "sum_squares_cross_and_dot")
                                                                (("1"
                                                                  (move-terms
                                                                   -1
                                                                   l
                                                                   2)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (real-props)
                                                                      (("1"
                                                                        (rewrite
                                                                         "sq_gt")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "sqrt_sq")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (expand
                                                             "sines_of_edge_angles"
                                                             1)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "^")
                                                                    (("1"
                                                                      (rewrite
                                                                       "cross_scales")
                                                                      (("1"
                                                                        (real-props)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (real-props)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "vertex_neq_next")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (use
                                     "wedge_connector_sine_sq_bound")
                                    (("2"
                                      (rewrite "sqrt_gt_0" :dir rl)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 1)
              (("2" (factor! (! 1 1) (2 3))
                (("2" (lemma "scaled_vector_between_rays")
                  (("2"
                    (inst - "edges_of_polygon(G)(i)"
                     "edges_of_polygon(G)(next_index(G, i))" _ _)
                    (("2"
                      (inst - "wedge_connector_sine(G) *
                                   ^(perp_left(G`vertices(next_index(G, i)) -
                                                G`vertices(i)))
                                   -
                                   sqrt(1 - sq(wedge_connector_sine(G))) *
                                    ^(G`vertices(next_index(G, i)) - G`vertices(i))"
                       "vertex_wedge_radius(G)")
                      (("2"
                        (equate
                         "edges_of_polygon(G)(next_index(G, i))`p1"
                         "G`vertices(next_index(G, i))" t)
                        (("2" (ground)
                          (("1"
                            (name-replace "W" "vertex_wedge_radius(G) *
                                       (wedge_connector_sine(G) *
                                         ^(perp_left(G`vertices(next_index(G, i)) -
                                                      G`vertices(i)))
                                         -
                                         sqrt(1 - sq(wedge_connector_sine(G))) *
                                          ^(G`vertices(next_index(G, i)) - G`vertices(i)))")
                            (("1" (rewrite "add_comm" 1) nil nil)) nil)
                           ("2" (hide 2)
                            (("2" (lemma "neg_coeff_between")
                              (("2"
                                (inst
                                 -
                                 "edges_of_polygon(G)(i)"
                                 "edges_of_polygon(G)(next_index(G, i))"
                                 _
                                 _)
                                (("2"
                                  (case
                                   "sqrt(1 - sq(wedge_connector_sine(G))) < 1")
                                  (("1"
                                    (inst
                                     -
                                     "wedge_connector_sine(G)"
                                     "sqrt(1 - sq(wedge_connector_sine(G)))")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (expand "edges_of_polygon")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (equate (! -1 1) (! 1 1))
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (name-replace*
                                                   ("Q"
                                                    "sqrt(1 - sq(wedge_connector_sine(G)))"
                                                    "S"
                                                    "wedge_connector_sine(G)")
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (equate
                                                     "Q*^(G`vertices(next_index(G, i)) - G`vertices(i))"
                                                     "-Q*^(G`vertices(i) - G`vertices(next_index(G, i)))")
                                                    (("1"
                                                      (equate
                                                       "S*^(perp_left(G`vertices(next_index(G, i)) - G`vertices(i)))"
                                                       "-S*^(perp_left(G`vertices(i) - G`vertices(next_index(G, i))))")
                                                      (("1"
                                                        (name-replace*
                                                         ("P"
                                                          "^(perp_left(G`vertices(i) - G`vertices(next_index(G, i))))"
                                                          "V"
                                                          "^(G`vertices(i) - G`vertices(next_index(G, i)))")
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (cancel-add
                                                           1)
                                                          (("1"
                                                            (move-terms
                                                             1
                                                             r)
                                                            (("1"
                                                              (elim-unary
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand "^")
                                                          (("2"
                                                            (real-props)
                                                            (("2"
                                                              (cross-mult
                                                               1)
                                                              (("2"
                                                                (grind-with-ext)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind-with-ext)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "edges_of_polygon")
                                            (("2"
                                              (use
                                               "prev_vertex_neq_next_vertex")
                                              (("1" (ground) nil nil)
                                               ("2"
                                                (typepred "G")
                                                (("2"
                                                  (expand
                                                   "simple_polygon_2d?")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (expand "edges_of_polygon")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (expand
                                               "edges_of_polygon")
                                              (("4"
                                                (typepred
                                                 "wedge_connector_sine(G)")
                                                (("4"
                                                  (hide -1)
                                                  (("4"
                                                    (expand
                                                     "wedge_connector_sine")
                                                    (("4"
                                                      (real-props)
                                                      (("4"
                                                        (typepred
                                                         "min(sines_of_edge_angles(G))")
                                                        (("4"
                                                          (inst
                                                           -
                                                           "cross(^(G`vertices(i) - G`vertices(next_index(G, i))),
                           ^(G`vertices(next_index(G, next_index(G, i))) -
                              G`vertices(next_index(G, i))))")
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (equate
                                                                 "^(G`vertices(i) - G`vertices(next_index(G, i))) *
                        ^(G`vertices(next_index(G, next_index(G, i))) -
                           G`vertices(next_index(G, i)))"
                                                                 "sqrt(sq(^(G`vertices(i) - G`vertices(next_index(G, i))) *
                        ^(G`vertices(next_index(G, next_index(G, i))) -
                           G`vertices(next_index(G, i)))))")
                                                                (("1"
                                                                  (rewrite
                                                                   "sqrt_gt")
                                                                  (("1"
                                                                    (use
                                                                     "sum_squares_cross_and_dot")
                                                                    (("1"
                                                                      (move-terms
                                                                       -1
                                                                       l
                                                                       2)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (real-props)
                                                                          (("1"
                                                                            (rewrite
                                                                             "sq_gt")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "sqrt_sq")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 4)
                                                              (("2"
                                                                (expand
                                                                 "sines_of_edge_angles"
                                                                 1)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "next_index(G,i)")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (rewrite
                                                                               "cross_scales")
                                                                              (("1"
                                                                                (real-props)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "^")
                                                                            (("2"
                                                                              (real-props)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "vertex_neq_next_2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (use
                                         "wedge_connector_sine_sq_bound")
                                        (("2"
                                          (rewrite "sqrt_gt_0" :dir rl)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (use
                                       "wedge_connector_sine_sq_bound")
                                      (("2"
                                        (rewrite "sqrt_lt1" :dir rl)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (add_comm formula-decl nil vectors_2D vectors)
    (neg_coeff_between formula-decl nil vertex_wedges nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (point_sub_neg_scal formula-decl nil vectors_cross_2d nil)
    (neg_add_left formula-decl nil vectors_2D vectors)
    (sub_zero_left formula-decl nil vectors_2D vectors)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (scal_div_mult_left formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (scal_div_mult_right formula-decl nil vectors_2D vectors)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sqrt_lt1 formula-decl nil sqrt reals)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (* const-decl "Vector" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (<= const-decl "bool" reals nil)
    (wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (sqrt_gt_0 formula-decl nil sqrt reals)
    (wedge_connector_sine_sq_bound formula-decl nil vertex_wedges nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (cross_scales formula-decl nil vectors_cross_2d nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (zero_times1 formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (norm_vertex_diff_prev_pos formula-decl nil polygons_2d nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (dot_scal_canon formula-decl nil vectors_2D vectors)
    (sqrt_sq_neg formula-decl nil sqrt reals)
    (sqrt_sq formula-decl nil sqrt reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (sqrt_gt formula-decl nil sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_minus_gt2 formula-decl nil real_props nil)
    (sq_gt formula-decl nil sq reals)
    (sum_squares_cross_and_dot formula-decl nil vectors_cross_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (sines_of_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (prev_vertex_neq_next_vertex formula-decl nil polygons_2d nil)
    (add_assoc formula-decl nil vectors_2D vectors)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_coeff_between formula-decl nil vertex_wedges nil)
    (scaled_vector_between_rays formula-decl nil between_rays nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (point_between_edges? const-decl "bool" polygon_attributes nil))
   shostak))
 (apex_point_between 0
  (apex_point_between-1 nil 3874129019
   ("" (skeep)
    (("" (expand "point_between_edges?")
      (("" (expand "vertex_wedge_apex")
        (("" (ground)
          (("1" (use "scaled_vector_between_rays")
            (("1" (case "edges_of_polygon(G)(i)`p1 = G`vertices(i)")
              (("1" (ground)
                (("1" (hide 2)
                  (("1" (use "bisect_vector_between")
                    (("1" (ground)
                      (("1" (expand "^")
                        (("1" (use "scaled_vector_between_rays")
                          (("1" (ground) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (use "vertex_bisect_vector_nonzero")
                              (("2"
                                (use "norm_eq_0")
                                (("2"
                                  (ground)
                                  (("1" (cross-mult 1) nil nil)
                                   ("2" (cross-mult 1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (use "scaled_vector_between_rays")
            (("2"
              (case "reverse_segment(edges_of_polygon
                                              (G)(prev_index(G, i)))`p1 = G`vertices(i)")
              (("1" (assert)
                (("1" (hide 3)
                  (("1" (use "bisect_vector_between_rev")
                    (("1" (assert)
                      (("1"
                        (case "edges_of_polygon(G)(i)`p1 = G`vertices(i)")
                        (("1" (replace -3)
                          (("1" (replace -1)
                            (("1" (expand "^")
                              (("1"
                                (equate
                                 "G`vertices(i) -
                             (1 / norm(vertex_bisect_vector(G, i))) *
                              vertex_bisect_vector(G, i)"
                                 "G`vertices(i) +
                             1 / norm(vertex_bisect_vector(G, i)) *
                              -vertex_bisect_vector(G, i)")
                                (("1"
                                  (use "scaled_vector_between_rays")
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (use
                                       "vertex_bisect_vector_nonzero")
                                      (("2"
                                        (use "norm_eq_0")
                                        (("2"
                                          (ground)
                                          (("1" (cross-mult 1) nil nil)
                                           ("2"
                                            (cross-mult 1)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (rewrite "scal_neg")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_between_edges? const-decl "bool" polygon_attributes nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vertex_bisect_vector_nonzero formula-decl nil vertex_wedges nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (bisect_vector_between formula-decl nil vertex_wedges nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (scaled_vector_between_rays formula-decl nil between_rays nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (bisect_vector_between_rev formula-decl nil vertex_wedges nil)
    (add_neg_sub formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil))
   shostak))
 (apex_point_between_rev_out_TCC1 0
  (apex_point_between_rev_out_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (vector_from_point_to_point const-decl "vector_2d" vectors_cross_2d
     nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (are_vectors_collinear? const-decl
     "{b: bool | b = (abs(v1 * v2) = norm(v1) * norm(v2))}"
     vectors_cross_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (polygon_edges_do_not_cross? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (- const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (apex_point_between_rev_out subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.e`p2)}"))
  (apex_point_between_rev_out_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (apex_point_between_rev_out subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.e`p2)}")))
 (apex_point_between_rev_out_TCC2 0
  (apex_point_between_rev_out_TCC2-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (vector_from_point_to_point const-decl "vector_2d" vectors_cross_2d
     nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (are_vectors_collinear? const-decl
     "{b: bool | b = (abs(v1 * v2) = norm(v1) * norm(v2))}"
     vectors_cross_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (polygon_edges_do_not_cross? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (- const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (apex_point_between_rev_out subtype
    "(vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.s`p1)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}"))
  (apex_point_between_rev_out_TCC2-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (apex_point_between_rev_out subtype
    "(vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.s`p1)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}")))
 (apex_point_between_rev_out 0
  (apex_point_between_rev_out-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (expand "edges_of_polygon")
        (("" (expand "vertex_wedge_apex")
          (("" (use "vertex_bisect_vector_nonzero")
            (("" (use "norm_eq_0")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "^")
                    (("" (real-props)
                      ((""
                        (case "2 * G`vertices(i) - G`vertices(prev_index(G, i)) /= G`vertices(i)")
                        (("1"
                          (case "G`vertices(i) /= 2 * G`vertices(i) - G`vertices(next_index(G, i))")
                          (("1" (lemma "scaled_vector_between_rays")
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide 6)
                                    (("1"
                                      (use
                                       "cross_wide_opposite_narrow")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "weighted_vector_sum_between")
                                          (("1"
                                            (inst
                                             -
                                             "(# p1 := 2 * G`vertices(i) - G`vertices(next_index(G, i)),
                                      p2 := G`vertices(i) #)"
                                             "(# p1 := G`vertices(i),
                                           p2
                                             := 2 * G`vertices(i) -
                                                 G`vertices(prev_index(G, i)) #)"
                                             _
                                             _)
                                            (("1"
                                              (expand
                                               "vertex_bisect_vector")
                                              (("1"
                                                (inst
                                                 -
                                                 "norm(G`vertices(next_index(G, i)) - G`vertices(i))"
                                                 "norm(G`vertices(prev_index(G, i)) - G`vertices(i))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "forall (u, v: point_2d): 2*u-v-u = u-v")
                                                    (("1"
                                                      (rewrite -1)
                                                      (("1"
                                                        (rewrite -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (equate
                                                             "G`vertices(next_index(G, i)) - G`vertices(i)"
                                                             "-(G`vertices(i) - G`vertices(next_index(G, i)))"
                                                             (then
                                                              (hide-all-but
                                                               1)
                                                              (grind-with-ext)))
                                                            (("1"
                                                              (equate
                                                               "G`vertices(prev_index(G, i)) - G`vertices(i)"
                                                               "-(G`vertices(i) - G`vertices(prev_index(G, i)))"
                                                               (then
                                                                (hide-all-but
                                                                 1)
                                                                (grind-with-ext)))
                                                              (("1"
                                                                (rewrite*
                                                                 "scal_neg")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (equate
                                                                     (!
                                                                      -2
                                                                      1)
                                                                     (!
                                                                      1
                                                                      1))
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       2
                                                                       5
                                                                       6)
                                                                      (("1"
                                                                        (name-replace
                                                                         "P"
                                                                         "G`vertices(i) - G`vertices(prev_index(G, i))")
                                                                        (("1"
                                                                          (name-replace
                                                                           "N"
                                                                           "G`vertices(i) - G`vertices(next_index(G, i))")
                                                                          (("1"
                                                                            (grind-with-ext)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (use "norm_eq_0")
                                                    (("2"
                                                      (lemma
                                                       "vertex_neq_prev")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "G"
                                                         "i")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (use "norm_eq_0")
                                                    (("3"
                                                      (lemma
                                                       "vertex_neq_next")
                                                      (("3"
                                                        (inst
                                                         -
                                                         "G"
                                                         "i")
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (ground)
                                    (("1" (cross-mult 1) nil nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (use "vertex_neq_next")
                              (("2"
                                (name-replace
                                 "P"
                                 "G`vertices(next_index(G, i))")
                                (("2"
                                  (name-replace "V" "G`vertices(i)")
                                  (("2"
                                    (ground)
                                    (("2"
                                      (move-terms -1 l)
                                      (("1"
                                        (factor -1 r (1 3))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (move-terms -1 r 2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (ground)
                                        (("2"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (use "vertex_neq_prev")
                            (("2"
                              (name-replace "P"
                               "G`vertices(prev_index(G, i))")
                              (("2"
                                (name-replace "V" "G`vertices(i)")
                                (("2"
                                  (ground)
                                  (("2"
                                    (move-terms -1 r)
                                    (("1"
                                      (factor -1 l (1 3))
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cross_wide_opposite_narrow formula-decl nil vertex_wedges nil)
    (weighted_vector_sum_between formula-decl nil vertex_wedges nil)
    (add_neg_sub formula-decl nil vectors_2D vectors)
    (norm_neg formula-decl nil vectors_2D vectors)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (norm_vertex_diff_prev_pos formula-decl nil polygons_2d nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scaled_vector_between_rays formula-decl nil between_rays nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vertex_bisect_vector_nonzero formula-decl nil vertex_wedges nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil))
   shostak))
 (apex_point_between_rev_in_TCC1 0
  (apex_point_between_rev_in_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (vector_from_point_to_point const-decl "vector_2d" vectors_cross_2d
     nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (are_vectors_collinear? const-decl
     "{b: bool | b = (abs(v1 * v2) = norm(v1) * norm(v2))}"
     vectors_cross_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (polygon_edges_do_not_cross? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (- const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (apex_point_between_rev_in subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.s`p1)}"))
  (apex_point_between_rev_in_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (apex_point_between_rev_in subtype "vertex_wedges.v"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.s`p1)}")))
 (apex_point_between_rev_in_TCC2 0
  (apex_point_between_rev_in_TCC2-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (vector_from_point_to_point const-decl "vector_2d" vectors_cross_2d
     nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (are_vectors_collinear? const-decl
     "{b: bool | b = (abs(v1 * v2) = norm(v1) * norm(v2))}"
     vectors_cross_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (polygon_edges_do_not_cross? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (- const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (apex_point_between_rev_in subtype
    "(vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.e`p2)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}"))
  (apex_point_between_rev_in_TCC2-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (apex_point_between_rev_in subtype
    "(vectors_2D.-)(vectors_2D.*(2, vertex_wedges.v), vertex_wedges.e`p2)"
    "{p: vectors_cross_2d.point_2d | p /= vertex_wedges.v}")))
 (apex_point_between_rev_in 0
  (apex_point_between_rev_in-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (expand "edges_of_polygon")
        (("" (expand "vertex_wedge_apex")
          (("" (use "vertex_bisect_vector_nonzero")
            (("" (use "norm_eq_0")
              (("" (assert)
                (("" (flatten)
                  (("" (rewrite "scal_neg")
                    (("" (expand "^")
                      (("" (real-props)
                        ((""
                          (case "2 * G`vertices(i) - G`vertices(next_index(G, i)) /= G`vertices(i)")
                          (("1"
                            (case "G`vertices(i) /= 2 * G`vertices(i) - G`vertices(prev_index(G, i))")
                            (("1"
                              (lemma "scaled_vector_between_rays_neg")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (hide 6)
                                      (("1"
                                        (lemma
                                         "weighted_vector_sum_between")
                                        (("1"
                                          (inst
                                           -
                                           "(# p1 := 2 * G`vertices(i) - G`vertices(prev_index(G, i)),
                                                                      p2 := G`vertices(i) #)"
                                           "(# p1 := G`vertices(i),
                                                                           p2
                                                                             := 2 * G`vertices(i) -
                                                                                 G`vertices(next_index(G, i)) #)"
                                           _
                                           _)
                                          (("1"
                                            (expand
                                             "vertex_bisect_vector")
                                            (("1"
                                              (inst
                                               -
                                               "norm(G`vertices(prev_index(G, i)) - G`vertices(i))"
                                               "norm(G`vertices(next_index(G, i)) - G`vertices(i))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "forall (u, v: point_2d): 2*u-v-u = u-v")
                                                  (("1"
                                                    (rewrite -1)
                                                    (("1"
                                                      (rewrite -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (equate
                                                           "G`vertices(next_index(G, i)) - G`vertices(i)"
                                                           "-(G`vertices(i) - G`vertices(next_index(G, i)))"
                                                           (then
                                                            (hide-all-but
                                                             1)
                                                            (grind-with-ext)))
                                                          (("1"
                                                            (equate
                                                             "G`vertices(prev_index(G, i)) - G`vertices(i)"
                                                             "-(G`vertices(i) - G`vertices(prev_index(G, i)))"
                                                             (then
                                                              (hide-all-but
                                                               1)
                                                              (grind-with-ext)))
                                                            (("1"
                                                              (rewrite*
                                                               "scal_neg")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "forall (u,v: vector_2d): cross(-u,-v) = cross(u,v)")
                                                                  (("1"
                                                                    (rewrite
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (equate
                                                                         (!
                                                                          -3
                                                                          1)
                                                                         (!
                                                                          1
                                                                          1))
                                                                        (("1"
                                                                          (hide
                                                                           -3
                                                                           2
                                                                           5
                                                                           6)
                                                                          (("1"
                                                                            (name-replace
                                                                             "P"
                                                                             "G`vertices(i) - G`vertices(prev_index(G, i))")
                                                                            (("1"
                                                                              (name-replace
                                                                               "N"
                                                                               "G`vertices(i) - G`vertices(next_index(G, i))")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("1"
                                                                                  (grind-with-ext)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (use "norm_eq_0")
                                                  (("2"
                                                    (lemma
                                                     "vertex_neq_next")
                                                    (("2"
                                                      (inst - "G" "i")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (use "norm_eq_0")
                                                  (("3"
                                                    (lemma
                                                     "vertex_neq_prev")
                                                    (("3"
                                                      (inst - "G" "i")
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (ground)
                                      (("1" (cross-mult 1) nil nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (use "vertex_neq_prev")
                                (("2"
                                  (name-replace
                                   "P"
                                   "G`vertices(prev_index(G, i))")
                                  (("2"
                                    (name-replace "V" "G`vertices(i)")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (move-terms -1 l)
                                        (("1"
                                          (factor -1 r (1 3))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (move-terms -1 r 2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (ground)
                                          (("2"
                                            (grind-with-ext)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (use "vertex_neq_next")
                              (("2"
                                (name-replace
                                 "P"
                                 "G`vertices(next_index(G, i))")
                                (("2"
                                  (name-replace "V" "G`vertices(i)")
                                  (("2"
                                    (ground)
                                    (("2"
                                      (move-terms -1 r)
                                      (("1"
                                        (factor -1 l (1 3))
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (scaled_vector_between_rays_neg formula-decl nil between_rays nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (norm_vertex_diff_prev_pos formula-decl nil polygons_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (norm_neg formula-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (weighted_vector_sum_between formula-decl nil vertex_wedges nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vertex_bisect_vector_nonzero formula-decl nil vertex_wedges nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil))
   shostak))
 (opposite_apex_point_between 0
  (opposite_apex_point_between-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (flatten)
        (("" (use "apex_point_between")
          (("" (assert)
            (("" (use "opposite_points_between_narrow")
              (("" (ground)
                (("1" (hide -1)
                  (("1" (use "opposite_points_between_wide")
                    (("1" (assert)
                      (("1" (use "opposite_points_between_wide")
                        (("1" (ground)
                          (("1" (hide-all-but (-1 1))
                            (("1" (expand "edges_of_polygon")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide-all-but (-1 2))
                            (("2" (expand "edges_of_polygon")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (hide-all-but (-1 1))
                            (("3" (expand "edges_of_polygon")
                              (("3" (assert) nil nil)) nil))
                            nil)
                           ("4" (expand "edges_of_polygon")
                            (("4" (use "apex_point_between_rev_out")
                              (("4" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-2 1))
                  (("2" (expand "edges_of_polygon")
                    (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (expand "point_between_edges?")
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apex_point_between formula-decl nil vertex_wedges nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (opposite_points_between_narrow formula-decl nil vertex_wedges nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (apex_point_between_rev_out formula-decl nil vertex_wedges nil)
    (opposite_points_between_wide formula-decl nil vertex_wedges nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (in_wedge_or_on_edge 0
  (in_wedge_or_on_edge-1 nil 3874129019
   ("" (skeep)
    (("" (expand "point_in_vertex_wedge?")
      (("" (assert)
        (("" (expand "point_between_edges?")
          (("" (lemma "separation_distance_bounds_edge_length")
            (("" (inst-cp - "G" "edges_of_polygon(G)(i)")
              (("" (inst - "G" "edges_of_polygon(G)(prev_index(G,i))")
                (("" (expand "edges_of_polygon")
                  (("" (expand "reverse_segment")
                    (("" (expand "length")
                      (("" (expand "between_rays?")
                        (("" (assert)
                          (("" (rewrite "cross_antisymmetric" 2)
                            ((""
                              (case "cross(G`vertices(prev_index(G, i)) - G`vertices(i),
                                                          G`vertices(next_index(G, i)) - G`vertices(i)) = 0")
                              (("1"
                                (assert)
                                (("1"
                                  (use "parallel_equiv_cross_eq_0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "parallel?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "nzk > 0")
                                          (("1"
                                            (use
                                             "prev_edge_not_dir_parallel")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but
                                                 (-1 -2 1))
                                                (("1"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "dir_parallel_diff")
                                                      (("1"
                                                        (expand
                                                         "dir_parallel?")
                                                        (("1"
                                                          (inst
                                                           +
                                                           "1/nzk")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide -2)
                                                            (("2"
                                                              (real-props)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (lemma "cross_scales")
                                              (("2"
                                                (inst
                                                 -
                                                 "G`vertices(next_index(G, i)) - G`vertices(i)"
                                                 "p - G`vertices(i)"
                                                 "nzk"
                                                 "1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (real-props)
                                                      (("2"
                                                        (case
                                                         "cross(G`vertices(next_index(G, i)) - G`vertices(i),
                                                                                      p - G`vertices(i)) = 0")
                                                        (("1"
                                                          (use
                                                           "rev_cross_is_0_point_on_segments")
                                                          (("1"
                                                            (hide 2 3)
                                                            (("1"
                                                              (expand
                                                               "vertex_wedge_radius")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -4
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "point_on_segment?")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (move-terms
                                                                         -4
                                                                         l
                                                                         2)
                                                                        (("1"
                                                                          (replace
                                                                           -4
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (cancel-add!
                                                                               (!
                                                                                -3
                                                                                r
                                                                                1))
                                                                              (("1"
                                                                                (rewrite
                                                                                 "norm_neg")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "norm_scal"
                                                                                   -3)
                                                                                  (("1"
                                                                                    (rewrite*
                                                                                     "scal_sub_left"
                                                                                     -5)
                                                                                    (("1"
                                                                                      (cancel-add!
                                                                                       (!
                                                                                        -5
                                                                                        l
                                                                                        1))
                                                                                      (("1"
                                                                                        (elim-unary!
                                                                                         (!
                                                                                          -5
                                                                                          l
                                                                                          1))
                                                                                        (("1"
                                                                                          (factor!
                                                                                           (!
                                                                                            -5
                                                                                            l
                                                                                            1))
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "norm_scal")
                                                                                            (("1"
                                                                                              (equate
                                                                                               (!
                                                                                                -5
                                                                                                l
                                                                                                2
                                                                                                1)
                                                                                               "G`vertices(i) - G`vertices(next_index(G, i))"
                                                                                               (assert))
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "1+t/nzk")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs")
                                                                                                    (("1"
                                                                                                      (move-terms
                                                                                                       1
                                                                                                       r
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "norm_sym"
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (claim
                                                                                                               "%1 < %2"
                                                                                                               (assert)
                                                                                                               (!
                                                                                                                -5
                                                                                                                l)
                                                                                                               (!
                                                                                                                -3
                                                                                                                r))
                                                                                                              (("1"
                                                                                                                (cancel-by
                                                                                                                 -1
                                                                                                                 (!
                                                                                                                  -1
                                                                                                                  l
                                                                                                                  2))
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (cancel-add
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (cross-mult
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (grind-with-ext)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (factor
                                                                                                   1
                                                                                                   l
                                                                                                   (1
                                                                                                    3))
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "vertex_neq_next")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "p = G`vertices(i)")
                                (("1"
                                  (replace -1 4)
                                  (("1"
                                    (hide-all-but 4)
                                    (("1"
                                      (expand "point_on_segment?")
                                      (("1"
                                        (inst + "0")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (split 3)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "cross(G`vertices(next_index(G, i)) - G`vertices(i),
                                                 p - G`vertices(i)) = 0")
                                        (("1"
                                          (hide 5)
                                          (("1"
                                            (expand
                                             "vertex_wedge_radius")
                                            (("1"
                                              (use
                                               "rev_cross_is_0_point_on_segments")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 5 6)
                                                  (("1"
                                                    (expand
                                                     "point_on_segment?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (rewrite
                                                         "scal_sub_left"
                                                         -3)
                                                        (("1"
                                                          (rewrite
                                                           "scal_sub_right"
                                                           -3)
                                                          (("1"
                                                            (factor
                                                             -3
                                                             r
                                                             (2 3))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (cancel-add!
                                                                   (!
                                                                    2
                                                                    l
                                                                    2))
                                                                  (("1"
                                                                    (factor!
                                                                     (!
                                                                      2
                                                                      l
                                                                      2))
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       1)
                                                                      (("1"
                                                                        (cancel-add!
                                                                         (!
                                                                          1
                                                                          l
                                                                          2))
                                                                        (("1"
                                                                          (factor!
                                                                           (!
                                                                            1
                                                                            l
                                                                            2))
                                                                          (("1"
                                                                            (lemma
                                                                             "cross_scales")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "G`vertices(prev_index(G, i)) - G`vertices(i)"
                                                                               "G`vertices(i) - G`vertices(next_index(G, i))"
                                                                               "1"
                                                                               "t")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (real-props)
                                                                                    (("1"
                                                                                      (equate
                                                                                       "G`vertices(i) - G`vertices(next_index(G, i))"
                                                                                       "-(G`vertices(next_index(G, i)) - G`vertices(i))"
                                                                                       (assert))
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "neg_cross_neg")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "t=0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "cross(G`vertices(prev_index(G, i)) - G`vertices(i),
                                                       p - G`vertices(i)) = 0")
                                            (("1"
                                              (expand
                                               "vertex_wedge_radius")
                                              (("1"
                                                (lemma
                                                 "rev_cross_is_0_point_on_segments")
                                                (("1"
                                                  (inst
                                                   -
                                                   "p"
                                                   "(# p1 := G`vertices(i),
                                                   p2 := G`vertices(prev_index(G, i)) #)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "norm_sym")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "G`vertices(prev_index(G, i))"
                                                         "G`vertices(i)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 8))
                                                              (("1"
                                                                (rewrite
                                                                 "point_on_reverse_segment"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -2
                                                               7
                                                               8)
                                                              (("2"
                                                                (expand
                                                                 "point_on_segment?")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (rewrite
                                                                     "scal_sub_left"
                                                                     -3)
                                                                    (("2"
                                                                      (rewrite
                                                                       "scal_sub_right"
                                                                       -3)
                                                                      (("2"
                                                                        (factor
                                                                         -3
                                                                         r
                                                                         (2
                                                                          3))
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             3)
                                                                            (("2"
                                                                              (cancel-add!
                                                                               (!
                                                                                3
                                                                                l
                                                                                2))
                                                                              (("2"
                                                                                (factor!
                                                                                 (!
                                                                                  3
                                                                                  l
                                                                                  2))
                                                                                (("2"
                                                                                  (lemma
                                                                                   "cross_scales")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "G`vertices(next_index(G, i)) - G`vertices(i)"
                                                                                     "G`vertices(i) - G`vertices(prev_index(G, i))"
                                                                                     "1"
                                                                                     "t")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (equate
                                                                                           "cross(G`vertices(next_index(G, i)) - G`vertices(i),
                                         G`vertices(i) - G`vertices(prev_index(G, i)))"
                                                                                           "-cross(G`vertices(next_index(G, i)) - G`vertices(i),
                                         G`vertices(prev_index(G, i)) - G`vertices(i))")
                                                                                          (("1"
                                                                                            (real-props)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "cross_antisymmetric"
                                                                                               3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "t=0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "cross(G`vertices(next_index(G, i)) - G`vertices(i),
                                                  p - G`vertices(i)) = 0")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (use
                                               "rev_cross_is_0_point_on_segments")
                                              (("1"
                                                (expand
                                                 "vertex_wedge_radius")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 6 7)
                                                    (("1"
                                                      (expand
                                                       "point_on_segment?")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (rewrite
                                                           "scal_sub_left"
                                                           -3)
                                                          (("1"
                                                            (rewrite
                                                             "scal_sub_right"
                                                             -3)
                                                            (("1"
                                                              (factor
                                                               -3
                                                               r
                                                               (2 3))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   5)
                                                                  (("1"
                                                                    (cancel-add!
                                                                     (!
                                                                      5
                                                                      l
                                                                      2))
                                                                    (("1"
                                                                      (factor!
                                                                       (!
                                                                        5
                                                                        l
                                                                        2))
                                                                      (("1"
                                                                        (lemma
                                                                         "cross_scales")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "G`vertices(prev_index(G, i)) - G`vertices(i)"
                                                                           "G`vertices(i) - G`vertices(next_index(G, i))"
                                                                           "1"
                                                                           "t")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (real-props)
                                                                                (("1"
                                                                                  (equate
                                                                                   "cross(G`vertices(prev_index(G, i)) - G`vertices(i),
                                         G`vertices(i) - G`vertices(next_index(G, i)))"
                                                                                   "-cross(G`vertices(prev_index(G, i)) - G`vertices(i),
                                         G`vertices(next_index(G, i)) - G`vertices(i))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "t=0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "cross(G`vertices(prev_index(G, i)) - G`vertices(i),
                                                       p - G`vertices(i)) = 0")
                                              (("1"
                                                (lemma
                                                 "rev_cross_is_0_point_on_segments")
                                                (("1"
                                                  (inst
                                                   -
                                                   "p"
                                                   "(# p1 := G`vertices(i),
                                                   p2 := G`vertices(prev_index(G, i)) #)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "norm_sym")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "G`vertices(prev_index(G, i))"
                                                         "G`vertices(i)")
                                                        (("1"
                                                          (expand
                                                           "vertex_wedge_radius")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  9))
                                                                (("1"
                                                                  (rewrite
                                                                   "point_on_reverse_segment"
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (expand
                                                                     "reverse_segment")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 8
                                                                 9)
                                                                (("2"
                                                                  (expand
                                                                   "point_on_segment?")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (rewrite
                                                                       "scal_sub_left"
                                                                       -3)
                                                                      (("2"
                                                                        (rewrite
                                                                         "scal_sub_right"
                                                                         -3)
                                                                        (("2"
                                                                          (factor
                                                                           -3
                                                                           r
                                                                           (2
                                                                            3))
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -3
                                                                               6)
                                                                              (("2"
                                                                                (cancel-add!
                                                                                 (!
                                                                                  6
                                                                                  l
                                                                                  2))
                                                                                (("2"
                                                                                  (factor!
                                                                                   (!
                                                                                    6
                                                                                    l
                                                                                    2))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "cross_scales")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "G`vertices(next_index(G, i)) - G`vertices(i)"
                                                                                       "G`vertices(i) - G`vertices(prev_index(G, i))"
                                                                                       "1"
                                                                                       "t")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (equate
                                                                                             "cross(G`vertices(next_index(G, i)) - G`vertices(i),
                                         G`vertices(i) - G`vertices(prev_index(G, i)))"
                                                                                             "-cross(G`vertices(next_index(G, i)) - G`vertices(i),
                                         G`vertices(prev_index(G, i)) - G`vertices(i))")
                                                                                            (("1"
                                                                                              (real-props)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "cross_antisymmetric"
                                                                                                 6)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "t=0")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (length const-decl "posreal" segments_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (parallel_equiv_cross_eq_0 formula-decl nil vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (G skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (> const-decl "bool" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (dir_parallel_diff formula-decl nil vectors_cross_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzk skolem-const-decl "nzreal" vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (* const-decl "Vector" vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (prev_edge_not_dir_parallel formula-decl nil polygons_2d nil)
    (cross_scales formula-decl nil vectors_cross_2d nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (neg_times_lt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (rev_cross_is_0_point_on_segments formula-decl nil
     segments_2d_props nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (add_cancel2 formula-decl nil vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm_scal formula-decl nil vectors_2D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_566 skolem-const-decl "nnreal" vertex_wedges nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (norm_neg formula-decl nil vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vertex_neq_prev_2 formula-decl nil polygons_2d nil)
    (neg_lt formula-decl nil real_props nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (sub_zero_right formula-decl nil vectors_2D vectors)
    (neg_cross_neg formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (neg_gt formula-decl nil real_props nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (between_rays? const-decl "bool" between_rays nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (wedge_points_not_on_perimeter 0
  (wedge_points_not_on_perimeter-1 nil 3874129019
   ("" (skeep)
    (("" (expand "point_in_vertex_wedge?")
      (("" (flatten)
        (("" (expand "point_on_polygon_perimeter?")
          (("" (skeep)
            (("" (expand "vertex_wedge_radius")
              (("" (case "e = edges_of_polygon(G)(i)")
                (("1" (expand "point_between_edges?")
                  (("1" (ground)
                    (("1" (use "on_segment_not_between_rays")
                      (("1" (assert)
                        (("1" (expand "edges_of_polygon")
                          (("1" (rewrite "next_prev_is_original") nil
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "on_segment_not_between_rays")
                      (("2" (ground)
                        (("1" (expand "edges_of_polygon")
                          (("1" (rewrite "next_prev_is_original")
                            (("1" (expand "reverse_segment")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand "point_on_segment?")
                          (("2" (skeep)
                            (("2" (inst + "1-t")
                              (("2"
                                (assert)
                                (("2"
                                  (replace -2 :dir rl)
                                  (("2"
                                    (replace -6)
                                    (("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "e = edges_of_polygon(G)(prev_index(G,i))")
                  (("1" (expand "point_between_edges?")
                    (("1" (ground)
                      (("1" (use "on_segment_not_between_rays")
                        (("1" (assert)
                          (("1" (expand "edges_of_polygon")
                            (("1" (rewrite "next_prev_is_original") nil
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "on_segment_not_between_rays")
                        (("2" (ground)
                          (("1" (expand "edges_of_polygon")
                            (("1" (rewrite "next_prev_is_original")
                              (("1"
                                (expand "reverse_segment")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -2 :dir rl)
                            (("2" (expand "point_on_segment?")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 2 "1-t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -6)
                                      (("2"
                                        (hide-all-but 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "min_edge_sep(G)")
                    (("2" (typepred "e")
                      (("2" (expand "edge_of_polygon?")
                        (("2" (skeep)
                          (("2" (inst - "i" "i!1")
                            (("2" (ground)
                              (("2"
                                (inst - "p")
                                (("2"
                                  (ground)
                                  (("2"
                                    (rewrite "norm_sym")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (on_segment_not_between_rays formula-decl nil between_rays nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil))
   shostak))
 (apex_in_wedge 0
  (apex_in_wedge-1 nil 3874129019
   ("" (skeep)
    (("" (expand "point_in_vertex_wedge?")
      (("" (ground)
        (("1" (use "apex_point_between") (("1" (ground) nil nil)) nil)
         ("2" (expand "vertex_wedge_apex")
          (("2" (lift-if)
            (("2" (assert)
              (("2" (expand "abs")
                (("2" (ground)
                  (("2" (expand "abs") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (norm_neg formula-decl nil vectors_2D vectors)
    (norm_normalize formula-decl nil vectors_2D vectors)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (apex_point_between formula-decl nil vertex_wedges nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (connector_endpoint_in_wedge 0
  (connector_endpoint_in_wedge-1 nil 3874129019
   ("" (skeep)
    (("" (expand "point_in_vertex_wedge?")
      (("" (ground)
        (("1" (use "connector_endpoint_between")
          (("1" (ground) nil nil)) nil)
         ("2" (lift-if)
          (("2" (ground)
            (("1" (expand "wedge_connector_endpoint")
              (("1" (assert)
                (("1" (factor! (! 1 l 1))
                  (("1" (rewrite "norm_scal")
                    (("1" (expand "abs")
                      (("1" (mult-cases 1 *1)
                        (("1" (hide 2)
                          (("1" (expand "abs")
                            (("1" (expand "norm")
                              (("1"
                                (rewrite "sqrt_le1" :dir rl)
                                (("1"
                                  (typepred "wedge_connector_sine(G)")
                                  (("1"
                                    (expand "wedge_connector_sine")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (rewrite
                                         "sqv_weighted_sum_perp_left")
                                        (("1"
                                          (hide 2)
                                          (("1" (real-props) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wedge_connector_endpoint")
              (("2" (assert)
                (("2" (hide 1)
                  (("2" (factor! (! 1 l 1))
                    (("2" (rewrite "norm_scal")
                      (("2" (expand "abs")
                        (("2" (mult-cases 1 *1)
                          (("2" (hide 2)
                            (("2" (expand "abs")
                              (("2"
                                (expand "norm")
                                (("2"
                                  (rewrite "sqrt_le1" :dir rl)
                                  (("2"
                                    (typepred
                                     "wedge_connector_sine(G)")
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (equate
                                         "wedge_connector_sine(G) *
            ^(perp_left(G`vertices(next_index(G, i)) - G`vertices(i)))
            -
            sqrt(1 - sq(wedge_connector_sine(G))) *
             ^(G`vertices(next_index(G, i)) - G`vertices(i))"
                                         "wedge_connector_sine(G) *
            ^(perp_left(G`vertices(next_index(G, i)) - G`vertices(i)))
            +
            -sqrt(1 - sq(wedge_connector_sine(G))) *
             ^(G`vertices(next_index(G, i)) - G`vertices(i))"
                                         t)
                                        (("2"
                                          (rewrite
                                           "sqv_weighted_sum_perp_left")
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite "sq_neg")
                                              (("2"
                                                (real-props)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (sq_neg formula-decl nil sq reals)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (add_cancel_sub_2 formula-decl nil vectors_cross_2d nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (<= const-decl "bool" reals nil)
    (wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sqv_weighted_sum_perp_left formula-decl nil vectors_cross_2d nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (sines_of_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (sqrt_le1 formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (add_cancel_add_2 formula-decl nil vectors_cross_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (connector_endpoint_between formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (no_intersections_with_prev_edge_wide_TCC1 0
  (no_intersections_with_prev_edge_wide_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (no_intersections_with_prev_edge_wide subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}"))
  (no_intersections_with_prev_edge_wide_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersections_with_prev_edge_wide subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}")))
 (no_intersections_with_prev_edge_wide 0
  (no_intersections_with_prev_edge_wide-1 nil 3874129019
   ("" (skeep*)
    (("" (use "parallel_segment_imp_points_on_same_side")
      (("" (ground)
        (("1" (inst - "r")
          (("1" (assert)
            (("1" (use "no_intersections_with_segment_across_line")
              (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (expand "point_on_segment?")
            (("2" (inst + "0") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((parallel_segment_imp_points_on_same_side formula-decl nil
     perp_crossings nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (no_intersections_with_segment_across_line formula-decl nil
     segments_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (other_end_of_parallel_segment_between 0
  (other_end_of_parallel_segment_between-1 nil 3874129019
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (skeep*)
        (("" (expand "between_rays?")
          (("" (move-terms -5 l 2)
            (("" (split -3)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (hide 3)
                      (("1" (replace -6 3)
                        (("1" (assert)
                          (("1" (rewrite "cross_distrib_add_2" 3)
                            (("1" (rewrite* "cross_scales_2" 3)
                              (("1"
                                (rewrite "cross_self_zero")
                                (("1"
                                  (use "cross_perp_left_neg")
                                  (("1" (real-props) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (ground)
                  (("1" (lemma "extend_pos_cross_vectors")
                    (("1"
                      (inst - "e`p2 - e`p1" "q - e`p1" "p - e`p1"
                       "s`p1 - e`p1")
                      (("1" (ground)
                        (("1"
                          (case "cross(s`p1 - e`p1, e`p2 - e`p1) = 0")
                          (("1" (hide 1 3 4)
                            (("1" (replace -7 1)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "cross_distrib_add_2" 1)
                                  (("1"
                                    (rewrite* "cross_scales_2" 1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (real-props)
                                        (("1"
                                          (rewrite
                                           "cross_perp_left_eq_neg_dot")
                                          (("1"
                                            (use
                                             "cross_eq_0_imp_dot_neg")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst + "1/a!1")
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -5 3))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (replace -6 1)
                          (("2" (assert)
                            (("2" (rewrite "cross_distrib_add_1" 1)
                              (("2"
                                (rewrite* "cross_scales_1" 1)
                                (("2"
                                  (rewrite "cross_self_zero")
                                  (("2"
                                    (rewrite "cross_antisymmetric" 1)
                                    (("2"
                                      (use "cross_perp_left_neg")
                                      (("2" (real-props) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (rewrite "cross_antisymmetric" 1)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -6 1)
                    (("2" (assert)
                      (("2" (rewrite "cross_distrib_add_2" 1)
                        (("2" (rewrite* "cross_scales_2" 1)
                          (("2" (rewrite "cross_self_zero")
                            (("2" (use "cross_perp_left_neg")
                              (("2" (real-props) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dir_parallel? const-decl "bool" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_cancel_add_2 formula-decl nil vectors_cross_2d nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (cross_perp_left_neg formula-decl nil vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (neg_times_lt formula-decl nil real_props nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (cross_distrib_add_1 formula-decl nil vectors_cross_2d nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (cross_scales_1 formula-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (cross_perp_left_eq_neg_dot formula-decl nil vectors_cross_2d nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cross_eq_0_imp_dot_neg formula-decl nil vectors_cross_2d nil)
    (pos_times_gt formula-decl nil real_props nil)
    (extend_pos_cross_vectors formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (other_end_of_parallel_segment_between_far 0
  (other_end_of_parallel_segment_between_far-1 nil 3874129019
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (skeep*)
        (("" (expand "between_rays?")
          (("" (move-terms -5 l 2)
            (("" (split -3)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (hide 4)
                      (("1" (replace -6 3)
                        (("1" (replace -3)
                          (("1" (assert)
                            (("1" (rewrite "cross_distrib_add_2" 3)
                              (("1"
                                (rewrite* "cross_scales_2" 3)
                                (("1"
                                  (rewrite "cross_self_zero")
                                  (("1"
                                    (rewrite "cross_diff_1" 3)
                                    (("1"
                                      (use "cross_perp_left_neg")
                                      (("1" (real-props) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (ground)
                  (("1" (replace -6 1)
                    (("1" (replace -3)
                      (("1" (assert)
                        (("1" (rewrite "cross_distrib_add_2" 1)
                          (("1" (rewrite* "cross_scales_2" 1)
                            (("1" (rewrite "cross_self_zero")
                              (("1"
                                (rewrite "cross_diff_1")
                                (("1"
                                  (use "cross_perp_left_neg")
                                  (("1" (real-props) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "cross(s`p1 - e`p1, e`p2 - e`p1) = 0")
                    (("1" (replace -7 1)
                      (("1" (replace -4)
                        (("1" (assert)
                          (("1" (rewrite "cross_distrib_add_2" 1)
                            (("1" (rewrite* "cross_scales_2" 1)
                              (("1"
                                (equate
                                 "c * cross(e`p2 - e`p1, (s`p1 - e`p1))"
                                 "0")
                                (("1"
                                  (real-props)
                                  (("1"
                                    (rewrite
                                     "cross_perp_left_eq_neg_dot")
                                    (("1"
                                      (lemma "cross_eq_0_imp_dot_neg")
                                      (("1"
                                        (inst
                                         -
                                         "s`p1 - e`p1"
                                         "e`p2 - e`p1")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (hide-all-but (-1 1))
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (inst + "1/a!1")
                                              (("2"
                                                (hide-all-but (-1 5))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (div-by -5 "pk")
                      (("2" (move-terms -1 r 2)
                        (("2" (replace -1 2 :dir rl)
                          (("2"
                            (equate
                             "(1 / pk) * (s`p1 - s`p2) + q - e`p1"
                             "(1 / pk) * (s`p1 - s`p2) + (q - e`p1)" t)
                            (("2" (rewrite "cross_distrib_add_2" 2)
                              (("2"
                                (rewrite* "cross_scales_2" 2)
                                (("2"
                                  (rewrite "cross_antisymmetric" 2)
                                  (("2"
                                    (case
                                     "(1 / pk) * -cross((s`p1 - s`p2), e`p2 - e`p1) <= 0")
                                    (("1" (assert) nil nil)
                                     ("2" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dir_parallel? const-decl "bool" vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (cross_perp_left_neg formula-decl nil vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (pos_times_gt formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cross_diff_1 formula-decl nil vectors_cross_2d nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (add_cancel_add_2 formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (times_div2 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (neg_times_lt formula-decl nil real_props nil)
    (cross_eq_0_imp_dot_neg formula-decl nil vectors_cross_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cross_perp_left_eq_neg_dot formula-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (interior_segment_points_in_wedge_TCC1 0
  (interior_segment_points_in_wedge_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (interior_segment_points_in_wedge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}"))
  (interior_segment_points_in_wedge_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (interior_segment_points_in_wedge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}")))
 (interior_segment_points_in_wedge 0
  (interior_segment_points_in_wedge-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (flatten)
        (("" (expand "point_in_vertex_wedge?")
          (("" (skeep)
            (("" (split 2)
              (("1" (ground)
                (("1" (use "segment_interior_points_all_between")
                  (("1" (expand "point_between_edges?")
                    (("1" (ground)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "edges_of_polygon")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "point_between_edges?")
                  (("2" (expand "reverse_segment")
                    (("2" (lemma "segment_interior_points_all_between")
                      (("2"
                        (inst -
                         "reverse_segment(edges_of_polygon(G)(i))"
                         "reverse_segment(edges_of_polygon(G)(prev_index(G, i)))"
                         "p" "q" "G`vertices(i)")
                        (("2" (expand "reverse_segment")
                          (("2" (assert)
                            (("2" (ground)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "edges_of_polygon")
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (expand "edges_of_polygon")
                                (("3" (propax) nil nil))
                                nil)
                               ("4"
                                (expand "edges_of_polygon")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (lemma "segment_interior_points_all_bounded")
                  (("2"
                    (inst - "p" "q" "G`vertices(i)"
                     "vertex_wedge_radius(G)")
                    (("2" (assert)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (segment_interior_points_all_between formula-decl nil between_rays
     nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (segment_interior_points_all_bounded formula-decl nil between_rays
     nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil))
   shostak))
 (pos_cross_to_between_point_narrow 0
  (pos_cross_to_between_point_narrow-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (flatten)
        (("" (expand "edges_of_polygon")
          (("" (assert)
            (("" (expand "between_rays?")
              (("" (flatten) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (between_rays? const-decl "bool" between_rays nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (next_prev_is_original formula-decl nil polygons_2d nil))
   shostak))
 (pos_cross_to_between_point_wide 0
  (pos_cross_to_between_point_wide-1 nil 3874129019
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (connector_parallel_to_edge 0
  (connector_parallel_to_edge-1 nil 3874129019
   ("" (skeep)
    (("" (assert)
      (("" (expand "wedge_connector_endpoint")
        ((""
          (name-replace "P"
           "vertex_wedge_radius(G) * wedge_connector_sine(G) *
                      ^(perp_left(G`vertices(next_index(G, i)) -
                                   G`vertices(i)))")
          ((""
            (name-replace "Q" "vertex_wedge_radius(G) *
                      sqrt(1 - sq(wedge_connector_sine(G)))
                      * ^(G`vertices(next_index(G, i)) - G`vertices(i))")
            (("1"
              (equate
               "G`vertices(next_index(G, i)) + P - Q - (G`vertices(i) + P + Q)"
               "G`vertices(next_index(G, i)) - 2 * Q - G`vertices(i)")
              (("1" (expand "edges_of_polygon")
                (("1" (expand "Q")
                  (("1" (expand "^")
                    (("1" (real-props)
                      (("1"
                        (name-replace "C" "2 *
                               (sqrt(1 - sq(wedge_connector_sine(G))) *
                                 vertex_wedge_radius(G))
                              / norm(G`vertices(next_index(G, i)) - G`vertices(i))")
                        (("1" (expand "dir_parallel?")
                          (("1" (case "1-C>0")
                            (("1" (inst + "1/(1-C)")
                              (("1"
                                (equate
                                 "G`vertices(next_index(G, i)) -
                          C * (G`vertices(next_index(G, i)) - G`vertices(i))
                          - G`vertices(i)"
                                 "(1-C) * (G`vertices(next_index(G, i)) - G`vertices(i))"
                                 t)
                                (("1" (real-props) nil nil))
                                nil)
                               ("2"
                                (grind)
                                (("1" (cross-mult 1) nil nil)
                                 ("2" (cross-mult 1) nil nil))
                                nil)
                               ("3" (assert) nil nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (move-terms 1 l 2)
                                (("2"
                                  (expand "C")
                                  (("2"
                                    (cross-mult 1)
                                    (("2"
                                      (ground)
                                      (("1"
                                        (use
                                         "wedge_connector_sine_sq_bound")
                                        (("1"
                                          (case
                                           "sqrt(1 - sq(wedge_connector_sine(G))) < 1")
                                          (("1"
                                            (expand
                                             "vertex_wedge_radius")
                                            (("1"
                                              (lemma
                                               "separation_distance_bounds_edge_length")
                                              (("1"
                                                (inst
                                                 -
                                                 "G"
                                                 "edges_of_polygon(G)(i)")
                                                (("1"
                                                  (expand "length")
                                                  (("1"
                                                    (cross-mult 1)
                                                    (("1"
                                                      (div-by 1 "2")
                                                      (("1"
                                                        (name-replace
                                                         "N"
                                                         "3 * norm(G`vertices(next_index(G, i)) - G`vertices(i)) / 2")
                                                        (("1"
                                                          (mult-cases
                                                           1
                                                           :mult-op
                                                           1*)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "N")
                                                              (("1"
                                                                (real-props)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "N")
                                                              (("2"
                                                                (expand
                                                                 "edges_of_polygon")
                                                                (("2"
                                                                  (real-props)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (lemma "sqrt_lt1")
                                              (("2"
                                                (inst
                                                 -
                                                 "1 - sq(wedge_connector_sine(G))")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (use "norm_eq_0")
                                          (("2"
                                            (lemma "vertex_neq_next")
                                            (("2"
                                              (inst - "G" "i")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (hide 2)
              (("2" (use "wedge_connector_sine_sq_bound")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (<= const-decl "bool" reals nil)
    (wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (Q skolem-const-decl "Vector" vertex_wedges nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (wedge_connector_sine_sq_bound formula-decl nil vertex_wedges nil)
    (sqrt_lt1 formula-decl nil sqrt reals)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (N skolem-const-decl "nnreal" vertex_wedges nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (length const-decl "posreal" segments_2d nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (C skolem-const-decl "real" vertex_wedges nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (sq_nz_pos application-judgement "posreal" sq reals))
   shostak))
 (connector_near_endpoint_cross_neg 0
  (connector_near_endpoint_cross_neg-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (expand "wedge_connector_endpoint")
        (("" (name-replace "Q" "sqrt(1 - sq(wedge_connector_sine(G)))")
          (("1"
            (name-replace*
             ("WR" "vertex_wedge_radius(G)" "S"
              "wedge_connector_sine(G)")
             :hide? t)
            (("1" (expand "^")
              (("1" (rewrite "norm_perp_left_is_norm_left")
                (("1"
                  (name-replace "L"
                   "1 / norm(G`vertices(next_index(G, i)) - G`vertices(i))")
                  (("1" (replace -1 :hide? t)
                    (("1" (replace -1 :hide? t)
                      (("1" (expand "edges_of_polygon")
                        (("1" (assert)
                          (("1" (rewrite "cross_distrib_add_2")
                            (("1" (rewrite* "cross_scales_2")
                              (("1"
                                (rewrite* "cross_self_zero")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "L > 0")
                                    (("1"
                                      (real-props)
                                      (("1"
                                        (use "cross_perp_left_neg")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use "vertex_neq_next_2")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "L")
                                        (("2" (cross-mult 1) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "wedge_connector_sine_sq_bound")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (add_cancel_add_2 formula-decl nil vectors_cross_2d nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (L skolem-const-decl "nzreal" vertex_wedges nil)
    (neg_times_lt formula-decl nil real_props nil)
    (pos_times_lt formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cross_perp_left_neg formula-decl nil vectors_cross_2d nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (wedge_connector_sine_sq_bound formula-decl nil vertex_wedges nil)
    (sq_nz_pos application-judgement "posreal" sq reals))
   shostak))
 (connector_segment_point_cross_neg_TCC1 0
  (connector_segment_point_cross_neg_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (use "connector_endpoints_neq") (("" (ground) nil nil)) nil))
    nil)
   ((connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (connector_segment_point_cross_neg subtype "vertex_wedges.r"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}"))
  (connector_segment_point_cross_neg_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (connector_segment_point_cross_neg subtype "vertex_wedges.r"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}")))
 (connector_segment_point_cross_neg 0
  (connector_segment_point_cross_neg-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "connector_near_endpoint_cross_neg")
          (("" (assert)
            (("" (use "connector_parallel_to_edge")
              (("" (assert)
                (("" (replace -5 :dir rl)
                  (("" (replace -6 :dir rl)
                    (("" (replace -4 :dir rl)
                      (("" (expand "dir_parallel?")
                        (("" (skeep)
                          (("" (replace -1)
                            (("" (rewrite* "cross_scales_1")
                              ((""
                                (real-props)
                                ((""
                                  (rewrite
                                   "point_on_segment_has_offset")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (equate
                                         "p + d * (r - p) - e`p1"
                                         "d * (r - p) + (p - e`p1)"
                                         t)
                                        (("1"
                                          (rewrite
                                           "cross_distrib_add_2")
                                          (("1"
                                            (rewrite* "cross_scales_2")
                                            (("1"
                                              (rewrite*
                                               "cross_self_zero")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "connector_endpoints_neq")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (FALSE const-decl "bool" booleans nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (connector_near_endpoint_cross_neg formula-decl nil vertex_wedges
     nil)
    (connector_parallel_to_edge formula-decl nil vertex_wedges nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cross_scales_1 formula-decl nil vectors_cross_2d nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (neg_times_lt formula-decl nil real_props nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (connector_segment_points_cross_pos 0
  (connector_segment_points_cross_pos-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (use "connector_near_endpoint_cross_neg")
        (("" (use "connector_endpoints_neq")
          (("" (replace -3 (-1 -2) :dir rl)
            (("" (replace -4 (-1 -2) :dir rl)
              (("" (replace -5 (-1 -2) :dir rl)
                (("" (ground)
                  (("" (rewrite "point_on_segment_has_offset")
                    (("" (skeep)
                      (("" (replace -2 :hide? t)
                        ((""
                          (equate "p + d * (r - p) - e`p1"
                           "d * (r - p) + (p - e`p1)")
                          (("1" (rewrite "cross_distrib_add_2")
                            (("1" (rewrite* "cross_self_zero")
                              (("1"
                                (rewrite* "cross_scales_2")
                                (("1"
                                  (case-replace "d=0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (real-props)
                                    (("2"
                                      (expand
                                       "wedge_connector_endpoint")
                                      (("2"
                                        (case
                                         "sqrt(1 - sq(wedge_connector_sine(G))) < 1")
                                        (("1"
                                          (name-replace
                                           "Q"
                                           "sqrt(1 - sq(wedge_connector_sine(G)))")
                                          (("1"
                                            (name-replace*
                                             ("WR"
                                              "vertex_wedge_radius(G)"
                                              "S"
                                              "wedge_connector_sine(G)")
                                             :hide?
                                             t)
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (rewrite
                                                 "norm_perp_left_is_norm_left")
                                                (("1"
                                                  (name-replace
                                                   "L"
                                                   "1 / norm(G`vertices(next_index(G, i)) - G`vertices(i))")
                                                  (("1"
                                                    (name-replace
                                                     "V"
                                                     "G`vertices(next_index(G, i)) - G`vertices(i)")
                                                    (("1"
                                                      (equate
                                                       "r-p"
                                                       "(1 - 2 * L * Q * WR) * V")
                                                      (("1"
                                                        (lemma
                                                         "cross_scales_2")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "p - e`p1"
                                                           "V"
                                                           "1 - 2 * L * Q * WR")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (mult-cases
                                                               4)
                                                              (("1"
                                                                (rewrite
                                                                 "cross_antisymmetric"
                                                                 -2)
                                                                (("1"
                                                                  (hide
                                                                   4)
                                                                  (("1"
                                                                    (split
                                                                     4)
                                                                    (("1"
                                                                      (move-terms
                                                                       1
                                                                       l
                                                                       2)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("1"
                                                                          (expand
                                                                           "WR")
                                                                          (("1"
                                                                            (expand
                                                                             "L")
                                                                            (("1"
                                                                              (real-props)
                                                                              (("1"
                                                                                (cross-mult
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "vertex_wedge_radius")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "separation_distance_bounds_edge_length")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "G"
                                                                                       "edges_of_polygon(G)(i)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "edges_of_polygon")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("1"
                                                                                            (real-props)
                                                                                            (("1"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              (("1"
                                                                                                (div-by
                                                                                                 1
                                                                                                 "2")
                                                                                                (("1"
                                                                                                  (equate
                                                                                                   "3 * norm(G`vertices(next_index(G, i)) - G`vertices(i)) / 2"
                                                                                                   "(3/2) * norm(G`vertices(next_index(G, i)) - G`vertices(i))"
                                                                                                   t)
                                                                                                  (("1"
                                                                                                    (equate
                                                                                                     "min_edge_sep(G) * Q"
                                                                                                     "Q*min_edge_sep(G)"
                                                                                                     (assert))
                                                                                                    (("1"
                                                                                                      (mult-cases
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-2
                                                                        -4
                                                                        1))
                                                                      (("2"
                                                                        (expand
                                                                         "V")
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -5 1)
                                                        (("2"
                                                          (replace
                                                           -6
                                                           1)
                                                          (("2"
                                                            (cancel-add
                                                             1)
                                                            (("2"
                                                              (factor
                                                               1
                                                               l
                                                               (2 4))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "scal_sub_left"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "V"
                                                                     1)
                                                                    (("2"
                                                                      (cancel-add
                                                                       1)
                                                                      (("2"
                                                                        (grind-with-ext)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "sqrt_le1")
                                          (("2"
                                            (inst
                                             -
                                             "1 - sq(wedge_connector_sine(G))")
                                            (("1"
                                              (use
                                               "wedge_connector_sine_sq_bound")
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (use
                                               "wedge_connector_sine_sq_bound")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use
                                           "wedge_connector_sine_sq_bound")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (FALSE const-decl "bool" booleans nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (> const-decl "bool" reals nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqrt_le1 formula-decl nil sqrt reals)
    (wedge_connector_sine_sq_bound formula-decl nil vertex_wedges nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (V skolem-const-decl "Vector" vertex_wedges nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (WR skolem-const-decl "posreal" vertex_wedges nil)
    (times_div2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (length const-decl "posreal" segments_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (L skolem-const-decl "nzreal" vertex_wedges nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (connector_near_endpoint_cross_neg formula-decl nil vertex_wedges
     nil))
   shostak))
 (connector_not_on_edge_TCC1 0
  (connector_not_on_edge_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (use "connector_endpoints_neq") (("" (ground) nil nil)) nil))
    nil)
   ((connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (connector_not_on_edge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}"))
  (connector_not_on_edge_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (connector_not_on_edge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}")))
 (connector_not_on_edge 0
  (connector_not_on_edge-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (skeep)
        (("" (use "no_intersections_with_parallel_segments")
          (("" (ground)
            (("1" (use "connector_parallel_to_edge")
              (("1" (ground) (("1" (rewrite "dir_parallel") nil nil))
                nil))
              nil)
             ("2" (use "connector_endpoints_neq")
              (("2" (ground) nil nil)) nil)
             ("3" (hide -)
              (("3" (skeep)
                (("3" (expand "edges_of_polygon")
                  (("3" (expand "wedge_connector_endpoint")
                    (("3"
                      (name-replace*
                       ("w" "G`vertices(next_index(G, i))" "v"
                        "G`vertices(i)")
                       :hide? t)
                      (("3"
                        (name-replace "c"
                         "sqrt(1 - sq(wedge_connector_sine(G)))")
                        (("1" (cancel-add -1)
                          (("1" (expand "^")
                            (("1"
                              (rewrite "norm_perp_left_is_norm_left")
                              (("1"
                                (real-props)
                                (("1"
                                  (move-terms -1 l 2)
                                  (("1"
                                    (factor -1 r)
                                    (("1"
                                      (mult-by -1 "norm(w-v)")
                                      (("1"
                                        (real-props)
                                        (("1"
                                          (equate
                                           "(norm(w - v) * vertex_wedge_radius(G) * c) / norm(w - v)"
                                           "vertex_wedge_radius(G) * c"
                                           t)
                                          (("1"
                                            (name-replace
                                             "a"
                                             "vertex_wedge_radius(G) * wedge_connector_sine(G)")
                                            (("1"
                                              (name-replace
                                               "b"
                                               "norm(w - v) * d - vertex_wedge_radius(G) * c")
                                              (("1"
                                                (use
                                                 "scaled_vector_neq_scaled_perp_left")
                                                (("1" (ground) nil nil)
                                                 ("2"
                                                  (expand "w")
                                                  (("2"
                                                    (expand "v")
                                                    (("2"
                                                      (lemma
                                                       "vertex_neq_next")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "G"
                                                         "i")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "wedge_connector_sine_sq_bound")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_intersections_with_parallel_segments formula-decl nil
     segments_2d nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wedge_connector_sine_sq_bound formula-decl nil vertex_wedges nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (w skolem-const-decl "point_2d" vertex_wedges nil)
    (v skolem-const-decl "point_2d" vertex_wedges nil)
    (scaled_vector_neq_scaled_perp_left formula-decl nil
     vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (div_cancel1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (connector_parallel_to_edge formula-decl nil vertex_wedges nil)
    (dir_parallel formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors))
   shostak))
 (connector_not_on_prev_edge_TCC1 0
  (connector_not_on_prev_edge_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (use "connector_endpoints_neq") (("" (ground) nil nil)) nil))
    nil)
   ((connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (connector_not_on_prev_edge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}"))
  (connector_not_on_prev_edge_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (connector_not_on_prev_edge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}")))
 (connector_not_on_prev_edge 0
  (connector_not_on_prev_edge-1 nil 3874129019
   ("" (skeep*)
    (("" (skoletin*)
      (("" (skeep)
        (("" (lemma "connector_endpoint_between")
          (("" (inst - "G" "i" "true")
            (("" (assert)
              (("" (expand "point_between_edges?")
                (("" (lemma "connector_parallel_to_edge")
                  (("" (inst - "G" "i")
                    (("" (assert)
                      (("" (lemma "connector_endpoint_between")
                        (("" (inst - "G" "i" "false")
                          (("" (assert)
                            (("" (expand "point_between_edges?")
                              ((""
                                (assert)
                                ((""
                                  (case
                                   "cross(G`vertices(prev_index(G, i)) - G`vertices(i),
                          G`vertices(next_index(G, i)) - G`vertices(i)) <= 0")
                                  (("1"
                                    (lemma
                                     "no_intersections_with_segment_across_line")
                                    (("1"
                                      (inst
                                       -
                                       "r"
                                       "edges_of_polygon(G)(prev_index(G, i))"
                                       "edges_of_polygon(G)(i)")
                                      (("1"
                                        (expand "edges_of_polygon")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "connector_segment_point_cross_neg")
                                            (("1"
                                              (inst - "G" "i" "r")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "connector_near_endpoint_cross_neg")
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "other_end_of_parallel_segment_between")
                                    (("2"
                                      (inst
                                       -
                                       "p"
                                       "q"
                                       "edges_of_polygon(G)(prev_index(G, i))"
                                       "edges_of_polygon(G)(i)")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (lemma
                                           "segment_interior_points_all_between")
                                          (("1"
                                            (inst
                                             -
                                             "edges_of_polygon(G)(prev_index(G, i))"
                                             "edges_of_polygon(G)(i)"
                                             "p"
                                             "q"
                                             "edges_of_polygon(G)(i)`p1")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (inst - "r")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "on_segment_not_between_rays")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "edges_of_polygon")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand
                                                 "edges_of_polygon")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("4"
                                                (use
                                                 "connector_endpoints_neq")
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "edges_of_polygon")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (use
                                           "connector_endpoints_neq")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (use
                                           "prev_edge_not_dir_parallel")
                                          (("4" (assert) nil nil))
                                          nil)
                                         ("5"
                                          (lemma
                                           "connector_segment_points_cross_pos")
                                          (("5"
                                            (inst - "G" "i" "q")
                                            (("5"
                                              (ground)
                                              (("5"
                                                (ground)
                                                (("1"
                                                  (use
                                                   "connector_endpoints_neq")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "point_on_segment?")
                                                  (("2"
                                                    (inst + "1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (replace -7)
                                          (("6"
                                            (hide-all-but 1)
                                            (("6"
                                              (expand
                                               "edges_of_polygon")
                                              (("6"
                                                (expand
                                                 "wedge_connector_endpoint")
                                                (("6"
                                                  (name-replace
                                                   "Q"
                                                   "sqrt(1 - sq(wedge_connector_sine(G)))")
                                                  (("1"
                                                    (name-replace*
                                                     ("WR"
                                                      "vertex_wedge_radius(G)"
                                                      "S"
                                                      "wedge_connector_sine(G)")
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (rewrite
                                                         "norm_perp_left_is_norm_left")
                                                        (("1"
                                                          (name-replace
                                                           "L"
                                                           "1 / norm(G`vertices(next_index(G, i)) - G`vertices(i))")
                                                          (("1"
                                                            (name-replace*
                                                             ("v"
                                                              "G`vertices(next_index(G, i))"
                                                              "u"
                                                              "G`vertices(i)")
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "WR * S * L"
                                                               "1 - WR * Q * L")
                                                              (("1"
                                                                (factor
                                                                 1
                                                                 l
                                                                 (2 4))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "scal_sub_left")
                                                                    (("1"
                                                                      (cancel-add
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (move-terms
                                                                 1
                                                                 l
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "WR")
                                                                  (("2"
                                                                    (expand
                                                                     "Q")
                                                                    (("2"
                                                                      (expand
                                                                       "L")
                                                                      (("2"
                                                                        (real-props)
                                                                        (("2"
                                                                          (expand
                                                                           "vertex_wedge_radius")
                                                                          (("2"
                                                                            (lemma
                                                                             "separation_distance_bounds_edge_length")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "G"
                                                                               "edges_of_polygon(G)(i)")
                                                                              (("2"
                                                                                (expand
                                                                                 "edges_of_polygon")
                                                                                (("2"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("2"
                                                                                    (mult-cases
                                                                                     1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "sqrt_le1")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "1 - sq(wedge_connector_sine(G))")
                                                                                        (("2"
                                                                                          (use
                                                                                           " wedge_connector_sine_sq_bound")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (case
                                                                 "L * S * WR > 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "WR")
                                                                    (("2"
                                                                      (expand
                                                                       "L")
                                                                      (("2"
                                                                        (expand
                                                                         "S")
                                                                        (("2"
                                                                          (case
                                                                           "norm(G`vertices(next_index(G, i)) - G`vertices(i)) > 0")
                                                                          (("1"
                                                                            (real-props)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 1)
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (use
                                                                               "norm_eq_0")
                                                                              (("2"
                                                                                (lemma
                                                                                 "vertex_neq_next")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "G"
                                                                                   "i")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (use
                                                               "norm_eq_0")
                                                              (("2"
                                                                (lemma
                                                                 "vertex_neq_next")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "G"
                                                                   "i")
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (use
                                                       "wedge_connector_sine_sq_bound")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (FALSE const-decl "bool" booleans nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (connector_endpoint_between formula-decl nil vertex_wedges nil)
    (connector_parallel_to_edge formula-decl nil vertex_wedges nil)
    (<= const-decl "bool" reals nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (connector_near_endpoint_cross_neg formula-decl nil vertex_wedges
     nil)
    (connector_segment_point_cross_neg formula-decl nil vertex_wedges
     nil)
    (no_intersections_with_segment_across_line formula-decl nil
     segments_2d nil)
    (wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (L skolem-const-decl "nzreal" vertex_wedges nil)
    (S skolem-const-decl "{a: posreal | a <= 1/2}" vertex_wedges nil)
    (WR skolem-const-decl "posreal" vertex_wedges nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (Q skolem-const-decl
     "{nnz: nnreal | nnz * nnz = 1 - sq(wedge_connector_sine(G))}"
     vertex_wedges nil)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (length const-decl "posreal" segments_2d nil)
    (sqrt_le1 formula-decl nil sqrt reals)
    (wedge_connector_sine_sq_bound formula-decl nil vertex_wedges nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div1 formula-decl nil real_props nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (connector_segment_points_cross_pos formula-decl nil vertex_wedges
     nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (prev_edge_not_dir_parallel formula-decl nil polygons_2d nil)
    (segment_interior_points_all_between formula-decl nil between_rays
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (on_segment_not_between_rays formula-decl nil between_rays nil)
    (connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (other_end_of_parallel_segment_between formula-decl nil
     vertex_wedges nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (connector_not_on_next_edge_TCC1 0
  (connector_not_on_next_edge_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (use "connector_endpoints_neq") (("" (ground) nil nil)) nil))
    nil)
   ((connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (connector_not_on_next_edge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}"))
  (connector_not_on_next_edge_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (connector_not_on_next_edge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}")))
 (connector_not_on_next_edge 0
  (connector_not_on_next_edge-1 nil 3874129019
   ("" (skeep*)
    (("" (skoletin*)
      (("" (skeep)
        (("" (lemma "connector_endpoint_between")
          (("" (inst - "G" "i" "false")
            (("" (assert)
              (("" (expand "point_between_edges?")
                (("" (assert)
                  (("" (lemma "connector_parallel_to_edge")
                    (("" (inst - "G" "i")
                      (("" (assert)
                        (("" (lemma "connector_endpoint_between")
                          (("" (inst - "G" "i" "false")
                            (("" (assert)
                              ((""
                                (expand "point_between_edges?")
                                ((""
                                  (assert)
                                  ((""
                                    (case
                                     "cross(G`vertices(i) - G`vertices(next_index(G,i)),
                   G`vertices(next_index(G,next_index(G, i))) - G`vertices(next_index(G,i))) <= 0")
                                    (("1"
                                      (lemma
                                       "no_intersections_with_segment_across_line_far")
                                      (("1"
                                        (inst
                                         -
                                         "r"
                                         "edges_of_polygon(G)(i)"
                                         "edges_of_polygon(G)(next_index(G,i))")
                                        (("1"
                                          (expand "edges_of_polygon")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (lemma
                                                 "connector_segment_point_cross_neg")
                                                (("1"
                                                  (inst - "G" "i" "r")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "connector_near_endpoint_cross_neg")
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  1))
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "other_end_of_parallel_segment_between_far")
                                      (("2"
                                        (inst
                                         -
                                         "p"
                                         "q"
                                         "edges_of_polygon(G)(i)"
                                         "edges_of_polygon(G)(next_index(G,i))")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (lemma
                                             "segment_interior_points_all_between")
                                            (("1"
                                              (inst
                                               -
                                               "edges_of_polygon(G)(i)"
                                               "edges_of_polygon(G)(next_index(G,i))"
                                               "p"
                                               "q"
                                               "edges_of_polygon(G)(next_index(G,i))`p1")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (inst - "r")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (use
                                                       "on_segment_not_between_rays")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "edges_of_polygon")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (use
                                                   "connector_endpoints_neq")
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "edges_of_polygon")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (use
                                             "connector_endpoints_neq")
                                            (("3" (assert) nil nil))
                                            nil)
                                           ("4"
                                            (use
                                             "prev_edge_not_dir_parallel")
                                            (("4" (assert) nil nil))
                                            nil)
                                           ("5"
                                            (lemma
                                             "connector_segment_points_cross_pos")
                                            (("5"
                                              (inst - "G" "i" "q")
                                              (("5"
                                                (ground)
                                                (("5"
                                                  (ground)
                                                  (("1"
                                                    (use
                                                     "connector_endpoints_neq")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "point_on_segment?")
                                                    (("2"
                                                      (inst + "1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("6"
                                            (rewrite
                                             "dir_parallel_diff"
                                             1)
                                            nil
                                            nil)
                                           ("7"
                                            (replace -8)
                                            (("7"
                                              (hide-all-but 1)
                                              (("7"
                                                (expand
                                                 "edges_of_polygon")
                                                (("7"
                                                  (expand
                                                   "wedge_connector_endpoint")
                                                  (("7"
                                                    (use
                                                     "wedge_connector_sine_sq_bound")
                                                    (("7"
                                                      (case
                                                       "sqrt(1 - sq(wedge_connector_sine(G))) < 1")
                                                      (("1"
                                                        (name-replace
                                                         "Q"
                                                         "sqrt(1 - sq(wedge_connector_sine(G)))")
                                                        (("1"
                                                          (name-replace*
                                                           ("WR"
                                                            "vertex_wedge_radius(G)"
                                                            "S"
                                                            "wedge_connector_sine(G)")
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (expand
                                                             "^")
                                                            (("1"
                                                              (rewrite
                                                               "norm_perp_left_is_norm_left")
                                                              (("1"
                                                                (name-replace
                                                                 "L"
                                                                 "1 / norm(G`vertices(next_index(G, i)) - G`vertices(i))")
                                                                (("1"
                                                                  (name-replace*
                                                                   ("v"
                                                                    "G`vertices(next_index(G, i))"
                                                                    "u"
                                                                    "G`vertices(i)")
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "WR * S * L"
                                                                     "1 - WR * Q * L")
                                                                    (("1"
                                                                      (factor
                                                                       1
                                                                       l
                                                                       (2
                                                                        4))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "scal_sub_left")
                                                                          (("1"
                                                                            (cancel-add
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "neg_distr_sub"
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (move-terms
                                                                       1
                                                                       l
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "WR")
                                                                        (("2"
                                                                          (expand
                                                                           "Q")
                                                                          (("2"
                                                                            (expand
                                                                             "L")
                                                                            (("2"
                                                                              (real-props)
                                                                              (("2"
                                                                                (expand
                                                                                 "vertex_wedge_radius")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "separation_distance_bounds_edge_length")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "G"
                                                                                     "edges_of_polygon(G)(i)")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "edges_of_polygon")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length")
                                                                                        (("2"
                                                                                          (mult-cases
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (case
                                                                       "L * S * WR > 0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "WR")
                                                                          (("2"
                                                                            (expand
                                                                             "L")
                                                                            (("2"
                                                                              (expand
                                                                               "S")
                                                                              (("2"
                                                                                (case
                                                                                 "norm(G`vertices(next_index(G, i)) - G`vertices(i)) > 0")
                                                                                (("1"
                                                                                  (real-props)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (hide
                                                                                       1)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "norm_vertex_diff_next_pos")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (use
                                                                     "norm_vertex_diff_next_pos")
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           "sqrt_lt1"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (FALSE const-decl "bool" booleans nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (connector_endpoint_between formula-decl nil vertex_wedges nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (other_end_of_parallel_segment_between_far formula-decl nil
     vertex_wedges nil)
    (connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (on_segment_not_between_rays formula-decl nil between_rays nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (segment_interior_points_all_between formula-decl nil between_rays
     nil)
    (prev_edge_not_dir_parallel formula-decl nil polygons_2d nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (connector_segment_points_cross_pos formula-decl nil vertex_wedges
     nil)
    (dir_parallel_diff formula-decl nil vectors_cross_2d nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (wedge_connector_sine const-decl "{a: posreal | a <= 1 / 2}"
     vertex_wedges nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (pos_div_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (times_div1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (length const-decl "posreal" segments_2d nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (neg_distr_sub formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (Q skolem-const-decl
     "{nnz: nnreal | nnz * nnz = 1 - sq(wedge_connector_sine(G))}"
     vertex_wedges nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (WR skolem-const-decl "posreal" vertex_wedges nil)
    (S skolem-const-decl "{a: posreal | a <= 1/2}" vertex_wedges nil)
    (L skolem-const-decl "nzreal" vertex_wedges nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (sqrt_lt1 formula-decl nil sqrt reals)
    (wedge_connector_sine_sq_bound formula-decl nil vertex_wedges nil)
    (no_intersections_with_segment_across_line_far formula-decl nil
     segments_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (connector_near_endpoint_cross_neg formula-decl nil vertex_wedges
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (connector_segment_point_cross_neg formula-decl nil vertex_wedges
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (<= const-decl "bool" reals nil)
    (connector_parallel_to_edge formula-decl nil vertex_wedges nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (connector_not_on_perimeter_TCC1 0
  (connector_not_on_perimeter_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (use "connector_endpoints_neq") (("" (ground) nil nil)) nil))
    nil)
   ((connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (connector_not_on_perimeter subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}"))
  (connector_not_on_perimeter_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (connector_not_on_perimeter subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}")))
 (connector_not_on_perimeter 0
  (connector_not_on_perimeter-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (skeep)
        (("" (expand "point_on_polygon_perimeter?")
          (("" (skeep - t)
            (("" (expand "edge_of_polygon?")
              (("" (skeep)
                (("" (case "i!1 = i")
                  (("1" (use "connector_not_on_edge")
                    (("1" (ground)
                      (("1" (inst?) (("1" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2"
                    (case "i!1 = prev_index(G,i) or i!1 = next_index(G,i)")
                    (("1" (ground)
                      (("1" (use "connector_not_on_prev_edge")
                        (("1" (ground)
                          (("1" (inst?) (("1" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (use "connector_not_on_next_edge")
                        (("2" (ground)
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (lemma "nearby_segment_distance_bounded")
                        (("2" (inst?)
                          (("1"
                            (inst - "edges_of_polygon(G)(i)"
                             "vertex_wedge_radius(G)")
                            (("1" (assert)
                              (("1"
                                (expand "edges_of_polygon" -1)
                                (("1"
                                  (ground)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (lemma "min_edge_sep_all_points")
                                      (("1"
                                        (inst - "G" "i" "i!1" "q" "r")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand
                                               "vertex_wedge_radius")
                                              (("1"
                                                (rewrite "norm_sym")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "edges_of_polygon")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "connector_endpoint_in_wedge")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand
                                         "point_in_vertex_wedge?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (use "connector_endpoint_in_wedge")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand
                                         "point_in_vertex_wedge?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "connector_endpoints_neq")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (connector_not_on_edge formula-decl nil vertex_wedges nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (G skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min_edge_sep_all_points formula-decl nil polygon_attributes nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (connector_endpoint_in_wedge formula-decl nil vertex_wedges nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (nearby_segment_distance_bounded formula-decl nil segments_2d nil)
    (connector_not_on_prev_edge formula-decl nil vertex_wedges nil)
    (connector_not_on_next_edge formula-decl nil vertex_wedges nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil))
   shostak))
 (apex_to_apex_not_on_edge_TCC1 0
  (apex_to_apex_not_on_edge_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (use "apex_point_neq_next_apex") (("" (ground) nil nil)) nil))
    nil)
   ((apex_point_neq_next_apex formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (apex_to_apex_not_on_edge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}"))
  (apex_to_apex_not_on_edge_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (apex_to_apex_not_on_edge subtype "vertex_wedges.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= vertex_wedges.p}")))
 (apex_to_apex_not_on_edge 0
  (apex_to_apex_not_on_edge-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (skeep)
        (("" (lemma "same_side_points_off_line")
          ((""
            (inst - "G`vertices(next_index(G,i))" "G`vertices(i)"
             "vertex_wedge_apex(true, G, i)"
             "vertex_wedge_apex(true, G, next_index(G,i))" "r")
            (("" (ground)
              (("1" (expand "edges_of_polygon")
                (("1" (assert)
                  (("1" (hide -1)
                    (("1" (expand "point_on_segment?")
                      (("1" (skeep - t)
                        (("1" (inst + "1-t")
                          (("1" (grind-with-ext) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "cross_diff_triangle_gt")
                (("2" (assert)
                  (("2" (hide - 2)
                    (("2" (lemma "apex_point_between")
                      (("2" (inst - "G" "i" "true")
                        (("2" (assert)
                          (("2" (expand "point_between_edges?")
                            (("2" (expand "edges_of_polygon")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "between_rays?")
                                  (("2"
                                    (ground)
                                    (("2"
                                      (lemma
                                       "apex_point_between_rev_out")
                                      (("2"
                                        (inst - "G" "i")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "edges_of_polygon")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "between_rays?")
                                                (("2"
                                                  (rewrite*
                                                   "scal_by_two_cancel_1")
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         "cross_diff_both"
                                                         -1)
                                                        (("1"
                                                          (rewrite
                                                           "cross_antisymmetric"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite
                                                         "cross_diff_1"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "apex_point_between")
                (("3" (expand "point_between_edges?")
                  (("3" (inst - "G" "next_index(G,i)" "true")
                    (("3" (expand "edges_of_polygon")
                      (("3" (assert)
                        (("3" (expand "between_rays?")
                          (("3" (ground)
                            (("3" (use "apex_point_between_rev_out")
                              (("3"
                                (assert)
                                (("3"
                                  (expand "edges_of_polygon")
                                  (("3"
                                    (expand "between_rays?")
                                    (("3"
                                      (rewrite* "scal_by_two_cancel_1")
                                      (("3"
                                        (rewrite "cross_diff_both" -3)
                                        (("3"
                                          (rewrite
                                           "cross_diff_both"
                                           -2)
                                          (("3"
                                            (rewrite
                                             "cross_antisymmetric"
                                             -2)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (rewrite
                                                   "cross_diff_1"
                                                   -2)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide -2)
                (("4" (expand "point_on_segment?")
                  (("4" (skeep)
                    (("4" (inst?)
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same_side_points_off_line formula-decl nil vectors_cross_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (apex_point_between formula-decl nil vertex_wedges nil)
    (between_rays? const-decl "bool" between_rays nil)
    (apex_point_between_rev_out formula-decl nil vertex_wedges nil)
    (scal_by_two_cancel_1 formula-decl nil vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (cross_diff_1 formula-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_diff_both formula-decl nil vectors_cross_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (cross_diff_triangle_gt formula-decl nil vectors_cross_2d nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (t skolem-const-decl "real" vertex_wedges nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (vertex_to_vertex_length_bound 0
  (vertex_to_vertex_length_bound-1 nil 3874129019
   ("" (skeep)
    (("" (typepred "min_edge_sep(G)")
      (("" (inst - "i" "j")
        (("" (ground)
          (("1" (inst - "G`vertices(j)")
            (("1" (expand "length")
              (("1" (rewrite "norm_sym") (("1" (ground) nil nil)) nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (typepred "min_edge_sep(G)")
              (("2" (inst - "prev_index(G,i)" "i")
                (("2" (ground)
                  (("1" (inst - "G`vertices(i)")
                    (("1" (expand "length") (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (lemma "prev_vertex_neq_next_vertex")
                    (("2" (inst - "G" "prev_index(G,i)")
                      (("1" (assert) nil nil)
                       ("2" (typepred "G")
                        (("2" (expand "simple_polygon_2d?")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "posreal" segments_2d nil)
    (vertex_on_edge formula-decl nil polygons_2d nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (prev_vertex_neq_next_vertex formula-decl nil polygons_2d nil))
   shostak))
 (vertex_to_vertex_in_wedge_neq_prev 0
  (vertex_to_vertex_in_wedge_neq_prev-1 nil 3874129019
   ("" (skeep)
    (("" (lemma "wedge_points_not_on_perimeter")
      (("" (inst - "q" "G" "j" "true")
        (("" (ground)
          (("" (expand "point_on_polygon_perimeter?")
            (("" (inst + "edges_of_polygon(G)(j)")
              (("" (expand "point_on_segment?")
                (("" (skeep)
                  (("" (expand "edges_of_polygon")
                    (("" (replace -7)
                      (("" (assert)
                        (("" (inst + "1-t")
                          (("" (assert)
                            (("" (hide -6) (("" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wedge_points_not_on_perimeter formula-decl nil vertex_wedges nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (segment_points_in_wedge 0
  (segment_points_in_wedge-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (ground)
        (("" (use "apex_in_wedge")
          (("" (expand "point_in_vertex_wedge?")
            (("" (flatten)
              (("" (split 2)
                (("1" (hide -2 -4)
                  (("1" (lemma "segment_interior_points_all_between")
                    (("1" (expand "point_between_edges?")
                      (("1" (ground)
                        (("1"
                          (case "cross(edges_of_polygon(G)(prev_index(G, i))`p1 - G`vertices(i), edges_of_polygon(G)(i)`p2 - G`vertices(i)) >= 0")
                          (("1" (inst?)
                            (("1"
                              (inst - "vertex_wedge_apex(TRUE, G, i)"
                               "p")
                              (("1"
                                (ground)
                                (("1"
                                  (inst - "q")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "edges_of_polygon")
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (expand "edges_of_polygon")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "apex_point_between_rev_out")
                            (("2" (assert)
                              (("2"
                                (ground)
                                (("1"
                                  (expand "edges_of_polygon")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "between_rays?((# p1 := G`vertices(prev_index(G, i)),
                                                            p2 := G`vertices(i) #),
                                                         (# p1 := G`vertices(i),
                                                            p2 := 2 * G`vertices(i) -
                                                                  G`vertices(prev_index(G, i)) #))(p)")
                                      (("1"
                                        (inst
                                         -
                                         "(# p1 := G`vertices(prev_index(G, i)), p2 := G`vertices(i) #)"
                                         "(# p1 := G`vertices(i),
                                                      p2 := 2 * G`vertices(i) - G`vertices(prev_index(G, i)) #)"
                                         "vertex_wedge_apex(TRUE, G, i)"
                                         "p"
                                         "G`vertices(i)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (inst - "q")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "cross_wide_point_between_opposite_2")
                                                (("1"
                                                  (inst
                                                   -
                                                   "q"
                                                   "G`vertices(prev_index(G, i))"
                                                   "G`vertices(i)"
                                                   "G`vertices(next_index(G, i))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (rewrite
                                               "scal_by_two_cancel_1")
                                              (("2"
                                                (rewrite
                                                 "cross_diff_rev_eq_0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (use
                                             "cross_wide_point_between_opposite_1")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (use
                                             "scal_by_two_cancel_2")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (use "vertex_neq_prev")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst
                                         -
                                         "(# p1 := 2 * G`vertices(i) - G`vertices(next_index(G, i)), p2 := G`vertices(i) #)"
                                         "(# p1 := G`vertices(i),
                                      p2 := G`vertices(next_index(G, i)) #)"
                                         "vertex_wedge_apex(TRUE, G, i)"
                                         "p"
                                         "G`vertices(i)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (inst - "q")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "cross_wide_point_between_opposite_3")
                                                (("1"
                                                  (inst
                                                   -
                                                   "q"
                                                   "G`vertices(prev_index(G, i))"
                                                   "G`vertices(i)"
                                                   "G`vertices(next_index(G, i))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (rewrite
                                               "scal_by_two_cancel_1")
                                              (("2"
                                                (rewrite
                                                 "cross_diff_rev_eq_0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (use
                                             "cross_wide_point_between_opposite_4")
                                            (("3" (assert) nil nil))
                                            nil)
                                           ("4"
                                            (lemma
                                             "cross_wide_point_between_opposite_5")
                                            (("4"
                                              (inst
                                               -
                                               "p"
                                               "G`vertices(prev_index(G, i))"
                                               "G`vertices(i)"
                                               "G`vertices(next_index(G, i))")
                                              (("4" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (use
                                             "scal_by_two_cancel_2")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (use "vertex_neq_next")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (use "scal_by_two_cancel_2")
                                          (("3"
                                            (ground)
                                            (("3"
                                              (use "vertex_neq_prev")
                                              (("3" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "edges_of_polygon")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "cross(G`vertices(next_index(G, i)) - G`vertices(i), G`vertices(prev_index(G, i)) - G`vertices(i)) >= 0")
                          (("1"
                            (inst - _ _
                             "vertex_wedge_apex(FALSE, G, i)" "p"
                             "G`vertices(i)")
                            (("1" (inst?)
                              (("1"
                                (expand "reverse_segment")
                                (("1"
                                  (expand "edges_of_polygon")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst - "q")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "apex_point_between_rev_in")
                            (("2" (assert)
                              (("2"
                                (expand "reverse_segment")
                                (("2"
                                  (expand "edges_of_polygon")
                                  (("2"
                                    (ground)
                                    (("1"
                                      (case
                                       "between_rays?((# p1 := G`vertices(next_index(G, i)),
                                                            p2 := G`vertices(i) #),
                                                         (# p1 := G`vertices(i),
                                                            p2 := 2 * G`vertices(i) -
                                                                  G`vertices(next_index(G, i)) #))(p)")
                                      (("1"
                                        (inst
                                         -
                                         "(# p1 := G`vertices(next_index(G, i)), p2 := G`vertices(i) #)"
                                         "(# p1 := G`vertices(i),
                                                      p2 := 2 * G`vertices(i) - G`vertices(next_index(G, i)) #)"
                                         "vertex_wedge_apex(false, G, i)"
                                         "p"
                                         "G`vertices(i)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (inst - "q")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "cross_wide_point_between_opposite_2")
                                                (("1"
                                                  (inst
                                                   -
                                                   "q"
                                                   "G`vertices(next_index(G, i))"
                                                   "G`vertices(i)"
                                                   "G`vertices(prev_index(G, i))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (rewrite
                                               "scal_by_two_cancel_1")
                                              (("2"
                                                (rewrite
                                                 "cross_diff_rev_eq_0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (use
                                             "cross_wide_point_between_opposite_1")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (use
                                             "scal_by_two_cancel_2")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (use "vertex_neq_next")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst
                                         -
                                         "(# p1 := 2 * G`vertices(i) - G`vertices(prev_index(G, i)), p2 := G`vertices(i) #)"
                                         "(# p1 := G`vertices(i),
                                      p2 := G`vertices(prev_index(G, i)) #)"
                                         "vertex_wedge_apex(false, G, i)"
                                         "p"
                                         "G`vertices(i)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (inst - "q")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "cross_wide_point_between_opposite_3")
                                                (("1"
                                                  (inst
                                                   -
                                                   "q"
                                                   "G`vertices(next_index(G, i))"
                                                   "G`vertices(i)"
                                                   "G`vertices(prev_index(G, i))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (rewrite
                                               "scal_by_two_cancel_1")
                                              (("2"
                                                (rewrite
                                                 "cross_diff_rev_eq_0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (use
                                             "cross_wide_point_between_opposite_4")
                                            (("3" (assert) nil nil))
                                            nil)
                                           ("4"
                                            (lemma
                                             "cross_wide_point_between_opposite_5")
                                            (("4"
                                              (inst
                                               -
                                               "p"
                                               "G`vertices(next_index(G, i))"
                                               "G`vertices(i)"
                                               "G`vertices(prev_index(G, i))")
                                              (("4" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (use
                                             "scal_by_two_cancel_2")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (use "vertex_neq_prev")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (use "scal_by_two_cancel_2")
                                          (("3"
                                            (ground)
                                            (("3"
                                              (use "vertex_neq_next")
                                              (("3" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 2))
                                      (("2"
                                        (rewrite "cross_antisymmetric")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "segment_interior_points_all_bounded")
                  (("2"
                    (inst - "vertex_wedge_apex(outward, G, i)" "p"
                     "G`vertices(i)" "vertex_wedge_radius(G)")
                    (("2" (assert)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((apex_in_wedge formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (segment_interior_points_all_bounded formula-decl nil between_rays
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (FALSE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (vertex_neq_prev_2 formula-decl nil polygons_2d nil)
    (apex_point_between_rev_in formula-decl nil vertex_wedges nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (between_rays? const-decl "bool" between_rays nil)
    (* const-decl "Vector" vectors_2D vectors)
    (scal_by_two_cancel_2 formula-decl nil vectors_cross_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (cross_wide_point_between_opposite_2 formula-decl nil vertex_wedges
     nil)
    (scal_by_two_cancel_1 formula-decl nil vectors_cross_2d nil)
    (cross_diff_rev_eq_0 formula-decl nil vectors_cross_2d nil)
    (cross_wide_point_between_opposite_1 formula-decl nil vertex_wedges
     nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (G skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (cross_wide_point_between_opposite_3 formula-decl nil vertex_wedges
     nil)
    (cross_wide_point_between_opposite_4 formula-decl nil vertex_wedges
     nil)
    (cross_wide_point_between_opposite_5 formula-decl nil vertex_wedges
     nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (apex_point_between_rev_out formula-decl nil vertex_wedges nil)
    (segment_interior_points_all_between formula-decl nil between_rays
     nil)
    (point_in_vertex_wedge? const-decl "bool" vertex_wedges nil))
   shostak))
 (between_opposite_apex_points_in_wedges_TCC1 0
  (between_opposite_apex_points_in_wedges_TCC1-2 nil 3874129019
   ("" (skeep)
    (("" (use "vertex_bisect_vector_nonzero") (("" (ground) nil nil))
      nil))
    nil)
   ((vertex_bisect_vector_nonzero formula-decl nil vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak
   (between_opposite_apex_points_in_wedges subtype
    "vertex_wedges.vertex_bisect_vector(vertex_wedges.G, vertex_wedges.i)"
    "Nz_vector"))
  (between_opposite_apex_points_in_wedges_TCC1-1 nil 3874128960
   ("" (subtype-tcc) nil nil) nil nil
   (between_opposite_apex_points_in_wedges subtype
    "vertex_wedges.vertex_bisect_vector(vertex_wedges.G, vertex_wedges.i)"
    "Nz_vector")))
 (between_opposite_apex_points_in_wedges 0
  (between_opposite_apex_points_in_wedges-1 nil 3874129019
   ("" (skeep)
    (("" (expand "point_in_vertex_wedge?")
      (("" (replace -1 :hide? t)
        (("" (assert)
          (("" (expand "abs")
            (("" (ground)
              (("1" (case "norm(vertex_bisect_vector(G, i)) > 0")
                (("1" (expand "point_between_edges?")
                  (("1" (case "d > vertex_wedge_radius(G)")
                    (("1" (hide 1)
                      (("1" (use "scaled_vector_between_rays")
                        (("1" (expand "edges_of_polygon")
                          (("1" (assert)
                            (("1" (expand "^")
                              (("1"
                                (use "scaled_vector_between_rays")
                                (("1"
                                  (assert)
                                  (("1"
                                    (use "bisect_vector_between")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand "edges_of_polygon")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-2 1))
                                  (("2"
                                    (ground)
                                    (("1" (cross-mult 1) nil nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (use "scaled_vector_between_rays_neg")
                        (("1" (expand "edges_of_polygon")
                          (("1" (expand "reverse_segment")
                            (("1" (assert)
                              (("1"
                                (expand "^")
                                (("1"
                                  (equate
                                   "G`vertices(i) -
                               (1 / norm(vertex_bisect_vector(G, i))) * vertex_bisect_vector(G, i)"
                                   "G`vertices(i) + (-(1 / norm(vertex_bisect_vector(G, i)))) * vertex_bisect_vector(G, i)")
                                  (("1"
                                    (use
                                     "scaled_vector_between_rays_neg")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use
                                         "bisect_vector_between_rev")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "edges_of_polygon")
                                            (("1"
                                              (expand
                                               "reverse_segment")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 1))
                                      (("2"
                                        (ground)
                                        (("1"
                                          (move-terms 1 l)
                                          (("1"
                                            (elim-unary 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (cross-mult 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (move-terms 1 l)
                                          (("2"
                                            (elim-unary 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (cross-mult 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (name-replace*
                                       ("n"
                                        "norm(vertex_bisect_vector(G, i))"
                                        "b"
                                        "vertex_bisect_vector(G, i)"))
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (use "vertex_bisect_vector_nonzero")
                    (("2" (use "norm_eq_0") (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lift-if) (("2" (ground) nil nil)) nil)
               ("3" (lift-if) (("3" (ground) nil nil)) nil)
               ("4" (lift-if) (("4" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (vertex_bisect_vector_nonzero formula-decl nil vertex_wedges nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (bisect_vector_between_rev formula-decl nil vertex_wedges nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (vertex_neq_prev_2 formula-decl nil polygons_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (<= const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (scaled_vector_between_rays_neg formula-decl nil between_rays nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (bisect_vector_between formula-decl nil vertex_wedges nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d skolem-const-decl "nnreal" vertex_wedges nil)
    (G skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (scaled_vector_between_rays formula-decl nil between_rays nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (wedge_point_out_imp_all_wedge_points_out 0
  (wedge_point_out_imp_all_wedge_points_out-1 nil 3874129019
   ("" (skeep)
    (("" (lemma "extend_points_outside_polygon")
      ((""
        (case "point_outside_polygon?(vertex_wedge_apex(true, G, i), G)")
        (("1"
          (inst - "vertex_wedge_apex(true, G, i)"
           "(# p1 := vertex_wedge_apex(true, G, i), p2 := q #)" "G")
          (("1" (ground)
            (("1" (inst - "q")
              (("1" (assert)
                (("1" (expand "point_on_segment?")
                  (("1" (inst + "1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lemma "wedge_points_not_on_perimeter")
                (("2" (inst - "q_1" "G" "i" "true")
                  (("2" (assert)
                    (("2" (lemma "segment_points_in_wedge")
                      (("2" (inst - "q" "q_1" "G" "i" "true")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil)
         ("2"
          (inst - "p"
           "(# p1 := p, p2 := vertex_wedge_apex(true, G, i) #)" "G")
          (("1" (ground)
            (("1" (inst?)
              (("1" (assert)
                (("1" (expand "point_on_segment?")
                  (("1" (inst + "1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lemma "wedge_points_not_on_perimeter")
                (("2" (inst - "q!1" "G" "i" "true")
                  (("2" (assert)
                    (("2" (lemma "segment_points_in_wedge")
                      (("2" (inst - "p" "q!1" "G" "i" "true")
                        (("2" (ground)
                          (("2"
                            (rewrite "point_on_reverse_segment" :dir
                             rl)
                            (("2" (expand "reverse_segment")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((extend_points_outside_polygon formula-decl nil polygon_membership
     nil)
    (p skolem-const-decl "point_2d" vertex_wedges nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (G skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (q skolem-const-decl "point_2d" vertex_wedges nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (segment_points_in_wedge formula-decl nil vertex_wedges nil)
    (wedge_points_not_on_perimeter formula-decl nil vertex_wedges nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (TRUE const-decl "bool" booleans nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil))
   shostak))
 (outward_apex_outside_inward_inside 0
  (outward_apex_outside_inward_inside-1 nil 3874129019
   ("" (skeep)
    (("" (lemma "point_out_not_in")
      (("" (inst? - :where -)
        (("" (assert)
          (("" (hide -1)
            (("" (lemma "point_in_polygon_conds_equiv")
              (("" (copy -1)
                (("" (inst? - :where 2)
                  (("" (inst - "^(vertex_bisect_vector(G, i))")
                    (("1" (replace -1 :hide? t)
                      (("1" (inst? - :where 1)
                        (("1" (inst - "^(vertex_bisect_vector(G, i))")
                          (("1" (replace -1 :hide? t)
                            (("1" (expand "point_in_polygon_arb?")
                              (("1"
                                (split 1)
                                (("1"
                                  (hide +)
                                  (("1"
                                    (lemma
                                     "wedge_points_not_on_perimeter")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst - "i" "true")
                                        (("1"
                                          (use "apex_in_wedge")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (split 2)
                                  (("1"
                                    (hide +)
                                    (("1"
                                      (lemma
                                       "wedge_points_not_on_perimeter")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst - "i" "false")
                                          (("1"
                                            (use "apex_in_wedge")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (claim
                                     "%1 = add(G`vertices(i), %2)"
                                     nil
                                     (! 1 1 1)
                                     (! 2 1 1))
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (rewrite "card_add")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide +)
                                              (("1"
                                                (expand
                                                 "arb_crossing_set")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "vertex_wedge_apex")
                                                    (("1"
                                                      (use
                                                       "point_not_on_arb_ray_add")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "even_iff_odd_succ"
                                               :dir
                                               rl)
                                              (("2"
                                                (use "even_or_odd")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 3)
                                      (("2"
                                        (expand "arb_crossing_set")
                                        (("2"
                                          (apply-extensionality
                                           :hide?
                                           t)
                                          (("1"
                                            (expand "add")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (iff)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "counted_crossing_on_perimeter")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "wedge_points_not_on_perimeter")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1"
                                                               "G"
                                                               "i"
                                                               _)
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "true")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "false")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "point_on_arb_ray?")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (expand
                                                                           "vertex_wedge_apex")
                                                                          (("1"
                                                                            (case
                                                                             "d >= 2*vertex_wedge_radius(G)")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "d - 2*vertex_wedge_radius(G)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "b"
                                                                                 "^(vertex_bisect_vector(G, i))")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_neg")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-3
                                                                                      4))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               5)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "scal_neg")
                                                                                (("2"
                                                                                  (case-replace
                                                                                   "d = vertex_wedge_radius(G)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (equate
                                                                                     (!
                                                                                      -2
                                                                                      r)
                                                                                     "G`vertices(i) +
                                            (d - vertex_wedge_radius(G)) * ^(vertex_bisect_vector(G, i))")
                                                                                    (("1"
                                                                                      (use
                                                                                       "between_opposite_apex_points_in_wedges")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "b"
                                                                                         "^(vertex_bisect_vector(G, i))")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "point_on_arb_ray?")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "vertex_wedge_radius(G)")
                                                            (("1"
                                                              (expand
                                                               "vertex_wedge_apex")
                                                              (("1"
                                                                (rewrite
                                                                 "scal_neg")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (expand
                                                             "counted_crossing_arb?")
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "adjacent_edges_counted?")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "^")
                                                                      (("1"
                                                                        (rewrite*
                                                                         "cross_scales_1")
                                                                        (("1"
                                                                          (case
                                                                           "norm(vertex_bisect_vector(G, i)) > 0")
                                                                          (("1"
                                                                            (real-props)
                                                                            (("1"
                                                                              (use
                                                                               "bisect_vector_between")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "edges_of_polygon")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "between_rays?")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (use
                                                                                               "apex_point_between_rev_out")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "edges_of_polygon")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "vertex_wedge_apex")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "between_rays?")
                                                                                                      (("1"
                                                                                                        (rewrite*
                                                                                                         "scal_by_two_cancel_1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (equate
                                                                                                             "cross(G`vertices(i) - G`vertices(next_index(G, i)),
                                                                                             G`vertices(i) - G`vertices(prev_index(G, i)))"
                                                                                                             "-cross(G`vertices(prev_index(G, i)) - G`vertices(i),
                                                                                              G`vertices(next_index(G, i)) - G`vertices(i))")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (rewrite*
                                                                                                                   "cross_scales_2")
                                                                                                                  (("1"
                                                                                                                    (real-props)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "^")
                                                                                                                      (("1"
                                                                                                                        (rewrite*
                                                                                                                         "cross_scales_2")
                                                                                                                        (("1"
                                                                                                                          (real-props)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -3
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (ground)
                                                                                                                                (("1"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-1
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "cross_diff_1")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "cross_antisymmetric")
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (rewrite
                                                                                                                                   "cross_diff_1"
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "cross_antisymmetric"
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-2
                                                                                                1))
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "cross_antisymmetric")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                1))
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "cross_antisymmetric")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (use
                                                                               "vertex_bisect_vector_nonzero")
                                                                              (("2"
                                                                                (ground)
                                                                                (("2"
                                                                                  (use
                                                                                   "norm_eq_0")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (use
                                                                             "vertex_bisect_vector_nonzero")
                                                                            (("2"
                                                                              (use
                                                                               "norm_eq_0")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("3"
                                                                            (use
                                                                             "vertex_bisect_vector_nonzero")
                                                                            (("3"
                                                                              (use
                                                                               "norm_eq_0")
                                                                              (("3"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "point_on_arb_ray?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "d + 2*vertex_wedge_radius(G)")
                                                                (("2"
                                                                  (expand
                                                                   "vertex_wedge_apex")
                                                                  (("2"
                                                                    (rewrite
                                                                     "scal_neg")
                                                                    (("2"
                                                                      (name-replace
                                                                       "b"
                                                                       "^(vertex_bisect_vector(G, i))")
                                                                      (("2"
                                                                        (factor
                                                                         1
                                                                         r
                                                                         (2
                                                                          3))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (use
                                               "vertex_bisect_vector_nonzero")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep)
                                            (("3"
                                              (use
                                               "vertex_bisect_vector_nonzero")
                                              (("3" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (use
                                             "vertex_bisect_vector_nonzero")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "vertex_bisect_vector_nonzero") nil
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_out_not_in formula-decl nil polygon_membership nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (FALSE const-decl "bool" booleans nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (add_cancel2 formula-decl nil vectors_2D vectors)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (between_opposite_apex_points_in_wedges formula-decl nil
     vertex_wedges nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (d skolem-const-decl "nonneg_real" vertex_wedges nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (counted_crossing_on_perimeter formula-decl nil
     arb_direc_edge_crossing nil)
    (bisect_vector_between formula-decl nil vertex_wedges nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (between_rays? const-decl "bool" between_rays nil)
    (apex_point_between_rev_out formula-decl nil vertex_wedges nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (cross_diff_1 formula-decl nil vectors_cross_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (scal_by_two_cancel_1 formula-decl nil vectors_cross_2d nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (vertex_bisect_vector_nonzero formula-decl nil vertex_wedges nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (cross_scales_1 formula-decl nil vectors_cross_2d nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (adjacent_edges_counted? const-decl "bool" arb_direc_edge_crossing
     nil)
    (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (scal_add_left formula-decl nil vectors_2D vectors)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (even_iff_odd_succ formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (point_not_on_arb_ray_add formula-decl nil vectors_cross_2d nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (card_add formula-decl nil finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nonempty_add_finite application-judgement
     "non_empty_finite_set[point_2d]" vertex_injection nil)
    (apex_in_wedge formula-decl nil vertex_wedges nil)
    (wedge_points_not_on_perimeter formula-decl nil vertex_wedges nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (vertex_bisect_vector const-decl "vector_2d" vertex_wedges nil)
    (G skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (TRUE const-decl "bool" booleans nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (below type-eq-decl nil naturalnumbers nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (westward_point_outside 0
  (westward_point_outside-1 nil 3874129019
   ("" (skeep)
    (("" (ground)
      (("" (expand "point_outside_polygon?")
        ((""
          (inst +
           "(# body := (# length := 1, seq := lambda (i: below(1)): G`vertices(topleft_vertex_idx(G)) -
                                                          (# x := c, y := 0 #)  #), tail := (# x := -1, y := 0 #) #)")
          (("1" (expand "serp_ray_outside?")
            (("1" (ground)
              (("1" (skeep) nil nil)
               ("2" (skeep)
                (("2" (expand "point_on_polygon_perimeter?")
                  (("2" (skeep - t)
                    (("2" (use "leftmost_is_topleft_x")
                      (("2" (lemma "leftmost_vertex_val_is_min")
                        (("2" (expand "edge_of_polygon?")
                          (("2" (skeep)
                            (("2" (expand "edges_of_polygon")
                              (("2"
                                (inst-cp - "G" "i")
                                (("2"
                                  (inst - "G" "next_index(G,i)")
                                  (("2"
                                    (lemma "leftmost_xval_lt_segment")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (invoke
                                         (inst - "(%1)`x")
                                         (! -6 1))
                                        (("2"
                                          (ground)
                                          (("1"
                                            (hide -5)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (hide -5)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep) nil nil) ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (- const-decl "Vector" vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (leftmost_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_idx const-decl "{i: below(p`num_vertices) |
   p`vertices(i)`x = leftmost_vertex_val(p) AND
    p`vertices(i)`y = topleft_vertex_val(p)}" topleft_vertex nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (leftmost_is_topleft_x formula-decl nil topleft_vertex nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (pred type-eq-decl nil defined_types nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (leftmost_xval_lt_segment formula-decl nil topleft_vertex nil)
    (leftmost_vertex_val_is_min formula-decl nil topleft_vertex nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (sqrt_1 formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (point_outside_polygon? const-decl "bool" polygon_membership nil))
   shostak))
 (topleft_outward_apex_outside 0
  (topleft_outward_apex_outside-1 nil 3874129019
   ("" (skeep * t)
    (("" (lemma "westward_point_outside")
      (("" (inst - "G" "vertex_wedge_radius(G)")
        (("" (ground)
          (("" (lemma "extend_points_outside_polygon")
            (("" (inst?)
              (("" (assert)
                ((""
                  (inst - "(# p1 := G`vertices(topleft_vertex_idx(G)) -
                                        (# x := vertex_wedge_radius(G), y := 0 #),
                            p2 := vertex_wedge_apex(TRUE, G, topleft_vertex_idx(G)) #)")
                  (("" (ground)
                    (("1"
                      (inst -
                       "vertex_wedge_apex(TRUE, G, topleft_vertex_idx(G))")
                      (("1" (assert)
                        (("1" (expand "point_on_segment?")
                          (("1" (inst + "1") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skeep)
                        (("2" (use "apex_in_wedge")
                          (("2" (lemma "segment_points_in_wedge")
                            (("2"
                              (inst -
                               "G`vertices(topleft_vertex_idx(G)) -
                                                   (# x := vertex_wedge_radius(G), y := 0 #)"
                               "q" "G" "topleft_vertex_idx(G)" "true")
                              (("2"
                                (assert)
                                (("2"
                                  (ground)
                                  (("1"
                                    (use
                                     "wedge_points_not_on_perimeter")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (expand "ccw_vertex_order?")
                                    (("2"
                                      (hide-all-but (-6 1))
                                      (("2"
                                        (expand
                                         "point_in_vertex_wedge?")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand
                                             "point_between_edges?")
                                            (("1"
                                              (lemma
                                               "scaled_vector_between_rays_neg")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst
                                                   -
                                                   "(# x := 1, y := 0 #)"
                                                   "-vertex_wedge_radius(G)")
                                                  (("1"
                                                    (equate
                                                     "edges_of_polygon(G)(topleft_vertex_idx(G))`p1"
                                                     "G`vertices(topleft_vertex_idx(G))"
                                                     t)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but (-2 1))
                                    (("3"
                                      (expand "point_on_segment?")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst + "1-t")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (rewrite "add_comm")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((westward_point_outside formula-decl nil vertex_wedges nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (leftmost_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_idx const-decl "{i: below(p`num_vertices) |
   p`vertices(i)`x = leftmost_vertex_val(p) AND
    p`vertices(i)`y = topleft_vertex_val(p)}" topleft_vertex nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (TRUE const-decl "bool" booleans nil)
    (apex_in_wedge formula-decl nil vertex_wedges nil)
    (wedge_points_not_on_perimeter formula-decl nil vertex_wedges nil)
    (norm_neg formula-decl nil vectors_2D vectors)
    (sub_cancel formula-decl nil vectors_2D vectors)
    (scaled_vector_between_rays_neg formula-decl nil between_rays nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (between_rays? const-decl "bool" between_rays nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sqrt_square formula-decl nil sqrt reals)
    (norm const-decl "nnreal" vectors_2D vectors)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add_comm formula-decl nil vectors_2D vectors)
    (segment_points_in_wedge formula-decl nil vertex_wedges nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (extend_points_outside_polygon formula-decl nil polygon_membership
     nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak))
 (wedge_apex_points_outside_rec 0
  (wedge_apex_points_outside_rec-1 nil 3874129019
   ("" (skeep)
    (("" (generalize "i" "i" "below(G`num_vertices)")
      (("" (induct "i")
        (("1" (ground) nil nil)
         ("2" (ground)
          (("2" (expand "index_from_offset")
            (("2" (rewrite "rem_mod")
              (("2" (use "topleft_outward_apex_outside")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3"
            (name-replace*
             ("k" "index_from_offset(G, topleft_vertex_idx(G))(jb)"
              "kp1"
              "index_from_offset(G, topleft_vertex_idx(G))(jb+1)")
             :hide? t)
            (("3" (lemma "wedge_point_out_imp_all_wedge_points_out")
              (("3"
                (inst - "vertex_wedge_apex(TRUE, G, k)"
                 "wedge_connector_endpoint(G, k, true)" "G" "k")
                (("3" (ground)
                  (("1" (use "extend_points_outside_polygon")
                    (("1"
                      (inst -
                       "(# p1 := wedge_connector_endpoint(G, k, TRUE),
                  p2 := wedge_connector_endpoint(G, k, false) #)")
                      (("1" (ground)
                        (("1"
                          (inst -
                           "wedge_connector_endpoint(G, k, FALSE)")
                          (("1" (ground)
                            (("1"
                              (lemma
                               "wedge_point_out_imp_all_wedge_points_out")
                              (("1"
                                (inst
                                 -
                                 "wedge_connector_endpoint(G, k, FALSE)"
                                 "vertex_wedge_apex(TRUE, G, kp1)"
                                 "G"
                                 "kp1")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "connector_endpoint_in_wedge")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (equate
                                         "next_index(G,k)"
                                         "kp1")
                                        (("1"
                                          (hide-all-but (-4 1))
                                          (("1"
                                            (expand "kp1")
                                            (("1"
                                              (expand "next_index")
                                              (("1"
                                                (expand "k")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lemma
                                                     "rem_add_one")
                                                    (("1"
                                                      (expand
                                                       "index_from_offset")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "G`num_vertices"
                                                         "topleft_vertex_idx(G) + jb")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "apex_in_wedge")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "point_on_segment?")
                              (("2"
                                (inst + "1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "connector_not_on_perimeter")
                          (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (use "connector_endpoints_neq")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite "apex_in_wedge") nil nil)
                   ("3" (use "connector_endpoint_in_wedge")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (TRUE const-decl "bool" booleans nil)
    (index_from_offset const-decl "below(G`num_vertices)" vertex_wedges
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (leftmost_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_idx const-decl "{i: below(p`num_vertices) |
   p`vertices(i)`x = leftmost_vertex_val(p) AND
    p`vertices(i)`y = topleft_vertex_val(p)}" topleft_vertex nil)
    (wedge_point_out_imp_all_wedge_points_out formula-decl nil
     vertex_wedges nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (G skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (k skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (FALSE const-decl "bool" booleans nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (connector_not_on_perimeter formula-decl nil vertex_wedges nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rem_add_one formula-decl nil modulo_arithmetic nil)
    (kp1 skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (connector_endpoint_in_wedge formula-decl nil vertex_wedges nil)
    (apex_in_wedge formula-decl nil vertex_wedges nil)
    (connector_endpoints_neq formula-decl nil vertex_wedges nil)
    (extend_points_outside_polygon formula-decl nil polygon_membership
     nil)
    (wedge_connector_endpoint const-decl "point_2d" vertex_wedges nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (topleft_outward_apex_outside formula-decl nil vertex_wedges nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (wedge_apex_points_outside 0
  (wedge_apex_points_outside-1 nil 3874129019
   ("" (skeep)
    (("" (lemma "wedge_apex_points_outside_rec")
      (("" (lemma "index_from_offset_surjective")
        (("" (inst - "G" "topleft_vertex_idx(G)")
          (("" (expand "surjective?")
            (("" (inst - "i")
              (("" (skeep) (("" (inst?) (("" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wedge_apex_points_outside_rec formula-decl nil vertex_wedges nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (leftmost_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_idx const-decl "{i: below(p`num_vertices) |
   p`vertices(i)`x = leftmost_vertex_val(p) AND
    p`vertices(i)`y = topleft_vertex_val(p)}" topleft_vertex nil)
    (surjective? const-decl "bool" functions nil)
    (index_from_offset_surjective formula-decl nil vertex_wedges nil))
   shostak))
 (wedge_apex_points_inside 0
  (wedge_apex_points_inside-1 nil 3874129019
   ("" (skeep)
    (("" (use "wedge_apex_points_outside")
      (("" (use "outward_apex_outside_inward_inside")
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((wedge_apex_points_outside formula-decl nil vertex_wedges nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (outward_apex_outside_inward_inside formula-decl nil vertex_wedges
     nil))
   shostak))
 (all_wedge_points_outside 0
  (all_wedge_points_outside-1 nil 3874129019
   ("" (skeep)
    (("" (use "wedge_apex_points_outside")
      (("" (use "extend_points_outside_polygon")
        ((""
          (inst - "(# p1 := vertex_wedge_apex(true,G, i), p2 := p #)")
          (("1" (ground)
            (("1" (inst - "p")
              (("1" (assert)
                (("1" (expand "point_on_segment?")
                  (("1" (inst + "1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lemma "segment_points_in_wedge")
                (("2" (inst - "p" "q" "G" "i" "true")
                  (("2" (ground)
                    (("2" (assert)
                      (("2" (use "wedge_points_not_on_perimeter")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (use "apex_in_wedge") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wedge_apex_points_outside formula-decl nil vertex_wedges nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (G skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (p skolem-const-decl "point_2d" vertex_wedges nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (wedge_points_not_on_perimeter formula-decl nil vertex_wedges nil)
    (segment_points_in_wedge formula-decl nil vertex_wedges nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apex_in_wedge formula-decl nil vertex_wedges nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (TRUE const-decl "bool" booleans nil)
    (extend_points_outside_polygon formula-decl nil polygon_membership
     nil))
   shostak))
 (all_wedge_points_inside 0
  (all_wedge_points_inside-1 nil 3874129019
   ("" (skeep)
    (("" (use "wedge_apex_points_inside")
      (("" (use "extend_points_inside_polygon")
        ((""
          (inst - "(# p1 := vertex_wedge_apex(false,G, i), p2 := p #)")
          (("1" (ground)
            (("1" (inst - "p")
              (("1" (assert)
                (("1" (expand "point_on_segment?")
                  (("1" (inst + "1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lemma "segment_points_in_wedge")
                (("2" (inst - "p" "q" "G" "i" "false")
                  (("2" (ground)
                    (("2" (assert)
                      (("2" (use "wedge_points_not_on_perimeter")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (use "apex_in_wedge") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wedge_apex_points_inside formula-decl nil vertex_wedges nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (i skolem-const-decl "below(G`num_vertices)" vertex_wedges nil)
    (G skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (p skolem-const-decl "point_2d" vertex_wedges nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (wedge_points_not_on_perimeter formula-decl nil vertex_wedges nil)
    (segment_points_in_wedge formula-decl nil vertex_wedges nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apex_in_wedge formula-decl nil vertex_wedges nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (vertex_wedge_apex const-decl "point_2d" vertex_wedges nil)
    (FALSE const-decl "bool" booleans nil)
    (extend_points_inside_polygon formula-decl nil polygon_membership
     nil))
   shostak))
 (point_on_spanning_edge_between_rays 0
  (point_on_spanning_edge_between_rays-1 nil 3874129019
   ("" (skeep)
    (("" (case "point_outside_polygon?(q, C)")
      (("1" (use "perimeter_not_outside")
        (("1" (assert)
          (("1"
            (case "forall (p: point_2d): point_on_segment?(p, s) and
                                                          not segment_endpoint?(s)(p) implies not point_on_polygon_perimeter?(C)(p)")
            (("1" (case "segment_endpoint?(s)(q)")
              (("1" (expand "segment_endpoint?")
                (("1" (split -1)
                  (("1" (expand "point_on_polygon_perimeter?")
                    (("1" (inst + "edges_of_polygon(C)(i)")
                      (("1" (replace -1 1)
                        (("1" (replace -5 1 :dir rl)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "point_on_polygon_perimeter?")
                    (("2" (inst + "edges_of_polygon(C)(j)")
                      (("2" (replace -1)
                        (("2" (replace -6 :dir rl)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (case "3 * vertex_wedge_radius(C) <= norm(s`p2 - s`p1)")
                (("1"
                  (name-replace "r"
                   "s`p1 + vertex_wedge_radius(C) * ^(s`p2 - s`p1)")
                  (("1" (case "point_on_segment?(r,s)")
                    (("1" (inst-cp - "r")
                      (("1" (hide -7)
                        (("1" (ground)
                          (("1" (case "segment_endpoint?(s)(r)")
                            (("1" (expand "segment_endpoint?" -1)
                              (("1"
                                (expand "point_on_polygon_perimeter?")
                                (("1"
                                  (ground)
                                  (("1"
                                    (inst + "edges_of_polygon(C)(i)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (replace -7 :dir rl)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst + "edges_of_polygon(C)(j)")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (replace -8 :dir rl)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "r=q")
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -3 -11 :dir rl)
                                  (("1"
                                    (replace -8)
                                    (("1"
                                      (hide-all-but (-4 -11))
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (equate
                                             "s`p1 +
                                                                                                vertex_wedge_radius(C) / norm(s`p2 - s`p1) * (s`p2 - s`p1)
                                                                                                - s`p2"
                                             "((vertex_wedge_radius(C) - norm(s`p2-s`p1)) / norm(s`p2 - s`p1)) * (s`p2 - s`p1)")
                                            (("1"
                                              (rewrite "norm_scal")
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (real-props)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "extend_points_outside_polygon")
                                (("2"
                                  (inst
                                   -
                                   "q"
                                   "(# p1 := q, p2 := r #)"
                                   "C")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (inst - "r")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "in_wedge_or_on_edge")
                                          (("1"
                                            (inst - "r" "C" "i")
                                            (("1"
                                              (expand
                                               "point_on_polygon_perimeter?")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand
                                                   "point_in_vertex_wedge?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (use
                                                       "extend_points_between_edges")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst - "q")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "point_between_edges?")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               5
                                                               "edges_of_polygon(C)(i)")
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -10
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (replace
                                                             -10
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "edges_of_polygon(C)(i)")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "all_wedge_points_inside")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "point_out_not_in")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst? +)
                                                  nil
                                                  nil)
                                                 ("4"
                                                  (inst? +)
                                                  nil
                                                  nil)
                                                 ("5"
                                                  (replace
                                                   -3
                                                   1
                                                   :dir
                                                   rl)
                                                  (("5"
                                                    (replace -7)
                                                    (("5"
                                                      (assert)
                                                      (("5"
                                                        (expand "abs")
                                                        (("5"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "point_on_segment?")
                                          (("2"
                                            (inst + "1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (inst - "q_1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "point_on_subsegment")
                                              (("1"
                                                (inst
                                                 -
                                                 "q_1"
                                                 "(# p1 := q, p2 := r #)"
                                                 "s")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "subsegment?")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "proper_subsegment_excludes_endpoints")
                                              (("2"
                                                (inst
                                                 -
                                                 "q_1"
                                                 "(# p1 := q, p2 := r #)"
                                                 "s")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (expand
                                                     "subsegment?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "segment_endpoint?")
                            (("2" (ground)
                              (("1"
                                (replace -1 -3)
                                (("1"
                                  (hide-all-but -3)
                                  (("1"
                                    (name-replace
                                     "V"
                                     "vertex_wedge_radius(C) * ^(s`p2 - s`p1)")
                                    (("1"
                                      (cancel-add -1)
                                      (("1"
                                        (expand "V")
                                        (("1"
                                          (use "scal_eq_zero")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 -3)
                                (("2"
                                  (hide-all-but -3)
                                  (("2"
                                    (name-replace
                                     "V"
                                     "vertex_wedge_radius(C) * ^(s`p2 - s`p1)")
                                    (("2"
                                      (move-terms -1 l 1)
                                      (("2"
                                        (expand "V")
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (real-props)
                                            (("2"
                                              (lemma "scal_cancel")
                                              (("2"
                                                (inst
                                                 -
                                                 "vertex_wedge_radius(C) / norm(s`p2 - s`p1)"
                                                 "1"
                                                 "s`p2 - s`p1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1 1 :dir rl)
                      (("2"
                        (rewrite "offset_point_on_segment_iff_bounded")
                        (("2" (expand "length")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "vertex_wedge_radius")
                  (("2" (real-props)
                    (("2" (lemma "vertex_to_vertex_length_bound")
                      (("2" (inst - "C" "i" "j" "s")
                        (("2" (assert)
                          (("2" (expand "length")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -7 -8 3)
              (("2" (ground)
                (("1" (inst - "s")
                  (("1" (expand "only_vertex_intersections?")
                    (("1" (skeep)
                      (("1" (expand "point_on_polygon_perimeter?")
                        (("1" (skeep)
                          (("1" (inst - "e")
                            (("1" (ground)
                              (("1" (inst?) nil nil)
                               ("2"
                                (inst + "e")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (lemma "point_on_reverse_segment")
                                    (("2"
                                      (inst - "q" "s")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst - "reverse_segment(s)")
                  (("2" (expand "only_vertex_intersections?")
                    (("2" (skeep)
                      (("2" (expand "point_on_polygon_perimeter?")
                        (("2" (skeep)
                          (("2" (inst - "e")
                            (("2" (ground)
                              (("1"
                                (inst + "e")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (lemma "point_on_reverse_segment")
                                    (("1"
                                      (inst - "q" "s")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "reverse_reverse_segment")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (inst?)
                                (("3"
                                  (assert)
                                  (("3"
                                    (rewrite
                                     "point_on_reverse_segment")
                                    (("3"
                                      (expand "segment_endpoint?")
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (expand "reverse_segment")
                                          (("3" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "all_wedge_points_outside")
        (("2" (inst - "q" "C" "j")
          (("2" (assert)
            (("2" (expand "point_in_vertex_wedge?")
              (("2" (expand "point_between_edges?")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (C skolem-const-decl "ccw_simple_polygon" vertex_wedges nil)
    (s skolem-const-decl "segment_2d" vertex_wedges nil)
    (reverse_reverse_segment formula-decl nil segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (only_vertex_intersections? const-decl "bool" injection_props nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (vertex_on_edge formula-decl nil polygons_2d nil)
    (vertex_to_vertex_length_bound formula-decl nil vertex_wedges nil)
    (div_cancel1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length const-decl "posreal" segments_2d nil)
    (offset_point_on_segment_iff_bounded formula-decl nil segments_2d
     nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (r skolem-const-decl "Vector" vertex_wedges nil)
    (q skolem-const-decl "point_2d" vertex_wedges nil)
    (proper_subsegment_excludes_endpoints formula-decl nil
     segments_2d_props nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (in_wedge_or_on_edge formula-decl nil vertex_wedges nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (all_wedge_points_inside formula-decl nil vertex_wedges nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (extend_points_between_edges formula-decl nil vertex_wedges nil)
    (norm_zero formula-decl nil vectors_2D vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (extend_points_outside_polygon formula-decl nil polygon_membership
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (V skolem-const-decl "Nz_vector" vertex_wedges nil)
    (scal_cancel formula-decl nil vectors_2D vectors)
    (V skolem-const-decl "Nz_vector" vertex_wedges nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (segment_endpoint? const-decl "bool" segments_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (perimeter_not_outside formula-decl nil polygon_membership nil)
    (all_wedge_points_outside formula-decl nil vertex_wedges nil))
   shostak))
 (point_outside_imp_edge_partly_outside 0
  (point_outside_imp_edge_partly_outside-1 nil 3874129019
   ("" (skeep*)
    (("" (expand "point_on_polygon_perimeter?" -)
      (("" (skeep* - t)
        (("" (expand "edge_of_polygon?")
          (("" (skeep*)
            ((""
              (case "exists (k: below(H`num_vertices)): i = index_from_offset(H, i!1)(k)")
              (("1" (skeep)
                (("1" (generalize "u" "u")
                  (("1" (generalize "i" "j" "below(H`num_vertices)")
                    (("1" (generalize "e!1" "s")
                      (("1"
                        (generalize "k" "k" "below(H`num_vertices)")
                        (("1" (induct "k")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (expand "index_from_offset")
                                (("1"
                                  (rewrite "rem_mod")
                                  (("1"
                                    (lemma
                                     "between_points_on_perimeter")
                                    (("1"
                                      (inst - "p" "u!1" "G" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "u!1 = v")
                                            (("1"
                                              (use
                                               "perimeter_not_outside")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "point_on_polygon_perimeter?")
                                                  (("1"
                                                    (inst
                                                     +
                                                     "edges_of_polygon(G)(i!2)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "norm(u!1 - v) <= vertex_wedge_radius(G)")
                                              (("1"
                                                (inst + "j" "u!1" "v")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "point_on_polygon_perimeter?")
                                                    (("1"
                                                      (inst? +)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 +
                                                 "j"
                                                 "v + vertex_wedge_radius(G) * ^(u!1 - v)"
                                                 "v")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (split 4)
                                                      (("1"
                                                        (lemma
                                                         "point_on_subsegment")
                                                        (("1"
                                                          (inst? -)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "(# p1 := v, p2 := u!1 #)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "point_on_segment_has_offset")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "vertex_wedge_radius(G) / norm(u!1 - v)")
                                                                        (("1"
                                                                          (expand
                                                                           "^"
                                                                           1)
                                                                          (("1"
                                                                            (real-props)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "subsegment?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst? -)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "vertex_wedge_radius(G) / norm(u!1-v)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "^")
                                                              (("1"
                                                                (real-props)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (real-props)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "point_on_polygon_perimeter?")
                                                        (("3"
                                                          (inst
                                                           +
                                                           "edges_of_polygon(G)(i!2)")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep*)
                            (("2" (expand "index_from_offset")
                              (("2"
                                (lemma "rem_add_one")
                                (("2"
                                  (inst - "H`num_vertices" "i!1 + jb")
                                  (("2"
                                    (case
                                     "exists (w: point_2d): point_on_segment?(w, s) and not point_outside_polygon?(w,G)")
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (lemma
                                           "between_points_on_perimeter")
                                          (("1"
                                            (inst - "w" "u!1" "G" "s")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (case "u!1 = v")
                                                  (("1"
                                                    (use
                                                     "perimeter_not_outside")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "point_on_polygon_perimeter?")
                                                        (("1"
                                                          (inst
                                                           +
                                                           "edges_of_polygon(G)(i!2)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "norm(u!1 - v) <= vertex_wedge_radius(G)")
                                                    (("1"
                                                      (inst
                                                       +
                                                       "j"
                                                       "u!1"
                                                       "v")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "point_on_polygon_perimeter?")
                                                          (("1"
                                                            (inst? +)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       +
                                                       "j"
                                                       "v + vertex_wedge_radius(G) * ^(u!1 - v)"
                                                       "v")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "abs")
                                                          (("2"
                                                            (split 5)
                                                            (("1"
                                                              (lemma
                                                               "point_on_subsegment")
                                                              (("1"
                                                                (inst?
                                                                 -)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "(# p1 := v, p2 := u!1 #)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "point_on_segment_has_offset")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "vertex_wedge_radius(G) / norm(u!1 - v)")
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 1)
                                                                                (("1"
                                                                                  (real-props)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "subsegment?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst?)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "vertex_wedge_radius(G) / norm(u!1 - v)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "^")
                                                                    (("1"
                                                                      (real-props)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (real-props)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "point_on_polygon_perimeter?")
                                                              (("3"
                                                                (inst
                                                                 +
                                                                 "edges_of_polygon(G)(i!2)")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst
                                       -3
                                       "edges_of_polygon(H)(prev_index(H,j))"
                                       "prev_index(H,j)"
                                       "edges_of_polygon(H)(prev_index(H,j))`p2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -3)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2" (grind) nil nil))
                                            nil)
                                           ("3" (propax) nil nil)
                                           ("4"
                                            (equate
                                             "edges_of_polygon(H)(prev_index(H, j))`p2"
                                             "s`p1")
                                            (("1"
                                              (inst + "s`p1")
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "edges_of_polygon")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2"
                  (inst +
                   "if i >= i!1 then i - i!1 else H`num_vertices + i - i!1 endif")
                  (("1" (expand "index_from_offset")
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (rewrite "rem_mod") nil nil)
                         ("2" (use "rem_def")
                          (("2" (ground)
                            (("2" (inst + "1") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground) nil nil) ("3" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (index_from_offset const-decl "below(G`num_vertices)" vertex_wedges
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (vertex_wedge_radius const-decl "posreal" vertex_wedges nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (only_vertex_intersections? const-decl "bool" injection_props nil)
    (pred type-eq-decl nil defined_types nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (G skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (v skolem-const-decl "point_2d" vertex_wedges nil)
    (u!1 skolem-const-decl "point_2d" vertex_wedges nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (perimeter_not_outside formula-decl nil polygon_membership nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (between_points_on_perimeter formula-decl nil vertex_wedges nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (p1_on_segment formula-decl nil segments_2d nil)
    (p2_on_segment formula-decl nil segments_2d nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u!1 skolem-const-decl "point_2d" vertex_wedges nil)
    (v skolem-const-decl "point_2d" vertex_wedges nil)
    (rem_add_one formula-decl nil modulo_arithmetic nil)
    (H skolem-const-decl "simple_polygon_2d" vertex_wedges nil)
    (i skolem-const-decl "below(H`num_vertices)" vertex_wedges nil)
    (i!1 skolem-const-decl "below(H`num_vertices)" vertex_wedges nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (rem_def formula-decl nil modulo_arithmetic nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (contained_if_no_protruding_edges 0
  (contained_if_no_protruding_edges-1 nil 3874129019
   ("" (skeep)
    (("" (expand "polygon_contained?")
      (("" (skeep)
        (("" (use "point_out_not_in")
          (("" (assert)
            (("" (use "point_outside_imp_edge_partly_outside")
              (("" (ground)
                (("1" (hide -3)
                  (("1" (skeep)
                    (("1" (inst?)
                      (("1" (expand "only_vertex_intersections?")
                        (("1" (expand "point_on_polygon_perimeter?")
                          (("1" (skeep - t)
                            (("1" (inst - "e")
                              (("1"
                                (ground)
                                (("1"
                                  (lemma "perimeter_not_outside")
                                  (("1"
                                    (inst - "q" "G")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand
                                         "point_on_polygon_perimeter?")
                                        (("1"
                                          (inst 1 "e")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "perimeter_not_outside")
                                  (("2"
                                    (inst - "q" "G")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand
                                         "point_on_polygon_perimeter?")
                                        (("2"
                                          (inst
                                           1
                                           "reverse_segment(edges_of_polygon(H)(i))")
                                          (("2"
                                            (hide-all-but (-4 1))
                                            (("2"
                                              (rewrite
                                               "point_on_reverse_segment")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (inst?)
                                  (("3"
                                    (ground)
                                    (("3"
                                      (expand
                                       "no_edges_in_outward_wedges?")
                                      (("3"
                                        (expand "edge_of_polygon?" -3)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (expand
                                             "segment_endpoint?")
                                            (("3"
                                              (lemma
                                               "in_wedge_or_on_edge")
                                              (("3"
                                                (lemma
                                                 "perimeter_not_outside")
                                                (("3"
                                                  (inst -1 "q" "G")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (split -2)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "q"
                                                         "G"
                                                         "i!1")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "i!1")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "edges_of_polygon(H)(i)")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "edges_of_polygon"
                                                                 -4)
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "point_in_vertex_wedge?")
                                                                      (("1"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "extend_points_between_edges")
                                                                          (("1"
                                                                            (split
                                                                             -4)
                                                                            (("1"
                                                                              (inst?
                                                                               -)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "edges_of_polygon(H)(i)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "edges_of_polygon(H)(i)`p2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "point_on_polygon_perimeter?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           "e")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -
                                                                               "q"
                                                                               "reverse_segment(edges_of_polygon(H)(i))"
                                                                               "true"
                                                                               "G"
                                                                               "i!1")
                                                                              (("2"
                                                                                (rewrite*
                                                                                 "point_on_reverse_segment")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "edges_of_polygon(H)(i)`p1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "point_on_reverse_segment")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "reverse_segment")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "reverse_segment")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand
                                                                                       "reverse_segment")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "point_on_polygon_perimeter?")
                                                                                        (("3"
                                                                                          (inst
                                                                                           +
                                                                                           "e")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "all_wedge_points_inside")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "q"
                                                                             "G"
                                                                             "i!1")
                                                                            (("2"
                                                                              (expand
                                                                               "point_in_vertex_wedge?")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (use
                                                                                   "point_out_not_in")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "point_on_polygon_perimeter?")
                                                                          (("3"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (expand
                                                                           "point_on_polygon_perimeter?")
                                                                          (("4"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "edges_of_polygon"
                                                         -4)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "q"
                                                               "G"
                                                               "next_index(G,i!1)")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "next_index(G,i!1)")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "edges_of_polygon(H)(i)")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "point_in_vertex_wedge?")
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (lemma
                                                                             "extend_points_between_edges")
                                                                            (("1"
                                                                              (split
                                                                               -4)
                                                                              (("1"
                                                                                (inst?
                                                                                 -)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "edges_of_polygon(H)(i)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "edges_of_polygon(H)(i)`p2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "point_on_polygon_perimeter?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "e")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -
                                                                                 "q"
                                                                                 "reverse_segment(edges_of_polygon(H)(i))"
                                                                                 "true"
                                                                                 "G"
                                                                                 "next_index(G,i!1)")
                                                                                (("2"
                                                                                  (rewrite*
                                                                                   "point_on_reverse_segment")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "edges_of_polygon(H)(i)`p1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "point_on_reverse_segment")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "reverse_segment")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "reverse_segment")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "reverse_segment")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "point_on_polygon_perimeter?")
                                                                                          (("3"
                                                                                            (inst
                                                                                             +
                                                                                             "e")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "all_wedge_points_inside")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "q"
                                                                               "G"
                                                                               "next_index(G,i!1)")
                                                                              (("2"
                                                                                (expand
                                                                                 "point_in_vertex_wedge?")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (use
                                                                                     "point_out_not_in")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             "point_on_polygon_perimeter?")
                                                                            (("3"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (expand
                                                                             "point_on_polygon_perimeter?")
                                                                            (("4"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (ground)
                    (("1" (inst + "q")
                      (("1" (assert)
                        (("1" (use "perimeter_not_outside")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst + "q")
                      (("2" (assert)
                        (("2" (use "point_out_not_in")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst + "p") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polygon_contained? const-decl "bool" horiz_edge_crossing nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (ccw_simple_polygon type-eq-decl nil polygon_attributes nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_outside_imp_edge_partly_outside formula-decl nil
     vertex_wedges nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (no_edges_in_outward_wedges? const-decl "bool" vertex_wedges nil)
    (in_wedge_or_on_edge formula-decl nil vertex_wedges nil)
    (point_in_vertex_wedge? const-decl "bool" vertex_wedges nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (all_wedge_points_inside formula-decl nil vertex_wedges nil)
    (extend_points_between_edges formula-decl nil vertex_wedges nil)
    (p1_on_segment formula-decl nil segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (p2_on_segment formula-decl nil segments_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (segment_endpoint? const-decl "bool" segments_2d nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (perimeter_not_outside formula-decl nil polygon_membership nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (only_vertex_intersections? const-decl "bool" injection_props nil))
   shostak)))

