(merge_well_formed
 (segment_does_not_enter_own_polygon 0
  (segment_does_not_enter_own_polygon-1 nil 3874129022
   ("" (skeep*)
    (("" (expand "segment_enters_polygon_alt?")
      (("" (skeep)
        (("" (expand "point_in_polygon?")
          (("" (flatten)
            (("" (expand "point_on_polygon_perimeter?")
              (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rightward_segment_offset_on_connector 0
  (rightward_segment_offset_on_connector-1 nil 3874129022
   ("" (skeep)
    (("" (assert)
      (("" (expand "point_on_segment?")
        (("" (inst + "1/2")
          (("" (ground)
            (("" (expand "rightward_segment_offset")
              (("" (expand "connector_segment")
                (("" (expand "wedge_connector_endpoint")
                  (("" (expand "edges_of_polygon")
                    (("" (expand "segment_midpoint")
                      ((""
                        (name-replace "v"
                         "G`vertices(next_index(G, i)) - G`vertices(i)")
                        (("" (mult-by 1 "2")
                          (("1" (distrib 1)
                            (("1" (cancel-add 1)
                              (("1"
                                (expand "outward_edge_offset_dist")
                                (("1"
                                  (equate
                                   "sqrt(1 - sq(wedge_connector_sine(G))) * vertex_wedge_radius(G) *
                     ^(v)"
                                   "vertex_wedge_radius(G) * sqrt(1 - sq(wedge_connector_sine(G))) * ^(v)")
                                  (("1"
                                    (cancel-add 1)
                                    (("1"
                                      (factor 1 r)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "wedge_connector_sine_sq_bound")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (connector_points_outside 0
  (connector_points_outside-1 nil 3874129022
   ("" (skeep)
    (("" (expand "connector_segment")
      (("" (lemma "connector_endpoint_in_wedge")
        (("" (inst - "G" "i" "true")
          (("" (assert)
            (("" (use "all_wedge_points_outside")
              (("" (assert)
                (("" (use "connector_not_on_perimeter")
                  (("" (assert)
                    (("" (inst?)
                      (("" (assert)
                        (("" (lemma "extend_points_outside_polygon")
                          (("" (inst?)
                            (("" (inst?)
                              (("1"
                                (ground)
                                (("1"
                                  (inst - "r")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (use "connector_endpoints_neq")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rightward_nearby_ccw_points_outside 0
  (rightward_nearby_ccw_points_outside-1 nil 3874129022
   ("" (skeep)
    (("" (expand "rightward_nearby_points_outside?")
      (("" (skeep)
        ((""
          (case "point_outside_polygon?(
                                     rightward_segment_offset(edges_of_polygon(G)(i),
                                                              outward_edge_offset_dist(G)), G)")
          (("1" (lemma "extend_points_outside_polygon_excl")
            (("1"
              (inst - "rightward_segment_offset(edges_of_polygon(G)(i),
                                                        outward_edge_offset_dist(G))"
               "(# p1 := rightward_segment_offset(edges_of_polygon(G)(i),
                                                        outward_edge_offset_dist(G)),
                       p2 := rightward_segment_offset(edges_of_polygon(G)(i), 0) #)"
               "G")
              (("1" (ground)
                (("1"
                  (inst -
                   "rightward_segment_offset(edges_of_polygon(G)(i), d)")
                  (("1" (ground)
                    (("1" (hide -1 2)
                      (("1" (expand "rightward_segment_offset")
                        (("1" (assert)
                          (("1"
                            (name-replace*
                             ("m"
                              "segment_midpoint(edges_of_polygon(G)(i))"
                              "e" "edges_of_polygon(G)(i)" "w"
                              "outward_edge_offset_dist(G)"))
                            (("1"
                              (case "perp_left(e`p2 - e`p1) = zero")
                              (("1"
                                (hide-all-but -1)
                                (("1"
                                  (expand "perp_left")
                                  (("1"
                                    (use "comps_eq")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (typepred "e`p2")
                                        (("1"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite
                                 "point_on_segment_has_norm_offset")
                                (("2"
                                  (expand "length")
                                  (("2"
                                    (equate
                                     "m - (m + w * ^(perp_left(e`p2 - e`p1)))"
                                     "- w * ^(perp_left(e`p2 - e`p1))")
                                    (("1"
                                      (rewrite "norm_scal")
                                      (("1"
                                        (rewrite "normalize_scal")
                                        (("1"
                                          (rewrite
                                           "normalize_normalize")
                                          (("1"
                                            (expand "sign")
                                            (("1"
                                              (inst + "w - d")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (name-replace
                                                   "v"
                                                   "^(perp_left(e`p2 - e`p1))")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind-with-ext) nil nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 1)
                      (("2" (expand "rightward_segment_offset")
                        (("2" (assert)
                          (("2"
                            (name-replace*
                             ("m"
                              "segment_midpoint(edges_of_polygon(G)(i))"
                              "v"
                              "^(perp_left(edges_of_polygon(G)(i)`p2 - edges_of_polygon(G)(i)`p1))"))
                            (("2" (cancel-add -3)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (hide -3 2)
                    (("2" (expand "rightward_segment_offset")
                      (("2" (assert)
                        (("2" (rewrite "point_on_segment_has_offset")
                          (("2" (skeep)
                            (("2"
                              (name-replace "v"
                               "^(perp_left(edges_of_polygon(G)(i)`p2 -
                                                edges_of_polygon(G)(i)`p1))")
                              (("2"
                                (equate
                                 "segment_midpoint(edges_of_polygon(G)(i)) -
                                     (segment_midpoint(edges_of_polygon(G)(i)) +
                                       outward_edge_offset_dist(G) * v)"
                                 "-outward_edge_offset_dist(G) * v")
                                (("1"
                                  (equate
                                   "segment_midpoint(edges_of_polygon(G)(i)) +
                                        outward_edge_offset_dist(G) * v
                                        + d!1 * (-outward_edge_offset_dist(G) * v)"
                                   "segment_midpoint(edges_of_polygon(G)(i)) +
                                        (1 - d!1) * outward_edge_offset_dist(G) * v")
                                  (("1"
                                    (case-replace "d!1 = 1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (lemma
                                       "nearby_perp_left_segment_not_on_perim")
                                      (("2"
                                        (inst - "G" "i" "1 - d!1")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand "v")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind-with-ext) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (cancel-add 1)
                                    (("2" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (expand "rightward_segment_offset")
                  (("2" (assert)
                    (("2"
                      (name-replace*
                       ("m" "segment_midpoint(edges_of_polygon(G)(i))"
                        "v"
                        "^(perp_left(edges_of_polygon(G)(i)`p2 - edges_of_polygon(G)(i)`p1))"))
                      (("2" (cancel-add -3) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (use "connector_points_outside")
              (("2" (assert)
                (("2" (use "rightward_segment_offset_on_connector")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftward_nearby_ccw_points_inside 0
  (leftward_nearby_ccw_points_inside-1 nil 3874129022
   ("" (skeep)
    (("" (use "rightward_nearby_ccw_points_outside")
      (("" (expand "leftward_nearby_points_inside?")
        (("" (expand "rightward_nearby_points_outside?")
          (("" (skeep)
            ((""
              (name-replace "k" "min(d, outward_edge_offset_dist(G))")
              (("" (inst - "k")
                (("" (assert)
                  (("" (lemma "point_in_polygon_conds_equiv")
                    ((""
                      (inst -
                       "leftward_segment_offset(edges_of_polygon(G)(i), d)"
                       _ "G")
                      (("" (name-replace "e" "edges_of_polygon(G)(i)")
                        (("" (case "e`p2 - e`p1 = zero")
                          (("1" (assert) nil nil)
                           ("2" (inst - "^(perp_right(e`p2 - e`p1))")
                            (("1" (assert)
                              (("1"
                                (expand "point_in_polygon_arb?")
                                (("1"
                                  (lemma
                                   "nearby_perp_right_segment_not_on_perim")
                                  (("1"
                                    (name-replace
                                     "b"
                                     "d / inward_edge_offset_dist(G)")
                                    (("1"
                                      (inst - "G" "i" "b")
                                      (("1"
                                        (skoletin*)
                                        (("1"
                                          (equate "e_1" "e")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand
                                                 "leftward_segment_offset")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "point_out_not_in")
                                                (("2"
                                                  (inst
                                                   -
                                                   "rightward_segment_offset(e, k)"
                                                   "G")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "point_in_polygon_conds_equiv")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "^(perp_right(e`p2 - e`p1))")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "point_in_polygon_arb?")
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (use
                                                                   "perimeter_not_outside")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "arb_crossings_before_diff")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "rightward_segment_offset(e, k)"
                                                                     "leftward_segment_offset(e, d)"
                                                                     "^(perp_right(e`p2 - e`p1))"
                                                                     "G")
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (equate
                                                                         "set_before_p(arb_crossing_set(rightward_segment_offset
                                                                                                    (e, k),
                                                                                                    ^(perp_right(e`p2 - e`p1)),
                                                                                                    G),
                                                                                   leftward_segment_offset(e, d),
                                                                                   rightward_segment_offset(e, k))"
                                                                         "singleton(m)")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (equate
                                                                             "card(difference(arb_crossing_set(rightward_segment_offset(e, k),
                                                                                                        ^(perp_right(e`p2 - e`p1)),
                                                                                                        G),
                                                                                       singleton(m)))"
                                                                             "card(arb_crossing_set(rightward_segment_offset(e, k),
                                                                                                        ^(perp_right(e`p2 - e`p1)),
                                                                                                        G)) - 1")
                                                                            (("1"
                                                                              (rewrite
                                                                               "odd_iff_even_succ"
                                                                               3)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "even_iff_not_odd")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -1
                                                                               -8
                                                                               2
                                                                               3
                                                                               4)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "remove_as_difference"
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "card_remove")
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "arb_crossing_set")
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "point_on_arb_ray?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "rightward_segment_offset")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "k")
                                                                                                (("1"
                                                                                                  (equate
                                                                                                   "^(perp_right(e`p2 - e`p1))"
                                                                                                   "-^(perp_left(e`p2 - e`p1))")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "scal_neg")
                                                                                                    (("1"
                                                                                                      (real-props)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind-with-ext)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "counted_crossing_arb?")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "interior_point_is_nonvertex")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "m"
                                                                                                   "G"
                                                                                                   "1/2"
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "segment_midpoint")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (distrib
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "edges_of_polygon")
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "e")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "point_on_segment?")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "1/2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "segment_midpoint")
                                                                                                          (("1"
                                                                                                            (distrib
                                                                                                             -2)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "perp_right_not_parallel")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "e`p2 - e`p1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "parallel?")
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "^"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (real-props)
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "edges_of_polygon")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "e")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "edge_of_polygon?")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2
                                                                           3
                                                                           4)
                                                                          (("2"
                                                                            (expand
                                                                             "singleton")
                                                                            (("2"
                                                                              (expand
                                                                               "set_before_p")
                                                                              (("2"
                                                                                (apply-extensionality
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (iff)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "arb_crossing_set")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "point_on_arb_ray?")
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "rightward_segment_offset")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "leftward_segment_offset")
                                                                                                      (("1"
                                                                                                        (equate
                                                                                                         "norm(segment_midpoint(e) + d * ^(perp_right(e`p2 - e`p1)) -
                                                                         (segment_midpoint(e) + k * ^(perp_left(e`p2 - e`p1))))"
                                                                                                         "k + d")
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "^(perp_left(e`p2 - e`p1)) = -^(perp_right(e`p2 - e`p1))")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "scal_neg")
                                                                                                            (("1"
                                                                                                              (real-props)
                                                                                                              (("1"
                                                                                                                (factor
                                                                                                                 -2
                                                                                                                 r
                                                                                                                 (2
                                                                                                                  3))
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "point_on_polygon_perimeter?(G)(x!1)")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "k < d!1")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "nearby_perp_right_segment_not_on_perim")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "G"
                                                                                                                         "i"
                                                                                                                         "(d!1 - k) / inward_edge_offset_dist(G)")
                                                                                                                        (("1"
                                                                                                                          (ground)
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            (("1"
                                                                                                                              (real-props)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "e")
                                                                                                                                (("1"
                                                                                                                                  (equate
                                                                                                                                   "-k + d!1"
                                                                                                                                   "d!1 - k"
                                                                                                                                   (assert))
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "add_comm")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (real-props)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (real-props)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case-replace
                                                                                                                       "k = d!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (lemma
                                                                                                                         "nearby_perp_left_segment_not_on_perim")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "G"
                                                                                                                           "i"
                                                                                                                           "(k - d!1) / outward_edge_offset_dist(G)")
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            (("1"
                                                                                                                              (ground)
                                                                                                                              (("1"
                                                                                                                                (real-props)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "e")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "scal_neg")
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "add_comm")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (real-props)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (real-props)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "counted_crossing_arb?")
                                                                                                                    (("2"
                                                                                                                      (ground)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "vertex_on_perimeter")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skeep
                                                                                                                         -
                                                                                                                         t)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "point_on_polygon_perimeter?")
                                                                                                                          (("2"
                                                                                                                            (inst?
                                                                                                                             +)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (grind-with-ext)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (equate
                                                                                                             "^(perp_left(e`p2 - e`p1))"
                                                                                                             "-^(perp_right(e`p2 - e`p1))")
                                                                                                            (("1"
                                                                                                              (cancel-add!
                                                                                                               (!
                                                                                                                1
                                                                                                                l
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "scal_neg")
                                                                                                                (("1"
                                                                                                                  (factor!
                                                                                                                   (!
                                                                                                                    1
                                                                                                                    l
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "abs")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (grind-with-ext)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "arb_crossing_set")
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "rightward_segment_offset")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "point_on_arb_ray?")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "k")
                                                                                                (("1"
                                                                                                  (equate
                                                                                                   "^(perp_right(e`p2 - e`p1))"
                                                                                                   "-^(perp_left(e`p2 - e`p1))")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "scal_neg")
                                                                                                    (("1"
                                                                                                      (real-props)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "e")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind-with-ext)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "counted_crossing_arb?")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "vertex?")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "i!1 = i")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "segment_midpoint")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -7
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "edges_of_polygon")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -5
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (distrib
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (name-replace*
                                                                                                                   ("v"
                                                                                                                    "G`vertices(i)"
                                                                                                                    "w"
                                                                                                                    "G`vertices(next_index(G, i))"))
                                                                                                                  (("1"
                                                                                                                    (move-terms
                                                                                                                     -3
                                                                                                                     r
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (factor
                                                                                                                       -3
                                                                                                                       l)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (mult-by
                                                                                                                           -3
                                                                                                                           "2")
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "vertex_neq_next")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "G"
                                                                                                                               "i")
                                                                                                                              (("1"
                                                                                                                                (ground)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "point_on_segment?(m, edges_of_polygon(G)(i!1)) AND
                                                                                                    point_on_segment?(m, edges_of_polygon(G)(i)) AND
                                                                                                    m /= edges_of_polygon(G)(i!1)`p2 AND m /= edges_of_polygon(G)(i)`p2")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "points_on_distinct_edges_differ")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "i!1 < i")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "m"
                                                                                                               "G"
                                                                                                               "i!1"
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "m"
                                                                                                               "G"
                                                                                                               "i"
                                                                                                               "i!1")
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "segment_midpoint")
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "point_on_segment?")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "edges_of_polygon")
                                                                                                                        (("1"
                                                                                                                          (ground)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "point_on_segment?")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "edges_of_polygon")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "1/2")
                                                                                                                      (("2"
                                                                                                                        (ground)
                                                                                                                        (("2"
                                                                                                                          (distrib
                                                                                                                           -1)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (expand
                                                                                                                   "edges_of_polygon")
                                                                                                                  (("3"
                                                                                                                    (lemma
                                                                                                                     "vertex_neq_next")
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "G"
                                                                                                                       "i!1")
                                                                                                                      (("3"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (expand
                                                                                                                   "edges_of_polygon")
                                                                                                                  (("4"
                                                                                                                    (distrib
                                                                                                                     -1)
                                                                                                                    (("4"
                                                                                                                      (name-replace*
                                                                                                                       ("p1"
                                                                                                                        "G`vertices(i)"
                                                                                                                        "p2"
                                                                                                                        "G`vertices(next_index(G, i))"))
                                                                                                                      (("4"
                                                                                                                        (move-terms
                                                                                                                         -3
                                                                                                                         l
                                                                                                                         2)
                                                                                                                        (("4"
                                                                                                                          (factor
                                                                                                                           -3
                                                                                                                           r)
                                                                                                                          (("4"
                                                                                                                            (assert)
                                                                                                                            (("4"
                                                                                                                              (lemma
                                                                                                                               "vertex_neq_next")
                                                                                                                              (("4"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "G"
                                                                                                                                 "i")
                                                                                                                                (("4"
                                                                                                                                  (ground)
                                                                                                                                  (("4"
                                                                                                                                    (mult-by
                                                                                                                                     -3
                                                                                                                                     "2")
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "e")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "point_on_segment?")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "1/2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "segment_midpoint")
                                                                                                          (("1"
                                                                                                            (distrib
                                                                                                             -3)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "perp_right_not_parallel")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "e`p2 - e`p1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "parallel?")
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "^"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (real-props)
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "e")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "edge_of_polygon?")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "rightward_segment_offset")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "leftward_segment_offset")
                                                                                          (("3"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("3"
                                                                                              (equate
                                                                                               "^(perp_right(e`p2 - e`p1))"
                                                                                               "-^(perp_left(e`p2 - e`p1))")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "scal_neg")
                                                                                                (("1"
                                                                                                  (equate
                                                                                                   "segment_midpoint(e) + (-d) * ^(perp_left(e`p2 - e`p1)) -
                                                                                                       (segment_midpoint(e) + k * ^(perp_left(e`p2 - e`p1)))"
                                                                                                   "-(k + d) * ^(perp_left(e`p2 - e`p1))")
                                                                                                  (("1"
                                                                                                    (equate
                                                                                                     "segment_midpoint(e) -
                                                                                                              (segment_midpoint(e) + k * ^(perp_left(e`p2 - e`p1)))"
                                                                                                     "-k * ^(perp_left(e`p2 - e`p1))")
                                                                                                    (("1"
                                                                                                      (rewrite*
                                                                                                       "norm_scal")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "abs")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind-with-ext)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind-with-ext)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind-with-ext)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    3))
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "perp_right")
                                                                                      (("2"
                                                                                        (use
                                                                                         "comps_eq")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (grind-with-ext)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-6
                                                                          1))
                                                                        (("2"
                                                                          (expand
                                                                           "point_on_arb_ray?")
                                                                          (("2"
                                                                            (expand
                                                                             "leftward_segment_offset")
                                                                            (("2"
                                                                              (expand
                                                                               "rightward_segment_offset")
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "d + k")
                                                                                (("2"
                                                                                  (cancel-add
                                                                                   1)
                                                                                  (("2"
                                                                                    (equate
                                                                                     "^(perp_left(e`p2 - e`p1))"
                                                                                     "-^(perp_right(e`p2 - e`p1))")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "scal_neg")
                                                                                      (("1"
                                                                                        (factor
                                                                                         1
                                                                                         r)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (grind-with-ext)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -5 1 :dir rl)
                                              (("2"
                                                (real-props)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "e")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 2))
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "perp_right")
                                  (("2"
                                    (use "comps_eq")
                                    (("2"
                                      (assert)
                                      (("2" (grind-with-ext) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_polygon_has_ccw_order 0
  (injected_polygon_has_ccw_order-1 nil 3874129022
   ("" (skeep*)
    (("" (expand "ccw_vertex_order?")
      (("" (use "injected_topleft_vertex_same")
        (("" (ground)
          (("" (expand "point_between_edges?")
            ((""
              (name-replace*
               ("a1" "edges_of_polygon(A)
                                             (prev_index(A, topleft_vertex_idx(A)))"
                "a2" "edges_of_polygon(A)(topleft_vertex_idx(A))"))
              ((""
                (name-replace*
                 ("am1" "edges_of_polygon(Am)
                                             (prev_index(Am, topleft_vertex_idx(Am)))"
                  "am2"
                  "edges_of_polygon(Am)(topleft_vertex_idx(Am))"))
                (("" (lemma "collinear_segments_between_rays")
                  (("" (replace -6 1 :dir rl)
                    ((""
                      (name-replace "r"
                       "A`vertices(topleft_vertex_idx(A)) -
                           (# x := 1, y := 0 #)")
                      (("" (inst - "a1" "a2" _ _ "r" _ _)
                        ((""
                          (inst - "am1`p1" "am2`p2" "length(am1)"
                           "length(am2)")
                          (("" (ground)
                            (("1"
                              (case "(# p1 := am1`p1, p2 := a1`p2 #) = am1 and
                                               (# p1 := a2`p1, p2 := am2`p2 #) = am2")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 -7 -8 2)
                                (("2" (grind-with-ext) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-3 -4 1))
                              (("2" (grind) nil nil)) nil)
                             ("3" (hide -7 2)
                              (("3"
                                (lemma
                                 "injected_edge_same_dir_as_original")
                                (("3"
                                  (inst
                                   -
                                   "A"
                                   "B"
                                   "Am"
                                   "Bm"
                                   "prev_index(A, topleft_vertex_idx(A))"
                                   "prev_index(Am, topleft_vertex_idx(Am))"
                                   "a1"
                                   "am1")
                                  (("3"
                                    (ground)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (equate "a1`p2" "am1`p2")
                                        (("1"
                                          (use
                                           "segment_far_endpoint_length")
                                          (("1"
                                            (hide-all-but (-1 1))
                                            (("1"
                                              (name-replace
                                               "v"
                                               "^(am1`p2 - am1`p1)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -5 1 :dir rl)
                                          (("2"
                                            (replace -3 1 :dir rl)
                                            (("2"
                                              (expand
                                               "edges_of_polygon"
                                               1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -2 2 :dir rl)
                                      (("2"
                                        (replace -4 2 :dir rl)
                                        (("2"
                                          (expand "edges_of_polygon" 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide -7 2)
                              (("4"
                                (lemma
                                 "injected_edge_same_dir_as_original")
                                (("4"
                                  (inst
                                   -
                                   "A"
                                   "B"
                                   "Am"
                                   "Bm"
                                   "topleft_vertex_idx(A)"
                                   "topleft_vertex_idx(Am)"
                                   "a2"
                                   "am2")
                                  (("4"
                                    (ground)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case "a2`p1 = am2`p1")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (use
                                             "segment_far_endpoint_length")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -2 1 :dir rl)
                                          (("2"
                                            (replace -4 1 :dir rl)
                                            (("2"
                                              (expand
                                               "edges_of_polygon"
                                               1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -3 1 :dir rl)
                                      (("2"
                                        (replace -1 1 :dir rl)
                                        (("2"
                                          (expand "edges_of_polygon" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_polygons_have_ccw_order 0
  (injected_polygons_have_ccw_order-1 nil 3874129022
   ("" (skeep*)
    (("" (lemma "injected_polygon_has_ccw_order")
      (("" (inst-cp - "A" "B" "Am" "Bm")
        (("" (inst - "B" "A" "Bm" "Am")
          (("1" (assert)
            (("1" (assert)
              (("1" (use "inject_vertices_into_polygon_comm")
                (("1" (ground) nil nil)) nil))
              nil))
            nil)
           ("2" (use "merge_pre_condition_symmetric")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_polygon_has_merge_precondition 0
  (injected_polygon_has_merge_precondition-1 nil 3874129022
   ("" (skeep + t)
    (("" (skeep)
      (("" (expand "merge_pre_condition")
        (("" (skeep)
          (("" (lemma "injected_interior_points_same")
            (("" (inst-cp - "A" "B" "Am" "Bm" "p")
              (("" (inst - "B" "A" "Bm" "Am" "p")
                (("1" (inst?)
                  (("1" (ground)
                    (("1" (use "inject_vertices_into_polygon_comm")
                      (("1" (ground) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (use "merge_pre_condition_symmetric")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_vertex_neq_between_point_TCC1 0
  (next_vertex_neq_between_point_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_vertex_neq_between_point subtype "merge_well_formed.i"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (next_vertex_neq_between_point_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (next_vertex_neq_between_point subtype "merge_well_formed.i"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (next_vertex_neq_between_point_TCC2 0
  (next_vertex_neq_between_point_TCC2-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_vertex_neq_between_point subtype "merge_well_formed.j"
    "naturalnumbers.below(merge_well_formed.B`num_vertices)"))
  (next_vertex_neq_between_point_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (next_vertex_neq_between_point subtype "merge_well_formed.j"
    "naturalnumbers.below(merge_well_formed.B`num_vertices)")))
 (next_vertex_neq_between_point 0
  (next_vertex_neq_between_point-1 nil 3874129022
   ("" (skeep)
    (("" (use "point_between_rays_not_on_rays")
      (("" (assert)
        (("" (flatten)
          (("" (hide 3)
            (("" (expand "point_on_arb_ray?")
              (("" (ground)
                (("1" (inst 1 "length(edges_of_polygon(A)(i))")
                  (("1" (expand "^" 1)
                    (("1" (expand "length")
                      (("1" (real-props)
                        (("1" (expand "edges_of_polygon" 1)
                          (("1" (replace -1 :dir rl)
                            (("1" (hide-all-but 1)
                              (("1" (grind-with-ext) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 1)
                  (("2" (inst + "length(edges_of_polygon(B)(j))")
                    (("2" (expand "^")
                      (("2" (expand "length")
                        (("2" (real-props)
                          (("2" (expand "edges_of_polygon")
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (hide-all-but 1)
                                (("2" (grind-with-ext) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (inc_or_outg_edge_invariant 0
  (inc_or_outg_edge_invariant-1 nil 3874129022
   ("" (skeep)
    (("" (induct "k")
      (("1" (ground)
        (("1" (skeep)
          (("1" (expand "incoming_edge_of_C?")
            (("1" (skeep)
              (("1" (inst + "0")
                (("1" (equate "l" "0" t)
                  (("1" (assert)
                    (("1" (expand "outgoing_edge_of_C?")
                      (("1" (equate "int_index(A)(j)" "j")
                        (("1"
                          (case "vertex?(C)(edges_of_polygon(A)(j)`p1)")
                          (("1" (expand "vertex?")
                            (("1" (skeep)
                              (("1"
                                (inst
                                 +
                                 "i"
                                 "edges_of_polygon(A)(j)`p1 + vertex_wedge_radius(C) * ^(edges_of_polygon(A)(j)`p2 - edges_of_polygon(A)(j)`p1)")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "point_add_scal_neq_point")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite
                                     "offset_point_on_segment_iff_bounded")
                                    (("2"
                                      (use
                                       "vertex_to_vertex_length_bound")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (expand
                                             "vertex_wedge_radius")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "point_in_vertex_wedge?")
                                    (("3"
                                      (ground)
                                      (("1"
                                        (lemma
                                         "extend_points_between_edges")
                                        (("1"
                                          (inst
                                           -
                                           "q"
                                           "edges_of_polygon(A)(j)"
                                           "true"
                                           "C"
                                           "i")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "offset_point_on_segment_iff_bounded")
                                                  (("1"
                                                    (use
                                                     "vertex_to_vertex_length_bound")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "vertex_wedge_radius")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "wedge_points_not_on_perimeter")
                                              (("2"
                                                (inst
                                                 -
                                                 "q"
                                                 "C"
                                                 "j_1"
                                                 "true")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (expand
                                                     "point_on_polygon_perimeter?")
                                                    (("2"
                                                      (inst
                                                       +
                                                       "edges_of_polygon(C)(i)")
                                                      (("2"
                                                        (replace -1 1)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2 3)
                                              (("3"
                                                (expand
                                                 "point_between_edges?")
                                                (("3"
                                                  (lemma
                                                   "point_on_spanning_edge_between_rays")
                                                  (("3"
                                                    (inst
                                                     -
                                                     "A"
                                                     "C"
                                                     "i"
                                                     "j_1"
                                                     "edges_of_polygon(A)(j)"
                                                     "q")
                                                    (("3"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 :dir rl)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "abs")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (use "all_wedge_points_outside")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma
                                   "extend_points_outside_polygon")
                                  (("2"
                                    (inst
                                     -
                                     "q"
                                     "(# p1 := q, p2 := A`vertices(j) #)"
                                     "C")
                                    (("2"
                                      (ground)
                                      (("1"
                                        (inst - "A`vertices(j)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "point_on_segment?"
                                             +)
                                            (("1"
                                              (inst + "1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (expand "vertex?")
                                          (("2"
                                            (case
                                             "q_1 = A`vertices(j)")
                                            (("1"
                                              (expand
                                               "point_on_polygon_perimeter?")
                                              (("1"
                                                (skeep - t)
                                                (("1"
                                                  (inst
                                                   -
                                                   "edges_of_polygon(A)(j)")
                                                  (("1"
                                                    (expand
                                                     "only_vertex_intersections?")
                                                    (("1"
                                                      (inst - "e")
                                                      (("1"
                                                        (split -7)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "edge_of_polygon?")
                                                            (("1"
                                                              (skeep
                                                               -
                                                               t)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "i")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -4
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   +
                                                                   "next_index(C,i)")
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -4
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "q_1")
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "segment_endpoint?")
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     "edge_of_polygon?")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "i")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -2
                                                                              -3
                                                                              2))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           +
                                                                           "next_index(C,i)")
                                                                          (("2"
                                                                            (hide-all-but
                                                                             (-1
                                                                              -2
                                                                              -3
                                                                              2))
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "point_on_polygon_perimeter?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst
                                                   -
                                                   "edges_of_polygon(A)(j)")
                                                  (("2"
                                                    (expand
                                                     "only_vertex_intersections?")
                                                    (("2"
                                                      (inst - "e")
                                                      (("2"
                                                        (split -5)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (typepred
                                                             "e")
                                                            (("1"
                                                              (expand
                                                               "edge_of_polygon?")
                                                              (("1"
                                                                (skeep
                                                                 -)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "i")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -2
                                                                        2))
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     +
                                                                     "next_index(C,i)")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -2
                                                                        2))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "q_1")
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "segment_endpoint?")
                                                                (("1"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -2
                                                                        -7
                                                                        2
                                                                        5))
                                                                      (("1"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("1"
                                                                          (rewrite
                                                                           "point_on_reverse_segment"
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (expand
                                                                             "reverse_segment")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (rewrite*
                                                                                 "point_on_segment_has_norm_offset")
                                                                                (("1"
                                                                                  (skeep*)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "segment_far_endpoint_length")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "edges_of_polygon(A)(j)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "edges_of_polygon")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (case
                                                                                             "d < d!1")
                                                                                            (("1"
                                                                                              (equate
                                                                                               "^(q - A`vertices(j))"
                                                                                               "^(q_1 - A`vertices(j))")
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "L"
                                                                                                 "length((# p1 := A`vertices(j), p2 := q_1 #))")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "V"
                                                                                                   "^(q_1 - A`vertices(j))")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (cancel-add
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "scal_cancel")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "points_on_same_segment_dir_parallel")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "A`vertices(j)"
                                                                                                   "q"
                                                                                                   "edges_of_polygon(A)(j)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "edges_of_polygon")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "dir_parallel_diffs_eqv_norm_diffs_eq")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "(# p1 := A`vertices(j), p2 := q #)"
                                                                                                           "(# p1 := A`vertices(j), p2 := q_1 #)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "point_on_segment?")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "0")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (rewrite
                                                                                                         "point_on_segment_has_norm_offset")
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "d!1")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (replace
                                                                                                         -6
                                                                                                         +)
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -5
                                                                                               -4)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "abs")
                                                                                                    (("2"
                                                                                                      (case-replace
                                                                                                       "d!1 = d")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -6
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "normalize_scal")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "sign")
                                                                                                              (("1"
                                                                                                                (real-props)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "normalize_normalize")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (ground)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -6
                                                                  1))
                                                                (("2"
                                                                  (lemma
                                                                   "point_on_subsegment")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "q_1"
                                                                     "(# p1 := q, p2 := A`vertices(j) #)"
                                                                     "edges_of_polygon(A)(j)")
                                                                    (("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (expand
                                                                         "subsegment?")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "int_index")
                            (("2" (lemma "rem_sum1")
                              (("2"
                                (inst
                                 -
                                 "A`num_vertices"
                                 "A`num_vertices"
                                 "j")
                                (("2"
                                  (rewrite "rem_self")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "rem_mod")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (ground)
          (("1" (skeep -) (("1" (inst? +) nil nil)) nil)
           ("2" (skeep)
            (("2" (inst? +)
              (("2" (assert)
                (("2" (case "l = 1+jb")
                  (("1" (inst - "jb")
                    (("1" (flatten)
                      (("1" (hide 1)
                        (("1"
                          (equate "int_index(A)(j - l)"
                           "prev_index(A, int_index(A)(j - jb))")
                          (("1"
                            (name-replace "k" "int_index(A)(j - jb)")
                            (("1"
                              (lemma
                               "extend_points_outside_polygon_excl")
                              (("1"
                                (inst
                                 -
                                 "A`vertices(k)"
                                 "(# p1 := A`vertices(k), p2 := A`vertices(prev_index(A, k)) #)"
                                 "C")
                                (("1"
                                  (ground)
                                  (("1"
                                    (case
                                     "EXISTS (cj: below(C`num_vertices)): A`vertices(prev_index(A, k)) = C`vertices(cj)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "outgoing_edge_of_C?")
                                        (("1"
                                          (name-replace
                                           "R"
                                           "min(vertex_wedge_radius(C), length(edges_of_polygon(A)(prev_index(A, k)))/2)")
                                          (("1"
                                            (inst
                                             +
                                             "cj"
                                             "A`vertices(prev_index(A, k)) + R * ^(A`vertices(k) - A`vertices(prev_index(A, k)))")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "point_add_scal_neq_point")
                                                (("2"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (use
                                                 "offset_point_on_segment_iff_bounded")
                                                (("3"
                                                  (expand
                                                   "edges_of_polygon"
                                                   -1
                                                   (1 2 3))
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (inst
                                                 -
                                                 "A`vertices(prev_index(A, k)) + R * ^(A`vertices(k) - A`vertices(prev_index(A, k)))")
                                                (("4"
                                                  (ground)
                                                  (("1"
                                                    (use
                                                     "in_wedge_or_on_edge")
                                                    (("1"
                                                      (split
                                                       -1
                                                       :depth
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "perimeter_not_outside")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "point_on_polygon_perimeter?")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (use
                                                                   "all_wedge_points_inside")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "point_out_not_in")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst?
                                                                   +)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (inst?
                                                                   +)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -3)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "offset_point_on_segment_iff_bounded")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "1-t")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -3
                                                                       :hide?
                                                                       t)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (use
                                                     "point_add_scal_neq_point")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-3 -5 1 3))
                                      (("2"
                                        (lemma
                                         "between_points_on_perimeter")
                                        (("2"
                                          (inst
                                           -
                                           "A`vertices(prev_index(A, k))"
                                           "A`vertices(k)"
                                           "C"
                                           "edges_of_polygon(A)(prev_index(A,k))")
                                          (("2"
                                            (ground)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst
                                                 -
                                                 "edges_of_polygon(A)(prev_index(A,k))")
                                                (("2"
                                                  (expand
                                                   "only_vertex_intersections?")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "edges_of_polygon(C)(i)")
                                                    (("2"
                                                      (split -5)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "i")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "next_index(C,i)")
                                                            (("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (expand
                                                               "segment_endpoint?")
                                                              (("2"
                                                                (expand
                                                                 "edges_of_polygon"
                                                                 (-1
                                                                  -2))
                                                                (("2"
                                                                  (hide
                                                                   -5)
                                                                  (("2"
                                                                    (lemma
                                                                     "perimeter_not_outside")
                                                                    (("2"
                                                                      (inst?
                                                                       -)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "point_on_polygon_perimeter?")
                                                                          (("2"
                                                                            (ground)
                                                                            (("1"
                                                                              (inst?
                                                                               3)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst?
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (inst
                                                                               3
                                                                               "next_index(C,i)")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (inst
                                                                               1
                                                                               "edges_of_polygon(C)(next_index(C,i))")
                                                                              (("4"
                                                                                (replace
                                                                                 -1)
                                                                                (("4"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (expand
                                       "point_on_polygon_perimeter?")
                                      (("2"
                                        (skeep - t)
                                        (("2"
                                          (rewrite
                                           "point_on_reverse_segment"
                                           :dir
                                           rl)
                                          (("2"
                                            (expand "reverse_segment")
                                            (("2"
                                              (inst
                                               -
                                               "edges_of_polygon(A)(prev_index(A, k))")
                                              (("2"
                                                (expand
                                                 "only_vertex_intersections?")
                                                (("2"
                                                  (inst - "e")
                                                  (("2"
                                                    (split -7)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lemma
                                                         "perimeter_not_outside")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "A`vertices(k)"
                                                           "C")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "point_on_polygon_perimeter?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "e")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("2"
                                                                          (expand
                                                                           "reverse_segment")
                                                                          (("2"
                                                                            (expand
                                                                             "point_on_segment?")
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst - "q")
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "segment_endpoint?"
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "edges_of_polygon"
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (use
                                                                   "perimeter_not_outside")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "point_on_polygon_perimeter?")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "e")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (hide-all-but 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "int_index")
                                  (("2"
                                    (expand "prev_index")
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (lemma "rem_add_one")
                                          (("1"
                                            (inst
                                             -
                                             "A`num_vertices"
                                             "A`num_vertices - 1 - jb + j")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "rem_add_one")
                                          (("2"
                                            (inst
                                             -
                                             "A`num_vertices"
                                             "A`num_vertices - 1 - jb + j")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst?)
                    (("1" (ground) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (inc_edge_imp_outg_edge_exists 0
  (inc_edge_imp_outg_edge_exists-1 nil 3874129022
   ("" (skeep)
    (("" (use "inc_or_outg_edge_invariant")
      (("" (ground)
        (("" (inst - "A`num_vertices - 1")
          (("" (split -1)
            (("1" (skeep) (("1" (inst?) nil nil)) nil)
             ("2" (inst - "A`num_vertices - 1")
              (("2" (flatten)
                (("2" (hide 2)
                  (("2" (assert)
                    (("2"
                      (equate "int_index(A)(1 - A`num_vertices + j)"
                       "next_index(A, j)")
                      (("1" (expand "incoming_edge_of_C?")
                        (("1" (skeep)
                          (("1" (expand "edges_of_polygon" -3)
                            (("1" (use "perimeter_not_outside")
                              (("1"
                                (ground)
                                (("1"
                                  (expand
                                   "point_on_polygon_perimeter?")
                                  (("1"
                                    (inst + "edges_of_polygon(C)(j_1)")
                                    (("1"
                                      (expand "edges_of_polygon")
                                      (("1"
                                        (expand "point_on_segment?")
                                        (("1"
                                          (inst + "0")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "int_index")
                          (("2" (expand "next_index")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "rem_self")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "rem_add_one")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (equate
                                       "rem(A`num_vertices)(j)"
                                       "j"
                                       (rewrite "rem_mod"))
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (incoming_edge_imp_outgoing_edge 0
  (incoming_edge_imp_outgoing_edge-1 nil 3874129022
   ("" (skeep)
    (("" (typepred "s")
      (("" (expand "edge_of_polygon?")
        (("" (skeep)
          (("" (use "inc_edge_imp_outg_edge_exists")
            (("" (ground)
              (("1" (hide -4 -5)
                (("1" (skeep)
                  (("1" (expand "outgoing_edge_of_C?")
                    (("1" (skeep)
                      (("1" (inst?)
                        (("1" (inst + "q") (("1" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -4 2)
                (("2" (expand "incoming_edge_of_C?")
                  (("2" (skeep)
                    (("2" (inst + "i" "p") (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (A_intersects_C_imp_outgoing_edge 0
  (A_intersects_C_imp_outgoing_edge-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "point_outside_imp_edge_partly_outside")
      (("" (inst - "C" "A")
        (("" (split -1)
          (("1" (skeep)
            (("1" (hide -11)
              (("1" (expand "point_on_polygon_perimeter?")
                (("1" (skeep - t)
                  (("1" (inst - "edges_of_polygon(A)(i!1)")
                    (("1" (use "perimeter_not_outside")
                      (("1" (assert)
                        (("1" (expand "only_vertex_intersections?")
                          (("1" (inst - "e")
                            (("1" (split -7)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand
                                     "point_on_polygon_perimeter?")
                                    (("1"
                                      (inst + "e")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "point_on_reverse_segment")
                                          (("1"
                                            (inst
                                             -
                                             "q"
                                             "edges_of_polygon(A)(i!1)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "edge_of_polygon?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand
                                             "segment_endpoint?")
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon"
                                                 (-1 -3))
                                                (("1"
                                                  (inst
                                                   +
                                                   "edges_of_polygon(A)(i!1)"
                                                   _
                                                   "q")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (inst + "i!2")
                                                        (("1"
                                                          (expand
                                                           "edges_of_polygon"
                                                           3)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "point_on_polygon_perimeter?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "e")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "in_wedge_or_on_edge")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?")
                                                                  (("2"
                                                                    (inst-cp
                                                                     +
                                                                     "e")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "edges_of_polygon(C)(prev_index(C, i!2))")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "edges_of_polygon"
                                                                           -1)
                                                                          (("2"
                                                                            (use
                                                                             "all_wedge_points_inside")
                                                                            (("2"
                                                                              (use
                                                                               "point_out_not_in")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         +
                                                         "next_index(C,i!2)")
                                                        (("2"
                                                          (expand
                                                           "edges_of_polygon"
                                                           3)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "point_on_polygon_perimeter?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "edges_of_polygon(C)(next_index(C,i!2))")
                                                                (("1"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "point_on_segment?"
                                                                     +)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "in_wedge_or_on_edge")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?")
                                                                  (("2"
                                                                    (inst-cp
                                                                     +
                                                                     "edges_of_polygon(C)(next_index(C, i!2))")
                                                                    (("2"
                                                                      (inst-cp
                                                                       +
                                                                       "edges_of_polygon(C)(i!2)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (use
                                                                           "all_wedge_points_inside")
                                                                          (("2"
                                                                            (use
                                                                             "point_out_not_in")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "incoming_edge_imp_outgoing_edge")
                                                (("2"
                                                  (inst
                                                   -
                                                   "A"
                                                   "C"
                                                   "edges_of_polygon(A)(i!1)"
                                                   _)
                                                  (("2"
                                                    (split -3)
                                                    (("1"
                                                      (inst - "i!2")
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon"
                                                         (-2 -3 -4))
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst? +)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "q!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (inst
                                                             +
                                                             "q")
                                                            (("3"
                                                              (hide 4)
                                                              (("3"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "edges_of_polygon")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?")
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "edges_of_polygon(C)(i!2)")
                                                                    (("2"
                                                                      (expand
                                                                       "edges_of_polygon"
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "point_on_segment?"
                                                                         2)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "0")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (use
                                                                   "in_wedge_or_on_edge")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "point_on_polygon_perimeter?")
                                                                      (("3"
                                                                        (ground)
                                                                        (("1"
                                                                          (use
                                                                           "all_wedge_points_inside")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "point_out_not_in")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (reveal -6)
                                                            (("4"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "edges_of_polygon"
                                                       (-3 -4))
                                                      (("2"
                                                        (inst
                                                         -
                                                         "next_index(C,i!2)")
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "q!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (inst
                                                             +
                                                             "q")
                                                            (("3"
                                                              (hide 4)
                                                              (("3"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "edges_of_polygon(C)(next_index(C,i!2))")
                                                                    (("1"
                                                                      (expand
                                                                       "edges_of_polygon"
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "point_on_segment?"
                                                                         2)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   "in_wedge_or_on_edge")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "point_on_polygon_perimeter?")
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (use
                                                                           "all_wedge_points_inside")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "point_out_not_in")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (reveal -6)
                                                            (("4"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil)
           ("3" (hide -1 2)
            (("3" (ground)
              (("1" (expand "are_segments_overlapping?")
                (("1" (skeep)
                  (("1" (inst + "p1")
                    (("1" (ground)
                      (("1" (expand "point_on_polygon_perimeter?")
                        (("1" (inst?) nil nil)) nil)
                       ("2" (use "perimeter_not_outside")
                        (("2" (ground)
                          (("2" (expand "point_on_polygon_perimeter?")
                            (("2" (inst + "edges_of_polygon(C)(i)") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "are_segments_overlapping?")
                (("2" (skeep)
                  (("2" (inst + "p1")
                    (("2" (ground)
                      (("1" (expand "point_on_polygon_perimeter?")
                        (("1" (inst?) nil nil)) nil)
                       ("2" (use "perimeter_not_outside")
                        (("2" (ground)
                          (("2" (expand "point_on_polygon_perimeter?")
                            (("2"
                              (inst +
                               "edges_of_polygon(C)(prev_index(C, i))")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (use "all_wedge_points_inside")
                  (("3" (assert)
                    (("3" (inst + "u")
                      (("3" (ground)
                        (("1" (expand "point_on_polygon_perimeter?")
                          (("1" (inst?) nil nil)) nil)
                         ("2" (use "point_out_not_in")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (inst + "p")
            (("4" (assert)
              (("4" (use "vertex_on_perimeter")
                (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (A_intersects_C_imp_outgoing_edge_exists 0
  (A_intersects_C_imp_outgoing_edge_exists-1 nil 3874129022
   ("" (skeep)
    (("" (skeep - t)
      (("" (lemma "point_outside_imp_edge_partly_outside")
        (("" (inst - "C" "A")
          (("" (ground)
            (("1" (skeep - t)
              (("1" (expand "point_on_polygon_perimeter?")
                (("1" (skeep - t)
                  (("1" (inst - "edges_of_polygon(A)(i)")
                    (("1" (use "perimeter_not_outside")
                      (("1" (assert)
                        (("1" (expand "only_vertex_intersections?")
                          (("1" (inst - "e")
                            (("1" (split -10)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand
                                     "point_on_polygon_perimeter?")
                                    (("1"
                                      (inst + "e")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "point_on_reverse_segment")
                                          (("1"
                                            (inst
                                             -
                                             "q!1"
                                             "edges_of_polygon(A)(i)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "edge_of_polygon?")
                                        (("2"
                                          (skeep - t)
                                          (("2"
                                            (expand
                                             "segment_endpoint?")
                                            (("2"
                                              (split -3)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon"
                                                 (-1 -4))
                                                (("1"
                                                  (inst
                                                   +
                                                   "edges_of_polygon(A)(i)"
                                                   _
                                                   "q!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -3)
                                                      (("1"
                                                        (inst + "i!1")
                                                        (("1"
                                                          (expand
                                                           "edges_of_polygon"
                                                           3)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "point_on_polygon_perimeter?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "e")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "in_wedge_or_on_edge")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?")
                                                                  (("2"
                                                                    (inst-cp
                                                                     +
                                                                     "e")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "edges_of_polygon(C)(prev_index(C, i!1))")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "edges_of_polygon"
                                                                           -1)
                                                                          (("2"
                                                                            (use
                                                                             "all_wedge_points_inside")
                                                                            (("2"
                                                                              (use
                                                                               "point_out_not_in")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         +
                                                         "next_index(C,i!1)")
                                                        (("2"
                                                          (expand
                                                           "edges_of_polygon"
                                                           3)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "point_on_polygon_perimeter?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "edges_of_polygon(C)(next_index(C,i!1))")
                                                                (("1"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "point_on_segment?"
                                                                     +)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "in_wedge_or_on_edge")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?")
                                                                  (("2"
                                                                    (inst-cp
                                                                     +
                                                                     "edges_of_polygon(C)(next_index(C, i!1))")
                                                                    (("2"
                                                                      (inst-cp
                                                                       +
                                                                       "edges_of_polygon(C)(i!1)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (use
                                                                           "all_wedge_points_inside")
                                                                          (("2"
                                                                            (use
                                                                             "point_out_not_in")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "incoming_edge_imp_outgoing_edge")
                                                (("2"
                                                  (inst
                                                   -
                                                   "A"
                                                   "C"
                                                   "edges_of_polygon(A)(i)"
                                                   _)
                                                  (("2"
                                                    (split -4)
                                                    (("1"
                                                      (inst - "i!1")
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon"
                                                         (-2 -3 -5))
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst? +)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "q!2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (hide 4)
                                                            (("3"
                                                              (inst
                                                               +
                                                               "q!1")
                                                              (("3"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "edges_of_polygon")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?")
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "edges_of_polygon(C)(i!1)")
                                                                    (("2"
                                                                      (expand
                                                                       "edges_of_polygon"
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "point_on_segment?"
                                                                         2)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "0")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (use
                                                                   "in_wedge_or_on_edge")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "point_on_polygon_perimeter?")
                                                                      (("3"
                                                                        (ground)
                                                                        (("1"
                                                                          (use
                                                                           "all_wedge_points_inside")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "point_out_not_in")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -
                                                       "next_index(C,i!1)")
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon"
                                                         (-2 -3 -5))
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "q!2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "q!1")
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "edges_of_polygon(C)(next_index(C,i!1))")
                                                                    (("1"
                                                                      (expand
                                                                       "edges_of_polygon"
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?")
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "edges_of_polygon(C)(next_index(C,i!1))")
                                                                    (("2"
                                                                      (expand
                                                                       "edges_of_polygon"
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "point_on_segment?"
                                                                         2)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "0")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (use
                                                                   "in_wedge_or_on_edge")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "point_on_polygon_perimeter?")
                                                                      (("3"
                                                                        (ground)
                                                                        (("1"
                                                                          (use
                                                                           "all_wedge_points_inside")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "point_out_not_in")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (inst + "q")
                (("2" (ground)
                  (("1" (use "vertex_on_perimeter")
                    (("1" (assert) nil nil)) nil)
                   ("2" (use "perimeter_not_outside")
                    (("2" (ground)
                      (("2" (use "vertex_on_perimeter")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (inst + "p")
                (("3" (assert)
                  (("3" (use "vertex_on_perimeter")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_merge_vertex_is_topleft_TCC1 0
  (first_merge_vertex_is_topleft_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (first_merge_vertex_is_topleft subtype "merge_well_formed.B"
    "(injection_props.merge_pre_condition(merge_well_formed.A))"))
  (first_merge_vertex_is_topleft_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (first_merge_vertex_is_topleft subtype "merge_well_formed.B"
    "(injection_props.merge_pre_condition(merge_well_formed.A))")))
 (first_merge_vertex_is_topleft_TCC2 0
  (first_merge_vertex_is_topleft_TCC2-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (first_merge_vertex_is_topleft subtype "0" "below[M`length]"))
  (first_merge_vertex_is_topleft_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (first_merge_vertex_is_topleft subtype "0" "below[M`length]")))
 (first_merge_vertex_is_topleft 0
  (first_merge_vertex_is_topleft-1 nil 3874129022
   ("" (skeep*)
    (("" (case-replace "M`seq(0) = first_vertex_merge(A, B)")
      (("1" (case-replace "k = 0")
        (("1" (assert) nil nil)
         ("2"
          (name-replace*
           ("Am" "inject_vertices_into_polygon(A, B)`1" "Bm"
            "inject_vertices_into_polygon(A, B)`2"))
          (("2" (case "(Am, Bm) = inject_vertices_into_polygon(A, B)")
            (("1" (hide -2 -3 -4)
              (("1" (use "merge_vertex_AB")
                (("1" (assert)
                  (("1" (assert)
                    (("1" (inst?)
                      (("1" (expand "point_AB_vtx?")
                        (("1" (use "inject_vertices_into_polygon_comm")
                          (("1" (lemma "injected_topleft_vertex_same")
                            (("1" (inst-cp - "A" "B" "Am" "Bm")
                              (("1"
                                (inst - "B" "A" "Bm" "Am")
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (name-replace
                                       "first_vtx"
                                       "first_vertex_merge(A, B)"
                                       :hide?
                                       nil)
                                      (("1"
                                        (expand "first_vertex_merge")
                                        (("1"
                                          (apply (repeat (lift-if)))
                                          (("1"
                                            (rewrite*
                                             "leftmost_is_topleft_x")
                                            (("1"
                                              (rewrite*
                                               "topmost_is_topleft_y")
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "topleft_vertex_bounds_vertices")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "Am"
                                                               "Am`vertices(topleft_vertex_idx(Am))")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "Bm"
                                                                 " Bm`vertices(topleft_vertex_idx(Bm))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -9)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "M`seq(k)")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -2
                                                                       "M`seq(k)")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "vertex?")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "topleft_vertex_bounds_vertices")
                                                            (("2"
                                                              (inst-cp
                                                               -
                                                               "Am"
                                                               "Am`vertices(topleft_vertex_idx(Am))")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "Bm"
                                                                 " Bm`vertices(topleft_vertex_idx(Bm))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -8)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "M`seq(k)")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -2
                                                                       "M`seq(k)")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "vertex?")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "topleft_vertex_bounds_vertices")
                                                            (("1"
                                                              (inst-cp
                                                               -
                                                               "Am"
                                                               "Am`vertices(topleft_vertex_idx(Am))")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "Bm"
                                                                 " Bm`vertices(topleft_vertex_idx(Bm))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -8)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "M`seq(k)")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -2
                                                                       "M`seq(k)")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "vertex?")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "topleft_vertex_bounds_vertices")
                                                            (("2"
                                                              (inst-cp
                                                               -
                                                               "Am"
                                                               "Am`vertices(topleft_vertex_idx(Am))")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "Bm"
                                                                 " Bm`vertices(topleft_vertex_idx(Bm))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -7)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "M`seq(k)")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -2
                                                                       "M`seq(k)")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "vertex?")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "merge_pre_condition_symmetric")
                                  (("2"
                                    (typepred "B")
                                    (("2"
                                      (expand
                                       "ccw_merge_pre_condition")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (apply-extensionality :hide? t) nil nil))
            nil))
          nil))
        nil)
       ("2" (replace -1 1)
        (("2" (hide-all-but 1)
          (("2" (expand "merge_seq")
            (("2" (expand "o")
              (("2" (expand "singleton_seq") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_topleft_vertices 0
  (merge_seq_topleft_vertices-1 nil 3874129022
   ("" (skeep)
    (("" (skoletin*)
      (("" (lemma "injected_topleft_vertex_same")
        (("" (inst-cp - "A" "B" "Am" "Bm")
          (("" (inst - "B" "A" "Bm" "Am")
            (("1" (split -1)
              (("1" (split -2)
                (("1" (expand "first_vertex_merge")
                  (("1" (apply (repeat (lift-if)))
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (use "find_index_self")
                          (("1" (assert)
                            (("1"
                              (name-replace "k" "find_index(Am, v0)")
                              (("1"
                                (ground)
                                (("1"
                                  (typepred "Am`vertices")
                                  (("1"
                                    (expand "uniq_vertex_list?")
                                    (("1"
                                      (inst
                                       -
                                       "k"
                                       "topleft_vertex_idx(Am)")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite* "topmost_is_topleft_y")
                                  (("2"
                                    (rewrite* "leftmost_is_topleft_x")
                                    (("2"
                                      (lemma "leftmost_has_min_x")
                                      (("2"
                                        (inst
                                         -
                                         "Am"
                                         "A`vertices(topleft_vertex_idx(A))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst - "k")
                                            (("2"
                                              (lemma
                                               "topleft_vertex_bounds_vertices")
                                              (("2"
                                                (inst
                                                 -
                                                 "Am"
                                                 "A`vertices(topleft_vertex_idx(A))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "Am`vertices(k)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "vertex?")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "A_vertex_is_Am_vertex")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "A"
                                                     "B"
                                                     "Am"
                                                     "Bm"
                                                     "A`vertices(topleft_vertex_idx(A))")
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "vertex?"
                                                         1)
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "Am`vertices")
                                  (("3"
                                    (expand "uniq_vertex_list?")
                                    (("3"
                                      (inst
                                       -
                                       "k"
                                       "topleft_vertex_idx(Am)")
                                      (("3" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (rewrite* "leftmost_is_topleft_x")
                                  (("4"
                                    (lemma "leftmost_has_min_x")
                                    (("4"
                                      (inst
                                       -
                                       "Am"
                                       "Am`vertices(topleft_vertex_idx(Am))")
                                      (("4"
                                        (inst - "k")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (use "find_index_self")
                          (("2" (assert)
                            (("2"
                              (name-replace "k" "find_index(Bm, v0)")
                              (("2"
                                (ground)
                                (("1"
                                  (typepred "Bm`vertices")
                                  (("1"
                                    (expand "uniq_vertex_list?")
                                    (("1"
                                      (inst
                                       -
                                       "k"
                                       "topleft_vertex_idx(Bm)")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (rewrite*
                                           "topmost_is_topleft_y")
                                          (("1"
                                            (rewrite*
                                             "leftmost_is_topleft_x")
                                            (("1"
                                              (lemma
                                               "topleft_vertex_bounds_vertices")
                                              (("1"
                                                (inst
                                                 -
                                                 "Bm"
                                                 "Bm`vertices(topleft_vertex_idx(Bm))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "Bm`vertices(k)")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "vertex?")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "vertex?" 1)
                                                  (("2"
                                                    (inst
                                                     +
                                                     "topleft_vertex_idx(Bm)")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "Bm`vertices")
                                  (("2"
                                    (expand "uniq_vertex_list?")
                                    (("2"
                                      (inst
                                       -
                                       "k"
                                       "topleft_vertex_idx(Bm)")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite* "leftmost_is_topleft_x")
                                  (("3"
                                    (lemma "leftmost_has_min_x")
                                    (("3"
                                      (inst
                                       -
                                       "Bm"
                                       "B`vertices(topleft_vertex_idx(B))")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst - "k")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (typepred "Bm`vertices")
                                  (("4"
                                    (expand "uniq_vertex_list?")
                                    (("4"
                                      (inst
                                       -
                                       "k"
                                       "topleft_vertex_idx(Bm)")
                                      (("4" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t) nil nil))
                nil)
               ("2" (use "inject_vertices_into_polygon_comm")
                (("2" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (apply-extensionality :hide? t) nil nil))
                  nil))
                nil))
              nil)
             ("2" (use "merge_pre_condition_symmetric")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_topleft_vertices_shared_TCC1 0
  (injected_topleft_vertices_shared_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_topleft_vertices_shared subtype "0"
    "below[merge_seq(A, B)`length]"))
  (injected_topleft_vertices_shared_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (injected_topleft_vertices_shared subtype "0"
    "below[merge_seq(A, B)`length]")))
 (injected_topleft_vertices_shared 0
  (injected_topleft_vertices_shared-1 nil 3874129022
   ("" (skeep*)
    (("" (use "inject_vertices_into_polygon_comm")
      (("" (replace -2)
        (("" (expand "merge_seq")
          (("" (expand "o")
            (("" (expand "singleton_seq")
              (("" (lemma "merge_seq_topleft_vertices")
                (("" (inst - "A" "B")
                  (("" (assert)
                    (("" (flatten)
                      (("" (replace -4 :dir rl)
                        (("" (assert)
                          (("" (lemma "find_index_self")
                            (("" (inst-cp - "Am" "v")
                              ((""
                                (inst - "Bm" "v")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_merge_vertex_is_topleft_all_TCC1 0
  (first_merge_vertex_is_topleft_all_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (first_merge_vertex_is_topleft_all subtype "0" "below[M`length]"))
  (first_merge_vertex_is_topleft_all_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (first_merge_vertex_is_topleft_all subtype "0" "below[M`length]")))
 (first_merge_vertex_is_topleft_all 0
  (first_merge_vertex_is_topleft_all-1 nil 3874129022
   ("" (skeep*)
    (("" (case "M`seq(0) = first_vertex_merge(A, B)")
      (("1" (use "inject_vertices_into_polygon_comm")
        (("1" (assert)
          (("1" (assert)
            (("1" (lemma "injected_topleft_vertex_same")
              (("1" (inst-cp - "A" "B" "Am" "Bm")
                (("1" (inst - "B" "A" "Bm" "Am")
                  (("1" (assert)
                    (("1" (expand "first_vertex_merge")
                      (("1" (apply (repeat (lift-if)))
                        (("1" (rewrite* "leftmost_is_topleft_x")
                          (("1" (rewrite* "topmost_is_topleft_y")
                            (("1" (replace -1)
                              (("1"
                                (replace -2)
                                (("1"
                                  (split -7)
                                  (("1"
                                    (lemma
                                     "topleft_vertex_bounds_all_points")
                                    (("1"
                                      (inst
                                       -
                                       "Am"
                                       "Am`vertices(topleft_vertex_idx(Am))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "p")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "vertex?")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "topleft_vertex_bounds_all_points")
                                    (("2"
                                      (inst
                                       -
                                       "Bm"
                                       "Bm`vertices(topleft_vertex_idx(Bm))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "p")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "vertex?")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace -2 1)
        (("2" (hide-all-but 1)
          (("2" (expand "merge_seq")
            (("2" (expand "o")
              (("2" (expand "singleton_seq") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_length_neq_2 0
  (merge_seq_length_neq_2-1 nil 3874129022
   ("" (skeep)
    (("" (expand "merge_seq")
      (("" (name-replace "v0" "first_vertex_merge(A, B)")
        (("" (expand "o")
          (("" (expand "singleton_seq")
            (("" (expand "merge_helper")
              (("" (expand "o")
                (("" (expand "singleton_seq")
                  (("" (expand "empty_seq")
                    (("" (lift-if)
                      (("" (ground)
                        ((""
                          (name-replace "Am"
                           "inject_vertices_into_polygon(A, B)`1")
                          ((""
                            (name-replace "Bm"
                             "inject_vertices_into_polygon(A, B)`2")
                            (("" (expand "merge_helper")
                              ((""
                                (expand "empty_seq")
                                ((""
                                  (lift-if)
                                  ((""
                                    (expand "o")
                                    ((""
                                      (expand "singleton_seq")
                                      ((""
                                        (ground)
                                        ((""
                                          (name-replace
                                           "v1"
                                           "next_merge_vertex(Am, Bm, v0, prev_0(v0))")
                                          ((""
                                            (expand
                                             "next_merge_vertex")
                                            ((""
                                              (lift-if)
                                              ((""
                                                (name-replace*
                                                 ("i"
                                                  "find_index(Am, v1)"
                                                  "j"
                                                  "find_index(Bm, v1)"))
                                                ((""
                                                  (expand "v1" (-1 -2))
                                                  ((""
                                                    (expand
                                                     "next_merge_vertex"
                                                     (-1 -2))
                                                    ((""
                                                      (name-replace*
                                                       ("i0"
                                                        "find_index(Am, v0)"
                                                        "j0"
                                                        "find_index(Bm, v0)"))
                                                      ((""
                                                        (lift-if)
                                                        ((""
                                                          (case
                                                           "i0 >= 0 or j0 >= 0")
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -4)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -7
                                                                                 -8)
                                                                                (("1"
                                                                                  (expand
                                                                                   "edges_of_polygon")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "prev_0_first_vtx_not_on_Am_or_Bm")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "A"
                                                                                       "B"
                                                                                       "Am"
                                                                                       "Bm"
                                                                                       "Bm`vertices(next_index(Bm, j0))")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "v0")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "Am")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "Bm")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             1)
                                                                                            (("2"
                                                                                              (use
                                                                                               "vertex_on_perimeter")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "vertex?")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "B")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ccw_merge_pre_condition")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -5)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "edges_of_polygon")
                                                                                      (("1"
                                                                                        (rewrite*
                                                                                         "find_index_self_index")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -10
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "find_index_self")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "Am"
                                                                                               "v0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "prev_vertex_neq_next_vertex")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "Am"
                                                                                                     "next_index(Am, i0)")
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "Am")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "simple_polygon_2d?")
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "next_vertex_neq_between_point")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "Am`vertices(next_index(Am, i0))"
                                                                                       "v0"
                                                                                       "Am"
                                                                                       "Bm"
                                                                                       "i"
                                                                                       "j")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "edges_of_polygon"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "find_index_self")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -
                                                                                               "Am"
                                                                                               "Am`vertices(next_index(Am, i0))")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "Bm"
                                                                                                 "Am`vertices(next_index(Am, i0))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "second_edge_does_not_double_back")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "v0"
                                                                                             "Am"
                                                                                             "i0"
                                                                                             "i")
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "Am")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "simple_polygon_2d?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "B")
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "injected_polygons_have_ccw_order")
                                                                                      (("3"
                                                                                        (inst
                                                                                         -
                                                                                         "A"
                                                                                         "B"
                                                                                         "Am"
                                                                                         "Bm")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "ccw_vertex_order?"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "point_between_edges?")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "between_rays_equiv")
                                                                                                (("1"
                                                                                                  (equate
                                                                                                   "topleft_vertex_idx(Bm)"
                                                                                                   "j0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "prev_0")
                                                                                                    (("1"
                                                                                                      (equate
                                                                                                       "Bm`vertices(j0) - (# x := 1, y := 0 #)"
                                                                                                       "v0 + (# x := -1, y := 0 #)")
                                                                                                      (("1"
                                                                                                        (equate
                                                                                                         "reverse_segment(edges_of_polygon(Bm)(prev_index(Bm, j0)))"
                                                                                                         "edges_of_polygon(Am)(i0)")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "point_between_rays_antisymmetric")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "edges_of_polygon"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "find_index_self")
                                                                                                              (("1"
                                                                                                                (inst-cp
                                                                                                                 -
                                                                                                                 "Am"
                                                                                                                 "v0")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "Bm"
                                                                                                                   "v0")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           -2
                                                                                                           -9
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (equate
                                                                                                             "prev_index(Bm, j0)"
                                                                                                             "j")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "edges_of_polygon")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "reverse_segment")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "find_index_self")
                                                                                                                  (("1"
                                                                                                                    (inst-cp
                                                                                                                     -
                                                                                                                     "Am"
                                                                                                                     "v0")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "Bm"
                                                                                                                       "Am`vertices(next_index(Am, i0))")
                                                                                                                      (("1"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "Bm`vertices")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "uniq_vertex_list?")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "prev_index(Bm, j0)"
                                                                                                                   "j")
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "find_index_self")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "Bm"
                                                                                                                         "v0")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -12)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               -6
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "next_prev_is_original")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "Bm"
                                                                                                                                   "j0")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     -7
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-7
                                                                                                                                        1))
                                                                                                                                      (("1"
                                                                                                                                        (name-replace
                                                                                                                                         "k"
                                                                                                                                         "prev_index(Bm, j0)")
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "j=k")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (case
                                                                                                                                             "next_index(Bm,j) = next_index(Bm,k)")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "next_index"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (apply
                                                                                                                                                 (repeat
                                                                                                                                                  (lift-if)))
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (typepred
                                                                                                                                               "Bm`vertices")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "uniq_vertex_list?")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "next_index(Bm, j)"
                                                                                                                                                   "next_index(Bm, k)")
                                                                                                                                                  (("1"
                                                                                                                                                    (ground)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (ground)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "find_index_self")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "Bm"
                                                                                                           "v0")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -14)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "v0")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "merge_seq_topleft_vertices")
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "Bm")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "ccw_merge_pre_condition")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Am")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Bm")
                                                                                                (("2"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "ccw_merge_pre_condition")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (lemma
                                                                                     "second_edge_does_not_double_back")
                                                                                    (("4"
                                                                                      (inst
                                                                                       -
                                                                                       "v0"
                                                                                       "Am"
                                                                                       "i0"
                                                                                       "i")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "Am")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "simple_polygon_2d?")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (lemma
                                                                                     "vertex_find_index")
                                                                                    (("5"
                                                                                      (inst
                                                                                       -
                                                                                       "Am"
                                                                                       "Am`vertices(next_index(Am, i0))")
                                                                                      (("5"
                                                                                        (assert)
                                                                                        (("5"
                                                                                          (expand
                                                                                           "vertex?")
                                                                                          (("5"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -7)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "edges_of_polygon")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (rewrite*
                                                                                             "find_index_self_index")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -5
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "find_index_self")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "Bm"
                                                                                                   "v0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "prev_vertex_neq_next_vertex")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "Bm"
                                                                                                         "next_index(Bm, j0)")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "Bm")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "simple_polygon_2d?")
                                                                                                            (("2"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "next_vertex_neq_between_point")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "Bm`vertices(next_index(Bm, j0))"
                                                                                           "v0"
                                                                                           "Bm"
                                                                                           "Am"
                                                                                           "j"
                                                                                           "i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "edges_of_polygon"
                                                                                               1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "find_index_self")
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -
                                                                                                   "Am"
                                                                                                   "Bm`vertices(next_index(Bm, j0))")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "Bm"
                                                                                                     "Bm`vertices(next_index(Bm, j0))")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "second_edge_does_not_double_back")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -
                                                                                           "v0"
                                                                                           "Bm"
                                                                                           "j0"
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "Bm")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "simple_polygon_2d?")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "vertex_find_index")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "Bm"
                                                                                           "Bm`vertices(next_index(Bm, j0))")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "vertex?")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "second_edge_does_not_double_back")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "v0"
                                                                                       "Bm"
                                                                                       "j0"
                                                                                       "j")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "Bm")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "simple_polygon_2d?")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (ground)
                                                                          (("1"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("1"
                                                                              (rewrite*
                                                                               "find_index_self_index")
                                                                              (("1"
                                                                                (replace
                                                                                 -9
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "find_index_self")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "Am"
                                                                                     "v0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "prev_vertex_neq_next_vertex")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "Am"
                                                                                           "next_index(Am, i0)")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "Am")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "simple_polygon_2d?")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "second_edge_does_not_double_back")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "v0"
                                                                               "Am"
                                                                               "i0"
                                                                               "i")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "Am")
                                                                                (("2"
                                                                                  (expand
                                                                                   "simple_polygon_2d?")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (typepred
                                                                             "j")
                                                                            (("3"
                                                                              (ground)
                                                                              (("3"
                                                                                (lemma
                                                                                 "vertex_find_index")
                                                                                (("3"
                                                                                  (inst
                                                                                   -
                                                                                   "Bm"
                                                                                   "Bm`vertices(next_index(Bm, j))")
                                                                                  (("3"
                                                                                    (ground)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "vertex?")
                                                                                      (("3"
                                                                                        (inst
                                                                                         +
                                                                                         "next_index(Bm,j)")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (lemma
                                                                             "second_edge_does_not_double_back")
                                                                            (("4"
                                                                              (inst
                                                                               -
                                                                               "v0"
                                                                               "Am"
                                                                               "i0"
                                                                               "i")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "Am")
                                                                                (("2"
                                                                                  (expand
                                                                                   "simple_polygon_2d?")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (lemma
                                                                             "vertex_find_index")
                                                                            (("5"
                                                                              (inst
                                                                               -
                                                                               "Am"
                                                                               "Am`vertices(next_index(Am, i0))")
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (expand
                                                                                   "vertex?")
                                                                                  (("5"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "edges_of_polygon")
                                                                    (("1"
                                                                      (rewrite*
                                                                       "find_index_self_index")
                                                                      (("1"
                                                                        (replace
                                                                         -5
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (lemma
                                                                           "find_index_self")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "Bm"
                                                                             "v0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "prev_vertex_neq_next_vertex")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "Bm"
                                                                                   "next_index(Bm, j0)")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "Bm")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "simple_polygon_2d?")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "vertex_find_index")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "Am"
                                                                       "Am`vertices(next_index(Am, i))")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "vertex?")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "next_index(Am, i)")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "second_edge_does_not_double_back")
                                                                    (("3"
                                                                      (inst
                                                                       -
                                                                       "v0"
                                                                       "Bm"
                                                                       "j0"
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "Bm")
                                                                        (("2"
                                                                          (expand
                                                                           "simple_polygon_2d?")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (lemma
                                                                     "vertex_find_index")
                                                                    (("4"
                                                                      (inst
                                                                       -
                                                                       "Bm"
                                                                       "Bm`vertices(next_index(Bm, j0))")
                                                                      (("4"
                                                                        (ground)
                                                                        (("4"
                                                                          (expand
                                                                           "vertex?")
                                                                          (("4"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (lemma
                                                                     "second_edge_does_not_double_back")
                                                                    (("5"
                                                                      (inst
                                                                       -
                                                                       "v0"
                                                                       "Bm"
                                                                       "j0"
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "Bm")
                                                                        (("2"
                                                                          (expand
                                                                           "simple_polygon_2d?")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 -2 +))
                                                            (("2"
                                                              (expand
                                                               "v0")
                                                              (("2"
                                                                (lemma
                                                                 "first_vertex_AB")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "A"
                                                                   "B"
                                                                   "Am"
                                                                   "Bm")
                                                                  (("1"
                                                                    (expand
                                                                     "point_AB_vtx?")
                                                                    (("1"
                                                                      (lemma
                                                                       "vertex_find_index")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -
                                                                         "Am"
                                                                         "first_vertex_merge(A, B)")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "Bm"
                                                                           "first_vertex_merge(A, B)")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "Am")
                                                                                (("1"
                                                                                  (expand
                                                                                   "Bm")
                                                                                  (("1"
                                                                                    (apply-extensionality
                                                                                     :hide?
                                                                                     t)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "B")
                                                                    (("2"
                                                                      (expand
                                                                       "ccw_merge_pre_condition")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_has_min_length 0
  (merge_seq_has_min_length-1 nil 3874129022
   ("" (skeep)
    (("" (case "merge_seq(A, B)`length = 0")
      (("1" (expand "merge_seq")
        (("1" (expand "o")
          (("1" (expand "singleton_seq") (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (case "merge_seq(A, B)`length = 1")
        (("1" (hide +)
          (("1" (expand "merge_seq")
            (("1" (expand "o")
              (("1" (expand "singleton_seq")
                (("1" (expand "merge_helper")
                  (("1" (expand "o")
                    (("1" (expand "singleton_seq")
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1"
                            (name-replace "Am"
                             "inject_vertices_into_polygon(A, B)`1")
                            (("1"
                              (name-replace "Bm"
                               "inject_vertices_into_polygon(A, B)`2")
                              (("1"
                                (expand "next_merge_vertex")
                                (("1"
                                  (name-replace
                                   "v"
                                   "first_vertex_merge(A, B)")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (case
                                       "forall (G: simple_polygon_2d, u: point_2d):
                                                                      find_index(G, u) >= 0 IMPLIES
                                                                        G`vertices(next_index(G, find_index(G, u))) /= u")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "edges_of_polygon")
                                          (("1"
                                            (expand "v")
                                            (("1"
                                              (lemma
                                               "prev_0_first_vtx_not_on_Am_or_Bm")
                                              (("1"
                                                (inst
                                                 -
                                                 "A"
                                                 "B"
                                                 "Am"
                                                 "Bm"
                                                 "Bm`vertices(next_index(Bm, find_index(Bm, first_vertex_merge(A, B))))")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (expand "Am")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "Bm")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 1)
                                                    (("2"
                                                      (use
                                                       "vertex_on_perimeter")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "vertex?")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "B")
                                                  (("2"
                                                    (expand
                                                     "ccw_merge_pre_condition")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst?)
                                          (("2" (ground) nil nil))
                                          nil)
                                         ("3"
                                          (inst?)
                                          (("3" (ground) nil nil))
                                          nil)
                                         ("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil)
                                         ("5"
                                          (inst?)
                                          (("5"
                                            (ground)
                                            (("5"
                                              (lemma "first_vertex_AB")
                                              (("5"
                                                (inst
                                                 -
                                                 "A"
                                                 "B"
                                                 "Am"
                                                 "Bm")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "point_AB_vtx?")
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (expand "v")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (lemma
                                                             "vertex_find_index")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "Am"
                                                               "first_vertex_merge(A, B)")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "vertex_find_index")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "Am")
                                                      (("2"
                                                        (expand "Bm")
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -)
                                                  (("2"
                                                    (lemma
                                                     "find_index_segment_is_edge")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (use
                                                             "next_index_distinct")
                                                            (("1"
                                                              (typepred
                                                               "B")
                                                              (("1"
                                                                (expand
                                                                 "ccw_merge_pre_condition")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "B")
                                                              (("2"
                                                                (expand
                                                                 "ccw_merge_pre_condition")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (lemma
                                             "find_index_segment_is_edge")
                                            (("2"
                                              (inst - "u" "u" "G")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("2"
                                                    (typepred
                                                     "G`vertices")
                                                    (("2"
                                                      (expand
                                                       "uniq_vertex_list?")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "find_index(G, u)"
                                                         "next_index(G, find_index(G, u))")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "next_index_distinct")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide -)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (typepred
                                             "find_index(G, u)")
                                            (("3" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "merge_seq_length_neq_2") (("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_merge_vertex_neq_prev_vertex 0
  (next_merge_vertex_neq_prev_vertex-1 nil 3874129022
   ("" (skeep*)
    (("" (expand "next_merge_vertex")
      (("" (lift-if)
        (("" (split -3)
          (("1" (flatten)
            (("1" (split -2)
              (("1" (flatten)
                (("1" (split -2)
                  (("1" (flatten)
                    (("1" (split -1)
                      (("1" (expand "edge_of_polygon?")
                        (("1" (ground)
                          (("1" (skeep)
                            (("1"
                              (lemma
                               "same_polygon_edge_overlaps_equal")
                              (("1"
                                (inst
                                 -
                                 "Am"
                                 "edges_of_polygon(Am)(i)"
                                 "edges_of_polygon(Am)(next_index(Am, i))")
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "edges_of_polygon")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (expand
                                     "are_segments_overlapping?")
                                    (("2"
                                      (inst + "vertex" "prev_vtx")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (expand "edges_of_polygon")
                                          (("2"
                                            (ground)
                                            (("1"
                                              (expand
                                               "point_on_segment?")
                                              (("1"
                                                (inst + "1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "point_on_segment?")
                                              (("2"
                                                (inst + "0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "point_on_segment?")
                                              (("3"
                                                (inst + "0")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand
                                               "point_on_segment?")
                                              (("4"
                                                (inst + "1")
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "find_index_self_index")
                                                    (("4"
                                                      (inst
                                                       -
                                                       "Am"
                                                       "next_index(Am, i)")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2"
                              (lemma
                               "same_polygon_edge_overlaps_equal")
                              (("2"
                                (inst
                                 -
                                 "Bm"
                                 "edges_of_polygon(Bm)(i)"
                                 "edges_of_polygon(Bm)(next_index(Bm, i))")
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "edges_of_polygon")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (expand
                                     "are_segments_overlapping?")
                                    (("2"
                                      (inst + "vertex" "prev_vtx")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (expand "edges_of_polygon")
                                          (("2"
                                            (ground)
                                            (("1"
                                              (expand
                                               "point_on_segment?")
                                              (("1"
                                                (inst + "1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "point_on_segment?")
                                              (("2"
                                                (inst + "0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "point_on_segment?")
                                              (("3"
                                                (inst + "0")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand
                                               "point_on_segment?")
                                              (("4"
                                                (inst + "1")
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "find_index_self_index")
                                                    (("4"
                                                      (inst
                                                       -
                                                       "Bm"
                                                       "next_index(Bm, i)")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "point_between_rays_not_on_rays")
                        (("2" (hide -7)
                          (("2" (ground)
                            (("1" (expand "point_on_arb_ray?")
                              (("1"
                                (inst
                                 2
                                 "length(edges_of_polygon(Am)(find_index(Am, vertex)))")
                                (("1"
                                  (hide -1 1 3)
                                  (("1"
                                    (expand "edges_of_polygon")
                                    (("1"
                                      (expand "length")
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (name-replace*
                                             ("F"
                                              "Am`vertices(find_index(Am, vertex))"
                                              "L"
                                              "Am`vertices(next_index(Am, find_index(Am, vertex)))"))
                                            (("1"
                                              (equate
                                               "F + (L - F)"
                                               "L")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (cancel-add 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (expand "edges_of_polygon")
                                (("2"
                                  (use "find_index_self")
                                  (("2"
                                    (lemma "find_index_self")
                                    (("2"
                                      (inst - "Am" "vertex")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "edges_of_polygon")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (ground)
                  (("1" (expand "edge_of_polygon?")
                    (("1" (skeep)
                      (("1" (expand "edges_of_polygon")
                        (("1" (ground)
                          (("1"
                            (lemma "second_edge_does_not_double_back")
                            (("1"
                              (inst - "prev_vtx" "Am" "i"
                               "next_index(Am, i)")
                              (("1"
                                (lemma "find_index_self_index")
                                (("1"
                                  (inst-cp - "Am" "i")
                                  (("1"
                                    (inst - "Am" "next_index(Am, i)")
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "Am")
                                (("2"
                                  (expand "simple_polygon_2d?")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "edge_of_polygon?")
                    (("2" (skeep)
                      (("2" (expand "edges_of_polygon")
                        (("2" (flatten)
                          (("2" (use "vertex_find_index")
                            (("2" (assert)
                              (("2"
                                (expand "vertex?")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (ground)
              (("1" (expand "edge_of_polygon?")
                (("1" (skeep)
                  (("1" (expand "edges_of_polygon")
                    (("1" (flatten)
                      (("1" (use "vertex_find_index")
                        (("1" (assert)
                          (("1" (expand "vertex?")
                            (("1" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "edge_of_polygon?")
                (("2" (skeep)
                  (("2" (expand "edges_of_polygon")
                    (("2" (ground)
                      (("2" (lemma "second_edge_does_not_double_back")
                        (("2"
                          (inst - "prev_vtx" "Bm" "i"
                           "next_index(Bm, i)")
                          (("1" (lemma "find_index_self_index")
                            (("1" (inst-cp - "Bm" "i")
                              (("1"
                                (inst - "Bm" "next_index(Bm, i)")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "Bm")
                            (("2" (expand "simple_polygon_2d?")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (prev_edge_not_on_arb_ray_TCC1 0
  (prev_edge_not_on_arb_ray_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (prev_edge_not_on_arb_ray subtype "merge_well_formed.vertex"
    "{p: vectors_cross_2d.point_2d | p /= merge_well_formed.prev_vtx}"))
  (prev_edge_not_on_arb_ray_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (prev_edge_not_on_arb_ray subtype "merge_well_formed.vertex"
    "{p: vectors_cross_2d.point_2d | p /= merge_well_formed.prev_vtx}")))
 (prev_edge_not_on_arb_ray_TCC2 0
  (prev_edge_not_on_arb_ray_TCC2-2 nil 3874129022
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (prev_edge_not_on_arb_ray subtype
    "(vectors_2D.-)(merge_well_formed.e`p2, merge_well_formed.e`p1)"
    "Nz_vector"))
  (prev_edge_not_on_arb_ray_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (prev_edge_not_on_arb_ray subtype
    "(vectors_2D.-)(merge_well_formed.e`p2, merge_well_formed.e`p1)"
    "Nz_vector")))
 (prev_edge_not_on_arb_ray 0
  (prev_edge_not_on_arb_ray-1 nil 3874129022
   ("" (skeep*)
    (("" (case "prev_vtx = vertex")
      (("1" (propax) nil nil)
       ("2" (use "injected_only_vertex_intersections")
        (("2" (ground)
          (("1" (lemma "same_polygon_edge_overlaps_equal")
            (("1"
              (inst - "Am" "e" "(# p1 := prev_vtx, p2 := vertex #)")
              (("1" (ground)
                (("1" (expand "are_segments_overlapping?")
                  (("1" (expand "point_on_arb_ray?")
                    (("1" (skeep)
                      (("1" (case "d <= length(e)")
                        (("1" (inst + "e`p1" "prev_vtx")
                          (("1" (assert)
                            (("1" (expand "edge_of_polygon?")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "edges_of_polygon")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (replace -9 1)
                                      (("1"
                                        (rewrite
                                         "point_on_segment_has_norm_offset")
                                        (("1"
                                          (inst? +)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_segment?")
                                      (("2"
                                        (inst + "1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "point_on_segment?")
                                      (("3"
                                        (inst + "0")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "e`p1" "e`p2")
                          (("2" (ground)
                            (("1" (expand "point_on_segment?")
                              (("1"
                                (inst + "1")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (use "segment_far_endpoint_length")
                              (("2"
                                (lemma "point_on_reverse_segment")
                                (("2"
                                  (inst
                                   -
                                   "e`p2"
                                   "(# p1 := prev_vtx, p2 := vertex #)")
                                  (("2"
                                    (replace -1 :dir rl :hide? t)
                                    (("2"
                                      (expand "reverse_segment")
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (replace -8 1)
                                          (("2"
                                            (rewrite
                                             "point_on_segment_has_norm_offset")
                                            (("2"
                                              (rewrite
                                               "normalize_scal")
                                              (("2"
                                                (expand "sign")
                                                (("2"
                                                  (rewrite
                                                   "normalize_normalize")
                                                  (("2"
                                                    (inst
                                                     +
                                                     "length(e)")
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (expand
                                                         "length")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -2)
            (("2" (inst - "e")
              (("2" (expand "only_vertex_intersections?")
                (("2" (inst - "(# p1 := prev_vtx, p2 := vertex #)")
                  (("2" (ground)
                    (("1" (expand "reverse_segment")
                      (("1" (propax) nil nil)) nil)
                     ("2" (expand "point_on_arb_ray?")
                      (("2" (skeep)
                        (("2" (case "d <= length(e)")
                          (("1" (inst - "prev_vtx")
                            (("1" (ground)
                              (("1"
                                (expand "segment_endpoint?")
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "point_on_segment?")
                                (("2"
                                  (inst + "0")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (replace -6 1)
                                (("3"
                                  (rewrite
                                   "point_on_segment_has_norm_offset")
                                  (("3"
                                    (inst + "d")
                                    (("3" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "e`p2")
                            (("2" (ground)
                              (("1"
                                (expand "segment_endpoint?")
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (replace -5 1)
                                (("2"
                                  (lemma "point_on_reverse_segment")
                                  (("2"
                                    (inst
                                     -
                                     "e`p2"
                                     "(# p1 := vertex + d * ^(e`p2 - e`p1),
                           p2 := vertex #)")
                                    (("2"
                                      (replace -1 :dir rl :hide? t)
                                      (("2"
                                        (expand "reverse_segment")
                                        (("2"
                                          (replace -4 :dir rl)
                                          (("2"
                                            (use
                                             "segment_far_endpoint_length")
                                            (("2"
                                              (name-replace
                                               "v"
                                               "^(e`p2 - e`p1)")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (rewrite
                                                   "point_on_segment_has_norm_offset")
                                                  (("2"
                                                    (rewrite
                                                     "normalize_scal")
                                                    (("2"
                                                      (expand "sign")
                                                      (("2"
                                                        (expand "v")
                                                        (("2"
                                                          (rewrite
                                                           "normalize_normalize")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "length(e)")
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_edge_on_ray_imp_next_vertices_eq_TCC1 0
  (next_edge_on_ray_imp_next_vertices_eq_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_edge_on_ray_imp_next_vertices_eq subtype
    "merge_well_formed.next_vtx"
    "{p: vectors_cross_2d.point_2d | p /= merge_well_formed.vertex}"))
  (next_edge_on_ray_imp_next_vertices_eq_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (next_edge_on_ray_imp_next_vertices_eq subtype
    "merge_well_formed.next_vtx"
    "{p: vectors_cross_2d.point_2d | p /= merge_well_formed.vertex}")))
 (next_edge_on_ray_imp_next_vertices_eq_TCC2 0
  (next_edge_on_ray_imp_next_vertices_eq_TCC2-2 nil 3874129022
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (next_edge_on_ray_imp_next_vertices_eq subtype
    "(vectors_2D.-)(merge_well_formed.e`p2, merge_well_formed.e`p1)"
    "Nz_vector"))
  (next_edge_on_ray_imp_next_vertices_eq_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (next_edge_on_ray_imp_next_vertices_eq subtype
    "(vectors_2D.-)(merge_well_formed.e`p2, merge_well_formed.e`p1)"
    "Nz_vector")))
 (next_edge_on_ray_imp_next_vertices_eq 0
  (next_edge_on_ray_imp_next_vertices_eq-1 nil 3874129022
   ("" (skeep*)
    (("" (use "injected_only_vertex_intersections")
      (("" (ground)
        (("" (inst - "e")
          (("" (hide -2)
            (("" (expand "only_vertex_intersections?")
              (("" (inst - "(# p1 := vertex, p2 := next_vtx #)")
                (("" (ground)
                  (("1" (expand "reverse_segment")
                    (("1" (propax) nil nil)) nil)
                   ("2" (expand "point_on_arb_ray?")
                    (("2" (skeep)
                      (("2" (case "d <= length(e)")
                        (("1" (inst - "next_vtx")
                          (("1" (ground)
                            (("1" (expand "segment_endpoint?")
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "point_on_segment?")
                              (("2"
                                (inst + "1")
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (replace -6 1)
                              (("3"
                                (rewrite
                                 "point_on_segment_has_norm_offset")
                                (("3"
                                  (inst?)
                                  (("3" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "e`p2")
                          (("2" (ground)
                            (("1" (expand "segment_endpoint?")
                              (("1" (propax) nil nil)) nil)
                             ("2" (replace -5 1)
                              (("2"
                                (use "segment_far_endpoint_length")
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "normalize_scal")
                                      (("2"
                                        (expand "sign")
                                        (("2"
                                          (rewrite
                                           "normalize_normalize")
                                          (("2"
                                            (rewrite
                                             "point_on_segment_has_norm_offset")
                                            (("2"
                                              (rewrite
                                               "normalize_scal")
                                              (("2"
                                                (rewrite
                                                 "normalize_normalize")
                                                (("2"
                                                  (expand "sign")
                                                  (("2"
                                                    (inst
                                                     +
                                                     "length(e)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_merge_vertex_comm_TCC1 0
  (next_merge_vertex_comm_TCC1-2 nil 3874129022
   ("" (skeep)
    (("" (typepred "vertex")
      (("" (expand "point_AB_vtx?") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak
   (next_merge_vertex_comm subtype "merge_well_formed.vertex"
    "(polygon_merge.point_AB_vtx?(merge_well_formed.Bm, merge_well_formed.Am))"))
  (next_merge_vertex_comm_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (next_merge_vertex_comm subtype "merge_well_formed.vertex"
    "(polygon_merge.point_AB_vtx?(merge_well_formed.Bm, merge_well_formed.Am))")))
 (next_merge_vertex_comm 0
  (next_merge_vertex_comm-1 nil 3874129022
   ("" (skeep*)
    (("" (lemma "next_merge_vertex_neq_prev_vertex")
      (("" (inst-cp - "A" "B" "Am" "Bm" "vertex" "prev_vtx")
        (("" (inst - "B" "A" "Bm" "Am" "vertex" "prev_vtx")
          (("1" (use "inject_vertices_into_polygon_comm")
            (("1" (assert)
              (("1" (assert)
                (("1" (replace -5)
                  (("1" (split -2)
                    (("1" (flatten)
                      (("1" (expand "next_merge_vertex")
                        (("1" (apply (repeat (lift-if)))
                          (("1" (split 4)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon"
                                                     -1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "point_between_rays_antisymmetric")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "edges_of_polygon")
                                                              (("1"
                                                                (lemma
                                                                 "find_index_self")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "Am"
                                                                   "vertex")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "Bm"
                                                                     "vertex")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split 3)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "point_between_rays_antisymmetric_2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2 5)
                                                        (("2"
                                                          (expand
                                                           "edges_of_polygon")
                                                          (("2"
                                                            (lemma
                                                             "find_index_self")
                                                            (("2"
                                                              (inst-cp
                                                               -
                                                               "Am"
                                                               "vertex")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "Bm"
                                                                 "vertex")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -2)
                                                                      (("2"
                                                                        (split
                                                                         -3)
                                                                        (("1"
                                                                          (lemma
                                                                           "prev_edge_not_on_arb_ray")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "A"
                                                                             "B"
                                                                             "Am"
                                                                             "Bm"
                                                                             "vertex"
                                                                             "prev_vtx"
                                                                             "edges_of_polygon(Am)(find_index(Am, vertex))")
                                                                            (("1"
                                                                              (expand
                                                                               "edges_of_polygon")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (expand
                                                                                   "edge_of_polygon?")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "find_index(Am, vertex)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "edges_of_polygon")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "edge_of_polygon?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "find_index(Am, vertex)")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "edges_of_polygon")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "prev_edge_not_on_arb_ray")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "B"
                                                                             "A"
                                                                             "Bm"
                                                                             "Am"
                                                                             "vertex"
                                                                             "prev_vtx"
                                                                             "edges_of_polygon(Bm)(find_index(Bm, vertex))")
                                                                            (("1"
                                                                              (expand
                                                                               "edges_of_polygon")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (expand
                                                                                   "edge_of_polygon?")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "find_index(Bm, vertex)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "edges_of_polygon")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "edge_of_polygon?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "find_index(Bm, vertex)")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "edges_of_polygon")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "prev_vtx")
                                                                              (("2"
                                                                                (expand
                                                                                 "point_AB_vtx?")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (typepred
                                                                               "vertex")
                                                                              (("3"
                                                                                (expand
                                                                                 "point_AB_vtx?")
                                                                                (("3"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           -8)
                                                                          (("3"
                                                                            (lemma
                                                                             "next_edge_on_ray_imp_next_vertices_eq")
                                                                            (("3"
                                                                              (inst
                                                                               -
                                                                               "A"
                                                                               "B"
                                                                               "Am"
                                                                               "Bm"
                                                                               "vertex"
                                                                               "Am`vertices(next_index(Am, find_index(Am, vertex)))"
                                                                               "edges_of_polygon(Bm)(find_index(Bm, vertex))")
                                                                              (("1"
                                                                                (expand
                                                                                 "edges_of_polygon"
                                                                                 -1)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "edge_of_polygon?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "find_index(Bm, vertex)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "edges_of_polygon")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "vertex_neq_next")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "Am"
                                                                                       "find_index(Am, vertex)")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "edge_of_polygon?")
                                                                                    (("3"
                                                                                      (inst
                                                                                       +
                                                                                       "find_index(Am, vertex)")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "edges_of_polygon")
                                                                                        (("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "point_AB_vtx?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vertex?")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (split 2)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "vertex")
                                        (("2"
                                          (expand "point_AB_vtx?")
                                          (("2"
                                            (use "vertex_find_index")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "vertex_find_index")
                                                (("2"
                                                  (inst
                                                   -
                                                   "Am"
                                                   "vertex")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "prev_vtx")
            (("2" (expand "point_AB_vtx?") (("2" (ground) nil nil))
              nil))
            nil)
           ("3" (typepred "B")
            (("3" (use "merge_pre_condition_symmetric")
              (("3" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_merge_vertex_comm_prev_0_TCC1 0
  (next_merge_vertex_comm_prev_0_TCC1-2 nil 3874129022
   ("" (skeep*)
    (("" (use "first_vertex_AB") (("" (ground) nil nil)) nil)) nil)
   nil shostak
   (next_merge_vertex_comm_prev_0 subtype "merge_well_formed.first_vtx"
    "(polygon_merge.point_AB_vtx?(merge_well_formed.Am, merge_well_formed.Bm))"))
  (next_merge_vertex_comm_prev_0_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (next_merge_vertex_comm_prev_0 subtype "merge_well_formed.first_vtx"
    "(polygon_merge.point_AB_vtx?(merge_well_formed.Am, merge_well_formed.Bm))")))
 (next_merge_vertex_comm_prev_0_TCC2 0
  (next_merge_vertex_comm_prev_0_TCC2-2 nil 3874129022
   ("" (skeep*)
    (("" (use "first_vertex_AB")
      (("" (ground)
        (("" (expand "point_AB_vtx?") (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (next_merge_vertex_comm_prev_0 subtype "merge_well_formed.first_vtx"
    "(polygon_merge.point_AB_vtx?(merge_well_formed.Bm, merge_well_formed.Am))"))
  (next_merge_vertex_comm_prev_0_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (next_merge_vertex_comm_prev_0 subtype "merge_well_formed.first_vtx"
    "(polygon_merge.point_AB_vtx?(merge_well_formed.Bm, merge_well_formed.Am))")))
 (next_merge_vertex_comm_prev_0 0
  (next_merge_vertex_comm_prev_0-1 nil 3874129022
   ("" (skeep*)
    (("" (skoletin)
      (("" (expand "next_merge_vertex")
        (("" (apply (repeat (lift-if)))
          (("" (ground)
            (("1" (expand "edges_of_polygon")
              (("1" (lemma "prev_0_first_vtx_not_on_Am_or_Bm")
                (("1"
                  (inst - "A" "B" "Am" "Bm"
                   "Am`vertices(next_index(Am, find_index(Am, first_vtx)))")
                  (("1" (ground) nil nil)) nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (expand "edges_of_polygon")
                (("2" (lemma "prev_0_first_vtx_not_on_Am_or_Bm")
                  (("2"
                    (inst - "A" "B" "Am" "Bm"
                     "Bm`vertices(next_index(Bm, find_index(Bm, first_vtx)))")
                    (("2" (ground)
                      (("2" (hide 1)
                        (("2" (use "vertex_on_perimeter")
                          (("2" (assert)
                            (("2" (expand "vertex?")
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -2)
              (("3" (expand "edges_of_polygon")
                (("3" (lemma "prev_0_first_vtx_not_on_Am_or_Bm")
                  (("3"
                    (inst - "A" "B" "Am" "Bm"
                     "Am`vertices(next_index(Am, find_index(Am, first_vtx)))")
                    (("3" (ground)
                      (("3" (hide 2)
                        (("3" (use "vertex_on_perimeter")
                          (("3" (assert)
                            (("3" (expand "vertex?")
                              (("3" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (use "point_between_rays_antisymmetric")
              (("4" (ground)
                (("4" (hide -1 -2)
                  (("4" (expand "edges_of_polygon")
                    (("4" (use "find_index_self")
                      (("4" (ground)
                        (("4" (lemma "find_index_self")
                          (("4" (inst - "Am" "first_vtx")
                            (("4" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (use "point_between_rays_antisymmetric_2")
              (("5" (assert)
                (("5" (expand "edges_of_polygon" -1)
                  (("5" (hide 2 5)
                    (("5" (case "prev_0(first_vtx)`x < first_vtx`x")
                      (("1"
                        (name-replace*
                         ("ia" "find_index(Am, first_vtx)" "ib"
                          "find_index(Bm, first_vtx)"))
                        (("1"
                          (case "Am`vertices(ia) = Bm`vertices(ib)")
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (use
                                 "leftward_point_not_on_ray_of_edge")
                                (("1"
                                  (expand "edges_of_polygon" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "find_index_self")
                                      (("1"
                                        (inst - "Am" "first_vtx")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use
                                             "first_vertex_x_le_vertices")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -
                                                   "next_index(Am, ia)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "leftward_point_not_on_ray_of_edge")
                                (("2"
                                  (inst
                                   -
                                   "prev_0(first_vtx)"
                                   "edges_of_polygon(Bm)(ib)")
                                  (("2"
                                    (expand "edges_of_polygon" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use
                                         "first_vertex_x_le_vertices")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma "find_index_self")
                                              (("2"
                                                (inst
                                                 -
                                                 "Bm"
                                                 "first_vtx")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "next_index(Bm, ib)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (use
                                 "injected_only_vertex_intersections")
                                (("3"
                                  (ground)
                                  (("3"
                                    (inst - "edges_of_polygon(Bm)(ib)")
                                    (("3"
                                      (hide -2)
                                      (("3"
                                        (expand
                                         "only_vertex_intersections?")
                                        (("3"
                                          (inst
                                           -
                                           "edges_of_polygon(Am)(ia)")
                                          (("3"
                                            (ground)
                                            (("1"
                                              (expand
                                               "edges_of_polygon")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "reverse_segment")
                                              (("2"
                                                (expand
                                                 "edges_of_polygon"
                                                 -1)
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "point_on_arb_ray?")
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (case
                                                   "d <= norm(Bm`vertices(next_index(Bm, ib)) - Bm`vertices(ib))")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "Am`vertices(next_index(Am, ia))")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "segment_endpoint?")
                                                        (("1"
                                                          (expand
                                                           "edges_of_polygon"
                                                           -2)
                                                          (("1"
                                                            (case-replace
                                                             "d = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "vertex_neq_next")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "Am"
                                                                   "ia")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (hide-all-but
                                                                 (-4
                                                                  1))
                                                                (("2"
                                                                  (name-replace
                                                                   "v"
                                                                   "^(Bm`vertices(next_index(Bm, ib)) - Bm`vertices(ib))")
                                                                  (("2"
                                                                    (cancel-add
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "v")
                                                                      (("2"
                                                                        (use
                                                                         "scal_eq_zero")
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (expand
                                                                             "^")
                                                                            (("2"
                                                                              (cross-mult
                                                                               -1)
                                                                              (("2"
                                                                                (use
                                                                                 "vertex_neq_prev")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "vertex_neq_next")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "Bm"
                                                           "ib")
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (rewrite
                                                               "point_on_segment_has_norm_offset")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "d")
                                                                (("2"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "length")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     -
                                                     "Bm`vertices(next_index(Bm, ib))")
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "segment_endpoint?")
                                                        (("1"
                                                          (expand
                                                           "edges_of_polygon"
                                                           -1)
                                                          (("1"
                                                            (lemma
                                                             "vertex_neq_next")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "Bm"
                                                               "ib")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("2"
                                                          (lemma
                                                           "segment_far_endpoint_length")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "edges_of_polygon(Bm)(ib)")
                                                            (("2"
                                                              (expand
                                                               "edges_of_polygon")
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -2
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (rewrite
                                                                       "point_on_segment_has_norm_offset")
                                                                      (("2"
                                                                        (expand
                                                                         "length")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (rewrite
                                                                             "normalize_scal")
                                                                            (("2"
                                                                              (expand
                                                                               "sign")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "normalize_normalize")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "norm(Bm`vertices(next_index(Bm, ib)) - Bm`vertices(ib))")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "find_index_self")
                            (("2" (lemma "find_index_self")
                              (("2"
                                (inst - "Am" "first_vtx")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil)
                           ("4" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (use "vertex_find_index")
              (("6" (lemma "vertex_find_index")
                (("6" (inst - "Am" "first_vtx")
                  (("6" (ground)
                    (("6" (use "first_vertex_AB")
                      (("6" (ground)
                        (("6" (expand "point_AB_vtx?")
                          (("6" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_prefix_comm 0
  (merge_prefix_comm-1 nil 3874129022
   ("" (skeep)
    (("" (induct "k")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (skeep*)
        (("3" (inst?)
          (("3" (ground)
            (("3" (expand "merge_prefix" +)
              (("3" (replace -1)
                (("3" (equate (! 1 l 2 1) (! 1 r 2 1))
                  (("1" (hide -1 2)
                    (("1"
                      (name-replace "mp"
                       "merge_prefix(Bm, Am, first_vertex_merge(A, B), j)"
                       :hide? nil)
                      (("1" (expand "seq_prev_vtx")
                        (("1" (lift-if)
                          (("1" (ground)
                            (("1" (use "next_merge_vertex_comm")
                              (("1"
                                (ground)
                                (("1"
                                  (replace -4 -1 :dir rl)
                                  (("1"
                                    (lemma "merge_prefix_prev")
                                    (("1"
                                      (inst
                                       -
                                       "Bm"
                                       "Am"
                                       _
                                       "j - 1"
                                       "j - 1")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace
                                             -1
                                             :dir
                                             rl
                                             :hide?
                                             t)
                                            (("1"
                                              (expand
                                               "merge_prefix"
                                               -1
                                               1)
                                              (("1"
                                                (expand
                                                 "singleton_seq")
                                                (("1"
                                                  (expand "o")
                                                  (("1"
                                                    (use
                                                     "next_vertex_distinct")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "next_merge_vtx_seq")
                                  (("2"
                                    (inst - "B" "A" "Bm" "Am" "mp" "j")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (inst - "j - 1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use
                                             "next_merge_vertex_on_edge")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2 :dir rl)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "inject_vertices_into_polygon_comm")
                                        (("2"
                                          (inst - "A" "B" "Am" "Bm")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (use "first_vertex_merge_comm")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use
                                       "merge_pre_condition_symmetric")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "mp")
                                (("2"
                                  (expand "point_seq_AB_vtx?")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (expand "point_AB_vtx?")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "next_merge_vertex_comm_prev_0")
                              (("2"
                                (ground)
                                (("2"
                                  (replace -2 :dir rl)
                                  (("2"
                                    (expand "merge_prefix")
                                    (("2"
                                      (expand "singleton_seq")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (typepred
                       "merge_prefix(Bm, Am, first_vertex_merge(A, B), j)")
                      (("2" (expand "point_seq_AB_vtx?")
                        (("2" (inst?)
                          (("2" (expand "point_AB_vtx?")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (skeep*)
          (("4" (use "first_vertex_AB")
            (("4" (expand "point_AB_vtx?") (("4" (ground) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skeep*)
          (("5" (use "first_vertex_AB") (("5" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_commutative_TCC1 0
  (merge_seq_commutative_TCC1-2 nil 3874129022
   ("" (skeep + t)
    (("" (expand "ccw_merge_pre_condition")
      (("" (use "merge_pre_condition_symmetric")
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (merge_seq_commutative subtype "merge_well_formed.A"
    "(injection_props.merge_pre_condition(merge_well_formed.B))"))
  (merge_seq_commutative_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_commutative subtype "merge_well_formed.A"
    "(injection_props.merge_pre_condition(merge_well_formed.B))")))
 (merge_seq_commutative 0
  (merge_seq_commutative-1 nil 3874129022
   ("" (skeep)
    ((""
      (name-replace*
       ("Am" "inject_vertices_into_polygon(A, B)`1" "Bm"
        "inject_vertices_into_polygon(A, B)`2"))
      (("" (typepred "B")
        (("" (copy -3)
          (("" (expand "ccw_merge_pre_condition" -1)
            (("" (use "merge_pre_condition_symmetric")
              (("" (assert)
                ((""
                  (case "(Am, Bm) = inject_vertices_into_polygon(A, B)")
                  (("1" (hide -7 -8)
                    (("1" (lemma "inject_vertices_into_polygon_comm")
                      (("1" (inst - "A" "B" "Am" "Bm")
                        (("1" (ground)
                          (("1" (use "merge_seq_eq_merge_prefix")
                            (("1" (lemma "merge_seq_eq_merge_prefix")
                              (("1"
                                (inst - "A" "B" "Am" "Bm")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "first_vertex_merge_comm")
                                    (("1"
                                      (use "merge_seq_has_min_length")
                                      (("1"
                                        (lemma
                                         "merge_seq_has_min_length")
                                        (("1"
                                          (inst - "B" "A")
                                          (("1"
                                            (lemma "merge_prefix_comm")
                                            (("1"
                                              (case
                                               "merge_seq(B, A)`length = merge_seq(A, B)`length")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst
                                                   -
                                                   "merge_seq(A, B)`length - 1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "merge_seq(B, A)`length < merge_seq(A, B)`length")
                                                (("1"
                                                  (inst
                                                   -
                                                   "A"
                                                   "B"
                                                   "Am"
                                                   "Bm"
                                                   "merge_seq(B, A)`length - 1")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (replace -5 -6)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (lemma
                                                           "merge_seq_max_length")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "A"
                                                             "B"
                                                             "Am"
                                                             "Bm")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "merge_seq_vertices_wrap")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "B"
                                                                   "A"
                                                                   "Bm"
                                                                   "Am"
                                                                   "merge_seq(B, A)")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "seq_prev_vtx")
                                                                      (("1"
                                                                        (use
                                                                         "next_merge_vertex_comm")
                                                                        (("1"
                                                                          (lemma
                                                                           "next_is_first_merge_seq_length")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "A"
                                                                             "B"
                                                                             "Am"
                                                                             "Bm"
                                                                             _
                                                                             _
                                                                             _
                                                                             "merge_seq(B, A)`length - 1")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "adj_merge_seq_vertices_distinct")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "B"
                                                                                       "A"
                                                                                       "Bm"
                                                                                       "Am"
                                                                                       "merge_seq(B, A)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "merge_seq(B, A)`length - 2")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "merge_vertex_seq")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "B"
                                                                                       "A"
                                                                                       "Bm"
                                                                                       "Am"
                                                                                       "merge_seq(B, A)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "merge_seq(B, A)`length - 2")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "seq_prev_vtx")
                                                                                            (("2"
                                                                                              (use
                                                                                               "next_merge_vertex_on_edge")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-12
                                                                                    1))
                                                                                  (("2"
                                                                                    (use
                                                                                     "first_vertex_AB")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "merge_prefix(Am, Bm, first_vertex_merge(A, B),
                                    merge_seq(B, A)`length - 1)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "point_seq_AB_vtx?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "merge_seq(B, A)`length - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "merge_prefix(Am, Bm, first_vertex_merge(A, B),
                                  merge_seq(B, A)`length - 1)")
                                                                          (("2"
                                                                            (expand
                                                                             "point_seq_AB_vtx?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "merge_seq(B, A)`length - 2")
                                                                              (("2"
                                                                                (expand
                                                                                 "point_AB_vtx?")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   -
                                                   "B"
                                                   "A"
                                                   "Bm"
                                                   "Am"
                                                   "merge_seq(A, B)`length - 1")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (lemma
                                                       "merge_seq_max_length")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "B"
                                                         "A"
                                                         "Bm"
                                                         "Am")
                                                        (("1"
                                                          (lemma
                                                           "merge_seq_vertices_wrap")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "A"
                                                             "B"
                                                             "Am"
                                                             "Bm"
                                                             "merge_seq(A, B)")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "seq_prev_vtx")
                                                                (("1"
                                                                  (use
                                                                   "next_merge_vertex_comm")
                                                                  (("1"
                                                                    (lemma
                                                                     "next_is_first_merge_seq_length")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "B"
                                                                       "A"
                                                                       "Bm"
                                                                       "Am"
                                                                       _
                                                                       _
                                                                       _
                                                                       "merge_seq(A, B)`length - 1")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "first_vertex_merge(B, A)"
                                                                         _
                                                                         _)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (lemma
                                                                               "adj_merge_seq_vertices_distinct")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "A"
                                                                                 "B"
                                                                                 "Am"
                                                                                 "Bm"
                                                                                 "merge_seq(A, B)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "merge_seq(A, B)`length - 2")
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "merge_vertex_seq")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "A"
                                                                                 "B"
                                                                                 "Am"
                                                                                 "Bm"
                                                                                 "merge_seq(A, B)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "merge_seq(A, B)`length - 2")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "seq_prev_vtx")
                                                                                      (("2"
                                                                                        (use
                                                                                         "next_merge_vertex_on_edge")
                                                                                        (("2"
                                                                                          (skoletin*)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3
                                                                                               -2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (typepred
                                                                               "merge_prefix(Am, Bm, first_vertex_merge(A, B),
                                 merge_seq(A, B)`length - 1)")
                                                                              (("2"
                                                                                (expand
                                                                                 "point_seq_AB_vtx?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "merge_seq(A, B)`length - 1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "point_AB_vtx?")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "merge_prefix(Am, Bm, first_vertex_merge(A, B),
                               merge_seq(A, B)`length - 1)")
                                                                    (("2"
                                                                      (expand
                                                                       "point_seq_AB_vtx?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "merge_seq(A, B)`length - 2")
                                                                        (("2"
                                                                          (expand
                                                                           "point_AB_vtx?")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     "merge_prefix(Am, Bm, first_vertex_merge(A, B),
                               merge_seq(A, B)`length - 1)")
                                                                    (("3"
                                                                      (expand
                                                                       "point_seq_AB_vtx?")
                                                                      (("3"
                                                                        (inst
                                                                         -
                                                                         "merge_seq(A, B)`length - 1")
                                                                        (("3"
                                                                          (expand
                                                                           "point_AB_vtx?")
                                                                          (("3"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "ccw_merge_pre_condition")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality :hide? t) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (A_vertex_imp_B_vertex 0
  (A_vertex_imp_B_vertex-1 nil 3874129022
   ("" (skeep)
    (("" (expand "vertex?")
      (("" (expand "point_on_polygon_perimeter?")
        (("" (skeep* - t)
          (("" (inst - "edges_of_polygon(A)(i)")
            (("" (expand "edge_of_polygon?")
              (("" (skeep)
                (("" (expand "edges_of_polygon" -1)
                  (("" (expand "only_vertex_intersections?")
                    (("" (inst - "e")
                      (("" (ground)
                        (("1" (expand "edges_of_polygon" -1)
                          (("1" (inst + "i!1")
                            (("1" (replace -1 -3)
                              (("1"
                                (ground)
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "edges_of_polygon" -1)
                          (("2" (expand "reverse_segment")
                            (("2" (inst + "next_index(B, i!1)")
                              (("2"
                                (replace -1 -3)
                                (("2"
                                  (ground)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (inst - "v")
                          (("3" (ground)
                            (("1" (expand "segment_endpoint?")
                              (("1"
                                (replace -3 -1 :dir rl)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst-cp + "i!1")
                                    (("1"
                                      (inst + "next_index(B, i!1)")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -3 :dir rl)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (B_vertex_imp_A_vertex 0
  (B_vertex_imp_A_vertex-1 nil 3874129022
   ("" (skeep)
    (("" (expand "vertex?")
      (("" (expand "point_on_polygon_perimeter?")
        (("" (skeep* - t)
          (("" (inst - "e")
            (("" (expand "edge_of_polygon?")
              (("" (skeep)
                (("" (expand "edges_of_polygon")
                  (("" (expand "only_vertex_intersections?")
                    (("" (inst - "edges_of_polygon(B)(i)")
                      (("" (ground)
                        (("1" (inst + "i!1")
                          (("1" (expand "edges_of_polygon")
                            (("1" (replace -1 -3 :dir rl)
                              (("1"
                                (ground)
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "reverse_segment")
                          (("2" (expand "edges_of_polygon")
                            (("2" (flatten)
                              (("2"
                                (replace -4 :dir rl)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst + "next_index(A, i!1)")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (inst - "v")
                          (("3" (ground)
                            (("1" (expand "segment_endpoint?")
                              (("1"
                                (replace -3 -2 :dir rl)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst-cp + "i!1")
                                    (("1"
                                      (inst + "next_index(A, i!1)")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -3 :dir rl)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (outside_endpoint_between_rays 0
  (outside_endpoint_between_rays-1 nil 3874129022
   ("" (skeep)
    (("" (name-replace "c" "min(vertex_wedge_radius(B), length(e))")
      (("" (name-replace "r" "e`p1 + c * ^(e`p2 - e`p1)")
        (("1" (case "point_on_segment?(r, e)")
          (("1" (lemma "extend_points_outside_polygon_excl")
            (("1" (inst - "e`p2" "reverse_segment(e)" "B")
              (("1" (expand "reverse_segment" -1 1)
                (("1" (case "r = e`p1")
                  (("1" (replace -1 -4)
                    (("1" (hide-all-but (-4 -5))
                      (("1" (name-replace "v" "^(e`p2 - e`p1)")
                        (("1" (cancel-add -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -1)
                    (("1" (inst - "r")
                      (("1" (rewrite "point_on_reverse_segment")
                        (("1" (expand "reverse_segment" -1)
                          (("1" (assert)
                            (("1" (lemma "extend_points_between_edges")
                              (("1"
                                (inst - "r" "e" "true" "B" "i")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (inst - "e`p2")
                                      (("1"
                                        (expand "point_between_edges?")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "in_wedge_or_on_edge")
                                      (("2"
                                        (inst - "r" "B" "i")
                                        (("2"
                                          (split -1 :depth 1)
                                          (("1"
                                            (use
                                             "perimeter_not_outside")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "point_on_polygon_perimeter?")
                                                (("1"
                                                  (inst-cp
                                                   +
                                                   "edges_of_polygon(B)(i)")
                                                  (("1"
                                                    (inst
                                                     +
                                                     "edges_of_polygon(B)(prev_index(B,i))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (expand
                                                           "point_in_vertex_wedge?")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "all_wedge_points_inside")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (use
                                                               "point_out_not_in")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -3 1 :dir rl)
                                            (("2"
                                              (replace -6 1 :dir rl)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil)
                     ("3" (skeep)
                      (("3" (use "point_on_reverse_segment")
                        (("3" (assert)
                          (("3" (expand "point_on_polygon_perimeter?")
                            (("3" (skeep - t)
                              (("3"
                                (ground)
                                (("1"
                                  (inst - "e")
                                  (("1"
                                    (expand
                                     "only_vertex_intersections?")
                                    (("1"
                                      (inst - "e!1")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (use "perimeter_not_outside")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use
                                               "vertex_on_perimeter")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "vertex?")
                                                  (("1"
                                                    (expand
                                                     "edge_of_polygon?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "next_index(B,i!2)")
                                                          (("1"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "perimeter_not_outside")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use
                                               "vertex_on_perimeter")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (expand
                                                     "edge_of_polygon?")
                                                    (("2"
                                                      (skeep*)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon"
                                                         (-3 -4))
                                                        (("2"
                                                          (replace
                                                           -3
                                                           (-1 1)
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (expand
                                                             "reverse_segment")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "i!2")
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst - "q")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand
                                               "segment_endpoint?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (split -2)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 2))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "perimeter_not_outside")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst - "reverse_segment(e)")
                                  (("2"
                                    (expand
                                     "only_vertex_intersections?")
                                    (("2"
                                      (inst - "e!1")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (use "perimeter_not_outside")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use
                                               "vertex_on_perimeter")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "vertex?")
                                                  (("1"
                                                    (expand
                                                     "edge_of_polygon?")
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon"
                                                         (-3 -4))
                                                        (("1"
                                                          (replace
                                                           -3
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "reverse_segment"
                                                             -3)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "i!2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -5)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "reverse_reverse_segment")
                                          (("2"
                                            (use
                                             "perimeter_not_outside")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use
                                                 "vertex_on_perimeter")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "vertex?")
                                                    (("2"
                                                      (expand
                                                       "edge_of_polygon?")
                                                      (("2"
                                                        (skeep*)
                                                        (("2"
                                                          (expand
                                                           "edges_of_polygon"
                                                           (-3 -4))
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -4
                                                               -3
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "reverse_segment"
                                                                 -3)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "next_index(B, i!2)")
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst - "q")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand
                                               "segment_endpoint?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (use
                                                   "perimeter_not_outside")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (use
                                                       "vertex_on_perimeter")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "vertex?")
                                                          (("3"
                                                            (expand
                                                             "reverse_segment"
                                                             -2)
                                                            (("3"
                                                              (expand
                                                               "edge_of_polygon?")
                                                              (("3"
                                                                (skeep*)
                                                                (("3"
                                                                  (inst-cp
                                                                   +
                                                                   "i!2")
                                                                  (("3"
                                                                    (inst
                                                                     +
                                                                     "next_index(B, i!2)")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "point_on_segment_has_norm_offset")
            (("2" (inst + "c") (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (inside_endpoint_between_rays 0
  (inside_endpoint_between_rays-1 nil 3874129022
   ("" (skeep)
    (("" (name-replace "c" "min(vertex_wedge_radius(B), length(e))")
      (("" (name-replace "r" "e`p1 + c * ^(e`p2 - e`p1)")
        (("1" (case "point_on_segment?(r, e)")
          (("1" (lemma "extend_points_inside_polygon_excl")
            (("1" (inst - "e`p2" "reverse_segment(e)" "B")
              (("1" (expand "reverse_segment" -1 1)
                (("1" (case "r = e`p1")
                  (("1" (replace -1 -4)
                    (("1" (hide-all-but (-4 -5))
                      (("1" (name-replace "v" "^(e`p2 - e`p1)")
                        (("1" (cancel-add -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -1)
                    (("1" (inst - "r")
                      (("1" (rewrite "point_on_reverse_segment")
                        (("1" (expand "reverse_segment" -1)
                          (("1" (assert)
                            (("1" (lemma "extend_points_between_edges")
                              (("1"
                                (inst - "r" "e" "false" "B" "i")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "point_between_edges?")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (inst - "e`p2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite
                                             "between_rays_equiv")
                                            (("1"
                                              (rewrite
                                               "reverse_reverse_segment")
                                              nil
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "in_wedge_or_on_edge")
                                        (("2"
                                          (inst - "r" "B" "i")
                                          (("2"
                                            (hide 3)
                                            (("2"
                                              (rewrite
                                               "between_rays_equiv")
                                              (("1"
                                                (split -1 :depth 1)
                                                (("1"
                                                  (copy -2)
                                                  (("1"
                                                    (expand
                                                     "point_in_polygon?"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "point_on_polygon_perimeter?")
                                                        (("1"
                                                          (inst-cp
                                                           +
                                                           "edges_of_polygon(B)(i)")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "edges_of_polygon(B)(prev_index(B,i))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (use
                                                                   "all_wedge_points_outside")
                                                                  (("1"
                                                                    (use
                                                                     "point_out_not_in")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "point_in_vertex_wedge?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "point_between_edges?")
                                                                      (("2"
                                                                        (rewrite
                                                                         "between_rays_equiv")
                                                                        (("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace
                                                   -3
                                                   1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (replace
                                                     -6
                                                     1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil)
                     ("3" (skeep)
                      (("3" (use "point_on_reverse_segment")
                        (("3" (assert)
                          (("3" (hide 3)
                            (("3"
                              (expand "point_on_polygon_perimeter?")
                              (("3"
                                (skeep - t)
                                (("3"
                                  (ground)
                                  (("1"
                                    (inst - "e")
                                    (("1"
                                      (expand
                                       "only_vertex_intersections?")
                                      (("1"
                                        (inst - "e!1")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand
                                             "point_in_polygon?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (use
                                                 "vertex_on_perimeter")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "vertex?")
                                                    (("1"
                                                      (expand
                                                       "edge_of_polygon?")
                                                      (("1"
                                                        (skeep*)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "next_index(B,i!2)")
                                                          (("1"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_in_polygon?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (use
                                                 "vertex_on_perimeter")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "vertex?")
                                                    (("2"
                                                      (expand
                                                       "edge_of_polygon?")
                                                      (("2"
                                                        (skeep*)
                                                        (("2"
                                                          (expand
                                                           "edges_of_polygon"
                                                           (-3 -4))
                                                          (("2"
                                                            (replace
                                                             -3
                                                             (-1 1)
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (expand
                                                               "reverse_segment")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "i!2")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst - "q")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand
                                                 "segment_endpoint?")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (split -2)
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 2))
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "point_in_polygon?")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst - "reverse_segment(e)")
                                    (("2"
                                      (expand
                                       "only_vertex_intersections?")
                                      (("2"
                                        (inst - "e!1")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand
                                             "point_in_polygon?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (use
                                                 "vertex_on_perimeter")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "vertex?")
                                                    (("1"
                                                      (expand
                                                       "edge_of_polygon?")
                                                      (("1"
                                                        (skeep*)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "i!2")
                                                          (("1"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_in_polygon?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (use
                                                 "vertex_on_perimeter")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "vertex?")
                                                    (("2"
                                                      (expand
                                                       "edge_of_polygon?")
                                                      (("2"
                                                        (skeep*)
                                                        (("2"
                                                          (expand
                                                           "edges_of_polygon"
                                                           (-3 -4))
                                                          (("2"
                                                            (expand
                                                             "reverse_segment")
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "next_index(B, i!2)")
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst - "q")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand
                                                 "segment_endpoint?")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (expand
                                                     "reverse_segment")
                                                    (("3"
                                                      (expand
                                                       "point_in_polygon?")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (use
                                                           "vertex_on_perimeter")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "point_on_segment_has_norm_offset")
            (("2" (inst + "c") (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contained_imp_endpoint_between_rays 0
  (contained_imp_endpoint_between_rays-1 nil 3874129022
   ("" (skeep)
    (("" (case "point_in_polygon?(e`p2, B)")
      (("1" (use "inside_endpoint_between_rays")
        (("1" (ground) nil nil)) nil)
       ("2" (name-replace "c" "min(vertex_wedge_radius(B), length(e))")
        (("2" (name-replace "r" "e`p1 + c/2 * ^(e`p2 - e`p1)")
          (("1" (case "point_on_segment?(r, e)")
            (("1" (case "segment_endpoint?(e)(r)")
              (("1" (expand "segment_endpoint?")
                (("1" (hide -8 +)
                  (("1" (ground)
                    (("1" (replace -1 -3)
                      (("1" (name-replace "v" "^(e`p2 - e`p1)")
                        (("1" (cancel-add -3) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1 -3)
                      (("2" (hide-all-but (-3 -4))
                        (("2" (name-replace "v" "^(e`p2 - e`p1)")
                          (("2" (move-terms -1 l 1)
                            (("2" (cross-mult -1)
                              (("2"
                                (expand "v")
                                (("2"
                                  (expand "^")
                                  (("2"
                                    (real-props)
                                    (("2"
                                      (use "scal_cancel")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "polygon_contained?")
                (("2" (inst-cp -5 "r")
                  (("2" (inst -5 "e`p2")
                    (("2" (splash -5)
                      (("1" (use "A_vertex_imp_B_vertex")
                        (("1" (split -1)
                          (("1" (splash -8)
                            (("1" (expand "vertex?")
                              (("1"
                                (expand
                                 "point_on_polygon_perimeter?"
                                 -1)
                                (("1"
                                  (skeep* - t)
                                  (("1"
                                    (hide 7)
                                    (("1"
                                      (expand "edge_of_polygon?" -2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand
                                           "vertex_wedge_radius")
                                          (("1"
                                            (typepred
                                             "min_edge_sep(B)")
                                            (("1"
                                              (inst - "i" "i!2")
                                              (("1"
                                                (split -3 :depth 1)
                                                (("1"
                                                  (inst - "r")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -12
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (replace
                                                         -15
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (equate
                                                             "e`p1 - (e`p1 + c / 2 * ^(e`p2 - e`p1))"
                                                             "-c / 2 * ^(e`p2 - e`p1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "abs")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (inst - "e")
                                                      (("1"
                                                        (expand
                                                         "only_vertex_intersections?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "e!1")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -
                                                               "r")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -
                                                       "reverse_segment(e)")
                                                      (("2"
                                                        (expand
                                                         "only_vertex_intersections?")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "e!1")
                                                          (("2"
                                                            (rewrite
                                                             "reverse_reverse_segment")
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "r")
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "reverse_segment")
                                                                    (("1"
                                                                      (expand
                                                                       "segment_endpoint?")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (inst - "e")
                                                      (("3"
                                                        (expand
                                                         "only_vertex_intersections?")
                                                        (("3"
                                                          (inst
                                                           -
                                                           "e!1")
                                                          (("3"
                                                            (ground)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -4)
                                                                (("2"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (inst
                                                               -
                                                               "r")
                                                              (("3"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (inst
                                                       -
                                                       "reverse_segment(e)")
                                                      (("4"
                                                        (expand
                                                         "only_vertex_intersections?")
                                                        (("4"
                                                          (inst
                                                           -
                                                           "e!1")
                                                          (("4"
                                                            (ground)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "reverse_reverse_segment")
                                                              (("2"
                                                                (replace
                                                                 -4)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (inst
                                                               -
                                                               "r")
                                                              (("3"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("1"
                                                                    (expand
                                                                     "segment_endpoint?")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "point_on_reverse_segment")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "point_on_polygon_perimeter?(B)(r)")
                              (("1"
                                (expand "point_in_polygon?")
                                (("1" (ground) nil nil))
                                nil)
                               ("2"
                                (lemma "in_wedge_or_on_edge")
                                (("2"
                                  (inst - "r" "B" "i")
                                  (("2"
                                    (split -1 :depth 1)
                                    (("1"
                                      (expand
                                       "point_on_polygon_perimeter?"
                                       +)
                                      (("1"
                                        (inst-cp
                                         1
                                         "edges_of_polygon(B)(i)")
                                        (("1"
                                          (inst
                                           1
                                           "edges_of_polygon(B)(prev_index(B, i))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (use
                                                 "all_wedge_points_outside")
                                                (("1"
                                                  (use
                                                   "point_out_not_in")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "point_in_vertex_wedge?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (use
                                                     "extend_points_between_edges")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "e`p2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "point_between_edges?")
                                                              (("1"
                                                                (rewrite
                                                                 "between_rays_equiv")
                                                                (("1"
                                                                  (rewrite
                                                                   "reverse_reverse_segment")
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "segment_endpoint?")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -7 1 :dir rl)
                                      (("2"
                                        (replace -10 :dir rl)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "abs")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but (-4 -9 1))
                              (("3"
                                (expand "point_on_polygon_perimeter?")
                                (("3"
                                  (ground)
                                  (("1" (inst?) nil nil)
                                   ("2"
                                    (inst + "reverse_segment(e)")
                                    (("2"
                                      (rewrite
                                       "point_on_reverse_segment")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (hide-all-but (-9 1))
                            (("3" (expand "vertex?")
                              (("3"
                                (expand "edge_of_polygon?")
                                (("3"
                                  (ground)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst + "next_index(A, i!1)")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst?)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-7 1))
                        (("2" (expand "point_on_polygon_perimeter?")
                          (("2" (expand "edge_of_polygon?")
                            (("2" (ground)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (rewrite
                                       "point_on_reverse_segment")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "point_on_segment_has_norm_offset")
              (("2" (inst + "c/2") (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (non_vertex_points_outside_polygon 0
  (non_vertex_points_outside_polygon-1 nil 3874129022
   ("" (skeep)
    (("" (inst?)
      (("" (lemma "extend_points_outside_polygon_excl")
        (("" (ground)
          (("1" (inst - "e`p1" "e" "B")
            (("1" (ground)
              (("1" (inst - "q") (("1" (assert) nil nil)) nil)
               ("2" (skeep)
                (("2" (expand "point_on_polygon_perimeter?")
                  (("2" (skeep - t)
                    (("2" (expand "edge_of_polygon?")
                      (("2" (skeep - t)
                        (("2" (expand "edges_of_polygon" -2)
                          (("2" (expand "only_vertex_intersections?")
                            (("2" (inst - "e!1")
                              (("2"
                                (ground)
                                (("1"
                                  (use "perimeter_not_outside")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "vertex_on_perimeter")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "vertex?")
                                          (("1"
                                            (inst + "i")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "perimeter_not_outside")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use "vertex_on_perimeter")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "vertex?")
                                          (("2"
                                            (inst + "next_index(B, i)")
                                            (("2"
                                              (expand
                                               "reverse_segment")
                                              (("2"
                                                (replace -1 -4)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (inst - "q!1")
                                  (("3"
                                    (ground)
                                    (("3"
                                      (expand "segment_endpoint?")
                                      (("3"
                                        (use "perimeter_not_outside")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (use "vertex_on_perimeter")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "vertex?")
                                                (("3"
                                                  (ground)
                                                  (("1"
                                                    (inst + "i")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     +
                                                     "next_index(B, i)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst - "e`p2" "reverse_segment(e)" "B")
            (("2" (ground)
              (("1" (inst - "q")
                (("1" (rewrite "point_on_reverse_segment")
                  (("1" (expand "reverse_segment")
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "reverse_segment") (("2" (propax) nil nil))
                nil)
               ("3" (skeep)
                (("3" (rewrite "point_on_reverse_segment")
                  (("3" (expand "reverse_segment" +)
                    (("3" (expand "point_on_polygon_perimeter?")
                      (("3" (skeep - t)
                        (("3" (expand "edge_of_polygon?")
                          (("3" (skeep - t)
                            (("3" (expand "edges_of_polygon" -2)
                              (("3"
                                (expand "only_vertex_intersections?")
                                (("3"
                                  (inst - "e!1")
                                  (("3"
                                    (ground)
                                    (("1"
                                      (use "perimeter_not_outside")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "vertex_on_perimeter")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "vertex?")
                                              (("1"
                                                (inst
                                                 +
                                                 "next_index(B, i)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "perimeter_not_outside")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use "vertex_on_perimeter")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "vertex?")
                                              (("2"
                                                (inst + "i")
                                                (("2"
                                                  (expand
                                                   "reverse_segment")
                                                  (("2"
                                                    (replace -1 -4)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst - "q!1")
                                      (("3"
                                        (ground)
                                        (("3"
                                          (expand "segment_endpoint?")
                                          (("3"
                                            (use
                                             "perimeter_not_outside")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (use
                                                 "vertex_on_perimeter")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand "vertex?")
                                                    (("3"
                                                      (ground)
                                                      (("1"
                                                        (inst + "i")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         +
                                                         "next_index(B, i)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (non_vertex_points_inside_polygon 0
  (non_vertex_points_inside_polygon-1 nil 3874129022
   ("" (skeep)
    (("" (inst?)
      (("" (lemma "extend_points_inside_polygon_excl")
        (("" (ground)
          (("1" (inst - "e`p1" "e" "B")
            (("1" (ground)
              (("1" (inst - "q") (("1" (assert) nil nil)) nil)
               ("2" (skeep)
                (("2" (expand "point_on_polygon_perimeter?")
                  (("2" (skeep - t)
                    (("2" (expand "edge_of_polygon?")
                      (("2" (skeep - t)
                        (("2" (expand "edges_of_polygon" -2)
                          (("2" (expand "only_vertex_intersections?")
                            (("2" (inst - "e!1")
                              (("2"
                                (ground)
                                (("1"
                                  (use "point_out_not_in")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (use "vertex_on_perimeter")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "vertex?")
                                          (("1"
                                            (inst + "i")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "point_out_not_in")
                                  (("2"
                                    (ground)
                                    (("2"
                                      (use "vertex_on_perimeter")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "vertex?")
                                          (("2"
                                            (inst + "next_index(B, i)")
                                            (("2"
                                              (expand
                                               "reverse_segment")
                                              (("2"
                                                (replace -2 -5)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (inst - "q!1")
                                  (("3"
                                    (ground)
                                    (("3"
                                      (expand "segment_endpoint?")
                                      (("3"
                                        (use "point_out_not_in")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (use
                                               "vertex_on_perimeter")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand "vertex?")
                                                  (("3"
                                                    (ground)
                                                    (("1"
                                                      (inst + "i")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       +
                                                       "next_index(B, i)")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst - "e`p2" "reverse_segment(e)" "B")
            (("2" (ground)
              (("1" (inst - "q")
                (("1" (rewrite "point_on_reverse_segment")
                  (("1" (expand "reverse_segment")
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "reverse_segment") (("2" (propax) nil nil))
                nil)
               ("3" (skeep)
                (("3" (rewrite "point_on_reverse_segment")
                  (("3" (expand "reverse_segment" +)
                    (("3" (expand "point_on_polygon_perimeter?")
                      (("3" (skeep - t)
                        (("3" (expand "edge_of_polygon?")
                          (("3" (skeep - t)
                            (("3" (expand "edges_of_polygon" -2)
                              (("3"
                                (expand "only_vertex_intersections?")
                                (("3"
                                  (inst - "e!1")
                                  (("3"
                                    (ground)
                                    (("1"
                                      (use "point_out_not_in")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "vertex_on_perimeter")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "vertex?")
                                                (("1"
                                                  (inst
                                                   +
                                                   "next_index(B, i)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "point_out_not_in")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (use "vertex_on_perimeter")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "vertex?")
                                                (("2"
                                                  (inst + "i")
                                                  (("2"
                                                    (expand
                                                     "reverse_segment")
                                                    (("2"
                                                      (replace -1 -4)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst - "q!1")
                                      (("3"
                                        (ground)
                                        (("3"
                                          (expand "segment_endpoint?")
                                          (("3"
                                            (use "point_out_not_in")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (use
                                                   "vertex_on_perimeter")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "vertex?")
                                                      (("3"
                                                        (ground)
                                                        (("1"
                                                          (inst + "i")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "next_index(B, i)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (non_endpoints_outside_polygon 0
  (non_endpoints_outside_polygon-1 nil 3874129022
   ("" (skeep)
    (("" (inst?)
      (("" (lemma "point_on_segment_split")
        (("" (inst - "p" "q" "e")
          (("" (assert)
            (("" (split -1 :depth 1)
              (("1" (lemma "extend_points_outside_polygon_excl")
                (("1" (ground)
                  (("1" (lemma "point_on_reverse_segment")
                    (("1" (inst - "q" "(# p1 := e`p1, p2 := p #)")
                      (("1" (expand "reverse_segment")
                        (("1"
                          (inst - "p" "(# p1 := p, p2 := e`p1 #)" "B")
                          (("1" (ground)
                            (("1" (inst - "q")
                              (("1"
                                (ground)
                                (("1"
                                  (expand "segment_endpoint?")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "point_on_polygon_perimeter?")
                                (("2"
                                  (skeep - t)
                                  (("2"
                                    (expand "edge_of_polygon?")
                                    (("2"
                                      (skeep - t)
                                      (("2"
                                        (expand "edges_of_polygon" -2)
                                        (("2"
                                          (expand
                                           "only_vertex_intersections?")
                                          (("2"
                                            (inst - "e!1")
                                            (("2"
                                              (ground)
                                              (("1"
                                                (use
                                                 "perimeter_not_outside")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "point_on_polygon_perimeter?")
                                                    (("1"
                                                      (inst + "e!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "perimeter_not_outside")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "point_on_polygon_perimeter?")
                                                    (("2"
                                                      (inst + "e!1")
                                                      (("2"
                                                        (lemma
                                                         "point_on_reverse_segment")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "p"
                                                           "e")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst - "q!1")
                                                (("3"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "segment_endpoint?")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (lemma
                                                         "segment_endpoint_subsegment_endpoint")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "e`p2"
                                                           "(# p1 := e`p1, p2 := p #)"
                                                           "e")
                                                          (("1"
                                                            (expand
                                                             "segment_endpoint?")
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "point_on_reverse_segment")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "e`p2"
                                                                   "(# p1 := p, p2 := e`p1 #)")
                                                                  (("1"
                                                                    (expand
                                                                     "reverse_segment")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "subsegment?")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-3 -9 1 4))
                                                    (("2"
                                                      (lemma
                                                       "point_on_subsegment")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "q!1"
                                                         "(# p1 := p, p2 := e`p1 #)"
                                                         "e")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "subsegment?")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "segment_endpoint?")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "segment_endpoint?")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "segment_endpoint?")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (inst - "p" "(# p1 := p, p2 := e`p2 #)" "B")
                    (("1" (ground)
                      (("1" (inst - "q")
                        (("1" (ground)
                          (("1" (expand "segment_endpoint?")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (expand "point_on_polygon_perimeter?")
                          (("2" (skeep - t)
                            (("2" (expand "edge_of_polygon?")
                              (("2"
                                (skeep - t)
                                (("2"
                                  (expand "edges_of_polygon" -2)
                                  (("2"
                                    (expand
                                     "only_vertex_intersections?")
                                    (("2"
                                      (inst - "e!1")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (use "perimeter_not_outside")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "point_on_polygon_perimeter?")
                                              (("1"
                                                (inst + "e!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "perimeter_not_outside")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "point_on_polygon_perimeter?")
                                              (("2"
                                                (inst + "e!1")
                                                (("2"
                                                  (lemma
                                                   "point_on_reverse_segment")
                                                  (("2"
                                                    (inst - "p" "e")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst - "q!1")
                                          (("3"
                                            (ground)
                                            (("1"
                                              (expand
                                               "segment_endpoint?")
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (lemma
                                                   "segment_endpoint_subsegment_endpoint")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "e`p1"
                                                     "(# p1 := p, p2 := e`p2 #)"
                                                     "e")
                                                    (("1"
                                                      (expand
                                                       "segment_endpoint?")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "subsegment?")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-3 -9 1 4))
                                              (("2"
                                                (lemma
                                                 "point_on_subsegment")
                                                (("2"
                                                  (inst
                                                   -
                                                   "q!1"
                                                   "(# p1 := p, p2 := e`p2 #)"
                                                   "e")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "subsegment?")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "segment_endpoint?")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "segment_endpoint?")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "segment_endpoint?")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (non_endpoints_inside_polygon 0
  (non_endpoints_inside_polygon-1 nil 3874129022
   ("" (skeep)
    (("" (inst?)
      (("" (lemma "point_on_segment_split")
        (("" (inst - "p" "q" "e")
          (("" (assert)
            (("" (split -1 :depth 1)
              (("1" (lemma "extend_points_inside_polygon_excl")
                (("1" (ground)
                  (("1" (lemma "point_on_reverse_segment")
                    (("1" (inst - "q" "(# p1 := e`p1, p2 := p #)")
                      (("1" (expand "reverse_segment")
                        (("1"
                          (inst - "p" "(# p1 := p, p2 := e`p1 #)" "B")
                          (("1" (ground)
                            (("1" (inst - "q")
                              (("1"
                                (ground)
                                (("1"
                                  (expand "segment_endpoint?")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "point_on_polygon_perimeter?")
                                (("2"
                                  (skeep - t)
                                  (("2"
                                    (expand "edge_of_polygon?")
                                    (("2"
                                      (skeep - t)
                                      (("2"
                                        (expand "edges_of_polygon" -2)
                                        (("2"
                                          (expand
                                           "only_vertex_intersections?")
                                          (("2"
                                            (inst - "e!1")
                                            (("2"
                                              (ground)
                                              (("1"
                                                (use
                                                 "point_out_not_in")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "point_on_polygon_perimeter?")
                                                      (("1"
                                                        (inst + "e!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "point_out_not_in")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "point_on_polygon_perimeter?")
                                                      (("2"
                                                        (inst + "e!1")
                                                        (("2"
                                                          (lemma
                                                           "point_on_reverse_segment")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "p"
                                                             "e")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst - "q!1")
                                                (("3"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "segment_endpoint?")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (lemma
                                                         "segment_endpoint_subsegment_endpoint")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "e`p2"
                                                           "(# p1 := e`p1, p2 := p #)"
                                                           "e")
                                                          (("1"
                                                            (expand
                                                             "segment_endpoint?")
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "point_on_reverse_segment")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "e`p2"
                                                                   "(# p1 := p, p2 := e`p1 #)")
                                                                  (("1"
                                                                    (expand
                                                                     "reverse_segment")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "subsegment?")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-3 -9 1 4))
                                                    (("2"
                                                      (lemma
                                                       "point_on_subsegment")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "q!1"
                                                         "(# p1 := p, p2 := e`p1 #)"
                                                         "e")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "subsegment?")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "segment_endpoint?")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "segment_endpoint?")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "segment_endpoint?")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (inst - "p" "(# p1 := p, p2 := e`p2 #)" "B")
                    (("1" (ground)
                      (("1" (inst - "q")
                        (("1" (ground)
                          (("1" (expand "segment_endpoint?")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (expand "point_on_polygon_perimeter?")
                          (("2" (skeep - t)
                            (("2" (expand "edge_of_polygon?")
                              (("2"
                                (skeep - t)
                                (("2"
                                  (expand "edges_of_polygon" -2)
                                  (("2"
                                    (expand
                                     "only_vertex_intersections?")
                                    (("2"
                                      (inst - "e!1")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (use "point_out_not_in")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand
                                               "point_on_polygon_perimeter?")
                                              (("1"
                                                (inst + "e!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use "point_out_not_in")
                                          (("2"
                                            (ground)
                                            (("2"
                                              (expand
                                               "point_on_polygon_perimeter?")
                                              (("2"
                                                (inst + "e!1")
                                                (("2"
                                                  (lemma
                                                   "point_on_reverse_segment")
                                                  (("2"
                                                    (inst - "p" "e")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst - "q!1")
                                          (("3"
                                            (ground)
                                            (("1"
                                              (expand
                                               "segment_endpoint?")
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (lemma
                                                   "segment_endpoint_subsegment_endpoint")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "e`p1"
                                                     "(# p1 := p, p2 := e`p2 #)"
                                                     "e")
                                                    (("1"
                                                      (expand
                                                       "segment_endpoint?")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "subsegment?")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-3 -9 1 4))
                                              (("2"
                                                (lemma
                                                 "point_on_subsegment")
                                                (("2"
                                                  (inst
                                                   -
                                                   "q!1"
                                                   "(# p1 := p, p2 := e`p2 #)"
                                                   "e")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "subsegment?")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "segment_endpoint?")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "segment_endpoint?")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "segment_endpoint?")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_outside_or_on_perimeter 0
  (endpoint_outside_or_on_perimeter-1 nil 3874129022
   ("" (skeep)
    (("" (case "p = v")
      (("1" (assert) nil nil)
       ("2" (inst?)
        (("2" (lemma "in_out_have_crossing_on_subsegment")
          (("2" (inst - "B" "v" "p")
            (("2" (assert)
              (("2" (skeep)
                (("2" (expand "only_vertex_intersections?")
                  (("2" (expand "point_on_polygon_perimeter?")
                    (("2" (skeep)
                      (("2" (inst - "e!1")
                        (("2" (expand "segment_endpoint?")
                          (("2" (split -3)
                            (("1" (flatten)
                              (("1"
                                (split -2)
                                (("1"
                                  (expand "vertex?")
                                  (("1"
                                    (replace -1 -7 :dir rl)
                                    (("1"
                                      (typepred "e!1")
                                      (("1"
                                        (expand "edge_of_polygon?")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst-cp + "i")
                                            (("1"
                                              (inst
                                               +
                                               "next_index(B,i)")
                                              (("1"
                                                (expand
                                                 "edges_of_polygon")
                                                (("1"
                                                  (replace
                                                   -1
                                                   -8
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "vertex?")
                                  (("2"
                                    (typepred "e!1")
                                    (("2"
                                      (expand "edge_of_polygon?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "edges_of_polygon")
                                          (("2"
                                            (expand "reverse_segment")
                                            (("2"
                                              (replace -2 -1)
                                              (("2"
                                                (inst-cp + "i")
                                                (("2"
                                                  (inst
                                                   +
                                                   "next_index(B, i)")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst - "v_1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "vertex?")
                                        (("1"
                                          (typepred "e!1")
                                          (("1"
                                            (expand "edge_of_polygon?")
                                            (("1"
                                              (skeep* - t)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon")
                                                (("1"
                                                  (replace -3 :dir rl)
                                                  (("1"
                                                    (replace
                                                     -8
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -10)
                                                        (("1"
                                                          (inst-cp
                                                           +
                                                           "i")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "next_index(B,i)")
                                                            (("1"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case-replace
                                                                 "v_1 = p")
                                                                (("1"
                                                                  (use
                                                                   "perimeter_not_outside")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "vertex_on_perimeter")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "vertex?")
                                                                          (("1"
                                                                            (inst-cp
                                                                             +
                                                                             "i")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "next_index(B, i)")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -2
                                                                    -7
                                                                    -11
                                                                    1))
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite*
                                                                         "point_on_segment_has_offset")
                                                                        (("1"
                                                                          (skeep*)
                                                                          (("1"
                                                                            (replace
                                                                             -5
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (move-terms
                                                                                 -3
                                                                                 r
                                                                                 1)
                                                                                (("1"
                                                                                  (use
                                                                                   "idem_right")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "d!1 = 1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case-replace
                                                                                         "d = 1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "d * d!1 < 1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (mult-cases
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "vertex_neq_next")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "A"
                                                                                         "i!1")
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "vertex_neq_next")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "A"
                                                                             "i!1")
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst-cp
                                                           +
                                                           "i")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "next_index(B,i)")
                                                            (("2"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (case-replace
                                                                 "v_1 = p")
                                                                (("1"
                                                                  (use
                                                                   "perimeter_not_outside")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "vertex_on_perimeter")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "vertex?")
                                                                          (("1"
                                                                            (inst-cp
                                                                             +
                                                                             "i")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "next_index(B, i)")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -2
                                                                    -7
                                                                    -11
                                                                    1))
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite*
                                                                         "point_on_segment_has_offset")
                                                                        (("1"
                                                                          (skeep*)
                                                                          (("1"
                                                                            (replace
                                                                             -5
                                                                             -3)
                                                                            (("1"
                                                                              (equate
                                                                               "v_1 + d!1 * (v - v_1) - v"
                                                                               "(1 - d!1) * (v_1 - v)")
                                                                              (("1"
                                                                                (move-terms
                                                                                 -3
                                                                                 r
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "idem_right")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "d * (1 - d!1)"
                                                                                     "(v_1 - v)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "d = 0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (factor
                                                                                             -1
                                                                                             l)
                                                                                            (("2"
                                                                                              (case
                                                                                               "d * (1 - d!1) < 1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case-replace
                                                                                                 "d!1 = 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (mult-cases
                                                                                                   2)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "vertex_neq_next")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "A"
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "vertex_neq_next")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "A"
                                                                             "i!1")
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "point_on_subsegment")
                                      (("2"
                                        (inst
                                         -
                                         "v_1"
                                         "(# p1 := v, p2 := p #)"
                                         "e")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "subsegment?")
                                            (("2"
                                              (ground)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_inside_or_on_perimeter 0
  (endpoint_inside_or_on_perimeter-1 nil 3874129022
   ("" (skeep)
    (("" (case "p = v")
      (("1" (assert) nil nil)
       ("2" (inst?)
        (("2" (lemma "in_out_have_crossing_on_subsegment")
          (("2" (inst - "B" "p" "v")
            (("2" (ground)
              (("1" (skeep)
                (("1" (expand "only_vertex_intersections?")
                  (("1" (expand "point_on_polygon_perimeter?")
                    (("1" (skeep)
                      (("1" (inst - "e!1")
                        (("1" (expand "segment_endpoint?")
                          (("1" (split -3)
                            (("1" (flatten)
                              (("1"
                                (split -2)
                                (("1"
                                  (expand "vertex?")
                                  (("1"
                                    (replace -1 -7 :dir rl)
                                    (("1"
                                      (typepred "e!1")
                                      (("1"
                                        (expand "edge_of_polygon?")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst-cp + "i")
                                            (("1"
                                              (inst
                                               +
                                               "next_index(B,i)")
                                              (("1"
                                                (expand
                                                 "edges_of_polygon")
                                                (("1"
                                                  (replace
                                                   -1
                                                   -8
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "vertex?")
                                  (("2"
                                    (typepred "e!1")
                                    (("2"
                                      (expand "edge_of_polygon?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "edges_of_polygon")
                                          (("2"
                                            (expand "reverse_segment")
                                            (("2"
                                              (replace -2 -1)
                                              (("2"
                                                (inst-cp + "i")
                                                (("2"
                                                  (inst
                                                   +
                                                   "next_index(B, i)")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst - "v_1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "vertex?")
                                        (("1"
                                          (typepred "e!1")
                                          (("1"
                                            (expand "edge_of_polygon?")
                                            (("1"
                                              (skeep* - t)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon")
                                                (("1"
                                                  (replace -3 :dir rl)
                                                  (("1"
                                                    (replace
                                                     -8
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -10)
                                                        (("1"
                                                          (inst-cp
                                                           +
                                                           "i")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "next_index(B,i)")
                                                            (("1"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case-replace
                                                                 "v_1 = p")
                                                                (("1"
                                                                  (use
                                                                   "point_out_not_in")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (use
                                                                         "vertex_on_perimeter")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "vertex?")
                                                                            (("1"
                                                                              (inst-cp
                                                                               +
                                                                               "i")
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "next_index(B, i)")
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -2
                                                                    -7
                                                                    -11
                                                                    1))
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite*
                                                                         "point_on_segment_has_offset")
                                                                        (("1"
                                                                          (skeep*)
                                                                          (("1"
                                                                            (replace
                                                                             -5
                                                                             -3)
                                                                            (("1"
                                                                              (equate
                                                                               "v - (v + d!1 * (v_1 - v))"
                                                                               "-d!1 * (v_1 - v)")
                                                                              (("1"
                                                                                (real-props)
                                                                                (("1"
                                                                                  (move-terms
                                                                                   -3
                                                                                   r
                                                                                   1)
                                                                                  (("1"
                                                                                    (factor
                                                                                     -3
                                                                                     r)
                                                                                    (("1"
                                                                                      (use
                                                                                       "idem_right")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (equate
                                                                                           "d * -d!1 + d!1"
                                                                                           "d!1 * (1 - d)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "d!1 * (1 - d) < 1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (mult-cases
                                                                                               1)
                                                                                              (("2"
                                                                                                (case-replace
                                                                                                 "d = 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (cancel-add
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "vertex_neq_next")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "A"
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "vertex_neq_next")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "A"
                                                                             "i!1")
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 1)
                                                          (("2"
                                                            (inst-cp
                                                             +
                                                             "i")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "next_index(B,i)")
                                                              (("2"
                                                                (split
                                                                 -6)
                                                                (("1"
                                                                  (case-replace
                                                                   "v_1 = p")
                                                                  (("1"
                                                                    (use
                                                                     "point_out_not_in")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (use
                                                                           "vertex_on_perimeter")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "vertex?")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 +
                                                                                 "i")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "next_index(B, i)")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -2
                                                                      -7
                                                                      -11
                                                                      1))
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (rewrite*
                                                                           "point_on_segment_has_offset")
                                                                          (("1"
                                                                            (skeep*)
                                                                            (("1"
                                                                              (replace
                                                                               -5
                                                                               -3)
                                                                              (("1"
                                                                                (equate
                                                                                 "v - (v_1 + d!1 * (v - v_1))"
                                                                                 "(1 - d!1) * (v - v_1)")
                                                                                (("1"
                                                                                  (move-terms
                                                                                   -3
                                                                                   r
                                                                                   1)
                                                                                  (("1"
                                                                                    (factor
                                                                                     -3
                                                                                     r)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (use
                                                                                         "scal_eq_zero")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (factor
                                                                                             -1
                                                                                             l
                                                                                             (1
                                                                                              2))
                                                                                            (("1"
                                                                                              (move-terms
                                                                                               -1
                                                                                               l
                                                                                               2)
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "d = 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "d!1 * (1 - d) > 0 - d")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (mult-cases
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "vertex_neq_next")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "A"
                                                                                               "i!1")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "vertex_neq_next")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "A"
                                                                               "i!1")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "point_on_subsegment")
                                      (("2"
                                        (inst
                                         -
                                         "v_1"
                                         "(# p1 := v, p2 := p #)"
                                         "e")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "subsegment?")
                                            (("2"
                                              (ground)
                                              (("1"
                                                (lemma
                                                 "point_on_subsegment")
                                                (("1"
                                                  (inst
                                                   -
                                                   "v_1"
                                                   "(# p1 := p, p2 := v #)"
                                                   "e")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "subsegment?")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "point_on_reverse_segment"
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (expand
                                                   "reverse_segment")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (replace -1)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("4"
                                                (replace -1)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "point_out_not_in") (("2" (ground) nil nil))
                nil)
               ("3" (lemma "point_out_not_in")
                (("3" (inst - "v" "B")
                  (("3" (ground)
                    (("3" (lemma "A_vertex_imp_B_vertex")
                      (("3" (inst - "A" "B" "v")
                        (("3" (ground)
                          (("1" (reveal -4) (("1" (propax) nil nil))
                            nil)
                           ("2" (expand "segment_endpoint?")
                            (("2" (expand "vertex?")
                              (("2"
                                (expand "edge_of_polygon?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (replace -3 -5 :dir rl)
                                    (("2"
                                      (expand "edges_of_polygon")
                                      (("2"
                                        (inst-cp + "i")
                                        (("2"
                                          (inst + "next_index(A,i)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (edge_endpoint_inside_or_on_perimeter 0
  (edge_endpoint_inside_or_on_perimeter-1 nil 3874129022
   ("" (skeep)
    (("" (case "p = v")
      (("1" (assert) nil nil)
       ("2" (lemma "in_out_have_crossing_on_subsegment")
        (("2" (inst - "B" "p" "v")
          (("2" (ground)
            (("1" (skeep)
              (("1" (expand "point_on_polygon_perimeter?")
                (("1" (skeep)
                  (("1" (inst - "v_1" "e!1")
                    (("1" (ground)
                      (("1" (expand "segment_endpoint?")
                        (("1" (typepred "e!1")
                          (("1" (expand "edge_of_polygon?")
                            (("1" (skeep)
                              (("1"
                                (expand "edges_of_polygon")
                                (("1"
                                  (expand "vertex?")
                                  (("1"
                                    (inst-cp + "i")
                                    (("1"
                                      (inst + "next_index(B, i)")
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "point_in_polygon?(v_1, B)")
                                            (("1"
                                              (expand
                                               "point_in_polygon?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "point_on_polygon_perimeter?")
                                                  (("1"
                                                    (inst
                                                     +
                                                     "edges_of_polygon(B)(i)")
                                                    (("1"
                                                      (split -4)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "subsegment?((# p1 := p, p2 := v #), e)")
                                              (("1"
                                                (lemma
                                                 "segment_endpoint_subsegment_endpoint")
                                                (("1"
                                                  (inst
                                                   -
                                                   "v_1"
                                                   "(# p1 := p, p2 := v #)"
                                                   "e")
                                                  (("1"
                                                    (expand
                                                     "segment_endpoint?")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "subsegment?")
                                                (("2"
                                                  (split -6)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "point_on_subsegment")
                        (("2"
                          (inst - "v_1" "(# p1 := p, p2 := v #)" "e")
                          (("2" (ground)
                            (("2" (expand "subsegment?")
                              (("2"
                                (expand "segment_endpoint?")
                                (("2"
                                  (ground)
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "point_out_not_in") (("2" (ground) nil nil))
              nil)
             ("3" (lemma "point_out_not_in")
              (("3" (inst - "v" "B")
                (("3" (ground)
                  (("3" (expand "point_on_polygon_perimeter?")
                    (("3" (skeep)
                      (("3" (inst - "v" "e!1")
                        (("3" (ground)
                          (("1" (expand "segment_endpoint?")
                            (("1" (expand "vertex?")
                              (("1"
                                (typepred "e!1")
                                (("1"
                                  (expand "edge_of_polygon?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst-cp + "i")
                                      (("1"
                                        (inst + "next_index(B, i)")
                                        (("1"
                                          (expand "edges_of_polygon")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "segment_endpoint?")
                            (("2" (ground)
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (outside_point_on_segment_between_rays 0
  (outside_point_on_segment_between_rays-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "extend_points_between_edges")
      (("" (inst - "p" "e" "true" "B" "i")
        (("" (ground)
          (("1" (inst - "q")
            (("1" (assert)
              (("1" (expand "point_between_edges?")
                (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 4)
            (("2"
              (name-replace "c"
               "min(vertex_wedge_radius(B), length(e))/2")
              (("2" (name-replace "r" "e`p1 + c * ^(e`p2 - e`p1)")
                (("1" (case "0 < c and c < length(e)")
                  (("1" (flatten)
                    (("1" (case "r = e`p1 or r = e`p2")
                      (("1" (ground)
                        (("1" (replace -1)
                          (("1" (use "add_move_left")
                            (("1" (ground) nil nil)) nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (use "add_move_left")
                            (("2" (replace -1 :hide? t)
                              (("2"
                                (use "segment_far_endpoint_length")
                                (("2"
                                  (name-replace
                                   "v"
                                   "^(e`p2 - e`p1)"
                                   :hide?
                                   nil)
                                  (("2"
                                    (replace -2 -6)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use "scal_cancel")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "point_on_segment?(r, e)")
                        (("1" (lemma "in_wedge_or_on_edge")
                          (("1" (inst - "r" "B" "i")
                            (("1" (split -1 :depth 1)
                              (("1"
                                (case "point_outside_polygon?(r, B)")
                                (("1"
                                  (use "perimeter_not_outside")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand
                                       "point_on_polygon_perimeter?")
                                      (("1"
                                        (inst-cp
                                         +
                                         "edges_of_polygon(B)(i)")
                                        (("1"
                                          (inst
                                           +
                                           "edges_of_polygon(B)(prev_index(B,i))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (expand
                                                 "point_in_vertex_wedge?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "extend_points_between_edges")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "p")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "all_wedge_points_inside")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "point_out_not_in")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1)
                                  (("2"
                                    (lemma
                                     "non_endpoints_outside_polygon")
                                    (("2"
                                      (inst - "A" "B" "e" "p" "r")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "segment_endpoint?")
                                          (("2"
                                            (ground)
                                            (("2"
                                              (use
                                               "outside_endpoint_between_rays")
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (expand
                                                   "point_between_edges?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -4 :dir rl)
                                (("2"
                                  (replace -8 :dir rl)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "abs")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (rewrite "point_on_segment_has_norm_offset"
                           1)
                          (("2" (inst + "c") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (inside_point_on_segment_between_rays_TCC1 0
  (inside_point_on_segment_between_rays_TCC1-2 nil 3874129022
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (inside_point_on_segment_between_rays subtype
    "(vectors_2D.-)(merge_well_formed.e`p2, merge_well_formed.e`p1)"
    "Nz_vector"))
  (inside_point_on_segment_between_rays_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (inside_point_on_segment_between_rays subtype
    "(vectors_2D.-)(merge_well_formed.e`p2, merge_well_formed.e`p1)"
    "Nz_vector")))
 (inside_point_on_segment_between_rays 0
  (inside_point_on_segment_between_rays-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "extend_points_between_edges_ray")
      (("" (inst - "p" "e" "false" "B" "i")
        (("" (ground)
          (("1" (inst - "q")
            (("1" (assert)
              (("1" (expand "point_between_edges?")
                (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 4)
            (("2"
              (name-replace "c"
               "min(vertex_wedge_radius(B), length(e))/2")
              (("2" (name-replace "r" "e`p1 + c * ^(e`p2 - e`p1)")
                (("2" (case "0 < c and c < length(e)")
                  (("1" (flatten)
                    (("1" (case "r = e`p1 or r = e`p2")
                      (("1" (ground)
                        (("1" (replace -1)
                          (("1" (use "add_move_left")
                            (("1" (ground) nil nil)) nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (use "add_move_left")
                            (("2" (replace -1 :hide? t)
                              (("2"
                                (use "segment_far_endpoint_length")
                                (("2"
                                  (name-replace
                                   "v"
                                   "^(e`p2 - e`p1)"
                                   :hide?
                                   nil)
                                  (("2"
                                    (replace -2 -6)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use "scal_cancel")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "point_on_segment?(r, e)")
                        (("1" (lemma "in_wedge_or_on_edge")
                          (("1" (inst - "r" "B" "i")
                            (("1" (split -1 :depth 1)
                              (("1"
                                (case "point_in_polygon?(r, B)")
                                (("1"
                                  (expand "point_in_polygon?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand
                                       "point_on_polygon_perimeter?")
                                      (("1"
                                        (inst-cp
                                         +
                                         "edges_of_polygon(B)(i)")
                                        (("1"
                                          (inst
                                           +
                                           "edges_of_polygon(B)(prev_index(B,i))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (use
                                                 "all_wedge_points_outside")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "point_out_not_in")
                                                    (("1"
                                                      (expand
                                                       "point_in_polygon?")
                                                      (("1"
                                                        (use
                                                         "wedge_points_not_on_perimeter")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "point_in_vertex_wedge?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (use
                                                     "extend_points_between_edges")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst - "p")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1)
                                  (("2"
                                    (lemma
                                     "non_endpoints_inside_polygon")
                                    (("2"
                                      (inst - "A" "B" "e" "p" "r")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "segment_endpoint?")
                                          (("2"
                                            (ground)
                                            (("2"
                                              (use
                                               "inside_endpoint_between_rays")
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (expand
                                                   "point_between_edges?")
                                                  (("2"
                                                    (rewrite
                                                     "between_rays_equiv")
                                                    (("1"
                                                      (rewrite
                                                       "reverse_reverse_segment")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -4 :dir rl)
                                (("2"
                                  (replace -8 :dir rl)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "abs")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (rewrite "point_on_segment_has_norm_offset"
                           1)
                          (("2" (inst + "c") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (rewrite "point_on_segment_has_norm_offset")
            (("3" (skeep)
              (("3" (expand "point_on_arb_ray?")
                (("3" (inst + "d") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (extend_vertices_outside_polygon 0
  (extend_vertices_outside_polygon-1 nil 3874129022
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (case-replace "k = 0")
        (("1" (rewrite "rem_mod" +) nil nil)
         ("2" (typepred "k")
          (("2" (case "k < j")
            (("1" (inst?)
              (("1" (ground)
                (("1" (inst?) (("1" (assert) nil nil)) nil)
                 ("2" (skeep) (("2" (inst?) nil nil)) nil))
                nil))
              nil)
             ("2" (inst?)
              (("2" (ground)
                (("1" (inst - "k - 1")
                  (("1" (inst -4 "k")
                    (("1"
                      (inst -
                       "edges_of_polygon(A)(rem(A`num_vertices)(k - 1 + i))")
                      (("1" (lemma "extend_points_outside_polygon")
                        (("1"
                          (inst -
                           "A`vertices(rem(A`num_vertices)(k - 1 + i))"
                           "edges_of_polygon(A)(rem(A`num_vertices)(k - 1 + i))"
                           "B")
                          (("1" (expand "edges_of_polygon" -1 1)
                            (("1" (ground)
                              (("1"
                                (inst
                                 -
                                 "A`vertices(rem(A`num_vertices)(i + k))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (equate
                                     "A`vertices(rem(A`num_vertices)(i + k))"
                                     "edges_of_polygon(A)(rem(A`num_vertices)(i - 1 + k))`p2")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (grind)
                                        (("1"
                                          (lemma "rem_add_one")
                                          (("1"
                                            (inst
                                             -
                                             "A`num_vertices"
                                             "i - 1 + k")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "rem_add_one")
                                          (("2"
                                            (inst
                                             -
                                             "A`num_vertices"
                                             "i - 1 + k")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (expand
                                   "point_on_polygon_perimeter?")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand
                                       "only_vertex_intersections?")
                                      (("2"
                                        (inst - "e")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (use
                                             "perimeter_not_outside")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand
                                                 "point_on_polygon_perimeter?")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use
                                             "perimeter_not_outside")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (expand
                                                 "point_on_polygon_perimeter?")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (rewrite
                                                       "point_on_reverse_segment")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst?)
                                            (("3"
                                              (ground)
                                              (("3"
                                                (expand
                                                 "segment_endpoint?")
                                                (("3"
                                                  (hide -1)
                                                  (("3"
                                                    (expand
                                                     "edges_of_polygon"
                                                     -1)
                                                    (("3"
                                                      (ground)
                                                      (("1"
                                                        (use
                                                         "perimeter_not_outside")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "point_on_polygon_perimeter?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (equate
                                                         (! -1 r 1)
                                                         "rem(A`num_vertices)(i + k)")
                                                        (("1"
                                                          (reveal -2)
                                                          (("1"
                                                            (typepred
                                                             "e")
                                                            (("1"
                                                              (expand
                                                               "edge_of_polygon?")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("1"
                                                                    (expand
                                                                     "edges_of_polygon"
                                                                     -1)
                                                                    (("1"
                                                                      (inst-cp
                                                                       +
                                                                       "i!1")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "next_index(B, i!1)")
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "rem_add_one")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "A`num_vertices"
                                                               "i - 1 + k")
                                                              (("2"
                                                                (expand
                                                                 "next_index")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep) (("2" (inst -4 "k!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (in_out_intersection_vertex_invariant_TCC1 0
  (in_out_intersection_vertex_invariant_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (in_out_intersection_vertex_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (in_out_intersection_vertex_invariant_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (in_out_intersection_vertex_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (in_out_intersection_vertex_invariant_TCC2 0
  (in_out_intersection_vertex_invariant_TCC2-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (in_out_intersection_vertex_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (in_out_intersection_vertex_invariant_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (in_out_intersection_vertex_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (in_out_intersection_vertex_invariant 0
  (in_out_intersection_vertex_invariant-1 nil 3874129022
   ("" (skeep)
    (("" (assert)
      (("" (induct "k")
        (("1" (ground)
          (("1" (skeep)
            (("1" (equate "l" "0" (assert))
              (("1" (use "perimeter_not_outside")
                (("1" (ground)
                  (("1" (hide-all-but (-2 -4))
                    (("1" (rewrite "rem_mod")
                      (("1" (use "point_out_not_in")
                        (("1" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep + t)
            (("2" (split -3)
              (("1" (case-replace "l = 0")
                (("1" (inst - "0") nil nil)
                 ("2" (case-replace "l = 1 + jb")
                  (("1" (inst - "jb")
                    (("1" (lemma "endpoint_inside_or_on_perimeter")
                      (("1"
                        (inst - "A" "B"
                         "edges_of_polygon(A)(rem(A`num_vertices)(jb + i))"
                         "A`vertices(rem(A`num_vertices)(1 + jb + i))"
                         "A`vertices(rem(A`num_vertices)(i + jb))")
                        (("1" (assert)
                          (("1"
                            (case "point_on_segment?(A`vertices(rem(A`num_vertices)(1 + i + jb)),
                                                      edges_of_polygon(A)(rem(A`num_vertices)(i + jb)))")
                            (("1" (split -2)
                              (("1"
                                (inst + "jb")
                                (("1"
                                  (assert)
                                  (("1"
                                    (equate "jb" "0" (assert))
                                    (("1"
                                      (rewrite "rem_mod")
                                      (("1"
                                        (use "perimeter_not_outside")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (use "vertex_on_perimeter")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3"
                                (expand "segment_endpoint?")
                                (("3"
                                  (expand "edges_of_polygon")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil)
                               ("4" (propax) nil nil))
                              nil)
                             ("2" (hide -1 4)
                              (("2"
                                (expand "edges_of_polygon")
                                (("2"
                                  (expand "point_on_segment?")
                                  (("2"
                                    (inst + "1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "next_index")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (lemma "rem_add_one")
                                              (("1"
                                                (inst
                                                 -
                                                 "A`num_vertices"
                                                 "i + jb")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "rem_add_one")
                                              (("2"
                                                (inst
                                                 -
                                                 "A`num_vertices"
                                                 "i + jb")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst - "l") (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (in_out_intersection_vertex_exists 0
  (in_out_intersection_vertex_exists-1 nil 3874129022
   ("" (skeep)
    (("" (use "in_out_intersection_vertex_invariant")
      (("" (ground)
        (("" (case-replace "j = i")
          (("1" (use "point_out_not_in") (("1" (ground) nil nil)) nil)
           ("2" (use "rem_diff_eq_0_shift")
            (("2" (assert)
              (("2"
                (case "rem(A`num_vertices)(rem(A`num_vertices)(j - i) - 1 + i)
        = rem(A`num_vertices)(j - 1)")
                (("1" (inst - "rem(A`num_vertices)(j - i) - 1")
                  (("1" (ground)
                    (("1" (lemma "endpoint_inside_or_on_perimeter")
                      (("1"
                        (inst - "A" "B"
                         "edges_of_polygon(A)(prev_index(A, j))"
                         "A`vertices(j)"
                         "A`vertices(prev_index(A, j))")
                        (("1"
                          (rewrite "rem_minus_1_eq_prev_index" :dir rl)
                          (("1" (ground)
                            (("1"
                              (inst - "rem(A`num_vertices)(j - i) - 1")
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (inst + "rem(A`num_vertices)(j - i) - 1")
                              (("2"
                                (assert)
                                (("2"
                                  (equate
                                   "rem(A`num_vertices)(j - i)"
                                   "1"
                                   (assert))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -3 :dir rl)
                                      (("2"
                                        (rewrite "rem_mod")
                                        (("2"
                                          (use "perimeter_not_outside")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use
                                               "vertex_on_perimeter")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "segment_endpoint?")
                              (("3"
                                (expand "edges_of_polygon")
                                (("3" (propax) nil nil))
                                nil))
                              nil)
                             ("4" (rewrite "rem_minus_1_eq_prev_index")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (lemma "rem_sum1")
                    (("2" (inst - "A`num_vertices" "j - i" "i - 1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (seq_in_out_intersection_vertex_invariant_TCC1 0
  (seq_in_out_intersection_vertex_invariant_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (seq_in_out_intersection_vertex_invariant subtype
    "merge_well_formed.i" "below[S`length]"))
  (seq_in_out_intersection_vertex_invariant_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (seq_in_out_intersection_vertex_invariant subtype
    "merge_well_formed.i" "below[S`length]")))
 (seq_in_out_intersection_vertex_invariant_TCC2 0
  (seq_in_out_intersection_vertex_invariant_TCC2-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (seq_in_out_intersection_vertex_invariant subtype
    "(number_fields.+)(merge_well_formed.i, 1)" "below[S`length]"))
  (seq_in_out_intersection_vertex_invariant_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (seq_in_out_intersection_vertex_invariant subtype
    "(number_fields.+)(merge_well_formed.i, 1)" "below[S`length]")))
 (seq_in_out_intersection_vertex_invariant_TCC3 0
  (seq_in_out_intersection_vertex_invariant_TCC3-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (seq_in_out_intersection_vertex_invariant subtype
    "merge_well_formed.i" "below[S`length]"))
  (seq_in_out_intersection_vertex_invariant_TCC3-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (seq_in_out_intersection_vertex_invariant subtype
    "merge_well_formed.i" "below[S`length]")))
 (seq_in_out_intersection_vertex_invariant_TCC4 0
  (seq_in_out_intersection_vertex_invariant_TCC4-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (seq_in_out_intersection_vertex_invariant subtype
    "(number_fields.+)(merge_well_formed.l, merge_well_formed.i)"
    "below[S`length]"))
  (seq_in_out_intersection_vertex_invariant_TCC4-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (seq_in_out_intersection_vertex_invariant subtype
    "(number_fields.+)(merge_well_formed.l, merge_well_formed.i)"
    "below[S`length]")))
 (seq_in_out_intersection_vertex_invariant_TCC5 0
  (seq_in_out_intersection_vertex_invariant_TCC5-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (seq_in_out_intersection_vertex_invariant subtype
    "(number_fields.+)(merge_well_formed.l, merge_well_formed.i)"
    "below[S`length]"))
  (seq_in_out_intersection_vertex_invariant_TCC5-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (seq_in_out_intersection_vertex_invariant subtype
    "(number_fields.+)(merge_well_formed.l, merge_well_formed.i)"
    "below[S`length]")))
 (seq_in_out_intersection_vertex_invariant 0
  (seq_in_out_intersection_vertex_invariant-1 nil 3874129022
   ("" (skeep)
    (("" (induct "k")
      (("1" (flatten)
        (("1" (skeep + t)
          (("1" (equate "l" "0" (assert))
            (("1" (use "point_out_not_in") (("1" (ground) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (ground)
          (("1" (skeep + t)
            (("1" (case-replace "l = 1 + jt")
              (("1" (lemma "edge_endpoint_inside_or_on_perimeter")
                (("1"
                  (inst - "B"
                   "(# p1 := S`seq(jt + i), p2 := S`seq(1 + jt + i) #)"
                   "S`seq(1 + jt + i)" "S`seq(jt + i)")
                  (("1" (ground)
                    (("1" (inst - "jt") (("1" (assert) nil nil)) nil)
                     ("2" (inst? +)
                      (("2" (ground)
                        (("2" (case-replace "jt = 0")
                          (("1" (use "perimeter_not_outside")
                            (("1" (ground)
                              (("1"
                                (use "vertex_on_perimeter")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "segment_endpoint?")
                      (("3" (propax) nil nil)) nil)
                     ("4" (skeep)
                      (("4" (inst -8 "s")
                        (("4" (expand "seq_only_vertex_intersections?")
                          (("4" (inst -8 "i + jt")
                            (("4"
                              (expand "same_edge_or_vertex_intersection?")
                              (("4"
                                (expand "segment_endpoint?")
                                (("4"
                                  (split -8)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (typepred "s")
                                      (("1"
                                        (expand "edge_of_polygon?")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "edges_of_polygon")
                                            (("1"
                                              (replace -1 :dir rl)
                                              (("1"
                                                (expand
                                                 "reverse_segment")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst + "1 + jt")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "vertex?")
                                                        (("1"
                                                          (inst-cp
                                                           +
                                                           "i!1")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "next_index(B, i!1)")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst - "q")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (expand "point_on_segment?")
                      (("5" (inst + "1") (("5" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (typepred "S")
                    (("2" (inst - "i + jt") (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst - "l") (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (skeep -)
            (("2" (inst? +) (("2" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (seq_in_out_intersection_vertex_exists_TCC1 0
  (seq_in_out_intersection_vertex_exists_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (seq_in_out_intersection_vertex_exists subtype
    "(number_fields.+)(merge_well_formed.k, merge_well_formed.i)"
    "below[S`length]"))
  (seq_in_out_intersection_vertex_exists_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (seq_in_out_intersection_vertex_exists subtype
    "(number_fields.+)(merge_well_formed.k, merge_well_formed.i)"
    "below[S`length]")))
 (seq_in_out_intersection_vertex_exists 0
  (seq_in_out_intersection_vertex_exists-1 nil 3874129022
   ("" (skeep)
    (("" (use "seq_in_out_intersection_vertex_invariant")
      (("" (ground)
        (("" (inst - "j - i - 1")
          (("" (ground)
            (("1" (inst - "j - i - 1")
              (("1" (inst + "j - i - 1")
                (("1" (assert)
                  (("1" (lemma "edge_endpoint_inside_or_on_perimeter")
                    (("1"
                      (inst - "B"
                       "(# p1 := S`seq(j - 1), p2 := S`seq(j) #)"
                       "S`seq(j)" "S`seq(j - 1)")
                      (("1" (ground)
                        (("1" (expand "segment_endpoint?")
                          (("1" (propax) nil nil)) nil)
                         ("2" (skeep)
                          (("2" (inst - "s")
                            (("2"
                              (expand "seq_only_vertex_intersections?")
                              (("2"
                                (inst - "j - 1")
                                (("2"
                                  (expand
                                   "same_edge_or_vertex_intersection?")
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (typepred "s")
                                        (("1"
                                          (case "vertex?(B)(S`seq(j))")
                                          (("1"
                                            (expand
                                             "point_in_polygon?"
                                             -)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (use
                                                 "vertex_on_perimeter")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "edge_of_polygon?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand
                                                 "edges_of_polygon")
                                                (("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 -3 1))
                                                    (("2"
                                                      (inst-cp + "i!1")
                                                      (("2"
                                                        (inst
                                                         +
                                                         "next_index(B, i!1)")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "reverse_segment")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst - "q")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "point_on_segment?")
                          (("3" (inst + "1") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep) (("2" (inst?) (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (path_to_enter_B_invariant_TCC1 0
  (path_to_enter_B_invariant_TCC1-2 nil 3874129022
   ("" (skeep)
    (("" (typepred "find_index_any(A, p)")
      (("" (ground)
        (("" (use "perimeter_find_index_any") (("" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (path_to_enter_B_invariant subtype
    "polygons_2d.find_index_any(merge_well_formed.A, merge_well_formed.p)"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_enter_B_invariant_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_enter_B_invariant subtype
    "polygons_2d.find_index_any(merge_well_formed.A, merge_well_formed.p)"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_enter_B_invariant_TCC2 0
  (path_to_enter_B_invariant_TCC2-2 nil 3874129022
   ("" (skeep*)
    (("" (typepred "rem(m)(l + i)") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (path_to_enter_B_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_enter_B_invariant_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_enter_B_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_enter_B_invariant_TCC3 0
  (path_to_enter_B_invariant_TCC3-2 nil 3874129022
   ("" (skeep*)
    (("" (typepred "rem(m)(l!1 + i)") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (path_to_enter_B_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_enter_B_invariant_TCC3-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_enter_B_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_enter_B_invariant 0
  (path_to_enter_B_invariant-1 nil 3874129022
   ("" (skeep*)
    (("" (skoletin)
      (("" (assert)
        (("" (induct "k")
          (("1" (flatten)
            (("1" (skeep)
              (("1" (equate "l" "0" (assert))
                (("1" (rewrite "rem_mod")
                  (("1" (lemma "endpoint_outside_or_on_perimeter")
                    (("1"
                      (inst - "A" "B"
                       "edges_of_polygon(A)(find_index_any(A, p))" "p"
                       "A`vertices(i)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (use "point_out_not_in")
                            (("1" (ground) nil nil)) nil)
                           ("2" (use "point_out_not_in")
                            (("2" (ground)
                              (("2"
                                (use "vertex_on_perimeter")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil)
                           ("4" (hide-all-but 1)
                            (("4" (use "perimeter_find_index_any")
                              (("4"
                                (assert)
                                (("4"
                                  (grind)
                                  (("4"
                                    (typepred
                                     "find_index_any_rec(A, p, A`num_vertices - 1)")
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (expand "segment_endpoint?")
                            (("5" (expand "edges_of_polygon")
                              (("5" (propax) nil nil)) nil))
                            nil)
                           ("6" (use "point_on_find_index_segment")
                            (("6" (use "perimeter_find_index_any")
                              (("6" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "perimeter_find_index_any")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep + t)
              (("2" (split -3)
                (("1" (case "l = 1 + jb")
                  (("1" (inst + "jb")
                    (("1" (replace -1)
                      (("1" (inst - "jb")
                        (("1" (expand "segment_enters_polygon_alt?")
                          (("1"
                            (lemma "endpoint_inside_or_on_perimeter")
                            (("1"
                              (inst - "A" "B"
                               "edges_of_polygon(A)(rem(A`num_vertices)(jb + i))"
                               "A`vertices(rem(A`num_vertices)(1 + jb + i))"
                               "A`vertices(rem(A`num_vertices)(i + jb))")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "point_on_segment?(A`vertices(rem(A`num_vertices)(1 + i + jb)),
                        edges_of_polygon(A)(rem(A`num_vertices)(i + jb)))")
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         +
                                         "A`vertices(rem(A`num_vertices)(1 + i + jb))")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "segment_endpoint?")
                                      (("3"
                                        (expand "edges_of_polygon")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("4" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide -1 3)
                                    (("2"
                                      (equate
                                       (! 1 1)
                                       "edges_of_polygon(A)(rem(A`num_vertices)(i + jb))`p2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (expand "edges_of_polygon")
                                          (("2"
                                            (expand "next_index")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lemma "rem_add_one")
                                                (("2"
                                                  (inst
                                                   -
                                                   "A`num_vertices"
                                                   "i + jb")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst - "l") (("2" (assert) nil nil)) nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst? +) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (path_to_enter_B_exists_TCC1 0
  (path_to_enter_B_exists_TCC1-2 nil 3874129022
   ("" (skeep*)
    (("" (typepred "rem(m)(k + i)") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (path_to_enter_B_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.k, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_enter_B_exists_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_enter_B_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.k, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_enter_B_exists 0
  (path_to_enter_B_exists-1 nil 3874129022
   ("" (skeep)
    (("" (skoletin)
      (("" (assert)
        (("" (typepred "q")
          (("" (use "path_to_enter_B_invariant")
            (("" (ground)
              (("" (inst - "A`num_vertices - 1")
                (("" (ground)
                  (("1" (replace -3 :dir rl)
                    (("1"
                      (inst +
                       "rem(A`num_vertices)(find_index_any(A, q) - i)")
                      (("1"
                        (inst -
                         "rem(A`num_vertices)(find_index_any(A, q) - i)")
                        (("1"
                          (name-replace "j" "find_index_any(A, q)"
                           :hide? nil)
                          (("1" (equate (! 1 1 1) "j")
                            (("1"
                              (lemma "endpoint_inside_or_on_perimeter")
                              (("1"
                                (inst
                                 -
                                 "A"
                                 "B"
                                 "edges_of_polygon(A)(j)"
                                 "q"
                                 "A`vertices(j)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (use "perimeter_find_index_any")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "point_on_segment?(q, edges_of_polygon(A)(j))")
                                        (("1"
                                          (split -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "segment_enters_polygon_alt?")
                                              (("1"
                                                (inst + "q")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (expand
                                             "segment_endpoint?")
                                            (("3"
                                              (expand
                                               "edges_of_polygon")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("4" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (use
                                           "point_on_find_index_segment")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "perimeter_find_index_any")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (2 3))
                              (("2"
                                (rewrite "rem_sum1")
                                (("2"
                                  (rewrite "rem_mod")
                                  (("2"
                                    (use "perimeter_find_index_any")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "j")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst + "l") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_path_to_enter_B_exists_TCC1 0
  (first_path_to_enter_B_exists_TCC1-2 nil 3874129022
   ("" (skeep*)
    (("" (typepred "rem(m)(l + i)") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (first_path_to_enter_B_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (first_path_to_enter_B_exists_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (first_path_to_enter_B_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (first_path_to_enter_B_exists 0
  (first_path_to_enter_B_exists-1 nil 3874129022
   ("" (skeep)
    (("" (skoletin)
      (("" (assert)
        ((""
          (name-replace "k"
           "min[below(A`num_vertices)]({k: below(A`num_vertices) |
     vertex?(B)(A`vertices(rem(A`num_vertices)(k + i))) and
     segment_enters_polygon_alt?(B, edges_of_polygon
                                          (A)(rem(A`num_vertices)(k + i)))})")
          (("1" (typepred "k")
            (("1" (hide -5)
              (("1" (inst + "k")
                (("1" (assert)
                  (("1" (skeep + t)
                    (("1" (use "perimeter_find_index_any")
                      (("1" (use "point_on_find_index_segment")
                        (("1" (ground)
                          (("1" (use "path_to_enter_B_invariant")
                            (("1" (ground)
                              (("1"
                                (replace -11 :dir rl)
                                (("1"
                                  (inst - "l")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (inst - "l")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (skeep - t)
                                      (("2"
                                        (inst - "l_1")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "nonempty?")
              (("2" (expand "empty?")
                (("2" (expand "member")
                  (("2" (use "path_to_enter_B_exists")
                    (("2" (ground)
                      (("2" (skeep)
                        (("2" (replace -4 :dir rl)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (path_to_exit_B_invariant_TCC1 0
  (path_to_exit_B_invariant_TCC1-2 nil 3874129022
   ("" (skeep)
    (("" (typepred "find_index_any(A, p)")
      (("" (ground)
        (("" (use "perimeter_find_index_any") (("" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (path_to_exit_B_invariant subtype
    "polygons_2d.find_index_any(merge_well_formed.A, merge_well_formed.p)"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_exit_B_invariant_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_exit_B_invariant subtype
    "polygons_2d.find_index_any(merge_well_formed.A, merge_well_formed.p)"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_exit_B_invariant_TCC2 0
  (path_to_exit_B_invariant_TCC2-2 nil 3874129022
   ("" (skeep*)
    (("" (typepred "rem(m)(l + i)") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (path_to_exit_B_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_exit_B_invariant_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_exit_B_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_exit_B_invariant_TCC3 0
  (path_to_exit_B_invariant_TCC3-2 nil 3874129022
   ("" (skeep*)
    (("" (typepred "rem(m)(l!1 + i)") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (path_to_exit_B_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_exit_B_invariant_TCC3-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_exit_B_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_exit_B_invariant 0
  (path_to_exit_B_invariant-1 nil 3874129022
   ("" (skeep*)
    (("" (skoletin)
      (("" (assert)
        (("" (induct "k")
          (("1" (flatten)
            (("1" (skeep)
              (("1" (equate "l" "0" (assert))
                (("1" (rewrite "rem_mod")
                  (("1" (lemma "endpoint_inside_or_on_perimeter")
                    (("1"
                      (inst - "A" "B"
                       "edges_of_polygon(A)(find_index_any(A, p))" "p"
                       "A`vertices(i)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (use "point_out_not_in")
                            (("1" (ground) nil nil)) nil)
                           ("2" (lemma "perimeter_not_outside")
                            (("2" (inst - "A`vertices(i)" "B")
                              (("2"
                                (ground)
                                (("2"
                                  (use "vertex_on_perimeter")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (propax) nil nil)
                           ("4" (hide-all-but 1)
                            (("4" (use "perimeter_find_index_any")
                              (("4"
                                (assert)
                                (("4"
                                  (grind)
                                  (("4"
                                    (typepred
                                     "find_index_any_rec(A, p, A`num_vertices - 1)")
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (expand "segment_endpoint?")
                            (("5" (expand "edges_of_polygon")
                              (("5" (propax) nil nil)) nil))
                            nil)
                           ("6" (use "point_on_find_index_segment")
                            (("6" (use "perimeter_find_index_any")
                              (("6" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "perimeter_find_index_any")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep + t)
              (("2" (split -3)
                (("1" (case "l = 1 + jb")
                  (("1" (inst + "jb")
                    (("1" (replace -1)
                      (("1" (inst - "jb")
                        (("1" (expand "segment_exits_polygon?")
                          (("1"
                            (lemma "endpoint_outside_or_on_perimeter")
                            (("1"
                              (inst - "A" "B"
                               "edges_of_polygon(A)(rem(A`num_vertices)(jb + i))"
                               "A`vertices(rem(A`num_vertices)(1 + jb + i))"
                               "A`vertices(rem(A`num_vertices)(i + jb))")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "point_on_segment?(A`vertices(rem(A`num_vertices)(1 + i + jb)),
                                     edges_of_polygon(A)(rem(A`num_vertices)(i + jb)))")
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         +
                                         "A`vertices(rem(A`num_vertices)(1 + i + jb))")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "segment_endpoint?")
                                      (("3"
                                        (expand "edges_of_polygon")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("4" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide -1 3)
                                    (("2"
                                      (equate
                                       (! 1 1)
                                       "edges_of_polygon(A)(rem(A`num_vertices)(i + jb))`p2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (expand "edges_of_polygon")
                                          (("2"
                                            (expand "next_index")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lemma "rem_add_one")
                                                (("2"
                                                  (inst
                                                   -
                                                   "A`num_vertices"
                                                   "i + jb")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst - "l") (("2" (assert) nil nil)) nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst? +) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (path_to_exit_B_exists_TCC1 0
  (path_to_exit_B_exists_TCC1-2 nil 3874129022
   ("" (skeep*)
    (("" (typepred "rem(m)(k + i)") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (path_to_exit_B_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.k, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_exit_B_exists_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_exit_B_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.k, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_exit_B_exists 0
  (path_to_exit_B_exists-1 nil 3874129022
   ("" (skeep)
    (("" (skoletin)
      (("" (assert)
        (("" (typepred "q")
          (("" (use "path_to_exit_B_invariant")
            (("" (ground)
              (("" (inst - "A`num_vertices - 1")
                (("" (ground)
                  (("1" (replace -3 :dir rl)
                    (("1"
                      (inst +
                       "rem(A`num_vertices)(find_index_any(A, q) - i)")
                      (("1"
                        (inst -
                         "rem(A`num_vertices)(find_index_any(A, q) - i)")
                        (("1"
                          (name-replace "j" "find_index_any(A, q)"
                           :hide? nil)
                          (("1" (equate (! 1 1 1) "j")
                            (("1"
                              (lemma
                               "endpoint_outside_or_on_perimeter")
                              (("1"
                                (inst
                                 -
                                 "A"
                                 "B"
                                 "edges_of_polygon(A)(j)"
                                 "q"
                                 "A`vertices(j)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (use "perimeter_find_index_any")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "point_on_segment?(q, edges_of_polygon(A)(j))")
                                        (("1"
                                          (split -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "segment_exits_polygon?")
                                              (("1"
                                                (inst + "q")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (expand
                                             "segment_endpoint?")
                                            (("3"
                                              (expand
                                               "edges_of_polygon")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("4" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (use
                                           "point_on_find_index_segment")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "perimeter_find_index_any")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (2 3))
                              (("2"
                                (rewrite "rem_sum1")
                                (("2"
                                  (rewrite "rem_mod")
                                  (("2"
                                    (use "perimeter_find_index_any")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "j")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst + "l") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_path_to_exit_B_exists_TCC1 0
  (first_path_to_exit_B_exists_TCC1-2 nil 3874129022
   ("" (skeep*)
    (("" (typepred "rem(m)(l + i)") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (first_path_to_exit_B_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (first_path_to_exit_B_exists_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (first_path_to_exit_B_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (first_path_to_exit_B_exists 0
  (first_path_to_exit_B_exists-1 nil 3874129022
   ("" (skeep)
    (("" (skoletin)
      (("" (assert)
        ((""
          (name-replace "k"
           "min[below(A`num_vertices)]({k: below(A`num_vertices) |
       vertex?(B)(A`vertices(rem(A`num_vertices)(k + i))) and
       segment_exits_polygon?(B, edges_of_polygon
                                            (A)(rem(A`num_vertices)(k + i)))})")
          (("1" (typepred "k")
            (("1" (hide -5)
              (("1" (inst + "k")
                (("1" (assert)
                  (("1" (skeep + t)
                    (("1" (use "perimeter_find_index_any")
                      (("1" (use "point_on_find_index_segment")
                        (("1" (ground)
                          (("1" (use "path_to_exit_B_invariant")
                            (("1" (ground)
                              (("1"
                                (replace -11 :dir rl)
                                (("1"
                                  (inst - "l")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (inst - "l")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (skeep - t)
                                      (("2"
                                        (inst - "l_1")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "nonempty?")
              (("2" (expand "empty?")
                (("2" (expand "member")
                  (("2" (use "path_to_exit_B_exists")
                    (("2" (ground)
                      (("2" (skeep)
                        (("2" (replace -4 :dir rl)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (path_to_exit_B_from_vertex_invariant_TCC1 0
  (path_to_exit_B_from_vertex_invariant_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (path_to_exit_B_from_vertex_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_exit_B_from_vertex_invariant_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_exit_B_from_vertex_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_exit_B_from_vertex_invariant_TCC2 0
  (path_to_exit_B_from_vertex_invariant_TCC2-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (path_to_exit_B_from_vertex_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_exit_B_from_vertex_invariant_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_exit_B_from_vertex_invariant subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_exit_B_from_vertex_invariant 0
  (path_to_exit_B_from_vertex_invariant-1 nil 3874129022
   ("" (skeep*)
    (("" (assert)
      (("" (induct "k")
        (("1" (flatten)
          (("1" (skeep)
            (("1" (equate "l" "0" (assert))
              (("1" (typepred "p")
                (("1" (use "vertex_find_index")
                  (("1" (assert)
                    (("1" (rewrite "rem_mod")
                      (("1" (use "find_index_self")
                        (("1" (assert)
                          (("1" (lemma "perimeter_not_outside")
                            (("1" (inst - "p" "B")
                              (("1"
                                (assert)
                                (("1"
                                  (use "vertex_on_perimeter")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "find_index(A, p)")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep + t)
            (("2" (split -3)
              (("1" (case "l = 1 + jb")
                (("1" (inst + "jb")
                  (("1" (replace -1)
                    (("1" (inst - "jb")
                      (("1" (expand "segment_exits_polygon?")
                        (("1"
                          (lemma "endpoint_outside_or_on_perimeter")
                          (("1" (name-replace "i" "find_index(A, p)")
                            (("1"
                              (inst - "A" "B"
                               "edges_of_polygon(A)(rem(A`num_vertices)(jb + i))"
                               "A`vertices(rem(A`num_vertices)(1 + jb + i))"
                               "A`vertices(rem(A`num_vertices)(i + jb))")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "point_on_segment?(A`vertices(rem(A`num_vertices)(1 + i + jb)),
                                                               edges_of_polygon(A)(rem(A`num_vertices)(i + jb)))")
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         +
                                         "A`vertices(rem(A`num_vertices)(1 + i + jb))")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "segment_endpoint?")
                                      (("3"
                                        (expand "edges_of_polygon")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("4" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide -1 3)
                                    (("2"
                                      (equate
                                       (! 1 1)
                                       "edges_of_polygon(A)(rem(A`num_vertices)(i + jb))`p2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (expand "edges_of_polygon")
                                          (("2"
                                            (expand "next_index")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lemma "rem_add_one")
                                                (("2"
                                                  (inst
                                                   -
                                                   "A`num_vertices"
                                                   "i + jb")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst - "l") (("2" (assert) nil nil)) nil))
                nil)
               ("2" (skeep)
                (("2" (inst? +) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (path_to_exit_B_from_vertex_exists_TCC1 0
  (path_to_exit_B_from_vertex_exists_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (path_to_exit_B_from_vertex_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.k, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (path_to_exit_B_from_vertex_exists_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (path_to_exit_B_from_vertex_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.k, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (path_to_exit_B_from_vertex_exists 0
  (path_to_exit_B_from_vertex_exists-1 nil 3874129022
   ("" (skeep)
    (("" (assert)
      (("" (typepred "q")
        (("" (use "path_to_exit_B_from_vertex_invariant")
          (("" (ground)
            (("" (inst - "A`num_vertices - 1")
              (("1" (ground)
                (("1" (name-replace "i" "find_index(A, p)")
                  (("1" (use "vertex_find_index")
                    (("1" (assert)
                      (("1"
                        (inst +
                         "rem(A`num_vertices)(find_index(A, q) - i)")
                        (("1"
                          (inst -
                           "rem(A`num_vertices)(find_index(A, q) - i)")
                          (("1" (name-replace "j" "find_index(A, q)")
                            (("1" (equate (! 1 1 1) "j")
                              (("1"
                                (lemma
                                 "endpoint_outside_or_on_perimeter")
                                (("1"
                                  (inst
                                   -
                                   "A"
                                   "B"
                                   "edges_of_polygon(A)(j)"
                                   "q"
                                   "A`vertices(j)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "point_on_segment?(q, edges_of_polygon(A)(j))")
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "segment_exits_polygon?")
                                            (("1"
                                              (inst + "q")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (expand "segment_endpoint?")
                                          (("3"
                                            (expand "edges_of_polygon")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("4" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "j")
                                        (("2"
                                          (expand "edges_of_polygon" 1)
                                          (("2"
                                            (use "find_index_self")
                                            (("2"
                                              (expand
                                               "point_on_segment?")
                                              (("2"
                                                (inst + "0")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide (2 3))
                                (("2"
                                  (rewrite "rem_sum1")
                                  (("2"
                                    (rewrite "rem_mod")
                                    (("2"
                                      (typepred "j")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst + "l") (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_path_to_exit_B_from_vertex_exists_TCC1 0
  (first_path_to_exit_B_from_vertex_exists_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (first_path_to_exit_B_from_vertex_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)"))
  (first_path_to_exit_B_from_vertex_exists_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (first_path_to_exit_B_from_vertex_exists subtype
    "modulo_arithmetic.rem(merge_well_formed.m)((number_fields.+)(merge_well_formed.l, merge_well_formed.i))"
    "naturalnumbers.below(merge_well_formed.A`num_vertices)")))
 (first_path_to_exit_B_from_vertex_exists 0
  (first_path_to_exit_B_from_vertex_exists-1 nil 3874129022
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "i" "find_index(A, p)")
        ((""
          (name-replace "k"
           "min[below(A`num_vertices)]({k: below(A`num_vertices) |
           vertex?(B)(A`vertices(rem(A`num_vertices)(k + i))) and
           segment_exits_polygon?(B, edges_of_polygon
                                                (A)(rem(A`num_vertices)(k + i)))})")
          (("1" (typepred "k")
            (("1" (hide -5)
              (("1" (inst + "k")
                (("1" (assert)
                  (("1" (skeep + t)
                    (("1" (use "path_to_exit_B_from_vertex_invariant")
                      (("1" (ground)
                        (("1" (inst - "l")
                          (("1" (ground)
                            (("1" (inst - "l")
                              (("1"
                                (expand "i")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (skeep - t)
                              (("2"
                                (inst - "l_1")
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "i")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand "i")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "nonempty?")
              (("2" (expand "empty?")
                (("2" (expand "member")
                  (("2" (use "path_to_exit_B_from_vertex_exists")
                    (("2" (ground)
                      (("2" (skeep)
                        (("2" (inst - "k")
                          (("2" (expand "i") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (in_out_for_overlapping_polygons 0
  (in_out_for_overlapping_polygons-1 nil 3874129022
   ("" (skeep)
    (("" (case "point_on_polygon_perimeter?(A)(q)")
      (("1" (lemma "overlap_imp_inside_pt_on_perim")
        (("1" (inst - "A" "B" "p")
          (("1" (ground)
            (("1" (hide 1)
              (("1" (skeep - t)
                (("1" (lemma "first_path_to_enter_B_exists")
                  (("1" (inst - "A" "B" "q" "r")
                    (("1" (ground)
                      (("1" (skeep - t)
                        (("1"
                          (name-replace "iu" "rem(A`num_vertices)
                                         (k + next_index(A, find_index_any(A, q)))"
                           :hide? nil)
                          (("1" (hide -3)
                            (("1"
                              (expand "segment_enters_polygon_alt?")
                              (("1"
                                (skeep)
                                (("1"
                                  (name-replace
                                   "uvect"
                                   "A`vertices(next_index(A, iu)) - A`vertices(iu)")
                                  (("1"
                                    (name-replace
                                     "z"
                                     "A`vertices(iu) + norm(pt - A`vertices(iu))/2 * ^(uvect)")
                                    (("1"
                                      (case
                                       "segment_endpoint?(edges_of_polygon(A)(iu))(z)")
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (case "pt = A`vertices(iu)")
                                          (("1"
                                            (use "point_out_not_in")
                                            (("1"
                                              (use
                                               "vertex_on_perimeter")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but
                                             (-1 -2 -3 -7 +))
                                            (("2"
                                              (replace -2 :dir rl)
                                              (("2"
                                                (expand
                                                 "segment_endpoint?")
                                                (("2"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "add_move_left")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "scal_eq_zero")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (cross-mult
                                                               -1)
                                                              (("1"
                                                                (rewrite
                                                                 "norm_eq_0")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (cross-mult
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (use
                                                                       "vertex_neq_next")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "add_move_left")
                                                      (("2"
                                                        (replace -3)
                                                        (("2"
                                                          (expand "^")
                                                          (("2"
                                                            (real-props)
                                                            (("2"
                                                              (lemma
                                                               "scal_cancel")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "norm(pt - A`vertices(iu)) / (2 * norm(uvect))"
                                                                 "1"
                                                                 "uvect")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (cross-mult
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "point_on_segment_has_offset")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (rewrite
                                                                               "norm_scal")
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("1"
                                                                                    (move-terms
                                                                                     -1
                                                                                     l)
                                                                                    (("1"
                                                                                      (factor
                                                                                       -1
                                                                                       r)
                                                                                      (("1"
                                                                                        (mult-cases
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "norm_eq_0")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "vertex_neq_next")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "A"
                                                                                                 "iu")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (replace
                                                                     -4
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "vertex_neq_next")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "A"
                                                                           "iu")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "point_on_segment?(z, edges_of_polygon(A)(iu))")
                                        (("1"
                                          (case
                                           "point_in_polygon?(z, B)")
                                          (("1"
                                            (lemma
                                             "first_path_to_exit_B_exists")
                                            (("1"
                                              (inst - "A" "B" "z" "q")
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (skoletin)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep - t)
                                                      (("1"
                                                        (name-replace
                                                         "iv"
                                                         "rem(A`num_vertices)(k!1 + i)"
                                                         :hide?
                                                         nil)
                                                        (("1"
                                                          (expand
                                                           "vertex?"
                                                           (-4 -13))
                                                          (("1"
                                                            (skeep*)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "A`vertices(iu)"
                                                               "A`vertices(iv)"
                                                               "i!2"
                                                               "i!1"
                                                               "edges_of_polygon(A)(iv)")
                                                              (("1"
                                                                (expand
                                                                 "edges_of_polygon"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite*
                                                                     "vertex_is_vertex")
                                                                    (("1"
                                                                      (case
                                                                       "i!2 = i!1")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (case
                                                                           "iu = iv")
                                                                          (("1"
                                                                            (expand
                                                                             "segment_exits_polygon?")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (case
                                                                                 "pt!1 = edges_of_polygon(A)(iv)`p2")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "non_vertex_points_outside_polygon")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "A"
                                                                                     "B"
                                                                                     "edges_of_polygon(A)(iv)"
                                                                                     "z")
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "point_out_not_in")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "edge_of_polygon?")
                                                                                        (("3"
                                                                                          (inst
                                                                                           +
                                                                                           "iv")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (flatten)
                                                                                        (("4"
                                                                                          (expand
                                                                                           "edges_of_polygon"
                                                                                           (-1
                                                                                            2))
                                                                                          (("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (use
                                                                                               "point_out_not_in")
                                                                                              (("4"
                                                                                                (ground)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "vertex_on_perimeter")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (use
                                                                                                   "point_out_not_in")
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "vertex_on_perimeter")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   "edges_of_polygon")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (expand
                                                                                                   "edges_of_polygon")
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "non_endpoints_outside_polygon")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "A"
                                                                                     "B"
                                                                                     "edges_of_polygon(A)(iv)"
                                                                                     "pt!1"
                                                                                     "z")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "segment_endpoint?")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (use
                                                                                               "point_out_not_in")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "edges_of_polygon")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "perimeter_not_outside")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "pt!1"
                                                                                                   "B")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "vertex_on_perimeter")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand
                                                                                               "edges_of_polygon")
                                                                                              (("3"
                                                                                                (use
                                                                                                 "point_out_not_in")
                                                                                                (("3"
                                                                                                  (ground)
                                                                                                  (("3"
                                                                                                    (use
                                                                                                     "vertex_on_perimeter")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (expand
                                                                                               "edges_of_polygon")
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 "non_vertex_points_inside_polygon")
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "A"
                                                                                                   "B"
                                                                                                   "edges_of_polygon(A)(iv)"
                                                                                                   "pt!1")
                                                                                                  (("4"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "point_out_not_in")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "edges_of_polygon")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "perimeter_not_outside")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "pt!1"
                                                                                                           "B")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "vertex_on_perimeter")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "A`vertices")
                                                                            (("2"
                                                                              (expand
                                                                               "uniq_vertex_list?")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "iu"
                                                                                 "iv")
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (typepred
                                                                           "B`vertices")
                                                                          (("1"
                                                                            (expand
                                                                             "uniq_vertex_list?")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "i!2"
                                                                               "i!1")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "segment_exits_polygon?")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (lemma
                                                                               "outside_point_on_segment_between_rays")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "A"
                                                                                 "B"
                                                                                 "pt!1"
                                                                                 "edges_of_polygon(A)(iv)`p2"
                                                                                 "i!1"
                                                                                 "edges_of_polygon(A)(iv)")
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "edges_of_polygon"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "perimeter_not_outside")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "pt!1"
                                                                                         "B")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (use
                                                                                             "vertex_on_perimeter")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "vertex?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "i!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "edges_of_polygon")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skeep
                                                                           +
                                                                           t)
                                                                          (("3"
                                                                            (expand
                                                                             "vertex?"
                                                                             -1)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (expand
                                                                                 "on_perimeter_vertex_path?")
                                                                                (("3"
                                                                                  (case-replace
                                                                                   "iu = iv")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "B`vertices")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "uniq_vertex_list?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i!2"
                                                                                         "i!1")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "A`vertices")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "uniq_vertex_list?")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "iu"
                                                                                           "iv")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep
                                                                                       -
                                                                                       t)
                                                                                      (("2"
                                                                                        (case-replace
                                                                                         "find_index(A, A`vertices(iv)) = iv")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "find_index(A, A`vertices(iu)) = iu")
                                                                                          (("1"
                                                                                            (equate
                                                                                             "rem(A`num_vertices)(A`num_vertices + iv - iu)"
                                                                                             "rem(A`num_vertices)(iv - iu)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "k!2 = rem(A`num_vertices)(iv - iu)")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "rem_sum1"
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "rem_mod"
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "perimeter_not_outside")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "w"
                                                                                                         "B")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "vertex_on_perimeter")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "vertex?")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "i!1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "rem(A`num_vertices)(k!2 + iu - i)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "rem_sum1"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -7
                                                                                                   -3
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "perimeter_find_index_any")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "A"
                                                                                                       "z")
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "point_on_polygon_perimeter?(A)(z)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "rem_plus_1_eq_next_index"
                                                                                                             -13
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "find_index_any(A, z) = iu")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -14
                                                                                                                 (-6
                                                                                                                  1))
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "rem_sum1"
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "rem_diff1"
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "rem_diff2")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "A`num_vertices"
                                                                                                                         "iu + k!2"
                                                                                                                         "1 + iu")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -10
                                                                                                                               2
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -14
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "rem_sum1"
                                                                                                                                   +)
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "rem_diff1"
                                                                                                                                     +)
                                                                                                                                    (("1"
                                                                                                                                      (case-replace
                                                                                                                                       "k!2 = 0")
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "rem_mod"
                                                                                                                                         -8)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "perimeter_not_outside")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "w"
                                                                                                                                             "B")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (use
                                                                                                                                                 "vertex_on_perimeter")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (case-replace
                                                                                                                                         "k!1 = A`num_vertices - 1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "rem_self")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (rewrite
                                                                                                                                           "rem_mod"
                                                                                                                                           -6)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "rem_mod"
                                                                                                                                             3)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (use
                                                                                                                 "find_index_any_segment")
                                                                                                                (("2"
                                                                                                                  (ground)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "segment_endpoint?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "edges_of_polygon")
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "point_on_polygon_perimeter?")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               +
                                                                                                               "edges_of_polygon(A)(iu)")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "rem_sum1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "A`num_vertices"
                                                                                                   "A`num_vertices"
                                                                                                   "iv - iu")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "rem_self")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "find_index_self_index")
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (use
                                                                                           "find_index_self_index")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil)
                                                 ("3" (propax) nil nil)
                                                 ("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 3)
                                                (("2"
                                                  (case
                                                   "pt = edges_of_polygon(A)(iu)`p2")
                                                  (("1"
                                                    (lemma
                                                     "non_vertex_points_inside_polygon")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "A"
                                                       "B"
                                                       "edges_of_polygon(A)(iu)"
                                                       "z")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "point_on_polygon_perimeter?")
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "non_endpoints_inside_polygon")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "A"
                                                       "B"
                                                       "edges_of_polygon(A)(iu)"
                                                       "pt"
                                                       "z")
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "segment_endpoint?")
                                                          (("1"
                                                            (use
                                                             "point_out_not_in")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (use
                                                                 "vertex_on_perimeter")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-4
                                                                      5))
                                                                    (("1"
                                                                      (expand
                                                                       "point_on_polygon_perimeter?")
                                                                      (("1"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-3 2))
                                                          (("2"
                                                            (expand
                                                             "point_on_polygon_perimeter?")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (lemma
                                               "endpoint_inside_or_on_perimeter")
                                              (("2"
                                                (inst
                                                 -
                                                 "A"
                                                 "B"
                                                 "edges_of_polygon(A)(iu)"
                                                 "pt"
                                                 "A`vertices(next_index(A, iu))")
                                                (("2"
                                                  (ground)
                                                  (("1"
                                                    (lemma
                                                     "non_vertex_points_inside_polygon")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "A"
                                                       "B"
                                                       "edges_of_polygon(A)(iu)"
                                                       "z")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "edges_of_polygon"
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "segment_endpoint?")
                                                                (("2"
                                                                  (expand
                                                                   "edges_of_polygon")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "non_endpoints_inside_polygon")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "A"
                                                       "B"
                                                       "edges_of_polygon(A)(iu)"
                                                       "pt"
                                                       "z")
                                                      (("2"
                                                        (ground)
                                                        (("2"
                                                          (expand
                                                           "segment_endpoint?"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "edges_of_polygon"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "point_in_polygon?"
                                                               -10)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (use
                                                                   "vertex_on_perimeter")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "segment_endpoint?")
                                                    (("3"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (rewrite
                                             "point_on_segment_has_norm_offset")
                                            (("2"
                                              (inst
                                               +
                                               "norm(pt - A`vertices(iu)) / 2")
                                              (("2"
                                                (replace -2 :dir rl)
                                                (("2"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("2"
                                                    (expand "length")
                                                    (("2"
                                                      (rewrite
                                                       "point_on_segment_has_offset"
                                                       -6)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -6
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "norm_scal"
                                                                 +)
                                                                (("2"
                                                                  (expand
                                                                   "abs")
                                                                  (("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (real-props)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma "vertex_neq_next")
                                        (("2"
                                          (inst - "A" "iu")
                                          (("2"
                                            (ground)
                                            (("2"
                                              (replace -2 -1 :dir rl)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "perimeter_find_index_any")
                            (("2" (inst - "A" "q")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "vertex_on_perimeter") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_vertices_always_endpoints 0
  (merge_seq_vertices_always_endpoints-1 nil 3874129022
   ("" (skeep)
    (("" (use "merge_seq_only_vertex_intersections")
      (("" (ground)
        (("" (lemma "merge_vertex_AB")
          (("" (inst-cp - "A" "B" "Am" "Bm" "M")
            (("" (assert)
              (("" (inst -2 "j")
                (("" (expand "point_AB_vtx?" -2)
                  (("" (expand "vertex?")
                    (("" (split -2)
                      (("1" (skeep - t)
                        (("1" (inst -4 "edges_of_polygon(Am)(i!1)")
                          (("1"
                            (expand "seq_only_vertex_intersections?"
                                    -4)
                            (("1" (inst -4 "i")
                              (("1"
                                (expand
                                 "same_edge_or_vertex_intersection?")
                                (("1"
                                  (replace -7 :dir rl)
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "edges_of_polygon" -2)
                                        (("1"
                                          (expand "reverse_segment")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst - "M`seq(j)")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand
                                             "segment_endpoint?")
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst + "t")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (replace -2 1 :dir rl)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep - t)
                        (("2" (inst -5 "edges_of_polygon(Bm)(i!1)")
                          (("2"
                            (expand "seq_only_vertex_intersections?"
                                    -5)
                            (("2" (inst -5 "i")
                              (("2"
                                (expand
                                 "same_edge_or_vertex_intersection?")
                                (("2"
                                  (replace -7 :dir rl)
                                  (("2"
                                    (split -5)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "edges_of_polygon" -2)
                                        (("1"
                                          (expand "reverse_segment")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst - "M`seq(j)")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand
                                             "segment_endpoint?")
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst + "t")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (replace -2 1 :dir rl)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_vertices_always_endpoints_Am 0
  (merge_seq_vertices_always_endpoints_Am-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "merge_vertex_AB")
      (("" (inst - "A" "B" "Am" "Bm" "M")
        (("" (assert)
          (("" (assert)
            (("" (inst - "j")
              (("" (expand "point_AB_vtx?")
                (("" (expand "vertex?")
                  (("" (split -1)
                    (("1" (skeep - t)
                      (("1" (typepred "Am")
                        (("1" (expand "simple_polygon_2d?")
                          (("1" (flatten)
                            (("1"
                              (expand "polygon_edges_do_not_cross?")
                              (("1"
                                (inst - "i" "i!1")
                                (("1"
                                  (inst - "M`seq(j)")
                                  (("1"
                                    (expand "edges_of_polygon")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand "point_on_segment?")
                                        (("1"
                                          (inst + "0")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (use "injected_only_vertex_intersections")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (inst - "edges_of_polygon(Bm)(i!1)")
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "only_vertex_intersections?")
                                  (("2"
                                    (inst - "edges_of_polygon(Am)(i)")
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "edges_of_polygon")
                                            (("1"
                                              (expand
                                               "reverse_segment")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (replace -5 :dir rl)
                                            (("2"
                                              (inst - "M`seq(j)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "segment_endpoint?")
                                                  (("2"
                                                    (expand
                                                     "edges_of_polygon")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "point_on_segment?")
                                                        (("2"
                                                          (inst + "0")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_vertices_always_endpoints_Bm 0
  (merge_seq_vertices_always_endpoints_Bm-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "merge_seq_vertices_always_endpoints_Am")
      (("" (inst - "B" "A" "Bm" "Am" "M" "e" "i" "j")
        (("1" (ground)
          (("1" (rewrite "inject_vertices_into_polygon_comm")
            (("1" (typepred "B")
              (("1" (expand "ccw_merge_pre_condition")
                (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (rewrite "merge_seq_commutative")
            (("2" (typepred "B")
              (("2" (expand "ccw_merge_pre_condition")
                (("2" (rewrite "merge_pre_condition_symmetric") nil
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "Bm")
          (("2" (expand "ccw_merge_pre_condition")
            (("2" (rewrite "merge_pre_condition_symmetric") nil nil))
            nil))
          nil)
         ("3" (typepred "B")
          (("3" (expand "ccw_merge_pre_condition")
            (("3" (rewrite "merge_pre_condition_symmetric") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_vertices_always_endpoints_M_TCC1 0
  (merge_seq_vertices_always_endpoints_M_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_vertices_always_endpoints_M subtype
    "(finite_sequences[point_2d].^(merge_well_formed.M, (0, merge_well_formed.k)))`seq"
    "[naturalnumbers.below((number_fields.+)(1, merge_well_formed.k)) -> point_2d]"))
  (merge_seq_vertices_always_endpoints_M_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_vertices_always_endpoints_M subtype
    "(finite_sequences[point_2d].^(merge_well_formed.M, (0, merge_well_formed.k)))`seq"
    "[naturalnumbers.below((number_fields.+)(1, merge_well_formed.k)) -> point_2d]")))
 (merge_seq_vertices_always_endpoints_M_TCC2 0
  (merge_seq_vertices_always_endpoints_M_TCC2-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_vertices_always_endpoints_M subtype "merge_well_formed.i"
    "below[M`length]"))
  (merge_seq_vertices_always_endpoints_M_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_vertices_always_endpoints_M subtype "merge_well_formed.i"
    "below[M`length]")))
 (merge_seq_vertices_always_endpoints_M_TCC3 0
  (merge_seq_vertices_always_endpoints_M_TCC3-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_vertices_always_endpoints_M subtype
    "(number_fields.+)(merge_well_formed.i, 1)" "below[M`length]"))
  (merge_seq_vertices_always_endpoints_M_TCC3-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_vertices_always_endpoints_M subtype
    "(number_fields.+)(merge_well_formed.i, 1)" "below[M`length]")))
 (merge_seq_vertices_always_endpoints_M_TCC4 0
  (merge_seq_vertices_always_endpoints_M_TCC4-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_vertices_always_endpoints_M subtype "merge_well_formed.j"
    "below[M`length]"))
  (merge_seq_vertices_always_endpoints_M_TCC4-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_vertices_always_endpoints_M subtype "merge_well_formed.j"
    "below[M`length]")))
 (merge_seq_vertices_always_endpoints_M 0
  (merge_seq_vertices_always_endpoints_M-1 nil 3874129022
   ("" (skeep)
    (("" (use "merge_path_props")
      (("" (ground)
        (("" (inst - "i")
          (("" (ground)
            (("1" (expand "edge_of_polygon?")
              (("1" (skeep)
                (("1" (lemma "merge_seq_vertices_always_endpoints_Am")
                  (("1"
                    (inst - "A" "B" "Am" "Bm" "M"
                     "(# p1 := M`seq(i), p2 := M`seq(1 + i) #)" "i_1"
                     "j")
                    (("1" (ground)
                      (("1" (expand "edges_of_polygon")
                        (("1" (ground)
                          (("1" (expand "uniq_vertex_list?")
                            (("1" (inst - "i" "j")
                              (("1"
                                (expand "^")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "edges_of_polygon")
                        (("2" (ground)
                          (("2" (expand "uniq_vertex_list?")
                            (("2" (inst - "j" "i + 1")
                              (("2"
                                (expand "^")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "uniq_vertex_list?")
                      (("2" (inst - "i" "i + 1")
                        (("2" (expand "^") (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "edge_of_polygon?")
              (("2" (skeep)
                (("2" (lemma "merge_seq_vertices_always_endpoints_Bm")
                  (("2"
                    (inst - "A" "B" "Am" "Bm" "M"
                     "(# p1 := M`seq(i), p2 := M`seq(1 + i) #)" "i_1"
                     "j")
                    (("1" (ground)
                      (("1" (expand "edges_of_polygon")
                        (("1" (ground)
                          (("1" (expand "uniq_vertex_list?")
                            (("1" (inst - "i" "j")
                              (("1"
                                (expand "^")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "edges_of_polygon")
                        (("2" (ground)
                          (("2" (expand "uniq_vertex_list?")
                            (("2" (inst - "j" "i + 1")
                              (("2"
                                (expand "^")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "uniq_vertex_list?")
                      (("2" (inst - "i" "i + 1")
                        (("2" (expand "^") (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_outgoing_edges_from_M_TCC1 0
  (no_outgoing_edges_from_M_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_outgoing_edges_from_M subtype
    "(number_fields.-)(merge_well_formed.i, 1)" "below[M`length]"))
  (no_outgoing_edges_from_M_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_from_M subtype
    "(number_fields.-)(merge_well_formed.i, 1)" "below[M`length]")))
 (no_outgoing_edges_from_M 0
  (no_outgoing_edges_from_M-1 nil 3874129022
   ("" (skeep*)
    (("" (lemma "merge_vertex_seq")
      (("" (inst - "A" "B" "Am" "Bm" "M")
        (("" (lemma "merge_path_props")
          (("" (inst - "A" "B" "Am" "Bm" "M")
            (("" (replace -3 :dir rl)
              (("" (assert)
                (("" (inst - "i")
                  (("" (inst - "i")
                    (("" (replace -7 :dir rl)
                      (("" (expand "seq_prev_vtx")
                        (("" (rewrite "between_rays_equiv")
                          (("" (ground)
                            (("1"
                              (lemma "shared_endpoints_imp_same_edge")
                              (("1"
                                (inst - "Am" "e" "h")
                                (("1"
                                  (assert)
                                  (("1"
                                    (use
                                     "point_between_rays_not_on_rays")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "reverse_segment")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "point_on_arb_ray?")
                                            (("1"
                                              (inst 2 "length(e)")
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (hide-all-but 2)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "length")
                                                      (("1"
                                                        (real-props)
                                                        (("1"
                                                          (cancel-add
                                                           1)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (grind-with-ext)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "reverse_segment")
                              (("2"
                                (expand "next_merge_vertex")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("1"
                                                    (name-replace
                                                     "j"
                                                     "find_index(Bm, M`seq(i))")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand
                                                         "edge_of_polygon?")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("1"
                                                              (replace
                                                               -5
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -10)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case-replace
                                                                       "i!1 = j")
                                                                      (("1"
                                                                        (lemma
                                                                         "point_between_rays_not_on_rays")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "Bm`vertices(next_index(Bm, j))"
                                                                           "(# p1 := M`seq(i), p2 := Bm`vertices(next_index(Bm, j)) #)"
                                                                           "e")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (hide
                                                                               2
                                                                               3)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "point_on_arb_ray?")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "norm(Bm`vertices(next_index(Bm, j)) - M`seq(i))")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^")
                                                                                      (("1"
                                                                                        (real-props)
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "u"
                                                                                           "Bm`vertices(next_index(Bm, j))")
                                                                                          (("1"
                                                                                            (grind-with-ext)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -6
                                                                         -12)
                                                                        (("2"
                                                                          (typepred
                                                                           "Bm`vertices")
                                                                          (("2"
                                                                            (expand
                                                                             "uniq_vertex_list?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "i!1"
                                                                               "j")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (expand
                                                                                   "j")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -11
                                                                                     1)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "find_index_self_index")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -10 -12)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "find_index_segment_is_edge")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (case-replace
                                                             "edges_of_polygon(Bm)(find_index(Bm, M`seq(i))) = h")
                                                            (("1"
                                                              (lemma
                                                               "point_between_rays_rotate_left")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "h`p2"
                                                                 "(# p1 := M`seq(i), p2 := M`seq(i - 1) #)"
                                                                 "e")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (use
                                                                       "point_between_rays_antisymmetric")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -14
                                                                           -13)
                                                                          (("1"
                                                                            (equate
                                                                             "(# p1 := h`p1, p2 := h`p2 #)"
                                                                             "h")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (apply-extensionality
                                                                               :hide?
                                                                               t)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "adj_merge_seq_vertices_distinct")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "i")
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "edge_of_polygon?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "edges_of_polygon")
                                                                  (("2"
                                                                    (equate
                                                                     "find_index(Bm, M`seq(i))"
                                                                     "i!1")
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (use
                                                                         "find_index_self")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -5
                                                                             -13
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "Bm`vertices")
                                                                                (("2"
                                                                                  (expand
                                                                                   "uniq_vertex_list?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "find_index(Bm, M`seq(i))"
                                                                                     "i!1")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -9 -11)
                                                (("2"
                                                  (use
                                                   "find_index_segment_is_edge")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (lemma
                                                         "point_between_rays_rotate_left")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "h`p2"
                                                           "(# p1 := M`seq(i), p2 := M`seq(i - 1) #)"
                                                           "e")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (lemma
                                                                 "shared_endpoints_imp_same_edge")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "Bm"
                                                                   "e"
                                                                   "h")
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (replace
                                                                       -13)
                                                                      (("1"
                                                                        (replace
                                                                         -)
                                                                        (("1"
                                                                          (lemma
                                                                           "point_between_rays_irreflexive")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "M`seq(i - 1)"
                                                                             "h")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "edge_of_polygon?")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "find_index(Bm, M`seq(i))")
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("2"
                                                                              (use
                                                                               "find_index_self")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (use "vertex_find_index")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "vertex?")
                                                (("2"
                                                  (expand
                                                   "edge_of_polygon?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("2"
                                                        (replace
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? +)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "edge_of_polygon?")
                                        (("2"
                                          (skeep -3)
                                          (("2"
                                            (expand "edges_of_polygon")
                                            (("2"
                                              (use "vertex_find_index")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (inst? +)
                                                    (("2"
                                                      (replace
                                                       -3
                                                       -8
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "reverse_segment")
                              (("3"
                                (expand "next_merge_vertex")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (split -3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("1"
                                                    (expand
                                                     "edge_of_polygon?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("1"
                                                          (replace
                                                           -5
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -10)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (case-replace
                                                                     "find_index(Am, M`seq(i)) = i!1")
                                                                    (("1"
                                                                      (replace
                                                                       -12)
                                                                      (("1"
                                                                        (lemma
                                                                         "point_between_rays_not_on_rays")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "Am`vertices(next_index(Am, i!1))"
                                                                           "(# p1 := M`seq(i), p2 := M`seq(i - 1) #)"
                                                                           "e")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (replace
                                                                               -12
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "point_on_arb_ray?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "norm(Am`vertices(next_index(Am, i!1)) - M`seq(i))")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("1"
                                                                                          (real-props)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "u"
                                                                                             "Am`vertices(next_index(Am, i!1))")
                                                                                            (("1"
                                                                                              (grind-with-ext)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -12
                                                                               +)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "find_index_self")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "Am`vertices")
                                                                          (("2"
                                                                            (expand
                                                                             "uniq_vertex_list?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "find_index(Am, M`seq(i))"
                                                                               "i!1")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -10 -12)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "find_index_segment_is_edge")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (lemma
                                                             "shared_endpoints_imp_same_edge")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "Am"
                                                               "e"
                                                               "h")
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (lemma
                                                                   "point_between_rays_not_on_rays")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "h`p2"
                                                                     "(# p1 := M`seq(i), p2 := M`seq(i - 1) #)"
                                                                     "e")
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "point_on_arb_ray?")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "length(h)")
                                                                              (("1"
                                                                                (expand
                                                                                 "^")
                                                                                (("1"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("1"
                                                                                    (real-props)
                                                                                    (("1"
                                                                                      (cancel-add
                                                                                       1)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (grind-with-ext)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "edge_of_polygon?")
                                                                  (("2"
                                                                    (inst?
                                                                     +)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -9 -11)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "find_index_segment_is_edge")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (case-replace
                                                           "edges_of_polygon(Am)(find_index(Am, M`seq(i))) = h")
                                                          (("1"
                                                            (lemma
                                                             "point_between_rays_rotate_left")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "h`p2"
                                                               "(# p1 := M`seq(i), p2 := M`seq(i - 1) #)"
                                                               "e")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -14)
                                                                    (("1"
                                                                      (equate
                                                                       "(# p1 := h`p1, p2 := h`p2 #)"
                                                                       "h")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "edge_of_polygon?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "edges_of_polygon")
                                                                  (("2"
                                                                    (equate
                                                                     "find_index(Am, M`seq(i))"
                                                                     "i!1")
                                                                    (("2"
                                                                      (typepred
                                                                       "Am`vertices")
                                                                      (("2"
                                                                        (replace
                                                                         -6
                                                                         -14
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "uniq_vertex_list?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "find_index(Am, M`seq(i))"
                                                                               "i!1")
                                                                              (("2"
                                                                                (lemma
                                                                                 "find_index_self")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "Am"
                                                                                   "M`seq(i)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (use "vertex_find_index")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "vertex?")
                                                (("2"
                                                  (expand
                                                   "edge_of_polygon?")
                                                  (("2"
                                                    (skeep -4)
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("2"
                                                        (replace
                                                         -4
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? +)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "edge_of_polygon?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "edges_of_polygon")
                                            (("2"
                                              (use "vertex_find_index")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (inst? +)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4"
                              (lemma "shared_endpoints_imp_same_edge")
                              (("4"
                                (inst - "Bm" "e" "h")
                                (("4"
                                  (assert)
                                  (("4"
                                    (replace -1 :dir rl)
                                    (("4"
                                      (use
                                       "point_between_rays_not_on_rays")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (expand "reverse_segment")
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (expand
                                               "point_on_arb_ray?")
                                              (("4"
                                                (inst 2 "length(e)")
                                                (("4"
                                                  (hide-all-but 2)
                                                  (("4"
                                                    (expand "^")
                                                    (("4"
                                                      (expand "length")
                                                      (("4"
                                                        (real-props)
                                                        (("4"
                                                          (cancel-add
                                                           1)
                                                          (("4"
                                                            (ground)
                                                            (("4"
                                                              (grind-with-ext)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_outgoing_edges_from_M_0_TCC1 0
  (no_outgoing_edges_from_M_0_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_outgoing_edges_from_M_0 subtype "0" "below[M`length]"))
  (no_outgoing_edges_from_M_0_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_from_M_0 subtype "0" "below[M`length]")))
 (no_outgoing_edges_from_M_0_TCC2 0
  (no_outgoing_edges_from_M_0_TCC2-2 nil 3874129022
   ("" (skeep)
    (("" (use "merge_seq_has_min_length") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (no_outgoing_edges_from_M_0 subtype "1" "below[M`length]"))
  (no_outgoing_edges_from_M_0_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_from_M_0 subtype "1" "below[M`length]")))
 (no_outgoing_edges_from_M_0 0
  (no_outgoing_edges_from_M_0-1 nil 3874129022
   ("" (skeep*)
    (("" (lemma "merge_vertex_seq")
      (("" (inst - "A" "B" "Am" "Bm" "M")
        (("" (lemma "merge_path_props")
          (("" (inst - "A" "B" "Am" "Bm" "M")
            (("" (replace -3 :dir rl)
              (("" (assert)
                (("" (inst - "0")
                  (("1" (inst - "0")
                    (("1" (assert)
                      (("1" (replace -7 :dir rl)
                        (("1" (expand "seq_prev_vtx")
                          (("1" (rewrite "between_rays_equiv")
                            (("1" (ground)
                              (("1"
                                (lemma
                                 "shared_endpoints_imp_same_edge")
                                (("1"
                                  (inst - "Am" "e" "h")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "point_between_rays_not_on_rays")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "reverse_segment")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "point_on_arb_ray?")
                                              (("1"
                                                (inst 2 "length(e)")
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (hide-all-but 2)
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (expand
                                                         "length")
                                                        (("1"
                                                          (real-props)
                                                          (("1"
                                                            (grind-with-ext)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "reverse_segment")
                                (("2"
                                  (expand "next_merge_vertex")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon")
                                                    (("1"
                                                      (name-replace
                                                       "j"
                                                       "find_index(Bm, M`seq(0))")
                                                      (("1"
                                                        (expand
                                                         "prev_0")
                                                        (("1"
                                                          (use
                                                           "first_merge_vertex_is_topleft_all")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -1
                                                               :depth
                                                               1)
                                                              (("1"
                                                                (hide-all-but
                                                                 -1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "point_on_polygon_perimeter?")
                                                                          (("2"
                                                                            (inst
                                                                             2
                                                                             "edges_of_polygon(Bm)(j)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -10 -12)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "find_index_segment_is_edge")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (case-replace
                                                               "edges_of_polygon(Bm)(find_index(Bm, M`seq(0))) = h")
                                                              (("1"
                                                                (replace
                                                                 -12
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -14)
                                                                  (("1"
                                                                    (lemma
                                                                     "point_between_rays_antisymmetric")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "prev_0(h`p1)"
                                                                       "h"
                                                                       "e")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "point_between_rays?((# p1 := h`p1, p2 := prev_0(h`p1) #), e)(h`p2)")
                                                                          (("1"
                                                                            (lemma
                                                                             "point_between_rays_rotate_left")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "h`p2"
                                                                               "(# p1 := h`p1, p2 := prev_0(h`p1) #)"
                                                                               "e")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (equate
                                                                                     "(# p1 := h`p1, p2 := h`p2 #)"
                                                                                     "h")
                                                                                    (("1"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -2
                                                                             2)
                                                                            (("2"
                                                                              (replace
                                                                               -9)
                                                                              (("2"
                                                                                (case
                                                                                 "h`p1`x <= h`p2`x")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -13
                                                                                    1))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "prev_0")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "point_between_rays?")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (name-replace*
                                                                                           ("eh"
                                                                                            "e`p2 - h`p1"
                                                                                            "hh"
                                                                                            "h`p2 - h`p1"))
                                                                                          (("1"
                                                                                            (case
                                                                                             "0 <= hh`x")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "eh`x * hh`y >= 0 &  eh`y * hh`x <= 0")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (mult-cases
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (mult-cases
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "hh"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "-"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "first_merge_vertex_is_topleft_all")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "A"
                                                                                     "B"
                                                                                     "Am"
                                                                                     "Bm"
                                                                                     "M"
                                                                                     "h`p2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "point_on_polygon_perimeter?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             2
                                                                                             "h")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "edge_of_polygon?")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "edges_of_polygon")
                                                                    (("2"
                                                                      (use
                                                                       "find_index_self")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (equate
                                                                           "find_index(Bm, M`seq(0))"
                                                                           "i")
                                                                          (("2"
                                                                            (replace
                                                                             -6
                                                                             -14
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "Bm`vertices")
                                                                                (("2"
                                                                                  (expand
                                                                                   "uniq_vertex_list?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "find_index(Bm, M`seq(0))"
                                                                                     "i")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -9 -11)
                                                  (("2"
                                                    (use
                                                     "find_index_segment_is_edge")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (lemma
                                                           "point_between_rays_rotate_left")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "h`p2"
                                                             "(# p1 := M`seq(0), p2 := w #)"
                                                             "e")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (lemma
                                                                   "shared_endpoints_imp_same_edge")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "Bm"
                                                                     "e"
                                                                     "h")
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (replace
                                                                         -13)
                                                                        (("1"
                                                                          (replace
                                                                           -)
                                                                          (("1"
                                                                            (lemma
                                                                             "point_between_rays_irreflexive")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "w"
                                                                               "h")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "edge_of_polygon?")
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "find_index(Bm, M`seq(0))")
                                                                          (("2"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("2"
                                                                              (use
                                                                               "find_index_self")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (use "vertex_find_index")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (expand
                                                     "edge_of_polygon?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("2"
                                                          (replace
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst? +)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "edge_of_polygon?")
                                          (("2"
                                            (skeep -3)
                                            (("2"
                                              (expand
                                               "edges_of_polygon")
                                              (("2"
                                                (use
                                                 "vertex_find_index")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "vertex?")
                                                    (("2"
                                                      (inst? +)
                                                      (("2"
                                                        (replace
                                                         -3
                                                         -8
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "reverse_segment")
                                (("3"
                                  (expand "next_merge_vertex")
                                  (("3"
                                    (lift-if)
                                    (("3"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon")
                                                    (("1"
                                                      (expand
                                                       "edge_of_polygon?")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "edges_of_polygon")
                                                          (("1"
                                                            (replace
                                                             -5
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -10)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (case-replace
                                                                       "find_index(Am, M`seq(0)) = i")
                                                                      (("1"
                                                                        (replace
                                                                         -12)
                                                                        (("1"
                                                                          (lemma
                                                                           "point_between_rays_not_on_rays")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "Am`vertices(next_index(Am, i))"
                                                                             "(# p1 := M`seq(0), p2 := w #)"
                                                                             "e")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (replace
                                                                                 -12
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "point_on_arb_ray?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "norm(Am`vertices(next_index(Am, i)) - M`seq(0))")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "^")
                                                                                          (("1"
                                                                                            (real-props)
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "u"
                                                                                               "Am`vertices(next_index(Am, i))")
                                                                                              (("1"
                                                                                                (grind-with-ext)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (use
                                                                                           "merge_seq_has_min_length")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -12
                                                                                 +)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "find_index_self")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "Am`vertices")
                                                                            (("2"
                                                                              (expand
                                                                               "uniq_vertex_list?")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "find_index(Am, M`seq(0))"
                                                                                 "i")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -10 -12)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "find_index_segment_is_edge")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (lemma
                                                               "shared_endpoints_imp_same_edge")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "Am"
                                                                 "e"
                                                                 "h")
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (lemma
                                                                     "point_between_rays_not_on_rays")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "h`p2"
                                                                       "(# p1 := M`seq(0), p2 := w #)"
                                                                       "e")
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "point_on_arb_ray?")
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "length(h)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "^")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length")
                                                                                    (("1"
                                                                                      (real-props)
                                                                                      (("1"
                                                                                        (grind-with-ext)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "edge_of_polygon?")
                                                                    (("2"
                                                                      (inst?
                                                                       +)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -9 -11)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "find_index_segment_is_edge")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (case-replace
                                                             "edges_of_polygon(Am)(find_index(Am, M`seq(0))) = h")
                                                            (("1"
                                                              (replace
                                                               -12
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -14)
                                                                (("1"
                                                                  (case
                                                                   "point_between_rays?((# p1 := h`p1, p2 := prev_0(h`p1) #), e)(h`p2)")
                                                                  (("1"
                                                                    (lemma
                                                                     "point_between_rays_rotate_left")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "h`p2"
                                                                       "(# p1 := h`p1, p2 := prev_0(h`p1) #)"
                                                                       "e")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (equate
                                                                             "(# p1 := h`p1, p2 := h`p2 #)"
                                                                             "h")
                                                                            (("1"
                                                                              (apply-extensionality
                                                                               :hide?
                                                                               t)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -10)
                                                                    (("2"
                                                                      (case
                                                                       "h`p1`x <= h`p2`x")
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -14
                                                                          1))
                                                                        (("1"
                                                                          (expand
                                                                           "prev_0")
                                                                          (("1"
                                                                            (expand
                                                                             "point_between_rays?")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (name-replace*
                                                                                 ("eh"
                                                                                  "e`p2 - h`p1"
                                                                                  "hh"
                                                                                  "h`p2 - h`p1"))
                                                                                (("1"
                                                                                  (case
                                                                                   "0 <= hh`x")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    (("1"
                                                                                      (case
                                                                                       "eh`x * hh`y >= 0 &  eh`y * hh`x <= 0")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (mult-cases
                                                                                           1)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (mult-cases
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "hh"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "-"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "first_merge_vertex_is_topleft_all")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "A"
                                                                           "B"
                                                                           "Am"
                                                                           "Bm"
                                                                           "M"
                                                                           "h`p2")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "point_on_polygon_perimeter?")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "h")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "edge_of_polygon?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "edges_of_polygon")
                                                                  (("2"
                                                                    (equate
                                                                     "find_index(Am, M`seq(0))"
                                                                     "i")
                                                                    (("2"
                                                                      (typepred
                                                                       "Am`vertices")
                                                                      (("2"
                                                                        (replace
                                                                         -6
                                                                         -14
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "uniq_vertex_list?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "find_index(Am, M`seq(0))"
                                                                               "i")
                                                                              (("2"
                                                                                (lemma
                                                                                 "find_index_self")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "Am"
                                                                                   "M`seq(0)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (use "vertex_find_index")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (expand
                                                     "edge_of_polygon?")
                                                    (("2"
                                                      (skeep -4)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("2"
                                                          (replace
                                                           -4
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst? +)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "edge_of_polygon?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand
                                               "edges_of_polygon")
                                              (("2"
                                                (use
                                                 "vertex_find_index")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "vertex?")
                                                    (("2"
                                                      (inst? +)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (lemma
                                 "shared_endpoints_imp_same_edge")
                                (("4"
                                  (inst - "Bm" "e" "h")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (replace -1 :dir rl)
                                      (("4"
                                        (use
                                         "point_between_rays_not_on_rays")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (expand "reverse_segment")
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (expand
                                                 "point_on_arb_ray?")
                                                (("4"
                                                  (inst 2 "length(e)")
                                                  (("4"
                                                    (hide-all-but 2)
                                                    (("4"
                                                      (expand "^")
                                                      (("4"
                                                        (expand
                                                         "length")
                                                        (("4"
                                                          (real-props)
                                                          (("4"
                                                            (grind-with-ext)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "merge_seq_has_min_length")
                      (("2" (assert) nil nil)) nil))
                    nil)
                   ("2" (use "merge_seq_has_min_length")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_initial_segments_do_not_cross_TCC1 0
  (merge_initial_segments_do_not_cross_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_initial_segments_do_not_cross subtype
    "(number_fields.-)(merge_well_formed.k, 1)" "nat"))
  (merge_initial_segments_do_not_cross_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_initial_segments_do_not_cross subtype
    "(number_fields.-)(merge_well_formed.k, 1)" "nat")))
 (merge_initial_segments_do_not_cross_TCC2 0
  (merge_initial_segments_do_not_cross_TCC2-2 nil 3874129022
   ("" (skeep)
    (("" (replace -1 1)
      (("" (expand "^" 1)
        (("" (skeep)
          (("" (lift-if)
            (("" (expand "min")
              (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_initial_segments_do_not_cross subtype
    "merge_well_formed.M`seq"
    "[naturalnumbers.below(merge_well_formed.k) -> point_2d]"))
  (merge_initial_segments_do_not_cross_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_initial_segments_do_not_cross subtype
    "merge_well_formed.M`seq"
    "[naturalnumbers.below(merge_well_formed.k) -> point_2d]")))
 (merge_initial_segments_do_not_cross_TCC3 0
  (merge_initial_segments_do_not_cross_TCC3-2 nil 3874129022
   ("" (skeep)
    (("" (replace -1 1)
      (("" (expand "^" 1)
        (("" (expand "min")
          (("" (apply (repeat (lift-if)))
            (("" (ground)
              (("" (skeep)
                (("" (expand "uniq_vertex_list?")
                  (("" (inst - "i" "1 + i")
                    (("1" (ground)
                      (("1" (replace -2 +)
                        (("1" (expand "^" +) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "i")
                        (("2" (replace -3 -1)
                          (("2" (expand "^" -1)
                            (("2" (expand "min")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "i")
                      (("3" (replace -3 -1)
                        (("3" (expand "^" -1)
                          (("3" (expand "min") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_initial_segments_do_not_cross subtype "merge_well_formed.M"
    "segment_endpoint_seq"))
  (merge_initial_segments_do_not_cross_TCC3-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_initial_segments_do_not_cross subtype "merge_well_formed.M"
    "segment_endpoint_seq")))
 (merge_initial_segments_do_not_cross 0
  (merge_initial_segments_do_not_cross-1 nil 3874129022
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (name-replace "S" "merge_seq(A, B)" :hide? nil)
          (("" (case "M`length = k")
            (("1" (case "forall (l: below(k)): M`seq(l) = S`seq(l)")
              (("1"
                (name-replace*
                 ("Am" "inject_vertices_into_polygon(A, B)`1" "Bm"
                  "inject_vertices_into_polygon(A, B)`2"))
                (("1" (lemma "merge_path_props")
                  (("1" (inst - "A" "B" "Am" "Bm" "S")
                    (("1" (assert)
                      (("1"
                        (lemma "injected_only_vertex_intersections")
                        (("1" (inst - "A" "B" "Am" "Bm")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (expand "segments_do_not_cross?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skeep + t)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "uniq_vertex_list?")
                                        (("1"
                                          (rewrite -8 -13)
                                          (("1"
                                            (rewrite -8 -13)
                                            (("1"
                                              (rewrite -8 -14)
                                              (("1"
                                                (rewrite -8 -14)
                                                (("1"
                                                  (inst-cp -5 "i")
                                                  (("1"
                                                    (inst -5 "j")
                                                    (("1"
                                                      (expand
                                                       "edge_of_polygon?")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (typepred
                                                             "Am")
                                                            (("1"
                                                              (expand
                                                               "simple_polygon_2d?")
                                                              (("1"
                                                                (typepred
                                                                 "Am`num_vertices")
                                                                (("1"
                                                                  (expand
                                                                   "polygon_edges_do_not_cross?")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i_1"
                                                                     "i!1")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "q")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -16
                                                                           "i"
                                                                           "j")
                                                                          (("1"
                                                                            (rewrite
                                                                             -12
                                                                             -16)
                                                                            (("1"
                                                                              (rewrite
                                                                               -12
                                                                               -16)
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep*)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "edges_of_polygon(Am)(i!1)")
                                                              (("2"
                                                                (expand
                                                                 "only_vertex_intersections?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "edges_of_polygon(Am)(i!1)")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "edges_of_polygon(Bm)(i_1)")
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (inst
                                                                         -15
                                                                         "i"
                                                                         "j")
                                                                        (("1"
                                                                          (rewrite
                                                                           -11
                                                                           -15)
                                                                          (("1"
                                                                            (rewrite
                                                                             -11
                                                                             -15)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (replace
                                                                                 -5
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -6
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -6
                                                                         -1)
                                                                        (("2"
                                                                          (replace
                                                                           -5
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "reverse_segment")
                                                                            (("2"
                                                                              (ground)
                                                                              (("2"
                                                                                (case
                                                                                 "i = 1 + j")
                                                                                (("1"
                                                                                  (inst
                                                                                   -17
                                                                                   "1 + i"
                                                                                   "j")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -13
                                                                                     -17)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -13
                                                                                       -17)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -16
                                                                                   "i"
                                                                                   "1 + j")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -12
                                                                                     -16)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -12
                                                                                       -16)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (replace
                                                                         -5
                                                                         -1)
                                                                        (("3"
                                                                          (replace
                                                                           -6
                                                                           -1)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (inst
                                                                                 -16
                                                                                 "i"
                                                                                 "j")
                                                                                (("3"
                                                                                  (rewrite
                                                                                   -12
                                                                                   -16)
                                                                                  (("3"
                                                                                    (rewrite
                                                                                     -12
                                                                                     -16)
                                                                                    (("3"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (replace
                                                                         -5
                                                                         -1)
                                                                        (("4"
                                                                          (replace
                                                                           -6
                                                                           -1)
                                                                          (("4"
                                                                            (expand
                                                                             "reverse_segment")
                                                                            (("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (case
                                                                                 "i = 1 + j")
                                                                                (("1"
                                                                                  (inst
                                                                                   -17
                                                                                   "1 + i"
                                                                                   "j")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -13
                                                                                     -17)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -13
                                                                                       -17)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -16
                                                                                   "i"
                                                                                   "1 + j")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -12
                                                                                     -16)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -12
                                                                                       -16)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (inst
                                                                         -
                                                                         "q")
                                                                        (("5"
                                                                          (assert)
                                                                          (("5"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("5"
                                                                              (expand
                                                                               "segment_endpoint?")
                                                                              (("5"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (inst
                                                                         -
                                                                         "q")
                                                                        (("6"
                                                                          (assert)
                                                                          (("6"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("6"
                                                                              (expand
                                                                               "segment_endpoint?")
                                                                              (("6"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("7"
                                                                        (inst
                                                                         -
                                                                         "q")
                                                                        (("7"
                                                                          (assert)
                                                                          (("7"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("7"
                                                                              (expand
                                                                               "segment_endpoint?")
                                                                              (("7"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skeep*)
                                                          (("3"
                                                            (inst
                                                             -
                                                             "edges_of_polygon(Bm)(i!1)")
                                                            (("3"
                                                              (inst
                                                               -
                                                               "edges_of_polygon(Am)(i_1)")
                                                              (("3"
                                                                (expand
                                                                 "only_vertex_intersections?")
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "edges_of_polygon(Am)(i_1)")
                                                                  (("3"
                                                                    (inst
                                                                     -
                                                                     "edges_of_polygon(Bm)(i!1)")
                                                                    (("3"
                                                                      (ground)
                                                                      (("1"
                                                                        (inst
                                                                         -15
                                                                         "i"
                                                                         "j")
                                                                        (("1"
                                                                          (rewrite
                                                                           -11
                                                                           -15)
                                                                          (("1"
                                                                            (rewrite
                                                                             -11
                                                                             -15)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (replace
                                                                                 -5
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -6
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -6
                                                                         -1)
                                                                        (("2"
                                                                          (replace
                                                                           -5
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "reverse_segment")
                                                                            (("2"
                                                                              (ground)
                                                                              (("2"
                                                                                (case
                                                                                 "i = 1 + j")
                                                                                (("1"
                                                                                  (inst
                                                                                   -17
                                                                                   "1 + i"
                                                                                   "j")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -13
                                                                                     -17)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -13
                                                                                       -17)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -16
                                                                                   "i"
                                                                                   "1 + j")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -12
                                                                                     -16)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -12
                                                                                       -16)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (replace
                                                                         -5
                                                                         -1)
                                                                        (("3"
                                                                          (replace
                                                                           -6
                                                                           -1)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (inst
                                                                                 -16
                                                                                 "i"
                                                                                 "j")
                                                                                (("3"
                                                                                  (rewrite
                                                                                   -12
                                                                                   -16)
                                                                                  (("3"
                                                                                    (rewrite
                                                                                     -12
                                                                                     -16)
                                                                                    (("3"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (replace
                                                                         -5
                                                                         -1)
                                                                        (("4"
                                                                          (replace
                                                                           -6
                                                                           -1)
                                                                          (("4"
                                                                            (expand
                                                                             "reverse_segment")
                                                                            (("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (case
                                                                                 "i = 1 + j")
                                                                                (("1"
                                                                                  (inst
                                                                                   -17
                                                                                   "1 + i"
                                                                                   "j")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -13
                                                                                     -17)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -13
                                                                                       -17)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -16
                                                                                   "i"
                                                                                   "1 + j")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -12
                                                                                     -16)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       -12
                                                                                       -16)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (inst
                                                                         -
                                                                         "q")
                                                                        (("5"
                                                                          (assert)
                                                                          (("5"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("5"
                                                                              (expand
                                                                               "segment_endpoint?")
                                                                              (("5"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (inst
                                                                         -
                                                                         "q")
                                                                        (("6"
                                                                          (assert)
                                                                          (("6"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("6"
                                                                              (expand
                                                                               "segment_endpoint?")
                                                                              (("6"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("7"
                                                                        (inst
                                                                         -
                                                                         "q")
                                                                        (("7"
                                                                          (assert)
                                                                          (("7"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("7"
                                                                              (expand
                                                                               "segment_endpoint?")
                                                                              (("7"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (skeep*)
                                                          (("4"
                                                            (typepred
                                                             "Bm")
                                                            (("4"
                                                              (expand
                                                               "simple_polygon_2d?")
                                                              (("4"
                                                                (typepred
                                                                 "Bm`num_vertices")
                                                                (("4"
                                                                  (expand
                                                                   "polygon_edges_do_not_cross?")
                                                                  (("4"
                                                                    (inst
                                                                     -
                                                                     "i_1"
                                                                     "i!1")
                                                                    (("4"
                                                                      (inst
                                                                       -
                                                                       "q")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -16
                                                                           "i"
                                                                           "j")
                                                                          (("1"
                                                                            (rewrite
                                                                             -12
                                                                             -16)
                                                                            (("1"
                                                                              (rewrite
                                                                               -12
                                                                               -16)
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -5 1)
                (("2" (hide-all-but (-3 1)) (("2" (grind) nil nil))
                  nil))
                nil)
               ("3" (skeep) (("3" (assert) nil nil)) nil)
               ("4" (skeep) (("4" (assert) nil nil)) nil))
              nil)
             ("2" (hide -1 -3 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_wrapped_segments_do_not_cross_TCC1 0
  (merge_wrapped_segments_do_not_cross_TCC1-2 nil 3874129022
   ("" (skeep*)
    (("" (expand "^")
      (("" (lift-if)
        (("" (assert) (("" (expand "min") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_wrapped_segments_do_not_cross subtype
    "(finite_sequences[point_2d].^(merge_well_formed.M, (0, (number_fields.-)(merge_well_formed.k, 1))))`seq"
    "[naturalnumbers.below(merge_well_formed.k) -> point_2d]"))
  (merge_wrapped_segments_do_not_cross_TCC1-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_wrapped_segments_do_not_cross subtype
    "(finite_sequences[point_2d].^(merge_well_formed.M, (0, (number_fields.-)(merge_well_formed.k, 1))))`seq"
    "[naturalnumbers.below(merge_well_formed.k) -> point_2d]")))
 (merge_wrapped_segments_do_not_cross_TCC2 0
  (merge_wrapped_segments_do_not_cross_TCC2-2 nil 3874129022
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (merge_wrapped_segments_do_not_cross subtype "merge_well_formed.i0"
    "below[M`length]"))
  (merge_wrapped_segments_do_not_cross_TCC2-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_wrapped_segments_do_not_cross subtype "merge_well_formed.i0"
    "below[M`length]")))
 (merge_wrapped_segments_do_not_cross_TCC3 0
  (merge_wrapped_segments_do_not_cross_TCC3-2 nil 3874129022
   ("" (skeep)
    (("" (expand "^")
      (("" (expand "min")
        (("" (assert)
          (("" (skeep + t)
            (("" (expand "^")
              (("" (expand "min")
                (("" (expand "uniq_vertex_list?")
                  (("" (case "i = k - 1")
                    (("1" (inst - "i" "i0")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("2" (inst - "i" "i + 1")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_wrapped_segments_do_not_cross subtype
    "finite_sequences[point_2d].^(merge_well_formed.M, (0, merge_well_formed.k))"
    "segment_endpoint_seq"))
  (merge_wrapped_segments_do_not_cross_TCC3-1 nil 3874128965
   ("" (subtype-tcc) nil nil) nil nil
   (merge_wrapped_segments_do_not_cross subtype
    "finite_sequences[point_2d].^(merge_well_formed.M, (0, merge_well_formed.k))"
    "segment_endpoint_seq")))
 (merge_wrapped_segments_do_not_cross 0
  (merge_wrapped_segments_do_not_cross-1 nil 3874129022
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (use "merge_initial_segments_do_not_cross")
          (("" (assert)
            (("" (assert)
              ((""
                (name-replace*
                 ("Am" "inject_vertices_into_polygon(A, B)`1" "Bm"
                  "inject_vertices_into_polygon(A, B)`2"))
                ((""
                  (case "(Am, Bm) = inject_vertices_into_polygon(A, B)")
                  (("1" (hide -2 -3)
                    (("1" (replace -7 :dir rl)
                      (("1" (expand "segments_do_not_cross?")
                        (("1" (expand "^" 1 1)
                          (("1" (expand "^" 1 1)
                            (("1" (expand "^" -2 1)
                              (("1"
                                (expand "min")
                                (("1"
                                  (skeep + t)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "^" (-1 -2 +))
                                      (("1"
                                        (expand "min")
                                        (("1"
                                          (case
                                           "i = k - 1 or j = k - 1")
                                          (("1"
                                            (hide -5)
                                            (("1"
                                              (use
                                               "merge_seq_only_vertex_intersections")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (use
                                                       "merge_path_props")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst - "i")
                                                          (("1"
                                                            (expand
                                                             "uniq_vertex_list?")
                                                            (("1"
                                                              (expand
                                                               "^")
                                                              (("1"
                                                                (replace
                                                                 -14
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (case
                                                                   "M`seq(i) = M`seq(1 + i)")
                                                                  (("1"
                                                                    (case
                                                                     "i = k - 1")
                                                                    (("1"
                                                                      (inst
                                                                       -12
                                                                       "i"
                                                                       "i0")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "i"
                                                                       "i + 1")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (inst?
                                                                       -2)
                                                                      (("1"
                                                                        (hide
                                                                         -3)
                                                                        (("1"
                                                                          (expand
                                                                           "seq_only_vertex_intersections?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "j")
                                                                            (("1"
                                                                              (expand
                                                                               "same_edge_or_vertex_intersection?")
                                                                              (("1"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i"
                                                                                         "j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "reverse_segment")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (case
                                                                                             "j = i0")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "j + 1")
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "i0")
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "i = i0")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "i + 1")
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "i0")
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "segment_endpoint?")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst?
                                                                       -3)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "seq_only_vertex_intersections?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "j")
                                                                            (("1"
                                                                              (expand
                                                                               "same_edge_or_vertex_intersection?")
                                                                              (("1"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i"
                                                                                         "j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "reverse_segment")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (case
                                                                                             "j = i0")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "j + 1")
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "i0")
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "i = i0")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "j"
                                                                                               "i + 1")
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i"
                                                                                               "i0")
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "segment_endpoint?")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (inst - "i" "j")
                                              (("1"
                                                (inst - "q")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "^" 1)
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "^" 1)
                                                (("3"
                                                  (expand "min")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (apply-extensionality :hide? t) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

