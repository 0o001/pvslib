(vertex_injection
 (injected_edge_TCC1 0
  (injected_edge_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (skeep + t)
      (("" (ground)
        (("1" (expand "point_on_segment?")
          (("1" (inst + "0") (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (ground)
            (("1" (use "min_overlap_point_props")
              (("1" (ground) nil nil)) nil)
             ("2" (use "max_overlap_point_props")
              (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (injected_edge subtype
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= vertex_injection.e`p2, (booleans.OR(p = vertex_injection.e`p1, EXISTS (s: (polygons_2d.edge_of_polygon?(vertex_injection.B))): IF segments_2d_props.are_segments_overlapping?(vertex_injection.e)(s) THEN booleans.OR(p = segments_2d_props.min_overlap_point(vertex_injection.e, s), p = segments_2d_props.max_overlap_point(vertex_injection.e, s)) ELSE booleans.AND(segments_2d.point_on_segment?(p, vertex_injection.e), segments_2d.point_on_segment?(p, s)) ENDIF)))}"
    "{Q: finite_sets[point_2d].finite_set | FORALL (p: (Q)): segments_2d.is_point_on_segment?(vertex_injection.e)(p)}"))
  (injected_edge_TCC1-1 nil 3874128252 ("" (subtype-tcc) nil nil) nil
   nil
   (injected_edge subtype
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= vertex_injection.e`p2, (booleans.OR(p = vertex_injection.e`p1, EXISTS (s: (polygons_2d.edge_of_polygon?(vertex_injection.B))): IF segments_2d_props.are_segments_overlapping?(vertex_injection.e)(s) THEN booleans.OR(p = segments_2d_props.min_overlap_point(vertex_injection.e, s), p = segments_2d_props.max_overlap_point(vertex_injection.e, s)) ELSE booleans.AND(segments_2d.point_on_segment?(p, vertex_injection.e), segments_2d.point_on_segment?(p, s)) ENDIF)))}"
    "{Q: finite_sets[point_2d].finite_set | FORALL (p: (Q)): segments_2d.is_point_on_segment?(vertex_injection.e)(p)}")))
 (injected_edge_seq_rec_TCC1 0
  (injected_edge_seq_rec_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "empty_card[point_2d]")
      (("" (expand "empty_seq") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (injected_edge_seq_rec subtype
    "finite_sequences[point_2d].empty_seq"
    "{R: finite_sequences[point_2d].finseq | R`length = finite_sets[point_2d].card(vertex_injection.P)}"))
  (injected_edge_seq_rec_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_rec subtype
    "finite_sequences[point_2d].empty_seq"
    "{R: finite_sequences[point_2d].finseq | R`length = finite_sets[point_2d].card(vertex_injection.P)}")))
 (injected_edge_seq_rec_TCC2 0
  (injected_edge_seq_rec_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_rec subtype "vertex_injection.P"
    "(sets[point_2d].nonempty?)"))
  (injected_edge_seq_rec_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_rec subtype "vertex_injection.P"
    "(sets[point_2d].nonempty?)")))
 (injected_edge_seq_rec_TCC3 0
  (injected_edge_seq_rec_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_rec subtype
    "vertex_list.singleton_seq(sets[point_2d].choose(vertex_injection.P))"
    "{R: finite_sequences[point_2d].finseq | R`length = finite_sets[point_2d].card(vertex_injection.P)}"))
  (injected_edge_seq_rec_TCC3-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_rec subtype
    "vertex_list.singleton_seq(sets[point_2d].choose(vertex_injection.P))"
    "{R: finite_sequences[point_2d].finseq | R`length = finite_sets[point_2d].card(vertex_injection.P)}")))
 (injected_edge_seq_rec_TCC4 0
  (injected_edge_seq_rec_TCC4-2 nil 3874129020
   ("" (skeep* + t)
    (("" (inst?)
      (("" (assert)
        (("" (use "rest_member[point_2d]")
          (("" (expand "member") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (injected_edge_seq_rec subtype
    "sets[point_2d].rest(vertex_injection.P)"
    "{Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.point_on_segment?(u, vertex_injection.e)}"))
  (injected_edge_seq_rec_TCC4-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_rec subtype
    "sets[point_2d].rest(vertex_injection.P)"
    "{Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.point_on_segment?(u, vertex_injection.e)}")))
 (injected_edge_seq_rec_TCC5 0
  (injected_edge_seq_rec_TCC5-2 nil 3874129020
   ("" (skeep* + t)
    (("" (use "card_rest[point_2d]") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (injected_edge_seq_rec termination
    "vertex_injection.injected_edge_seq_rec(vertex_injection.e, sets[point_2d].rest(vertex_injection.P))"
    "nil"))
  (injected_edge_seq_rec_TCC5-1 nil 3874128252
   ("" (termination-tcc) nil nil) nil nil
   (injected_edge_seq_rec termination
    "vertex_injection.injected_edge_seq_rec(vertex_injection.e, sets[point_2d].rest(vertex_injection.P))"
    "nil")))
 (injected_edge_seq_rec_TCC6 0
  (injected_edge_seq_rec_TCC6-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_rec subtype "vertex_injection.j"
    "below[S`length]"))
  (injected_edge_seq_rec_TCC6-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_rec subtype "vertex_injection.j"
    "below[S`length]")))
 (injected_edge_seq_rec_TCC7 0
  (injected_edge_seq_rec_TCC7-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_rec subtype "vertex_injection.A"
    "(sets[naturalnumbers.below(vertex_injection.L)].nonempty?)"))
  (injected_edge_seq_rec_TCC7-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_rec subtype "vertex_injection.A"
    "(sets[naturalnumbers.below(vertex_injection.L)].nonempty?)")))
 (injected_edge_seq_rec_TCC8 0
  (injected_edge_seq_rec_TCC8-2 nil 3874129020
   ("" (skeep* + t)
    (("" (expand "o")
      (("" (expand "singleton_seq")
        (("" (expand "^^")
          (("" (expand "empty_seq")
            (("" (apply (repeat (lift-if)))
              (("" (expand "min")
                (("" (rewrite "card_rest")
                  (("" (replace -3)
                    (("" (assert) (("" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (injected_edge_seq_rec subtype
    "finite_sequences[point_2d].o(finite_sequences[point_2d].o(finite_sequences[point_2d].^^(vertex_injection.S, (0, vertex_injection.i)), vertex_list.singleton_seq(vertex_injection.u)), finite_sequences[point_2d].^^(vertex_injection.S, (vertex_injection.i, vertex_injection.L)))"
    "{R: finite_sequences[point_2d].finseq | R`length = finite_sets[point_2d].card(vertex_injection.P)}"))
  (injected_edge_seq_rec_TCC8-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_rec subtype
    "finite_sequences[point_2d].o(finite_sequences[point_2d].o(finite_sequences[point_2d].^^(vertex_injection.S, (0, vertex_injection.i)), vertex_list.singleton_seq(vertex_injection.u)), finite_sequences[point_2d].^^(vertex_injection.S, (vertex_injection.i, vertex_injection.L)))"
    "{R: finite_sequences[point_2d].finseq | R`length = finite_sets[point_2d].card(vertex_injection.P)}")))
 (injected_edge_seq_rec_TCC9 0
  (injected_edge_seq_rec_TCC9-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_rec subtype "vertex_injection.P"
    "(sets[point_2d].nonempty?)"))
  (injected_edge_seq_rec_TCC9-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_rec subtype "vertex_injection.P"
    "(sets[point_2d].nonempty?)")))
 (injected_edge_seq_props_TCC1 0
  (injected_edge_seq_props_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_props subtype "vertex_injection.P"
    "{Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.point_on_segment?(u, vertex_injection.e)}"))
  (injected_edge_seq_props_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_props subtype "vertex_injection.P"
    "{Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.point_on_segment?(u, vertex_injection.e)}")))
 (injected_edge_seq_props_TCC2 0
  (injected_edge_seq_props_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_props subtype "vertex_injection.j"
    "below[S`length]"))
  (injected_edge_seq_props_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_props subtype "vertex_injection.j"
    "below[S`length]")))
 (injected_edge_seq_props 0
  (injected_edge_seq_props-1 nil 3874129020
   ("" (auto-rewrite "sets.member")
    (("" (induct "P" 1 "finite_set_induction_rest[point_2d]")
      (("1" (skeep)
        (("1" (expand "injected_edge_seq_rec")
          (("1" (rewrite "emptyset_is_empty?[point_2d]")
            (("1" (replace -2)
              (("1" (expand "empty_seq")
                (("1" (rewrite "card_emptyset")
                  (("1" (skeep)
                    (("1" (expand "emptyset") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep* + t)
        (("2" (expand "injected_edge_seq_rec" -4)
          (("2" (lift-if)
            (("2" (split -4)
              (("1" (flatten)
                (("1" (replace -2)
                  (("1" (expand "singleton_seq")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst + "0")
                          (("1" (assert)
                            (("1" (rewrite "card_one[point_2d]")
                              (("1"
                                (skeep)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "singleton" -6)
                                    (("1"
                                      (rewrite "choose_singleton")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (rewrite "concat_empty_seq")
                    (("1"
                      (case-replace
                       "injected_edge_seq_rec(e, rest(SS))`length = card(SS) - 1")
                      (("1" (split -2)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (replace -2 3)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (inst
                                     -5
                                     "e"
                                     "injected_edge_seq_rec(e, rest(SS))")
                                    (("1"
                                      (split -5)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split 3)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (case "v = choose(SS)")
                                              (("1"
                                                (inst + "card(SS) - 1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -3 "v")
                                                (("2"
                                                  (split -3)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst + "i")
                                                      (("1"
                                                        (expand "o" 2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "choose_rest_or[point_2d]")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (inst -4 "i")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "o" 1)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (use
                                                         "rest_member[point_2d]")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (case-replace
                                                           "i = card(rest(SS))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep)
                                            (("3"
                                              (expand "o" +)
                                              (("3"
                                                (apply
                                                 (repeat (lift-if)))
                                                (("3"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst? -7)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (replace -3)
                                                          (("2"
                                                            (case-replace
                                                             "i = card(rest(SS))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "empty?"
                                                                 -8)
                                                                (("1"
                                                                  (inst
                                                                   -8
                                                                   "j")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-5 1 3))
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (use
                                               "rest_member[point_2d]")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2"
                            (name-replace "m"
                             "min_nat[below(injected_edge_seq_rec(e, rest(SS))`length)].min
                                                                                         ({j: below(injected_edge_seq_rec(e, rest(SS))`length) |
                                                                                             norm(choose(SS) - e`p1) <=
                                                                                              norm(injected_edge_seq_rec(e, rest(SS))`seq(j) - e`p1)})")
                            (("1" (case "S`length = card(SS)")
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   -5
                                   "e"
                                   "injected_edge_seq_rec(e, rest(SS))")
                                  (("1"
                                    (split -5)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split 4)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "v = choose(SS)")
                                            (("1"
                                              (inst + "m")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -8 1)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 1))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst -3 "v")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (case "i < m")
                                                    (("1"
                                                      (inst + "i")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -9
                                                           2)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              -3
                                                              2))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst + "i+1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -8
                                                           3)
                                                          (("2"
                                                            (hide-all-but
                                                             (-1
                                                              -2
                                                              1
                                                              3))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "choose_rest_or[point_2d]")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (case "i < m")
                                            (("1"
                                              (inst -5 "i")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -8 1)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -2 -3 -5 1))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -7 2)
                                              (("2"
                                                (case-replace "i = m")
                                                (("1"
                                                  (hide-all-but 2)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst -4 "i - 1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but
                                                       (-4 3))
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -2 -3)
                                          (("3"
                                            (skeep + t)
                                            (("3"
                                              (replace -7 1 :hide? t)
                                              (("3"
                                                (case "i < m")
                                                (("1"
                                                  (inst - "i" "j")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case-replace
                                                   "i = m")
                                                  (("1"
                                                    (inst - "m" "j")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (expand "o")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "^^")
                                                              (("1"
                                                                (typepred
                                                                 "m")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "j")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case-replace
                                                     "j = m")
                                                    (("1"
                                                      (expand "o")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "^^")
                                                          (("1"
                                                            (typepred
                                                             "m")
                                                            (("1"
                                                              (case-replace
                                                               "i-1 = m")
                                                              (("1"
                                                                (case
                                                                 "choose(SS) = injected_edge_seq_rec(e, rest(SS))`seq(m)")
                                                                (("1"
                                                                  (reveal
                                                                   -3)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "m")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         "choose_not_member[point_2d]")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "norm(choose(SS) - e`p1) =
                                                                                   norm(injected_edge_seq_rec(e, rest(SS))`seq(m) - e`p1)")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -15
                                                                     "choose(SS)")
                                                                    (("1"
                                                                      (inst
                                                                       -15
                                                                       "injected_edge_seq_rec(e, rest(SS))`seq(m)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (reveal
                                                                           -4)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "m")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -16
                                                                                  -17
                                                                                  1))
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (rewrite*
                                                                                     "point_on_segment_has_norm_offset")
                                                                                    (("1"
                                                                                      (skeep*)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -5)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "rest_member[point_2d]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -9
                                                                 "i-1"
                                                                 "m")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "o")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (expand
                                                             "^^")
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "i-1"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -5
                                                                 "i-1"
                                                                 "j-1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-5 1 3))
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (use
                                             "rest_member[point_2d]")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -4 5)
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "^^" 1)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "nonempty?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 4)
                        (("2"
                          (inst -2 "e"
                           "injected_edge_seq_rec(e, rest(SS))")
                          (("2" (split -2)
                            (("1" (flatten)
                              (("1" (rewrite "card_rest") nil nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst?)
                                (("2"
                                  (use "rest_member[point_2d]")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but (-4 1 3))
                        (("3" (skeep)
                          (("3" (inst?)
                            (("3" (use "rest_member[point_2d]")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 1 3))
                      (("2" (skeep)
                        (("2" (inst?)
                          (("2" (use "rest_member[point_2d]")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (skeep*) (("3" (assert) nil nil)) nil)) nil)
       ("4" (hide 2)
        (("4" (skeep*) (("4" (inst?) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_seq_TCC1 0
  (injected_edge_seq_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq subtype "vertex_injection.j" "below[S`length]"))
  (injected_edge_seq_TCC1-1 nil 3874128252 ("" (subtype-tcc) nil nil)
   nil nil
   (injected_edge_seq subtype "vertex_injection.j" "below[S`length]")))
 (injected_edge_seq_TCC2 0
  (injected_edge_seq_TCC2-2 nil 3874129020
   ("" (inst + "injected_edge_seq_rec")
    (("" (skeep + t)
      (("" (use "injected_edge_seq_props")
        (("" (assert)
          (("" (split -1)
            (("1" (flatten)
              (("1" (ground)
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (skeep) (("1" (inst?) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst? -3) (("2" (assert) nil nil)) nil)) nil)
                 ("3" (skeep)
                  (("3" (inst? -4) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep + t)
                (("2" (typepred "x1`2")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep + t)
                (("3" (typepred "x1`2") (("3" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (injected_edge_seq existence ""
    "[d: [e: segments_2d.segment_2d, {Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.is_point_on_segment?(e)(u)}] -> {S: finite_sequences[point_2d].finseq | booleans.AND(S`length = finite_sets[point_2d].card(d`2), booleans.AND(FORALL (v: (d`2)): EXISTS (i: naturalnumbers.below(S`length)): vertex_injection.v = S`seq(i), booleans.AND(FORALL (i: naturalnumbers.below(S`length)): sets[point_2d].member(S`seq(i), d`2), FORALL (i: naturalnumbers.below(S`length), j: naturalnumbers.below(i)): reals.<(vectors_2D.norm((vectors_2D.-)(S`seq(j), d`1`p1)), vectors_2D.norm((vectors_2D.-)(S`seq(i), d`1`p1))))))}]"))
  (injected_edge_seq_TCC2-1 nil 3874128252 ("" (existence-tcc) nil nil)
   nil nil
   (injected_edge_seq existence ""
    "[d: [e: segments_2d.segment_2d, {Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.is_point_on_segment?(e)(u)}] -> {S: finite_sequences[point_2d].finseq | booleans.AND(S`length = finite_sets[point_2d].card(d`2), booleans.AND(FORALL (v: (d`2)): EXISTS (i: naturalnumbers.below(S`length)): vertex_injection.v = S`seq(i), booleans.AND(FORALL (i: naturalnumbers.below(S`length)): sets[point_2d].member(S`seq(i), d`2), FORALL (i: naturalnumbers.below(S`length), j: naturalnumbers.below(i)): reals.<(vectors_2D.norm((vectors_2D.-)(S`seq(j), d`1`p1)), vectors_2D.norm((vectors_2D.-)(S`seq(i), d`1`p1))))))}]")))
 (injected_vertices_TCC1 0
  (injected_vertices_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertices subtype
    "(number_fields.-)(vertex_injection.index, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vertices_TCC1-1 nil 3874128252 ("" (subtype-tcc) nil nil)
   nil nil
   (injected_vertices subtype
    "(number_fields.-)(vertex_injection.index, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vertices_TCC2 0
  (injected_vertices_TCC2-2 nil 3874129020
   ("" (termination-tcc) nil nil) nil shostak
   (injected_vertices termination
    "vertex_injection.injected_vertices(vertex_injection.A, vertex_injection.B, (number_fields.-)(vertex_injection.index, 1))"
    "nil"))
  (injected_vertices_TCC2-1 nil 3874128252
   ("" (termination-tcc) nil nil) nil nil
   (injected_vertices termination
    "vertex_injection.injected_vertices(vertex_injection.A, vertex_injection.B, (number_fields.-)(vertex_injection.index, 1))"
    "nil")))
 (injected_vertices_TCC3 0
  (injected_vertices_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertices subtype
    "(number_fields.-)(vertex_injection.index, 1)"
    "naturalnumbers.below(vertex_injection.A`num_vertices)"))
  (injected_vertices_TCC3-1 nil 3874128252 ("" (subtype-tcc) nil nil)
   nil nil
   (injected_vertices subtype
    "(number_fields.-)(vertex_injection.index, 1)"
    "naturalnumbers.below(vertex_injection.A`num_vertices)")))
 (seq_injected_edge_seq_TCC1 0
  (seq_injected_edge_seq_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (seq_injected_edge_seq subtype "vertex_injection.i"
    "below[S`length]"))
  (seq_injected_edge_seq_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (seq_injected_edge_seq subtype "vertex_injection.i"
    "below[S`length]")))
 (seq_injected_edge_seq_TCC2 0
  (seq_injected_edge_seq_TCC2-2 nil 3874129020
   (""
    (inst + "lambda (d: [simple_polygon_2d, simple_polygon_2d]):
                 (# length := (d`1)`num_vertices,
                    seq := lambda (i: below((d`1)`num_vertices)):
                            LET e = edges_of_polygon(d`1)(i) IN
                             injected_edge_seq(e, injected_edge(e, d`2)) #)")
    nil nil)
   nil shostak
   (seq_injected_edge_seq existence ""
    "[d: [simple_polygon_2d, simple_polygon_2d] -> {S: finite_sequences[finseq[point_2d]].finseq | booleans.AND(S`length = d`1`num_vertices, FORALL (i: naturalnumbers.below(d`1`num_vertices)): S`seq(i) = vertex_injection.injected_edge_seq(polygons_2d.edges_of_polygon(d`1)(i), vertex_injection.injected_edge(polygons_2d.edges_of_polygon(d`1)(i), d`2)))}]"))
  (seq_injected_edge_seq_TCC2-1 nil 3874128252
   ("" (existence-tcc) nil nil) nil nil
   (seq_injected_edge_seq existence ""
    "[d: [simple_polygon_2d, simple_polygon_2d] -> {S: finite_sequences[finseq[point_2d]].finseq | booleans.AND(S`length = d`1`num_vertices, FORALL (i: naturalnumbers.below(d`1`num_vertices)): S`seq(i) = vertex_injection.injected_edge_seq(polygons_2d.edges_of_polygon(d`1)(i), vertex_injection.injected_edge(polygons_2d.edges_of_polygon(d`1)(i), d`2)))}]")))
 (reduce_seq_injected_seq_TCC1 0
  (reduce_seq_injected_seq_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (reduce_seq_injected_seq subtype
    "(number_fields.-)(vertex_injection.index, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (reduce_seq_injected_seq_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (reduce_seq_injected_seq subtype
    "(number_fields.-)(vertex_injection.index, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (reduce_seq_injected_seq_TCC2 0
  (reduce_seq_injected_seq_TCC2-2 nil 3874129020
   ("" (termination-tcc) nil nil) nil shostak
   (reduce_seq_injected_seq termination
    "vertex_injection.reduce_seq_injected_seq(vertex_injection.A, vertex_injection.B, (number_fields.-)(vertex_injection.index, 1))"
    "nil"))
  (reduce_seq_injected_seq_TCC2-1 nil 3874128252
   ("" (termination-tcc) nil nil) nil nil
   (reduce_seq_injected_seq termination
    "vertex_injection.reduce_seq_injected_seq(vertex_injection.A, vertex_injection.B, (number_fields.-)(vertex_injection.index, 1))"
    "nil")))
 (reduce_seq_injected_seq_TCC3 0
  (reduce_seq_injected_seq_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (reduce_seq_injected_seq subtype
    "(number_fields.-)(vertex_injection.index, 1)"
    "below[seq_injected_edge_seq(A, B)`length]"))
  (reduce_seq_injected_seq_TCC3-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (reduce_seq_injected_seq subtype
    "(number_fields.-)(vertex_injection.index, 1)"
    "below[seq_injected_edge_seq(A, B)`length]")))
 (num_injected_edge_vertices_TCC1 0
  (num_injected_edge_vertices_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (num_injected_edge_vertices subtype
    "(number_fields.-)(vertex_injection.i, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (num_injected_edge_vertices_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (num_injected_edge_vertices subtype
    "(number_fields.-)(vertex_injection.i, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (num_injected_edge_vertices_TCC2 0
  (num_injected_edge_vertices_TCC2-2 nil 3874129020
   ("" (termination-tcc) nil nil) nil shostak
   (num_injected_edge_vertices termination
    "vertex_injection.num_injected_edge_vertices(vertex_injection.A, vertex_injection.B, (number_fields.-)(vertex_injection.i, 1))"
    "nil"))
  (num_injected_edge_vertices_TCC2-1 nil 3874128252
   ("" (termination-tcc) nil nil) nil nil
   (num_injected_edge_vertices termination
    "vertex_injection.num_injected_edge_vertices(vertex_injection.A, vertex_injection.B, (number_fields.-)(vertex_injection.i, 1))"
    "nil")))
 (injected_edge_indices_TCC1 0
  (injected_edge_indices_TCC1-2 nil 3874129020
   ("" (skeep*) (("" (ground) nil nil)) nil) nil shostak
   (injected_edge_indices subtype
    "LAMBDA (i: naturalnumbers.upto(vertex_injection.A`num_vertices)): vertex_injection.num_injected_edge_vertices(vertex_injection.A, vertex_injection.B, i)"
    "[below[1 + A`num_vertices] -> nat]"))
  (injected_edge_indices_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_indices subtype
    "LAMBDA (i: naturalnumbers.upto(vertex_injection.A`num_vertices)): vertex_injection.num_injected_edge_vertices(vertex_injection.A, vertex_injection.B, i)"
    "[below[1 + A`num_vertices] -> nat]")))
 (length_injected_vertices_bound 0
  (length_injected_vertices_bound-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "injected_vertices" +)
        (("2" (expand "o")
          (("2"
            (typepred "injected_edge_seq(edges_of_polygon(A)(j),
                                                         injected_edge(edges_of_polygon(A)(j), B))")
            (("2" (hide -3 -4)
              (("2" (replace -1 :hide? t)
                (("2" (inst?)
                  (("2" (claim "%1 > 0" nil (! 1 r 1))
                    (("1" (assert) nil nil)
                     ("2" (hide -1 2)
                      (("2" (claim "nonempty?(%1)" nil (! 1 l 1))
                        (("1" (rewrite "nonempty_card" :dir rl) nil
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "nonempty?")
                            (("2" (expand "injected_edge")
                              (("2"
                                (expand "empty?")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (inst
                                     -
                                     "edges_of_polygon(A)(j)`p1")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_nonempty 0
  (injected_edge_nonempty-1 nil 3874129020
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "injected_edge")
        (("" (expand "empty?")
          (("" (inst - "edges_of_polygon(A)(k)`p1")
            (("" (expand "member")
              (("" (typepred "edges_of_polygon(A)(k)`p2")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (length_injected_vertices_incr_TCC1 0
  (length_injected_vertices_incr_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (length_injected_vertices_incr subtype "vertex_injection.k"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (length_injected_vertices_incr_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (length_injected_vertices_incr subtype "vertex_injection.k"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (length_injected_vertices_incr_TCC2 0
  (length_injected_vertices_incr_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (length_injected_vertices_incr subtype
    "(number_fields.+)(vertex_injection.k, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (length_injected_vertices_incr_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (length_injected_vertices_incr subtype
    "(number_fields.+)(vertex_injection.k, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (length_injected_vertices_incr 0
  (length_injected_vertices_incr-1 nil 3874129020
   ("" (skeep)
    (("" (expand "injected_vertices" 1 2)
      (("" (expand "o")
        ((""
          (typepred "injected_edge_seq(edges_of_polygon(A)(k),
                         injected_edge(edges_of_polygon(A)(k), B))")
          (("" (hide -2 -3 -4)
            (("" (replace -1 :hide? t)
              (("" (use "injected_edge_nonempty")
                (("" (expand "nonempty?")
                  (("" (use "empty_card[point_2d]")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (length_injected_vertices_ordered_TCC1 0
  (length_injected_vertices_ordered_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (length_injected_vertices_ordered subtype "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (length_injected_vertices_ordered_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (length_injected_vertices_ordered subtype "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (length_injected_vertices_ordered 0
  (length_injected_vertices_ordered-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (case-replace "j_1 = j")
        (("1" (use "length_injected_vertices_incr")
          (("1" (assert) nil nil)) nil)
         ("2" (inst - "A" "B" "j")
          (("2" (assert)
            (("2" (lemma "length_injected_vertices_incr")
              (("2" (inst - "A" "B" "j_1") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (len_injected_vert_eq_num_inj_vert 0
  (len_injected_vert_eq_num_inj_vert-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "injected_vertices" +)
        (("2" (expand "num_injected_edge_vertices" +)
          (("2" (expand "o")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_indices_eq_len_inj_vert_TCC1 0
  (injected_edge_indices_eq_len_inj_vert_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_indices_eq_len_inj_vert subtype "vertex_injection.k"
    "below[injected_edge_indices(A, B)`length]"))
  (injected_edge_indices_eq_len_inj_vert_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_indices_eq_len_inj_vert subtype "vertex_injection.k"
    "below[injected_edge_indices(A, B)`length]")))
 (injected_edge_indices_eq_len_inj_vert 0
  (injected_edge_indices_eq_len_inj_vert-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "injected_vertices" +)
        (("2" (inst?)
          (("2" (assert)
            (("2" (expand "injected_edge_indices" +)
              (("2" (expand "injected_edge_indices")
                (("2" (expand "num_injected_edge_vertices" +)
                  (("2"
                    (typepred "injected_edge_seq(edges_of_polygon(A)(j),
                              injected_edge(edges_of_polygon(A)(j), B))")
                    (("2" (hide -2 -3 -4) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (injected_edge_indices_incr_TCC1 0
  (injected_edge_indices_incr_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_indices_incr subtype "vertex_injection.k"
    "below[injected_edge_indices(A, B)`length]"))
  (injected_edge_indices_incr_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_indices_incr subtype "vertex_injection.k"
    "below[injected_edge_indices(A, B)`length]")))
 (injected_edge_indices_incr_TCC2 0
  (injected_edge_indices_incr_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_indices_incr subtype
    "(number_fields.+)(vertex_injection.k, 1)"
    "below[injected_edge_indices(A, B)`length]"))
  (injected_edge_indices_incr_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_indices_incr subtype
    "(number_fields.+)(vertex_injection.k, 1)"
    "below[injected_edge_indices(A, B)`length]")))
 (injected_edge_indices_incr 0
  (injected_edge_indices_incr-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "length_injected_vertices_incr")
      (("" (inst - "A" "B" "k")
        (("" (assert)
          (("" (rewrite* "injected_edge_indices_eq_len_inj_vert") nil
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_indices_ordered_TCC1 0
  (injected_edge_indices_ordered_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_indices_ordered subtype "vertex_injection.j"
    "below[injected_edge_indices(A, B)`length]"))
  (injected_edge_indices_ordered_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_indices_ordered subtype "vertex_injection.j"
    "below[injected_edge_indices(A, B)`length]")))
 (injected_edge_indices_ordered 0
  (injected_edge_indices_ordered-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (case-replace "j_1 = j")
        (("1" (use "injected_edge_indices_incr")
          (("1" (assert) nil nil)) nil)
         ("2" (inst?)
          (("2" (assert)
            (("2" (lemma "injected_edge_indices_incr")
              (("2" (inst - "A" "B" "j_1") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (injected_vertices_subseq_TCC1 0
  (injected_vertices_subseq_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertices_subseq subtype "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vertices_subseq_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertices_subseq subtype "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vertices_subseq 0
  (injected_vertices_subseq-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (case-replace "j_1 + 1 = j")
        (("1" (hide -2)
          (("1" (replace -5)
            (("1" (apply-extensionality :hide? t)
              (("1" (rewrite "subseq_full_seq") nil nil)
               ("2" (apply-extensionality :hide? t)
                (("2" (expand "^") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (inst?)
          (("2" (ground)
            (("2" (case-replace "j_1 = j")
              (("1" (lemma "length_injected_vertices_incr")
                (("1" (inst - "A" "B" "j")
                  (("1" (assert)
                    (("1" (expand "^" +)
                      (("1" (apply-extensionality 2 :hide? t)
                        (("1" (expand "min") (("1" (assert) nil nil))
                          nil)
                         ("2" (apply-extensionality :hide? t)
                          (("1" (typepred "x!1")
                            (("1" (replace -4 +)
                              (("1"
                                (expand "^" +)
                                (("1"
                                  (expand "injected_vertices" 1 2)
                                  (("1"
                                    (expand "o")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (expand "min")
                              (("2"
                                (replace -7)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep + t)
                            (("3" (expand "min")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "length_injected_vertices_ordered")
                (("2" (inst - "A" "B" "j" "j_1")
                  (("2" (assert)
                    (("2" (lemma "length_injected_vertices_incr")
                      (("2" (inst - "A" "B" "j_1")
                        (("2" (assert)
                          (("2" (apply-extensionality 3 :hide? t)
                            (("1" (expand "^" +)
                              (("1"
                                (expand "min")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (apply-extensionality 1 :hide? t)
                              (("2"
                                (expand "^" +)
                                (("2"
                                  (replace -3 +)
                                  (("2"
                                    (expand "^" +)
                                    (("2"
                                      (expand "injected_vertices" 1 2)
                                      (("2"
                                        (expand "o")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (ground) nil nil)) nil)) nil)
     ("4" (skeep) (("4" (assert) nil nil)) nil))
    nil)
   nil shostak))
 (injected_vertices_tail_eq_TCC1 0
  (injected_vertices_tail_eq_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (lemma "length_injected_vertices_ordered")
      (("" (inst - "A" "B" "k" "A`num_vertices")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (injected_vertices_tail_eq subtype "vertex_injection.i"
    "below[injected_vertices(A, B, A`num_vertices)`length]"))
  (injected_vertices_tail_eq_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertices_tail_eq subtype "vertex_injection.i"
    "below[injected_vertices(A, B, A`num_vertices)`length]")))
 (injected_vertices_tail_eq_TCC2 0
  (injected_vertices_tail_eq_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertices_tail_eq subtype "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vertices_tail_eq_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertices_tail_eq subtype "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vertices_tail_eq 0
  (injected_vertices_tail_eq-1 nil 3874129020
   ("" (skeep)
    (("" (case-replace "k=0")
      (("1" (expand "injected_vertices" -)
        (("1" (expand "empty_seq") (("1" (assert) nil nil)) nil)) nil)
       ("2" (lemma "injected_vertices_subseq")
        (("2" (inst - "A" "B" "k" "A`num_vertices" _)
          (("2"
            (inst - "max(0, injected_vertices(A, B, k)`length - 1)")
            (("1" (assert)
              (("1"
                (equate
                 " max(0, injected_vertices(A, B, k)`length - 1)"
                 "injected_vertices(A, B, k)`length - 1")
                (("1" (replace -1 :hide? t)
                  (("1" (expand "^")
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1"
                          (case-replace
                           "injected_vertices(A, B, k)`length = 0")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2"
                              (lemma
                               "length_injected_vertices_ordered")
                              (("2"
                                (inst - "A" "B" "k" "A`num_vertices")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (lemma "length_injected_vertices_ordered")
                    (("2" (inst - "A" "B" "0" "k")
                      (("2" (assert)
                        (("2" (expand "injected_vertices" -1 1)
                          (("2" (expand "empty_seq")
                            (("2" (expand "max")
                              (("2"
                                (lift-if)
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vert_seq_fns_equiv 0
  (injected_vert_seq_fns_equiv-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "reduce_seq_injected_seq" +)
        (("2" (expand "injected_vertices" +)
          (("2" (inst?)
            (("2" (assert)
              (("2" (replace -1)
                (("2" (typepred "seq_injected_edge_seq(A, B)")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (inj_edge_seq_len_eq_diff_inj_indices_TCC1 0
  (inj_edge_seq_len_eq_diff_inj_indices_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (inj_edge_seq_len_eq_diff_inj_indices subtype "vertex_injection.j"
    "below[seq_injected_edge_seq(A, B)`length]"))
  (inj_edge_seq_len_eq_diff_inj_indices_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (inj_edge_seq_len_eq_diff_inj_indices subtype "vertex_injection.j"
    "below[seq_injected_edge_seq(A, B)`length]")))
 (inj_edge_seq_len_eq_diff_inj_indices_TCC2 0
  (inj_edge_seq_len_eq_diff_inj_indices_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (inj_edge_seq_len_eq_diff_inj_indices subtype
    "(number_fields.+)(1, vertex_injection.j)"
    "below[injected_edge_indices(A, B)`length]"))
  (inj_edge_seq_len_eq_diff_inj_indices_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (inj_edge_seq_len_eq_diff_inj_indices subtype
    "(number_fields.+)(1, vertex_injection.j)"
    "below[injected_edge_indices(A, B)`length]")))
 (inj_edge_seq_len_eq_diff_inj_indices 0
  (inj_edge_seq_len_eq_diff_inj_indices-1 nil 3874129020
   ("" (skeep)
    (("" (expand "injected_edge_indices")
      (("" (typepred "seq_injected_edge_seq(A, B)")
        (("" (inst?)
          (("" (replace -2)
            (("" (expand "num_injected_edge_vertices" 1 1)
              ((""
                (typepred "injected_edge_seq(edges_of_polygon(A)(j),
                        injected_edge(edges_of_polygon(A)(j), B))")
                (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vert_seq_elements_eq_TCC1 0
  (injected_vert_seq_elements_eq_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vert_seq_elements_eq subtype "vertex_injection.j"
    "below[injected_edge_indices(A, B)`length]"))
  (injected_vert_seq_elements_eq_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vert_seq_elements_eq subtype "vertex_injection.j"
    "below[injected_edge_indices(A, B)`length]")))
 (injected_vert_seq_elements_eq_TCC2 0
  (injected_vert_seq_elements_eq_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vert_seq_elements_eq subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "below[injected_edge_indices(A, B)`length]"))
  (injected_vert_seq_elements_eq_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vert_seq_elements_eq subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "below[injected_edge_indices(A, B)`length]")))
 (injected_vert_seq_elements_eq_TCC3 0
  (injected_vert_seq_elements_eq_TCC3-2 nil 3874129020
   ("" (skeep*)
    (("" (rewrite* "injected_edge_indices_eq_len_inj_vert")
      (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (injected_vert_seq_elements_eq subtype "vertex_injection.i"
    "below[injected_vertices(A, B, 1 + j)`length]"))
  (injected_vert_seq_elements_eq_TCC3-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vert_seq_elements_eq subtype "vertex_injection.i"
    "below[injected_vertices(A, B, 1 + j)`length]")))
 (injected_vert_seq_elements_eq_TCC4 0
  (injected_vert_seq_elements_eq_TCC4-2 nil 3874129020
   ("" (skeep*) (("" (typepred "j") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (injected_vert_seq_elements_eq subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vert_seq_elements_eq_TCC4-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vert_seq_elements_eq subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vert_seq_elements_eq_TCC5 0
  (injected_vert_seq_elements_eq_TCC5-2 nil 3874129020
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "seq_injected_edge_seq(A, B)")
        (("" (inst?)
          (("" (replace -2)
            ((""
              (typepred "injected_edge_seq(edges_of_polygon(A)(j),
                           injected_edge(edges_of_polygon(A)(j), B))")
              (("" (hide -2 -3 -4)
                (("" (replace -1)
                  (("" (expand "injected_edge_indices")
                    (("" (expand "num_injected_edge_vertices" -7)
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (injected_vert_seq_elements_eq subtype
    "(number_fields.-)(vertex_injection.i, vertex_injection.m)"
    "below[seq_injected_edge_seq(A, B)`seq(j)`length]"))
  (injected_vert_seq_elements_eq_TCC5-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vert_seq_elements_eq subtype
    "(number_fields.-)(vertex_injection.i, vertex_injection.m)"
    "below[seq_injected_edge_seq(A, B)`seq(j)`length]")))
 (injected_vert_seq_elements_eq_TCC6 0
  (injected_vert_seq_elements_eq_TCC6-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vert_seq_elements_eq subtype "vertex_injection.j"
    "below[seq_injected_edge_seq(A, B)`length]"))
  (injected_vert_seq_elements_eq_TCC6-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vert_seq_elements_eq subtype "vertex_injection.j"
    "below[seq_injected_edge_seq(A, B)`length]")))
 (injected_vert_seq_elements_eq 0
  (injected_vert_seq_elements_eq-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (inst? -)
        (("2" (inst - "i")
          (("2" (assert)
            (("2" (expand "injected_vertices" -3)
              (("2" (expand "o")
                (("2" (split -1)
                  (("1" (skeep)
                    (("1" (inst?)
                      (("1" (inst + "n") (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2"
                    (inst + "j_1"
                     "injected_edge_indices(A, B)`seq(j_1)"
                     "injected_edge_indices(A, B)`seq(j_1 + 1)")
                    (("1" (assert)
                      (("1"
                        (rewrite*
                         "injected_edge_indices_eq_len_inj_vert")
                        (("1" (assert)
                          (("1" (expand "injected_edge_indices" 2 1)
                            (("1" (expand "num_injected_edge_vertices")
                              (("1"
                                (expand "injected_edge_indices" -)
                                (("1"
                                  (typepred
                                   "injected_edge_seq(edges_of_polygon(A)(j_1),
                         injected_edge(edges_of_polygon(A)(j_1), B))")
                                  (("1"
                                    (hide -2 -3 -4)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "injected_vertices")
                                        (("1"
                                          (expand "o")
                                          (("1"
                                            (typepred
                                             "seq_injected_edge_seq(A, B)")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (rewrite
                                                   "injected_edge_indices_eq_len_inj_vert")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "injected_edge_indices")
                      (("2" (assert) nil nil)) nil)
                     ("3" (expand "injected_edge_indices")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2)
      (("4" (skeep*)
        (("4" (assert)
          (("4" (typepred "seq_injected_edge_seq(A, B)")
            (("4" (inst?)
              (("4" (use "inj_edge_seq_len_eq_diff_inj_indices")
                (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (rewrite "injected_edge_indices_eq_len_inj_vert" +)
          (("6" (assert) nil nil)) nil))
        nil))
      nil)
     ("7" (hide 2) (("7" (grind) nil nil)) nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (injected_edge_seq_elements_eq_TCC1 0
  (injected_edge_seq_elements_eq_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_elements_eq subtype
    "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_edge_seq_elements_eq_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_elements_eq subtype
    "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_edge_seq_elements_eq_TCC2 0
  (injected_edge_seq_elements_eq_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_elements_eq subtype "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_edge_seq_elements_eq_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_elements_eq subtype "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_edge_seq_elements_eq_TCC3 0
  (injected_edge_seq_elements_eq_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_seq_elements_eq subtype
    "(number_fields.-)(vertex_injection.i, vertex_injection.L)"
    "below[Q`length]"))
  (injected_edge_seq_elements_eq_TCC3-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_elements_eq subtype
    "(number_fields.-)(vertex_injection.i, vertex_injection.L)"
    "below[Q`length]")))
 (injected_edge_seq_elements_eq 0
  (injected_edge_seq_elements_eq-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "injected_vertices_tail_eq")
          (("" (inst - "A" "B" "i" "j+1")
            (("" (assert)
              (("" (expand "injected_vertices" -1 (1 2))
                (("" (replace -7 :dir rl)
                  (("" (replace -5 :dir rl)
                    (("" (expand "o ") (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (member_injected_edge_on_segment 0
  (member_injected_edge_on_segment-1 nil 3874129020
   ("" (skeep)
    (("" (expand "injected_edge")
      (("" (expand "member")
        (("" (ground)
          (("1" (expand "point_on_segment?")
            (("1" (inst + "0") (("1" (assert) nil nil)) nil)) nil)
           ("2" (skeep)
            (("2" (ground)
              (("1" (use "min_overlap_point_props")
                (("1" (ground) nil nil)) nil)
               ("2" (use "max_overlap_point_props")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (length_injected_edge_seq_pos 0
  (length_injected_edge_seq_pos-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "injected_edge_seq(e, injected_edge(e, B))")
      (("" (hide -2 -3 -4)
        (("" (use "injected_edge_nonempty")
          (("" (assert)
            (("" (expand "nonempty?")
              (("" (use "empty_card[point_2d]") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vertices_length_max_TCC1 0
  (injected_vertices_length_max_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertices_length_max subtype
    "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vertices_length_max_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertices_length_max subtype
    "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vertices_length_max 0
  (injected_vertices_length_max-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "length_injected_vertices_ordered")
      (("" (inst - "A" "B" "i" "A`num_vertices")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (injected_vertices_distinct_TCC1 0
  (injected_vertices_distinct_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (skeep + t)
      (("" (rewrite "is_point_on_seg_equiv")
        (("" (expand "injected_edge")
          (("" (expand "subset?")
            (("" (inst - "u")
              (("" (expand "member")
                (("" (ground)
                  (("1" (replace -1) (("1" (assert) nil nil)) nil)
                   ("2" (skeep)
                    (("2" (ground)
                      (("1" (use "min_overlap_point_props")
                        (("1" (ground) nil nil)) nil)
                       ("2" (use "max_overlap_point_props")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (injected_vertices_distinct subtype "vertex_injection.S"
    "{Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.is_point_on_segment?(vertex_injection.e)(u)}"))
  (injected_vertices_distinct_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertices_distinct subtype "vertex_injection.S"
    "{Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.is_point_on_segment?(vertex_injection.e)(u)}")))
 (injected_vertices_distinct 0
  (injected_vertices_distinct-1 nil 3874129020
   ("" (skeep* + t)
    (("" (typepred "injected_edge_seq(e,S)")
      (("" (case "i > j")
        (("1" (inst -5 "i" "j")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (assert) nil nil))
          nil)
         ("2" (inst -4 "j" "i")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (member_injected_index_exists_TCC1 0
  (member_injected_index_exists_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (rewrite "is_point_on_seg_equiv")
      (("" (typepred "u")
        (("" (expand "injected_edge")
          (("" (replace -4 -1 :hide? t)
            (("" (ground)
              (("" (flatten)
                (("" (ground)
                  (("1" (replace -1) (("1" (assert) nil nil)) nil)
                   ("2" (skeep)
                    (("2" (ground)
                      (("1" (use "min_overlap_point_props")
                        (("1" (ground) nil nil)) nil)
                       ("2" (use "max_overlap_point_props")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (member_injected_index_exists subtype "vertex_injection.S"
    "{Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.is_point_on_segment?(vertex_injection.e)(u)}"))
  (member_injected_index_exists_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (member_injected_index_exists subtype "vertex_injection.S"
    "{Q: finite_sets[point_2d].finite_set | FORALL (u: (Q)): segments_2d.is_point_on_segment?(vertex_injection.e)(u)}")))
 (member_injected_index_exists_TCC2 0
  (member_injected_index_exists_TCC2-2 nil 3874129020
   ("" (assert) nil nil) nil shostak
   (member_injected_index_exists subtype "vertex_injection.Q`length"
    "naturalnumbers.upto(vertex_injection.Q`length)"))
  (member_injected_index_exists_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (member_injected_index_exists subtype "vertex_injection.Q`length"
    "naturalnumbers.upto(vertex_injection.Q`length)")))
 (member_injected_index_exists 0
  (member_injected_index_exists-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "injected_edge_seq(e, S)")
      (("" (expand "member")
        (("" (inst -2 "v")
          (("" (skeep)
            (("" (use "find_seq_index_missing")
              (("" (assert)
                (("" (inst -1 "i!1") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (member_injected_edge_index 0
  (member_injected_edge_index-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "injected_edge_seq(e, S)")
      (("" (ground)
        (("1" (expand "member")
          (("1" (inst -3 "v")
            (("1" (skeep)
              (("1" (inst + "i") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst? -5)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_seq_starts_with_p1_TCC1 0
  (injected_edge_seq_starts_with_p1_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "length_injected_edge_seq_pos") (("" (assert) nil nil))
      nil))
    nil)
   nil shostak
   (injected_edge_seq_starts_with_p1 subtype "0"
    "below[injected_edge_seq(e, injected_edge(e, B))`length]"))
  (injected_edge_seq_starts_with_p1_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_seq_starts_with_p1 subtype "0"
    "below[injected_edge_seq(e, injected_edge(e, B))`length]")))
 (injected_edge_seq_starts_with_p1 0
  (injected_edge_seq_starts_with_p1-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "injected_edge_seq(e, injected_edge(e, B))")
      (("" (inst -3 "0")
        (("" (assert)
          (("" (inst -2 "e`p1")
            (("1" (skeep - t)
              (("1" (inst -5 "i" _)
                (("1" (replace -3 :dir rl)
                  (("1" (assert)
                    (("1" (case "i=0")
                      (("1" (assert) nil nil)
                       ("2" (inst - "0") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "injected_edge" 1) (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vertex_p1_is_seq_element_TCC1 0
  (injected_vertex_p1_is_seq_element_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertex_p1_is_seq_element subtype "vertex_injection.j"
    "naturalnumbers.below(vertex_injection.A`num_vertices)"))
  (injected_vertex_p1_is_seq_element_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_p1_is_seq_element subtype "vertex_injection.j"
    "naturalnumbers.below(vertex_injection.A`num_vertices)")))
 (injected_vertex_p1_is_seq_element_TCC2 0
  (injected_vertex_p1_is_seq_element_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (use "length_injected_vertices_ordered")
      (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (injected_vertex_p1_is_seq_element subtype
    "vertex_injection.injected_vertices(vertex_injection.A, vertex_injection.B, vertex_injection.j)`length"
    "below[injected_vertices(A, B, k)`length]"))
  (injected_vertex_p1_is_seq_element_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_p1_is_seq_element subtype
    "vertex_injection.injected_vertices(vertex_injection.A, vertex_injection.B, vertex_injection.j)`length"
    "below[injected_vertices(A, B, k)`length]")))
 (injected_vertex_p1_is_seq_element 0
  (injected_vertex_p1_is_seq_element-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (case-replace "j_1 = j")
        (("1" (hide -2)
          (("1" (expand "injected_vertices" 1 1)
            (("1" (expand "o")
              (("1" (lemma "injected_edge_seq_starts_with_p1")
                (("1" (inst - _ "A" "B" "j")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst - "A" "B" "j")
          (("2" (assert)
            (("2" (expand "injected_vertices" 2 1)
              (("2" (expand "o")
                (("2" (use "length_injected_vertices_ordered")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (use "length_injected_vertices_ordered")
          (("3" (assert) nil nil)) nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (injected_vertex_in_injected_edge 0
  (injected_vertex_in_injected_edge-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (inst -1 "v" "A" "B")
        (("2" (ground)
          (("1" (skeep -3)
            (("1" (inst? +) (("1" (assert) nil nil)) nil)) nil)
           ("2" (skeep*)
            (("2" (expand "injected_vertices" +)
              (("2" (expand "o")
                (("2" (inst? +) (("2" (ground) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (expand "injected_vertices" -)
              (("3" (expand "o")
                (("3" (lift-if)
                  (("3" (ground)
                    (("1" (inst? 3) (("1" (assert) nil nil)) nil)
                     ("2"
                      (typepred
                       "injected_edge_seq(edges_of_polygon(A)(j_1),
                                                injected_edge(edges_of_polygon(A)(j_1), B))")
                      (("2"
                        (inst -3
                         "i - injected_vertices(A, B, j_1)`length")
                        (("2" (hide -2 -4)
                          (("2" (replace -3)
                            (("2" (inst 2 "j_1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (case-replace "j_1 = j")
              (("1" (hide 2 3)
                (("1" (expand "injected_vertices")
                  (("1" (expand "o")
                    (("1"
                      (typepred
                       "injected_edge_seq(edges_of_polygon(A)(j_1),
                                                   injected_edge(edges_of_polygon(A)(j_1), B))")
                      (("1" (hide -4)
                        (("1" (inst -2 "v")
                          (("1" (skeep -2 t)
                            (("1"
                              (inst +
                               "i + injected_vertices(A, B, j)`length")
                              (("1" (ground) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2" (expand "member")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst? 3) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (injected_vertex_in_injected_edge_2 0
  (injected_vertex_in_injected_edge_2-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (inst -1 "v" "A" "B" "i")
        (("2" (assert)
          (("2" (expand "injected_vertices" -3)
            (("2" (expand "injected_vertices" -4)
              (("2" (expand "o")
                (("2" (lift-if)
                  (("2" (split -4)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide -2)
                        (("2"
                          (typepred
                           "injected_edge_seq(edges_of_polygon(A)(j_1),
                        injected_edge(edges_of_polygon(A)(j_1), B))")
                          (("2" (hide -2 -4)
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (inst? +)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (edge_seq_point_distinct_TCC1 0
  (edge_seq_point_distinct_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (edge_seq_point_distinct subtype
    "(number_fields.-)(vertex_injection.j, vertex_injection.IV`length)"
    "below[injected_edge_seq(e, injected_edge(e, B))`length]"))
  (edge_seq_point_distinct_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (edge_seq_point_distinct subtype
    "(number_fields.-)(vertex_injection.j, vertex_injection.IV`length)"
    "below[injected_edge_seq(e, injected_edge(e, B))`length]")))
 (edge_seq_point_distinct 0
  (edge_seq_point_distinct-1 nil 3874129020
   ("" (auto-rewrite "sets.member")
    (("" (skeep)
      (("" (case-replace "k=0")
        (("1" (expand "injected_vertices")
          (("1" (replace -3)
            (("1" (expand "empty_seq") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (lemma "injected_vertex_in_injected_edge_2")
          (("2" (inst - "IV`seq(i)" "A" "B" "i" "k")
            (("2" (assert)
              (("2" (skeep)
                (("2"
                  (typepred
                   "injected_edge_seq(e, injected_edge(e, B))")
                  (("2" (hide -2 -4)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (replace -11 :dir rl)
                          (("2"
                            (lemma "member_injected_edge_on_segment")
                            (("2" (inst-cp - "IV`seq(i)" "e" "B")
                              (("2"
                                (inst
                                 -
                                 "IV`seq(i)"
                                 "edges_of_polygon(A)(j!1)"
                                 "B")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma
                                     "points_on_distinct_edges_differ")
                                    (("2"
                                      (inst
                                       -
                                       "IV`seq(i)"
                                       "A"
                                       "j!1"
                                       "k")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand "injected_edge" -8)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand "injected_edge" -7)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (all_injected_vertices_distinct 0
  (all_injected_vertices_distinct-1 nil 3874129020
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep + t)
          (("2" (expand "injected_vertices" -5)
            (("2" (inst - "A" "B" "injected_vertices(A, B, j_1)")
              (("2" (assert)
                (("2" (replace -5 :hide? t)
                  (("2" (expand "o")
                    (("2" (apply (repeat (lift-if)))
                      (("2" (ground)
                        (("1" (inst - "i" "j") (("1" (assert) nil nil))
                          nil)
                         ("2" (hide -3)
                          (("2" (hide -4)
                            (("2" (use "edge_seq_point_distinct")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (hide -4)
                          (("3" (use "edge_seq_point_distinct")
                            (("3" (assert) nil nil)) nil))
                          nil)
                         ("4" (hide -4)
                          (("4" (lemma "injected_vertices_distinct")
                            (("4"
                              (inst - "edges_of_polygon(A)(j_1)" "A"
                               "B"
                               "injected_edge(edges_of_polygon(A)(j_1), B)"
                               "injected_edge_seq(edges_of_polygon(A)(j_1),
                        injected_edge(edges_of_polygon(A)(j_1), B))"
                               "j_1")
                              (("4"
                                (ground)
                                (("1"
                                  (inst
                                   -
                                   "i - injected_vertices(A, B, j_1)`length"
                                   "j - injected_vertices(A, B, j_1)`length")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (rewrite "subset_reflexive")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vertex_on_original_edge_TCC1 0
  (injected_vertex_on_original_edge_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertex_on_original_edge subtype "vertex_injection.j"
    "below[injected_edge_indices(A, B)`length]"))
  (injected_vertex_on_original_edge_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_on_original_edge subtype "vertex_injection.j"
    "below[injected_edge_indices(A, B)`length]")))
 (injected_vertex_on_original_edge_TCC2 0
  (injected_vertex_on_original_edge_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertex_on_original_edge subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "below[injected_edge_indices(A, B)`length]"))
  (injected_vertex_on_original_edge_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_on_original_edge subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "below[injected_edge_indices(A, B)`length]")))
 (injected_vertex_on_original_edge_TCC3 0
  (injected_vertex_on_original_edge_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (rewrite "injected_edge_indices_eq_len_inj_vert")
      (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (injected_vertex_on_original_edge subtype "vertex_injection.i"
    "below[injected_vertices(A, B, 1 + j)`length]"))
  (injected_vertex_on_original_edge_TCC3-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_on_original_edge subtype "vertex_injection.i"
    "below[injected_vertices(A, B, 1 + j)`length]")))
 (injected_vertex_on_original_edge_TCC4 0
  (injected_vertex_on_original_edge_TCC4-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertex_on_original_edge subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vertex_on_original_edge_TCC4-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_on_original_edge subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vertex_on_original_edge 0
  (injected_vertex_on_original_edge-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "member_injected_edge_on_segment")
      (("" (inst - _ _ "B")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "injected_vertices" 1)
                ((""
                  (rewrite* "injected_edge_indices_eq_len_inj_vert"
                   :dir rl)
                  (("" (expand "o")
                    (("" (assert)
                      ((""
                        (typepred
                         "injected_edge_seq(edges_of_polygon(A)(j),
                                        injected_edge
                                        (edges_of_polygon(A)(j), B))")
                        (("" (hide -2 -4)
                          ((""
                            (inst -
                             "i - injected_vertices(A, B, j)`length")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_subsegment_of_original_TCC1 0
  (injected_edge_subsegment_of_original_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_subsegment_of_original subtype
    "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_edge_subsegment_of_original_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_subsegment_of_original subtype
    "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_edge_subsegment_of_original_TCC2 0
  (injected_edge_subsegment_of_original_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("1" (skeep)
        (("1" (replace -1)
          (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (use "all_injected_vertices_distinct")
        (("2" (assert)
          (("2" (expand "uniq_vertex_list?")
            (("2" (skeep)
              (("2" (inst - "i" "j") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (use "length_injected_vertices_bound")
        (("3" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (injected_edge_subsegment_of_original subtype "vertex_injection.Am"
    "polygon_2d"))
  (injected_edge_subsegment_of_original_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_subsegment_of_original subtype "vertex_injection.Am"
    "polygon_2d")))
 (injected_edge_subsegment_of_original 0
  (injected_edge_subsegment_of_original-1 nil 3874129020
   ("" (skeep*)
    (("" (skoletin*)
      (("" (replace -2 :hide? t)
        (("" (flatten)
          (("" (expand "edge_of_polygon?")
            (("" (skeep - t)
              (("" (expand "edges_of_polygon" -)
                (("" (replace -3)
                  (("" (assert)
                    (("" (replace -3 :dir rl)
                      (("" (use "injected_vert_seq_elements_eq")
                        (("" (assert)
                          (("" (skeep)
                            (("" (inst + "j")
                              ((""
                                (expand "subsegment?")
                                ((""
                                  (replace -7 + :dir rl :hide? t)
                                  ((""
                                    (assert)
                                    ((""
                                      (use
                                       "injected_edge_indices_eq_len_inj_vert")
                                      ((""
                                        (assert)
                                        ((""
                                          (lemma
                                           "injected_vertices_tail_eq")
                                          ((""
                                            (inst - "A" "B" "i" "1+j")
                                            ((""
                                              (assert)
                                              ((""
                                                (replace -1 :dir rl)
                                                ((""
                                                  (use
                                                   "injected_vertex_on_original_edge")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (case "i+1 < n")
                                                      (("1"
                                                        (expand
                                                         "next_index")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (lemma
                                                               "injected_edge_seq_starts_with_p1")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "edges_of_polygon(A)(0)"
                                                                 "A"
                                                                 "B"
                                                                 "0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "injected_vertices_tail_eq")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "A"
                                                                       "B"
                                                                       "0"
                                                                       "1")
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (expand
                                                                             "injected_vertices"
                                                                             +)
                                                                            (("1"
                                                                              (expand
                                                                               "injected_vertices"
                                                                               +)
                                                                              (("1"
                                                                                (expand
                                                                                 "o")
                                                                                (("1"
                                                                                  (expand
                                                                                   "empty_seq")
                                                                                  (("1"
                                                                                    (equate
                                                                                     "injected_edge_seq(edges_of_polygon(A)(0),
                                                            injected_edge
                                                            (edges_of_polygon(A)(0), B))`seq
                                              (0)"
                                                                                     "edges_of_polygon(A)(j)`p2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("2"
                                                                                        (equate
                                                                                         "j"
                                                                                         "prev_index(A,0)")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "prev_index")
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1
                                                                                             -2
                                                                                             -5
                                                                                             2
                                                                                             3)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "injected_vertices(A, B, A`num_vertices)`length < injected_vertices(A, B, 1 + j)`length")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "length_injected_vertices_ordered")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "A"
                                                                                                       "B"
                                                                                                       "1+j"
                                                                                                       "A`num_vertices")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "injected_vertices"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "injected_vertices"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "o")
                                                                              (("2"
                                                                                (expand
                                                                                 "empty_seq")
                                                                                (("2"
                                                                                  (use
                                                                                   "length_injected_edge_seq_pos")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "injected_vertex_on_original_edge")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "A"
                                                                 "B"
                                                                 "j"
                                                                 "i+1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "injected_vertices_tail_eq")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "A"
                                                                       "B"
                                                                       "i+1"
                                                                       "1+j")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "next_index")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (lemma
                                                               "injected_edge_seq_starts_with_p1")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "edges_of_polygon(A)(0)"
                                                                 "A"
                                                                 "B"
                                                                 "0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "injected_vertices_tail_eq")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "A"
                                                                       "B"
                                                                       "0"
                                                                       "1")
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (expand
                                                                             "injected_vertices"
                                                                             +)
                                                                            (("1"
                                                                              (expand
                                                                               "injected_vertices"
                                                                               +)
                                                                              (("1"
                                                                                (expand
                                                                                 "o")
                                                                                (("1"
                                                                                  (expand
                                                                                   "empty_seq")
                                                                                  (("1"
                                                                                    (equate
                                                                                     "injected_edge_seq(edges_of_polygon(A)(0),
                                                            injected_edge
                                                            (edges_of_polygon(A)(0), B))`seq
                                              (0)"
                                                                                     "edges_of_polygon(A)(j)`p2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("2"
                                                                                        (equate
                                                                                         "j"
                                                                                         "prev_index(A,0)")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "j = A`num_vertices - 1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "prev_index")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -1
                                                                                             -2
                                                                                             -4
                                                                                             2
                                                                                             3
                                                                                             4)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -10
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "length_injected_vertices_ordered")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "A"
                                                                                                     "B"
                                                                                                     "j+1"
                                                                                                     "A`num_vertices")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (lemma
                                                                             "length_injected_vertices_incr")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "A"
                                                                               "B"
                                                                               "0")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "injected_vertices"
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "empty_seq")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "injected_edge_seq_starts_with_p1")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "edges_of_polygon(A)(j+1)"
                                                                 "A"
                                                                 "B"
                                                                 "j+1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (equate
                                                                     "injected_edge_seq(edges_of_polygon(A)(1 + j),
                              injected_edge(edges_of_polygon(A)(1 + j), B))`seq
                (0)"
                                                                     "injected_vertices(A, B, A`num_vertices)`seq(1 + i)")
                                                                    (("1"
                                                                      (equate
                                                                       "edges_of_polygon(A)(1 + j)`p1"
                                                                       "edges_of_polygon(A)(j)`p2")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (equate
                                                                       "i+1"
                                                                       "injected_vertices(A, B, 1 + j)`length"
                                                                       (assert))
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "injected_vertex_p1_is_seq_element")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_injected_on_original 0
  (point_on_injected_on_original-1 nil 3874129020
   ("" (skeep*)
    (("" (use "injected_edge_subsegment_of_original")
      (("" (ground)
        (("" (ground)
          (("" (skeep)
            (("" (inst?)
              (("" (lemma "point_on_subsegment")
                (("" (inst - "p" "s" "edges_of_polygon(A)(j)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_p2_in_injected_edge_set_TCC1 0
  (injected_p2_in_injected_edge_set_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_p2_in_injected_edge_set subtype
    "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_p2_in_injected_edge_set_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_p2_in_injected_edge_set subtype
    "vertex_injection.A`num_vertices"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_p2_in_injected_edge_set_TCC2 0
  (injected_p2_in_injected_edge_set_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_p2_in_injected_edge_set subtype "vertex_injection.next"
    "below[IV`length]"))
  (injected_p2_in_injected_edge_set_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_p2_in_injected_edge_set subtype "vertex_injection.next"
    "below[IV`length]")))
 (injected_p2_in_injected_edge_set 0
  (injected_p2_in_injected_edge_set-1 nil 3874129020
   ("" (auto-rewrite "sets.member")
    (("" (skeep)
      (("" (skoletin*)
        (("" (flatten)
          (("" (use "injected_vertex_in_injected_edge")
            (("1" (assert)
              (("1" (flatten)
                (("1" (hide -2)
                  (("1" (ground)
                    (("1" (skeep) (("1" (inst?) nil nil)) nil)
                     ("2" (hide 2)
                      (("2" (inst + "next")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -3 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_injected_edge_on_original_TCC1 0
  (point_on_injected_edge_on_original_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_injected_edge_on_original subtype "vertex_injection.i"
    "naturalnumbers.below(vertex_injection.C`num_vertices)"))
  (point_on_injected_edge_on_original_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_injected_edge_on_original subtype "vertex_injection.i"
    "naturalnumbers.below(vertex_injection.C`num_vertices)")))
 (point_on_injected_edge_on_original_TCC2 0
  (point_on_injected_edge_on_original_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("1" (skeep)
        (("1" (replace -1)
          (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (use "all_injected_vertices_distinct")
        (("2" (assert)
          (("2" (expand "uniq_vertex_list?")
            (("2" (skeep)
              (("2" (inst - "i!1" "j") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (use "length_injected_vertices_bound")
        (("3" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (point_on_injected_edge_on_original subtype "vertex_injection.C"
    "polygon_2d"))
  (point_on_injected_edge_on_original_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_injected_edge_on_original subtype "vertex_injection.C"
    "polygon_2d")))
 (point_on_injected_edge_on_original 0
  (point_on_injected_edge_on_original-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "injected_edge_subsegment_of_original")
          (("" (ground)
            (("" (ground)
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (lemma "point_on_subsegment")
                    (("1"
                      (inst - "p" "edges_of_polygon(C)(i)"
                       "edges_of_polygon(A)(j)")
                      (("1" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -3)
                (("2" (replace -4)
                  (("2" (replace -3 :dir rl)
                    (("2" (expand "edge_of_polygon?")
                      (("2" (inst + "i") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_in_injected_edge_seq_index_TCC1 0
  (point_in_injected_edge_seq_index_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_in_injected_edge_seq_index subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (point_in_injected_edge_seq_index_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (point_in_injected_edge_seq_index subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (point_in_injected_edge_seq_index_TCC2 0
  (point_in_injected_edge_seq_index_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_in_injected_edge_seq_index subtype "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (point_in_injected_edge_seq_index_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (point_in_injected_edge_seq_index subtype "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (point_in_injected_edge_seq_index_TCC3 0
  (point_in_injected_edge_seq_index_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (lemma "length_injected_vertices_ordered")
      (("" (inst - "A" "B" "j+1" "A`num_vertices")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (point_in_injected_edge_seq_index subtype "vertex_injection.i"
    "below[injected_vertices(A, B, A`num_vertices)`length]"))
  (point_in_injected_edge_seq_index_TCC3-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (point_in_injected_edge_seq_index subtype "vertex_injection.i"
    "below[injected_vertices(A, B, A`num_vertices)`length]")))
 (point_in_injected_edge_seq_index 0
  (point_in_injected_edge_seq_index-1 nil 3874129020
   ("" (skeep)
    (("" (copy -3)
      (("" (expand "injected_vertices" -1)
        (("" (replace -3 :dir rl)
          (("" (expand "o")
            (("" (typepred "injected_edge_seq(e, injected_edge(e, B))")
              (("" (hide -4)
                (("" (case "i >= l")
                  (("1" (inst -4 "i - l")
                    (("1" (replace -12 :dir rl)
                      (("1" (lemma "injected_vertices_tail_eq")
                        (("1" (inst - "A" "B" "i" "j+1")
                          (("1" (assert)
                            (("1" (replace -11 :dir rl)
                              (("1"
                                (inst - "Q`seq(i - l)")
                                (("1"
                                  (skeep - t)
                                  (("1"
                                    (use "injected_vertices_distinct")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (inst - "i-l" "i_1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst + "i_1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "injected_vertices"
                                                 -3)
                                                (("1"
                                                  (expand "o")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "subset_reflexive[point_2d]")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "member")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "injected_vertices_distinct")
                      (("2" (ground) nil nil)) nil))
                    nil)
                   ("2" (case-replace "j = 0")
                    (("1" (expand "injected_vertices" -9)
                      (("1" (expand "empty_seq")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (lemma "injected_vertices_tail_eq")
                      (("2" (inst - "A" "B" "i" "j")
                        (("2" (assert)
                          (("2" (replace -10 :dir rl)
                            (("2"
                              (lemma
                               "injected_vertex_in_injected_edge_2")
                              (("2"
                                (inst - "v" "A" "B" "i" "j")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (lemma
                                       "member_injected_edge_on_segment")
                                      (("2"
                                        (inst
                                         -
                                         "v"
                                         "edges_of_polygon(A)(j_1)"
                                         "B")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (use
                                             "points_on_distinct_edges_differ")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "injected_edge"
                                                   -5)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vertex_on_edge_index_bounds_TCC1 0
  (injected_vertex_on_edge_index_bounds_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertex_on_edge_index_bounds subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vertex_on_edge_index_bounds_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_on_edge_index_bounds subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vertex_on_edge_index_bounds 0
  (injected_vertex_on_edge_index_bounds-1 nil 3874129020
   ("" (induct "k")
    (("1" (skeep) (("1" (assert) nil nil)) nil)
     ("2" (skeep*)
      (("2" (case-replace "j_1 = j")
        (("1" (hide -1 -2)
          (("1" (assert)
            (("1" (expand "injected_vertices" -3)
              (("1" (lemma "point_in_injected_edge_seq_index")
                (("1"
                  (inst - "A" "B"
                   "injected_edge_seq(edges_of_polygon(A)(j),
                                 injected_edge(edges_of_polygon(A)(j), B))"
                   "edges_of_polygon(A)(j)" "v" "j" "i"
                   "injected_vertices(A, B, j)`length")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst?)
          (("2" (inst - "v")
            (("2" (assert)
              (("2" (split -1)
                (("1" (propax) nil nil)
                 ("2" (expand "injected_vertices" -3)
                  (("2" (expand "o")
                    (("2"
                      (typepred
                       "injected_edge_seq(edges_of_polygon(A)(j_1),
                                   injected_edge(edges_of_polygon(A)(j_1), B))")
                      (("2" (hide -4)
                        (("2"
                          (inst -3
                           "i - injected_vertices(A, B, j_1)`length")
                          (("1"
                            (equate
                             "injected_edge_seq(edges_of_polygon(A)(j_1),
                                           injected_edge(edges_of_polygon(A)(j_1),
                                                         B))`seq
                             (i - injected_vertices(A, B, j_1)`length)"
                             "v")
                            (("1"
                              (use "member_injected_edge_on_segment")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "points_on_distinct_edges_differ")
                                  (("1"
                                    (inst - "v" "A" "j" "j_1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "injected_vertex_p1_is_seq_element")
                                          (("1"
                                            (inst
                                             -
                                             "A"
                                             "B"
                                             "j"
                                             "A`num_vertices")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon"
                                                 (-1 -4))
                                                (("1"
                                                  (replace -3 -1)
                                                  (("1"
                                                    (expand
                                                     "injected_vertices"
                                                     -1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "empty_seq")
                                                      (("1"
                                                        (expand
                                                         "next_index"
                                                         -4)
                                                        (("1"
                                                          (use
                                                           "all_injected_vertices_distinct")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "0"
                                                               "i")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "length_injected_vertices_ordered")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "A"
                                                                     "B"
                                                                     "0"
                                                                     "j_1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2)
                              (("2"
                                (lemma "injected_vertices_tail_eq")
                                (("2"
                                  (inst - "A" "B" "i" "1+j_1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -7 :dir rl)
                                      (("2"
                                        (expand "injected_vertices" -1)
                                        (("2"
                                          (expand "o")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "length_injected_vertices_ordered")
          (("3" (inst - "A" "B" "k" "A`num_vertices")
            (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vertex_on_edge_index_bounds_all_TCC1 0
  (injected_vertex_on_edge_index_bounds_all_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertex_on_edge_index_bounds_all subtype
    "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vertex_on_edge_index_bounds_all_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_on_edge_index_bounds_all subtype
    "vertex_injection.j"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vertex_on_edge_index_bounds_all_TCC2 0
  (injected_vertex_on_edge_index_bounds_all_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertex_on_edge_index_bounds_all subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vertex_on_edge_index_bounds_all_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_on_edge_index_bounds_all subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vertex_on_edge_index_bounds_all_TCC3 0
  (injected_vertex_on_edge_index_bounds_all_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_vertex_on_edge_index_bounds_all subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)"))
  (injected_vertex_on_edge_index_bounds_all_TCC3-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_on_edge_index_bounds_all subtype
    "(number_fields.+)(vertex_injection.j, 1)"
    "naturalnumbers.upto(vertex_injection.A`num_vertices)")))
 (injected_vertex_on_edge_index_bounds_all 0
  (injected_vertex_on_edge_index_bounds_all-1 nil 3874129020
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (lemma "injected_vertex_on_edge_index_bounds")
          (("1" (inst - "A" "B" "j" "i" "A`num_vertices" "v")
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "edges_of_polygon" -1)
          (("2" (lemma "injected_vertex_p1_is_seq_element")
            (("2" (inst - "A" "B" "next_index(A, j)" "A`num_vertices")
              (("2" (assert)
                (("2" (expand "edges_of_polygon" -1)
                  (("2" (use "all_injected_vertices_distinct")
                    (("2" (assert)
                      (("2"
                        (inst - "i"
                         "injected_vertices(A, B, next_index(A, j))`length")
                        (("2" (assert)
                          (("2" (hide -2 -3)
                            (("2" (expand "next_index")
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("2"
                                    (expand "injected_vertices" -3)
                                    (("2"
                                      (expand "empty_seq")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vertices_length_rollover 0
  (injected_vertices_length_rollover-1 nil 3874129020
   ("" (skeep*)
    (("" (assert)
      (("" (ground)
        (("" (lemma "length_injected_vertices_ordered")
          (("" (inst - "A" "B" "i+1" "A`num_vertices")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_p2_on_same_original_edge_TCC1 0
  (injected_p2_on_same_original_edge_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_p2_on_same_original_edge subtype "vertex_injection.next"
    "below[IV`length]"))
  (injected_p2_on_same_original_edge_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_p2_on_same_original_edge subtype "vertex_injection.next"
    "below[IV`length]")))
 (injected_p2_on_same_original_edge 0
  (injected_p2_on_same_original_edge-1 nil 3874129020
   ("" (skeep)
    (("" (case-replace "IV`seq(next) = edges_of_polygon(A)(j)`p2")
      (("1" (assert) nil nil)
       ("2" (lift-if)
        (("2" (ground)
          (("1" (lemma "injected_vertices_length_rollover")
            (("1" (inst - "A" "B" "j" "i")
              (("1" (assert)
                (("1" (ground)
                  (("1" (replace -1)
                    (("1" (expand "edges_of_polygon" 1)
                      (("1" (expand "next_index")
                        (("1" (replace -3)
                          (("1" (replace -5 1)
                            (("1" (lemma "injected_vertices_tail_eq")
                              (("1"
                                (inst - "A" "B" "0" "1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand
                                     "injected_vertices"
                                     -1
                                     (1 2))
                                    (("1"
                                      (expand "o")
                                      (("1"
                                        (equate
                                         "injected_vertices(A, B, 0)`length"
                                         "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use
                                             "length_injected_edge_seq_pos")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "injected_edge_seq_starts_with_p1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon"
                                                     -1
                                                     3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "injected_vertex_on_edge_index_bounds")
                    (("2"
                      (inst - "A" "B" "j" "i" "A`num_vertices"
                       "IV`seq(i)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "injected_vertex_on_edge_index_bounds")
            (("2" (inst - "A" "B" "j" "i" "A`num_vertices" "IV`seq(i)")
              (("2" (assert)
                (("2" (flatten)
                  (("2"
                    (case "next = injected_vertices(A, B, 1+j)`length")
                    (("1" (lemma "injected_vertex_p1_is_seq_element")
                      (("1" (inst - "A" "B" "j+1" "A`num_vertices")
                        (("1" (ground) (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "injected_vertices" -2)
                      (("2" (expand "o")
                        (("2"
                          (name-replace "Q"
                           "injected_edge_seq(edges_of_polygon(A)(j),
                                                   injected_edge(edges_of_polygon(A)(j), B))"
                           :hide? nil)
                          (("2" (typepred "Q")
                            (("2"
                              (inst -3
                               "next - injected_vertices(A, B, j)`length")
                              (("1"
                                (use "member_injected_edge_on_segment")
                                (("1"
                                  (assert)
                                  (("1"
                                    (equate
                                     "Q`seq(next - injected_vertices(A, B, j)`length)"
                                     "IV`seq(next)")
                                    (("1"
                                      (lemma
                                       "injected_vertices_tail_eq")
                                      (("1"
                                        (inst - "A" "B" "next" "1+j")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand
                                               "injected_vertices"
                                               -1
                                               1)
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "injected_vertices"
                                               (1 3))
                                              (("2"
                                                (expand "o")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "injected_vertices" 2)
                                  (("2"
                                    (expand "o")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_injected_vertex_on_edge_TCC1 0
  (next_injected_vertex_on_edge_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("1" (skeep)
        (("1" (replace -1)
          (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (use "all_injected_vertices_distinct")
        (("2" (assert)
          (("2" (expand "uniq_vertex_list?")
            (("2" (skeep)
              (("2" (inst - "i!1" "j!1") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (use "length_injected_vertices_bound")
        (("3" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (next_injected_vertex_on_edge subtype "vertex_injection.Am"
    "polygon_2d"))
  (next_injected_vertex_on_edge_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (next_injected_vertex_on_edge subtype "vertex_injection.Am"
    "polygon_2d")))
 (next_injected_vertex_on_edge_TCC2 0
  (next_injected_vertex_on_edge_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (replace -5)
      (("" (assert)
        (("" (lemma "length_injected_vertices_ordered")
          (("" (inst - "A" "B" "i+1" "A`num_vertices")
            (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (next_injected_vertex_on_edge subtype "vertex_injection.j"
    "naturalnumbers.below(vertex_injection.Am`num_vertices)"))
  (next_injected_vertex_on_edge_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (next_injected_vertex_on_edge subtype "vertex_injection.j"
    "naturalnumbers.below(vertex_injection.Am`num_vertices)")))
 (next_injected_vertex_on_edge_TCC3 0
  (next_injected_vertex_on_edge_TCC3-2 nil 3874129020
   ("" (skeep*)
    (("" (replace -5)
      (("" (expand "next_index")
        (("" (lift-if)
          (("" (ground)
            (("" (lemma "length_injected_vertices_ordered")
              (("" (inst - "A" "B" "1+i" "A`num_vertices")
                (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (next_injected_vertex_on_edge subtype
    "polygons_2d.next_index(vertex_injection.Am, vertex_injection.j)"
    "below[IV`length]"))
  (next_injected_vertex_on_edge_TCC3-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (next_injected_vertex_on_edge subtype
    "polygons_2d.next_index(vertex_injection.Am, vertex_injection.j)"
    "below[IV`length]")))
 (next_injected_vertex_on_edge_TCC4 0
  (next_injected_vertex_on_edge_TCC4-2 nil 3874129020
   ("" (skeep*)
    (("" (case-replace "A`num_vertices = i+1")
      (("1" (assert) nil nil)
       ("2" (lemma "length_injected_vertices_ordered")
        (("2" (inst - "A" "B" "i+1" "A`num_vertices")
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (next_injected_vertex_on_edge subtype "vertex_injection.j"
    "below[IV`length]"))
  (next_injected_vertex_on_edge_TCC4-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (next_injected_vertex_on_edge subtype "vertex_injection.j"
    "below[IV`length]")))
 (next_injected_vertex_on_edge 0
  (next_injected_vertex_on_edge-1 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("" (flatten)
        ((""
          (name-replace "Am" "(# num_vertices
                                  := injected_vertices
                                     (A, B, A`num_vertices)`length,
                                vertices
                                  := injected_vertices
                                     (A, B, A`num_vertices)`seq #)"
           :hide? nil)
          (("" (lemma "injected_vertices_tail_eq")
            (("" (inst-cp - "A" "B" "j" "i+1")
              (("" (assert)
                (("" (expand "next_index")
                  (("" (lift-if)
                    (("" (split 1)
                      (("1" (flatten)
                        (("1" (use "injected_vertices_length_rollover")
                          (("1" (assert)
                            (("1" (replace -5 -2 :dir rl)
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "injected_vertices(A, B, A`num_vertices)`seq(0) = edges_of_polygon(A)(i)`p2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "injected_vertex_on_original_edge")
                                      (("1"
                                        (inst - "A" "B" "i" "j")
                                        (("1"
                                          (rewrite*
                                           "injected_edge_indices_eq_len_inj_vert"
                                           :dir
                                           rl)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "edges_of_polygon"
                                               +)
                                              (("1"
                                                (lemma
                                                 "endpoint_norm_bound_lt")
                                                (("1"
                                                  (inst
                                                   -
                                                   "injected_vertices(A, B, 1 + i)`seq(j)"
                                                   "edges_of_polygon(A)(i)")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "edges_of_polygon"
                                                       -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "all_injected_vertices_distinct")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "A"
                                                         "B"
                                                         "injected_vertices(A, B, A`num_vertices)"
                                                         "A`num_vertices")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "0"
                                                             "j")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (inst -3 "A" "B" "0" "1")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (replace -1 :dir rl)
                                          (("1"
                                            (expand
                                             "injected_vertices"
                                             +)
                                            (("1"
                                              (expand
                                               "injected_vertices"
                                               +)
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (expand "empty_seq")
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon"
                                                     1
                                                     3)
                                                    (("1"
                                                      (lemma
                                                       "injected_edge_seq_starts_with_p1")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "edges_of_polygon(A)(0)"
                                                         "A"
                                                         "B"
                                                         "0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand
                                             "injected_vertices"
                                             +)
                                            (("2"
                                              (expand
                                               "injected_vertices"
                                               +)
                                              (("2"
                                                (expand "o")
                                                (("2"
                                                  (lemma
                                                   "length_injected_edge_seq_pos")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "edges_of_polygon(A)(0)"
                                                     "A"
                                                     "B"
                                                     "0")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2"
                          (case "1+j < injected_vertices(A, B, 1 + i)`length")
                          (("1" (inst - "A" "B" "1+j" "1+i")
                            (("1" (assert)
                              (("1"
                                (replace -2 :dir rl)
                                (("1"
                                  (replace -3 :dir rl)
                                  (("1"
                                    (expand "injected_vertices" +)
                                    (("1"
                                      (expand "o")
                                      (("1"
                                        (typepred
                                         "injected_edge_seq(edges_of_polygon(A)(i),
                                                                  injected_edge
                                                                  (edges_of_polygon(A)(i), B))")
                                        (("1"
                                          (inst? -3)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide-all-but (-3 1))
                                              (("1"
                                                (use
                                                 "member_injected_edge_on_segment")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -4
                                               "1 - injected_vertices(A, B, i)`length + j"
                                               "j - injected_vertices(A, B, i)`length")
                                              (("2"
                                                (hide-all-but (-4 1))
                                                (("2"
                                                  (expand
                                                   "edges_of_polygon"
                                                   -1
                                                   (3 6))
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -2 -3 3)
                                            (("2"
                                              (expand
                                               "injected_vertices"
                                               -2)
                                              (("2"
                                                (expand "o")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "1+i = A`num_vertices")
                            (("1" (replace -4 2 :dir rl)
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (case-replace
                               "injected_vertices(A, B, A`num_vertices)`seq(1 + j) = edges_of_polygon(A)(i)`p2")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "endpoint_norm_bound_lt")
                                  (("1"
                                    (inst
                                     -
                                     "injected_vertices(A, B, A`num_vertices)`seq(j)"
                                     "edges_of_polygon(A)(i)")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand
                                         "edges_of_polygon"
                                         (-1 4))
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (inst - "A" "B" "j" "1+i")
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (replace -3 :dir rl)
                                            (("1"
                                              (use
                                               "injected_vertex_on_original_edge")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite*
                                                   "injected_edge_indices_eq_len_inj_vert"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma
                                         "all_injected_vertices_distinct")
                                        (("3"
                                          (inst
                                           -
                                           "A"
                                           "B"
                                           "injected_vertices(A, B, A`num_vertices)"
                                           "A`num_vertices")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst - "j" "1+j")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 5)
                                (("2"
                                  (lemma
                                   "injected_vertex_p1_is_seq_element")
                                  (("2"
                                    (inst
                                     -
                                     "A"
                                     "B"
                                     "1+i"
                                     "A`num_vertices")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "edges_of_polygon")
                                        (("2"
                                          (expand "next_index")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 5)
                                (("3"
                                  (replace -3 4 :dir rl)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (lemma
                                       "length_injected_vertices_ordered")
                                      (("3"
                                        (inst
                                         -
                                         "A"
                                         "B"
                                         "1+i"
                                         "A`num_vertices")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (normalized_edge_endpoint_diffs_eq_TCC1 0
  (normalized_edge_endpoint_diffs_eq_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (expand "edges_of_polygon")
      (("" (use "vertices_diff_next_nonzero") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (normalized_edge_endpoint_diffs_eq subtype
    "(vectors_2D.-)(polygons_2d.edges_of_polygon(vertex_injection.Am)(vertex_injection.j)`p2, polygons_2d.edges_of_polygon(vertex_injection.Am)(vertex_injection.j)`p1)"
    "Nz_vector"))
  (normalized_edge_endpoint_diffs_eq_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (normalized_edge_endpoint_diffs_eq subtype
    "(vectors_2D.-)(polygons_2d.edges_of_polygon(vertex_injection.Am)(vertex_injection.j)`p2, polygons_2d.edges_of_polygon(vertex_injection.Am)(vertex_injection.j)`p1)"
    "Nz_vector")))
 (normalized_edge_endpoint_diffs_eq_TCC2 0
  (normalized_edge_endpoint_diffs_eq_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (expand "edges_of_polygon")
      (("" (use "vertices_diff_next_nonzero") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (normalized_edge_endpoint_diffs_eq subtype
    "(vectors_2D.-)(polygons_2d.edges_of_polygon(vertex_injection.A)(vertex_injection.i)`p2, polygons_2d.edges_of_polygon(vertex_injection.A)(vertex_injection.i)`p1)"
    "Nz_vector"))
  (normalized_edge_endpoint_diffs_eq_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (normalized_edge_endpoint_diffs_eq subtype
    "(vectors_2D.-)(polygons_2d.edges_of_polygon(vertex_injection.A)(vertex_injection.i)`p2, polygons_2d.edges_of_polygon(vertex_injection.A)(vertex_injection.i)`p1)"
    "Nz_vector")))
 (normalized_edge_endpoint_diffs_eq 0
  (normalized_edge_endpoint_diffs_eq-1 nil 3874129020
   ("" (skeep*)
    (("" (skoletin*)
      (("" (ground)
        (("" (expand "edges_of_polygon")
          (("" (lemma "injected_vertices_tail_eq")
            (("" (inst - "A" "B" "j" "i+1")
              (("" (assert)
                (("" (replace -6)
                  (("" (replace -5 1)
                    (("" (assert)
                      (("" (replace -1 :dir rl)
                        (("" (replace -5 :dir rl)
                          ((""
                            (lemma
                             "points_on_same_segment_norm_diffs_eq")
                            ((""
                              (inst -
                               "injected_vertices(A, B, 1+i)`seq(j)"
                               "injected_vertices(A, B, A`num_vertices)`seq(next_index(Am, j))"
                               "edges_of_polygon(A)(i)")
                              ((""
                                (expand
                                 "edges_of_polygon"
                                 -1
                                 (3 4 5 6))
                                ((""
                                  (typepred
                                   "injected_edge_seq(edges_of_polygon(A)(i),
                                     injected_edge(edges_of_polygon(A)(i), B))")
                                  ((""
                                    (hide -2)
                                    ((""
                                      (use
                                       "next_injected_vertex_on_edge")
                                      ((""
                                        (assert)
                                        ((""
                                          (replace -9 :dir rl)
                                          ((""
                                            (ground)
                                            ((""
                                              (use
                                               "member_injected_edge_on_segment")
                                              ((""
                                                (assert)
                                                ((""
                                                  (expand
                                                   "injected_vertices"
                                                   1)
                                                  ((""
                                                    (expand "o")
                                                    ((""
                                                      (inst? -4)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_p1_neq_original_p2_TCC1 0
  (injected_edge_p1_neq_original_p2_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (injected_edge_p1_neq_original_p2 subtype "vertex_injection.j"
    "naturalnumbers.below(vertex_injection.Am`num_vertices)"))
  (injected_edge_p1_neq_original_p2_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_p1_neq_original_p2 subtype "vertex_injection.j"
    "naturalnumbers.below(vertex_injection.Am`num_vertices)")))
 (injected_edge_p1_neq_original_p2 0
  (injected_edge_p1_neq_original_p2-1 nil 3874129020
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (lemma "injected_vertex_on_edge_index_bounds_all")
          (("" (inst - "A" "B" "i" "j" "e`p1")
            (("" (assert)
              (("" (expand "edges_of_polygon")
                (("" (assert)
                  ((""
                    (case "point_on_segment?(e`p2, edges_of_polygon(A)(next_index(A,i)))")
                    (("1" (lemma "points_on_distinct_edges_differ")
                      (("1" (ground)
                        (("1"
                          (inst - "e`p2" "A" "0" "A`num_vertices - 1")
                          (("1" (grind) nil nil)) nil)
                         ("2" (inst - "e`p2" "A" "i" "i+1")
                          (("2" (assert)
                            (("2" (expand "next_index" -3)
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "injected_p2_on_same_original_edge")
                      (("2"
                        (inst - "A" "B" "IV" "j" "next_index(A, i)"
                         "next_index(Am, j)")
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (expand "next_index" 1)
                              (("1"
                                (replace -3 1)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (replace -3)
                              (("2"
                                (assert)
                                (("2"
                                  (replace -5 -9)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -6 -9)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -9 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3"
                                (replace -4)
                                (("3"
                                  (assert)
                                  (("3"
                                    (replace -7 -10)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (replace -6 -10)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (replace -10 -1)
                                            (("3"
                                              (expand
                                               "edges_of_polygon"
                                               -1)
                                              (("3"
                                                (use "vertex_neq_next")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_has_same_dir_as_original_TCC1 0
  (injected_edge_has_same_dir_as_original_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (injected_edge_has_same_dir_as_original subtype
    "(vectors_2D.-)(vertex_injection.s`p2, vertex_injection.s`p1)"
    "Nz_vector"))
  (injected_edge_has_same_dir_as_original_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_has_same_dir_as_original subtype
    "(vectors_2D.-)(vertex_injection.s`p2, vertex_injection.s`p1)"
    "Nz_vector")))
 (injected_edge_has_same_dir_as_original_TCC2 0
  (injected_edge_has_same_dir_as_original_TCC2-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (injected_edge_has_same_dir_as_original subtype
    "(vectors_2D.-)(vertex_injection.e`p2, vertex_injection.e`p1)"
    "Nz_vector"))
  (injected_edge_has_same_dir_as_original_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_edge_has_same_dir_as_original subtype
    "(vectors_2D.-)(vertex_injection.e`p2, vertex_injection.e`p1)"
    "Nz_vector")))
 (injected_edge_has_same_dir_as_original 0
  (injected_edge_has_same_dir_as_original-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "injected_edge_p1_neq_original_p2")
      (("" (inst - "A" "B" "Am" "IV" "i" "j" "s" "e")
        (("" (assert)
          (("" (flatten)
            (("" (expand "subsegment?")
              (("" (flatten)
                (("" (lemma "injected_vertex_on_edge_index_bounds")
                  (("" (inst - "A" "B" "i" "j" "A`num_vertices" "e`p1")
                    (("" (assert)
                      (("" (ground)
                        (("1" (expand "edges_of_polygon")
                          (("1"
                            (use "normalized_edge_endpoint_diffs_eq")
                            (("1" (assert)
                              (("1"
                                (replace -4 :dir rl)
                                (("1"
                                  (replace -5 :dir rl)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_p2_neq_original_p1 0
  (injected_edge_p2_neq_original_p1-1 nil 3874129020
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (lemma "injected_edge_has_same_dir_as_original")
          (("" (inst - "A" "B" "Am" "IV" "i" "j" "s" "e")
            (("" (assert)
              (("" (expand "subsegment?")
                (("" (rewrite* "point_on_segment_has_norm_offset")
                  (("" (skeep*)
                    (("" (replace -1)
                      (("" (replace -11 -7 :dir rl)
                        (("" (case-replace "d=0")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but (-7 1))
                            (("2" (name-replace "V" "^(e`p2 - e`p1)")
                              (("2"
                                (move-terms -1 r 1)
                                (("2"
                                  (equate
                                   "e`p1 - e`p2"
                                   "-1 * (e`p2 - e`p1)"
                                   (assert))
                                  (("1"
                                    (expand "V")
                                    (("1"
                                      (expand "^")
                                      (("1"
                                        (rewrite "scal_assoc")
                                        (("1"
                                          (use "scal_cancel")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nonlast_injected_vertex_index_TCC1 0
  (nonlast_injected_vertex_index_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (nonlast_injected_vertex_index subtype
    "(vectors_2D.-)(vertex_injection.s`p2, vertex_injection.s`p1)"
    "Nz_vector"))
  (nonlast_injected_vertex_index_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (nonlast_injected_vertex_index subtype
    "(vectors_2D.-)(vertex_injection.s`p2, vertex_injection.s`p1)"
    "Nz_vector")))
 (nonlast_injected_vertex_index_TCC2 0
  (nonlast_injected_vertex_index_TCC2-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (nonlast_injected_vertex_index subtype
    "(vectors_2D.-)(vertex_injection.e`p2, vertex_injection.e`p1)"
    "Nz_vector"))
  (nonlast_injected_vertex_index_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (nonlast_injected_vertex_index subtype
    "(vectors_2D.-)(vertex_injection.e`p2, vertex_injection.e`p1)"
    "Nz_vector")))
 (nonlast_injected_vertex_index 0
  (nonlast_injected_vertex_index-1 nil 3874129020
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (expand "edges_of_polygon")
          (("" (case "j = IV`length - 1")
            (("1" (expand "next_index")
              (("1" (lift-if)
                (("1" (assert)
                  (("1" (equate "Am`vertices(0)" "A`vertices(0)")
                    (("1" (ground)
                      (("1" (case "i = 0")
                        (("1" (replace -1)
                          (("1" (replace -7 -9)
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "injected_vertex_on_edge_index_bounds_all")
                                (("1"
                                  (inst
                                   -
                                   "A"
                                   "B"
                                   "0"
                                   "j"
                                   "Am`vertices(j)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (lemma
                                         "length_injected_vertices_incr")
                                        (("1"
                                          (inst - "A" "B" "1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "length_injected_vertices_ordered")
                                              (("1"
                                                (inst
                                                 -
                                                 "A"
                                                 "B"
                                                 "2"
                                                 "A`num_vertices")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "length_injected_vertices_incr")
                                        (("2"
                                          (inst - "A" "B" "1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "length_injected_vertices_ordered")
                                              (("2"
                                                (inst
                                                 -
                                                 "A"
                                                 "B"
                                                 "2"
                                                 "A`num_vertices")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "A")
                                                    (("2"
                                                      (expand
                                                       "simple_polygon_2d?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "edges_of_polygon")
                                        (("3"
                                          (expand "next_index")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "points_on_distinct_edges_differ")
                          (("2" (inst - "A`vertices(0)" "A" "0" "i")
                            (("2" (assert)
                              (("2"
                                (ground)
                                (("1"
                                  (expand "edges_of_polygon")
                                  (("1"
                                    (expand "next_index")
                                    (("1"
                                      (typepred "A`vertices")
                                      (("1"
                                        (expand "uniq_vertex_list?")
                                        (("1"
                                          (inst - "0" "1")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "edges_of_polygon")
                                  (("2"
                                    (expand "next_index")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "injected_vertex_p1_is_seq_element")
                      (("2" (inst - "A" "B" "0" "A`num_vertices")
                        (("2" (assert)
                          (("2" (expand "injected_vertices" -1 2)
                            (("2" (expand "empty_seq")
                              (("2"
                                (expand "edges_of_polygon")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_edge_endpoint_or_interior 0
  (injected_edge_endpoint_or_interior-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "point_on_injected_edge_on_original")
          (("" (ground)
            (("" (assert)
              (("" (ground)
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (skeep + t)
                          (("1" (typepred "A")
                            (("1" (expand "simple_polygon_2d?")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand
                                   "polygon_edges_do_not_cross?")
                                  (("1"
                                    (inst - "j" "k")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "segment_endpoint?")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (replace -4)
                    (("2" (replace -3 :dir rl) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (overlapping_injected_edges_are_equal 0
  (overlapping_injected_edges_are_equal-1 nil 3874129020
   ("" (auto-rewrite "sets.member")
    (("" (skeep)
      (("" (skoletin*)
        (("" (flatten)
          (("" (lemma "injected_edge_subsegment_of_original")
            (("" (inst-cp - "A" "B" "s")
              (("" (inst - "A" "B" "e")
                (("" (assert)
                  (("" (replace -7 :dir rl)
                    (("" (replace -6 :dir rl)
                      (("" (assert)
                        (("" (skeep*)
                          (("" (case-replace "j!1 = j")
                            (("1" (hide -1)
                              (("1"
                                (expand "edge_of_polygon?")
                                (("1"
                                  (skeep*)
                                  (("1"
                                    (lemma
                                     "injected_edge_has_same_dir_as_original")
                                    (("1"
                                      (inst-cp
                                       -
                                       "A"
                                       "B"
                                       "C"
                                       "IV"
                                       "j"
                                       "i"
                                       "edges_of_polygon(A)(j)"
                                       "s")
                                      (("1"
                                        (inst
                                         -
                                         "A"
                                         "B"
                                         "C"
                                         "IV"
                                         "j"
                                         "i!1"
                                         "edges_of_polygon(A)(j)"
                                         "e")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "subsegment?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon"
                                                 (-8 -9))
                                                (("1"
                                                  (replace -10)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -10
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (replace
                                                         -8
                                                         (-5 -6)
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -9
                                                           (-3 -4)
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (name-replace
                                                               "Q"
                                                               "injected_edge_seq(edges_of_polygon(A)(j),
                         injected_edge(edges_of_polygon(A)(j), B))")
                                                              (("1"
                                                                (case-replace
                                                                 "i!1 = i")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "injected_edge_p1_neq_original_p2")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -
                                                                     "A"
                                                                     "B"
                                                                     "C"
                                                                     "IV"
                                                                     "j"
                                                                     "i"
                                                                     "edges_of_polygon(A)(j)"
                                                                     "s")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "A"
                                                                       "B"
                                                                       "C"
                                                                       "IV"
                                                                       "j"
                                                                       "i!1"
                                                                       "edges_of_polygon(A)(j)"
                                                                       "e")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (lemma
                                                                             "injected_vertex_on_edge_index_bounds")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -
                                                                               "A"
                                                                               "B"
                                                                               "j"
                                                                               "i"
                                                                               "A`num_vertices"
                                                                               "IV`seq(i)")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "A"
                                                                                 "B"
                                                                                 "j"
                                                                                 "i!1"
                                                                                 "A`num_vertices"
                                                                                 "IV`seq(i!1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "ivj1"
                                                                                       "injected_vertices(A, B, 1 + j)"
                                                                                       :hide?
                                                                                       nil)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "ivj1"
                                                                                         (-3
                                                                                          -5))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "injected_vertices"
                                                                                           (-3
                                                                                            -5))
                                                                                          (("2"
                                                                                            (expand
                                                                                             "o ")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -6)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "Q")
                                                                                                (("2"
                                                                                                  (name-replace*
                                                                                                   ("len"
                                                                                                    "injected_vertices(A, B, j)`length"
                                                                                                    "ae"
                                                                                                    "edges_of_polygon(A)(j)"))
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "injected_vertices_tail_eq")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "A"
                                                                                                       "B"
                                                                                                       _
                                                                                                       "j+1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "injected_vertices"
                                                                                                         -1
                                                                                                         (1
                                                                                                          2))
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -13)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "o ")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -3)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "i < i!1")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "i!1 = next_index(C, i)")
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "non_overlapping_collinear_segments")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (inst
                                                                                                                       -8
                                                                                                                       "i!1 - len"
                                                                                                                       "next_index(C, i) - len")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "non_overlapping_collinear_segments")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "IV`seq(next_index(C, i)) = Q`seq(next_index(C, i) - len)
                                                           and IV`seq(i!1) = Q`seq(i!1 - len)")
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (inst-cp
                                                                                                                               -
                                                                                                                               "next_index(C, i)")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "i!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "next_index"
                                                                                                                                       (-3
                                                                                                                                        +))
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (expand
                                                                                                                               "next_index"
                                                                                                                               1)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "next_index"
                                                                                                                         +)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (case
                                                                                                                     "i = next_index(C, i!1)")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "non_overlapping_collinear_segments")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "e"
                                                                                                                         "s"
                                                                                                                         "ae")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "are_segments_overlapping_symm")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (inst
                                                                                                                       -7
                                                                                                                       "i - len"
                                                                                                                       "next_index(C, i!1) - len")
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "non_overlapping_collinear_segments")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "e"
                                                                                                                           "s"
                                                                                                                           "ae")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "are_segments_overlapping_symm")
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "IV`seq(next_index(C, i!1)) = Q`seq(next_index(C, i!1) - len)
                                                           and IV`seq(i) = Q`seq(i - len)")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (inst-cp
                                                                                                                                   -
                                                                                                                                   "next_index(C, i!1)")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "i")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "next_index"
                                                                                                                                           (-2
                                                                                                                                            +))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (expand
                                                                                                                                   "next_index"
                                                                                                                                   1)
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "next_index"
                                                                                                                         +)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma
                               "same_polygon_edge_overlaps_equal")
                              (("2"
                                (inst
                                 -
                                 "A"
                                 "edges_of_polygon(A)(j)"
                                 "edges_of_polygon(A)(j!1)")
                                (("2"
                                  (lemma
                                   "overlapping_subsegments_and_segments")
                                  (("2"
                                    (inst
                                     -
                                     "s"
                                     "e"
                                     "edges_of_polygon(A)(j!1)"
                                     "edges_of_polygon(A)(j)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite
                                         "are_segments_overlapping_symm"
                                         -2)
                                        (("2"
                                          (expand
                                           "edges_of_polygon"
                                           -2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (typepred "A`vertices")
                                              (("2"
                                                (expand
                                                 "uniq_vertex_list?")
                                                (("2"
                                                  (inst - "j" "j!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (same_injected_edge_imp_no_crossings_TCC1 0
  (same_injected_edge_imp_no_crossings_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (same_injected_edge_imp_no_crossings subtype "vertex_injection.j"
    "naturalnumbers.below(vertex_injection.C`num_vertices)"))
  (same_injected_edge_imp_no_crossings_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (same_injected_edge_imp_no_crossings subtype "vertex_injection.j"
    "naturalnumbers.below(vertex_injection.C`num_vertices)")))
 (same_injected_edge_imp_no_crossings 0
  (same_injected_edge_imp_no_crossings-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "segments_parallel_imp_subsegments_parallel")
          ((""
            (inst - "edges_of_polygon(A)(k)" "edges_of_polygon(A)(k)"
             "edges_of_polygon(C)(i)" "edges_of_polygon(C)(j)")
            (("" (rewrite "parallel_refl")
              (("" (assert)
                ((""
                  (use "non_overlapping_parallel_segments_with_endpt")
                  (("" (assert)
                    (("" (use "overlapping_injected_edges_are_equal")
                      (("" (assert)
                        (("" (replace -11 :dir rl)
                          (("" (replace -10 :dir rl)
                            (("" (ground)
                              (("1"
                                (expand "edges_of_polygon" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -11 -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use
                                         "all_injected_vertices_distinct")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst - "i" "j")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "edge_of_polygon?")
                                (("2" (inst?) nil nil))
                                nil)
                               ("3"
                                (expand "edge_of_polygon?")
                                (("3" (inst + "j") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vertex_edges_do_not_cross_TCC1 0
  (injected_vertex_edges_do_not_cross_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "length_injected_vertices_bound") (("" (assert) nil nil))
      nil))
    nil)
   nil shostak
   (injected_vertex_edges_do_not_cross subtype
    "vertex_injection.IV`length" "integers.upfrom(3)"))
  (injected_vertex_edges_do_not_cross_TCC1-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_edges_do_not_cross subtype
    "vertex_injection.IV`length" "integers.upfrom(3)")))
 (injected_vertex_edges_do_not_cross_TCC2 0
  (injected_vertex_edges_do_not_cross_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (expand "uniq_vertex_list?")
      (("" (skeep)
        (("" (use "all_injected_vertices_distinct")
          (("" (ground) (("" (inst?) (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (injected_vertex_edges_do_not_cross subtype
    "vertex_injection.IV`seq"
    "vertex_list.uniq_vertex_list(vertex_injection.IV`length)"))
  (injected_vertex_edges_do_not_cross_TCC2-1 nil 3874128252
   ("" (subtype-tcc) nil nil) nil nil
   (injected_vertex_edges_do_not_cross subtype
    "vertex_injection.IV`seq"
    "vertex_list.uniq_vertex_list(vertex_injection.IV`length)")))
 (injected_vertex_edges_do_not_cross 0
  (injected_vertex_edges_do_not_cross-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin)
      (("" (case "IV`length > 2")
        (("1" (case "uniq_vertex_list?(IV`length)(IV`seq)")
          (("1" (expand "polygon_edges_do_not_cross?")
            (("1" (skeep)
              (("1" (skeep + t)
                (("1" (assert)
                  (("1" (expand "edges_of_polygon" +)
                    (("1" (expand "next_index")
                      (("1"
                        (lemma "injected_edge_subsegment_of_original")
                        (("1"
                          (inst-cp - "A" "B"
                           "edges_of_polygon((# num_vertices := IV`length,
                                                                              vertices := IV`seq #))(i)")
                          (("1"
                            (inst - "A" "B"
                             "edges_of_polygon((# num_vertices := IV`length,
                                                                              vertices := IV`seq #))(j)")
                            (("1" (assert)
                              (("1"
                                (replace -7 :dir rl)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (skeep*)
                                      (("1"
                                        (typepred "A")
                                        (("1"
                                          (expand
                                           "simple_polygon_2d?"
                                           -1)
                                          (("1"
                                            (expand
                                             "polygon_edges_do_not_cross?")
                                            (("1"
                                              (inst - "j!1" "j_1")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (lemma
                                                       "same_injected_edge_imp_no_crossings")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "A"
                                                         "B"
                                                         "q"
                                                         "i"
                                                         "j"
                                                         "j_1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -8
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "segment_endpoint?")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "next_index")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "segment_endpoint_subsegment_endpoint")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "q"
                                                       "edges_of_polygon((# num_vertices := IV`length,
                                                                                                                            vertices := IV`seq #))(i)"
                                                       "edges_of_polygon(A)(j!1)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "segment_endpoint?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "segment_endpoint_subsegment_endpoint")
                                                    (("3"
                                                      (inst
                                                       -
                                                       "q"
                                                       "edges_of_polygon((# num_vertices := IV`length,
                                                                                                                            vertices := IV`seq #))(i)"
                                                       "edges_of_polygon(A)(j!1)")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "segment_endpoint?")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (lemma
                                                     "point_on_subsegment")
                                                    (("4"
                                                      (inst
                                                       -
                                                       "q"
                                                       "edges_of_polygon((# num_vertices := IV`length,
                                                                                                                                        vertices := IV`seq #))
                                                                                                                                    (j)"
                                                       "edges_of_polygon(A)(j_1)")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "point_on_subsegment")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "q"
                                                     "edges_of_polygon((# num_vertices := IV`length,
                                                                                                                        vertices := IV`seq #))
                                                                                                                    (i)"
                                                     "edges_of_polygon(A)(j!1)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "edge_of_polygon?")
                                      (("2" (inst + "i") nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "uniq_vertex_list?")
            (("2" (use "all_injected_vertices_distinct")
              (("2" (assert)
                (("2" (skeep)
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "length_injected_vertices_bound")
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (injected_vertices_form_simple_polygon 0
  (injected_vertices_form_simple_polygon-1 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (expand "simple_polygon_2d?")
        (("" (use "injected_vertex_edges_do_not_cross")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)))

