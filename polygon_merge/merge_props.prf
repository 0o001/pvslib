(merge_props
 (contains_imp_topleft_first_vtx 0
  (contains_imp_topleft_first_vtx-1 nil 3874129020
   ("" (skeep)
    (("" (expand "first_vertex_merge")
      (("" (apply (repeat (lift-if)))
        ((""
          (case "point_outside_polygon?(B`vertices(topleft_vertex_idx(B)), A)")
          (("1" (hide +)
            (("1" (expand "polygon_contained?")
              (("1" (inst?)
                (("1" (use "point_out_not_in")
                  (("1" (assert)
                    (("1" (ground)
                      (("1" (use "perimeter_not_outside")
                        (("1" (ground) nil nil)) nil)
                       ("2" (use "vertex_on_perimeter")
                        (("2" (assert)
                          (("2" (expand "vertex?")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "point_outside_polygon?")
            (("2"
              (inst +
               "(# body := (# length := 1, seq := lambda (i: below(1)): B`vertices(topleft_vertex_idx(B)) #), tail := (# x := -1, y := 0 #) #)")
              (("1" (expand "serp_ray_outside?")
                (("1" (split 1)
                  (("1" (skeep) nil nil)
                   ("2" (skeep)
                    (("2" (lemma "topleft_vertex_bounds_all_points")
                      (("2"
                        (inst - "A"
                         "A`vertices(topleft_vertex_idx(A))")
                        (("1" (assert)
                          (("1" (invoke (inst - "%1") (! -2 1))
                            (("1" (expand "+" -1)
                              (("1"
                                (expand "*" -1)
                                (("1"
                                  (lemma "leftmost_is_topleft_x")
                                  (("1"
                                    (inst-cp - "A")
                                    (("1"
                                      (inst - "B")
                                      (("1"
                                        (split -3)
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (lemma
                                               "topmost_is_topleft_y")
                                              (("2"
                                                (inst-cp - "A")
                                                (("2"
                                                  (inst - "B")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "vertex?")
                          (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) nil nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contains_imp_topleft_first_vtx_Am 0
  (contains_imp_topleft_first_vtx_Am-1 nil 3874129020
   ("" (skeep*)
    (("" (use "contains_imp_topleft_first_vtx")
      (("" (use "injected_topleft_vertex_same") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contained_next_merge_vtx_eq_next_Am_vtx_TCC1 0
  (contained_next_merge_vtx_eq_next_Am_vtx_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (contained_next_merge_vtx_eq_next_Am_vtx subtype "merge_props.B"
    "(injection_props.merge_pre_condition(merge_props.A))"))
  (contained_next_merge_vtx_eq_next_Am_vtx_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (contained_next_merge_vtx_eq_next_Am_vtx subtype "merge_props.B"
    "(injection_props.merge_pre_condition(merge_props.A))")))
 (contained_next_merge_vtx_eq_next_Am_vtx_TCC2 0
  (contained_next_merge_vtx_eq_next_Am_vtx_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (expand "point_AB_vtx?")
      (("" (flatten)
        (("" (expand "vertex?") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (contained_next_merge_vtx_eq_next_Am_vtx subtype
    "merge_props.Am`vertices(merge_props.i)"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))"))
  (contained_next_merge_vtx_eq_next_Am_vtx_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (contained_next_merge_vtx_eq_next_Am_vtx subtype
    "merge_props.Am`vertices(merge_props.i)"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))")))
 (contained_next_merge_vtx_eq_next_Am_vtx 0
  (contained_next_merge_vtx_eq_next_Am_vtx-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "next_merge_vertex")
      (("" (lift-if)
        (("" (use "vertex_find_index")
          (("" (split -1)
            (("1" (rewrite* "find_index_self_index")
              (("1" (ground)
                (("1"
                  (name-replace "j" "find_index(Bm, Am`vertices(i))"
                   :hide? nil)
                  (("1" (use "point_between_rays_rotate_left")
                    (("1" (assert)
                      (("1" (use "find_index_self")
                        (("1" (assert)
                          (("1" (replace -3)
                            (("1" (expand "edges_of_polygon")
                              (("1"
                                (ground)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide 3)
                                    (("1"
                                      (use
                                       "injected_only_vertex_intersections")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "polygon_contained?")
                                            (("1"
                                              (copy -8)
                                              (("1"
                                                (inst
                                                 -
                                                 "Bm`vertices(next_index(Bm, j))")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (lemma
                                                     "inside_endpoint_between_rays")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "Bm"
                                                       "Am"
                                                       "i"
                                                       "edges_of_polygon(Bm)(j)")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "edges_of_polygon")
                                                          (("1"
                                                            (expand
                                                             "reverse_segment")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "edges_of_polygon")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (name-replace
                                                     "e"
                                                     "edges_of_polygon(Bm)(j)")
                                                    (("2"
                                                      (name-replace
                                                       "c"
                                                       "min(vertex_wedge_radius(Am), length(e))/2")
                                                      (("2"
                                                        (name-replace
                                                         "r"
                                                         "e`p1 + c * ^(e`p2 - e`p1)")
                                                        (("1"
                                                          (lemma
                                                           "in_wedge_or_on_edge")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "r"
                                                             "Am"
                                                             "i")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (use
                                                                 "all_wedge_points_outside")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -14
                                                                     "r")
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (use
                                                                         "point_out_not_in")
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "perimeter_not_outside")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "point_on_polygon_perimeter?")
                                                                        (("3"
                                                                          (inst
                                                                           +
                                                                           "e")
                                                                          (("1"
                                                                            (rewrite
                                                                             "point_on_segment_has_norm_offset"
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "c")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -5
                                                                             1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "j")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "all_wedge_points_inside")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "inside_point_on_segment_between_rays")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "Bm"
                                                                       "Am"
                                                                       "r"
                                                                       "Bm`vertices(next_index(Bm, j))"
                                                                       "i"
                                                                       "edges_of_polygon(Bm)(j)")
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (rewrite
                                                                           "between_rays_equiv")
                                                                          (("1"
                                                                            (rewrite
                                                                             "reverse_reverse_segment")
                                                                            (("1"
                                                                              (expand
                                                                               "edges_of_polygon")
                                                                              (("1"
                                                                                (expand
                                                                                 "reverse_segment")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("2"
                                                                            (replace
                                                                             -4
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (replace
                                                                               -6
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "add_move_left")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("3"
                                                                            (lemma
                                                                             "vertex_neq_next")
                                                                            (("3"
                                                                              (inst
                                                                               -
                                                                               "Bm"
                                                                               "j")
                                                                              (("3"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("4"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (replace
                                                                           -5)
                                                                          (("5"
                                                                            (rewrite
                                                                             "point_on_segment_has_norm_offset"
                                                                             1)
                                                                            (("5"
                                                                              (inst
                                                                               +
                                                                               "c")
                                                                              (("5"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("6"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("6"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("6"
                                                                              (expand
                                                                               "point_on_arb_ray?")
                                                                              (("6"
                                                                                (expand
                                                                                 "^")
                                                                                (("6"
                                                                                  (inst
                                                                                   +
                                                                                   "norm(Bm`vertices(next_index(Bm, j)) - Bm`vertices(j))")
                                                                                  (("1"
                                                                                    (real-props)
                                                                                    (("1"
                                                                                      (name-replace
                                                                                       "next"
                                                                                       "Bm`vertices(next_index(Bm, j))")
                                                                                      (("1"
                                                                                        (cancel-add
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "j")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (inst
                                                                 -7
                                                                 "edges_of_polygon(Am)(i)")
                                                                (("3"
                                                                  (expand
                                                                   "only_vertex_intersections?"
                                                                   -7)
                                                                  (("3"
                                                                    (inst
                                                                     -7
                                                                     "edges_of_polygon(Bm)(j)")
                                                                    (("3"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("2"
                                                                          (expand
                                                                           "reverse_segment")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (inst
                                                                         -
                                                                         "Bm`vertices(next_index(Bm, j))")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "segment_endpoint?")
                                                                            (("3"
                                                                              (expand
                                                                               "edges_of_polygon")
                                                                              (("3"
                                                                                (ground)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "vertex_neq_next")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "Bm"
                                                                                     "j")
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   1
                                                                                   4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "are_segments_overlapping?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "Bm`vertices(j)"
                                                                                       "r")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -3
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -5
                                                                                               -3
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "add_move_left")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "point_on_segment?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (rewrite
                                                                                             "point_on_segment_has_norm_offset"
                                                                                             1)
                                                                                            (("3"
                                                                                              (inst
                                                                                               +
                                                                                               "c")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (expand
                                                                                             "point_on_segment?")
                                                                                            (("4"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (inst
                                                                 -7
                                                                 "edges_of_polygon(Am)(prev_index(Am, i))")
                                                                (("4"
                                                                  (expand
                                                                   "only_vertex_intersections?"
                                                                   -7)
                                                                  (("4"
                                                                    (inst
                                                                     -7
                                                                     "edges_of_polygon(Bm)(j)")
                                                                    (("4"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("2"
                                                                          (expand
                                                                           "reverse_segment")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (inst
                                                                         -
                                                                         "Bm`vertices(next_index(Bm, j))")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "segment_endpoint?")
                                                                            (("3"
                                                                              (expand
                                                                               "edges_of_polygon")
                                                                              (("3"
                                                                                (ground)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "vertex_neq_next")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "Bm"
                                                                                     "j")
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   1
                                                                                   4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "are_segments_overlapping?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "Bm`vertices(j)"
                                                                                       "r")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -3
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5
                                                                                             -3
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "add_move_left")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "point_on_segment?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "0")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (rewrite
                                                                                           "point_on_segment_has_norm_offset"
                                                                                           1)
                                                                                          (("3"
                                                                                            (inst
                                                                                             +
                                                                                             "c")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (expand
                                                                                           "point_on_segment?")
                                                                                          (("4"
                                                                                            (inst
                                                                                             +
                                                                                             "1")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (replace
                                                                 -1
                                                                 +
                                                                 :dir
                                                                 rl)
                                                                (("5"
                                                                  (replace
                                                                   -3
                                                                   +
                                                                   :dir
                                                                   rl)
                                                                  (("5"
                                                                    (expand
                                                                     "edges_of_polygon")
                                                                    (("5"
                                                                      (replace
                                                                       -7
                                                                       :dir
                                                                       rl)
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (expand
                                                                           "abs")
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (use
                                                       "vertex_on_perimeter")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "vertex?")
                                                          (("3"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "vertex_neq_prev")
                                  (("2"
                                    (inst - "Am" "i")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "vertex?") (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contained_next_merge_vtx_eq_next_Am_topleft_TCC1 0
  (contained_next_merge_vtx_eq_next_Am_topleft_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (expand "point_AB_vtx?")
      (("" (flatten)
        (("" (expand "vertex?") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (contained_next_merge_vtx_eq_next_Am_topleft subtype
    "merge_props.Am`vertices(merge_props.Am_0)"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))"))
  (contained_next_merge_vtx_eq_next_Am_topleft_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (contained_next_merge_vtx_eq_next_Am_topleft subtype
    "merge_props.Am`vertices(merge_props.Am_0)"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))")))
 (contained_next_merge_vtx_eq_next_Am_topleft 0
  (contained_next_merge_vtx_eq_next_Am_topleft-1 nil 3874129020
   ("" (skeep*)
    (("" (assert)
      (("" (expand "next_merge_vertex")
        (("" (lift-if)
          (("" (use "vertex_find_index")
            (("" (split -1)
              (("1" (rewrite* "find_index_self_index")
                (("1" (ground)
                  (("1"
                    (name-replace "j"
                     "find_index(Bm, Am`vertices(topleft_vertex_idx(Am)))"
                     :hide? nil)
                    (("1" (typepred "Am")
                      (("1" (expand "ccw_vertex_order?")
                        (("1" (expand "point_between_edges?")
                          (("1" (expand "prev_0")
                            (("1" (rewrite "between_rays_equiv")
                              (("1"
                                (expand "edges_of_polygon" -2 1)
                                (("1"
                                  (expand "reverse_segment")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (name-replace
                                       "u"
                                       "Am`vertices(topleft_vertex_idx(Am))"
                                       :hide?
                                       nil)
                                      (("1"
                                        (equate
                                         "u - (# x := 1, y := 0 #)"
                                         "u + (# x := -1, y := 0 #)")
                                        (("1"
                                          (use "find_index_self")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -5)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon"
                                                 2
                                                 1)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (use
                                                     "injected_only_vertex_intersections")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "contained_imp_endpoint_between_rays")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "Bm"
                                                             "Am"
                                                             "topleft_vertex_idx(Am)"
                                                             "edges_of_polygon(Bm)(j)")
                                                            (("1"
                                                              (expand
                                                               "edges_of_polygon"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (name-replace
                                                                           "tli"
                                                                           "topleft_vertex_idx(Am)"
                                                                           :hide?
                                                                           nil)
                                                                          (("1"
                                                                            (lemma
                                                                             "interpolate_point_between_rays_4")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "Bm`vertices(next_index(Bm, j))"
                                                                               "u + (# x := -1, y := 0 #)"
                                                                               "edges_of_polygon(Am)(tli)"
                                                                               _)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "edges_of_polygon"
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "edges_of_polygon")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "edges_of_polygon")
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "vertex_neq_next")
                                                                                      (("3"
                                                                                        (inst
                                                                                         -
                                                                                         "Bm"
                                                                                         "j")
                                                                                        (("3"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (expand
                                                                                     "edges_of_polygon")
                                                                                    (("4"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        -7))
                                                                                      (("4"
                                                                                        (grind)
                                                                                        (("4"
                                                                                          (decompose-equality
                                                                                           -2)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (expand
                                                                                     "edges_of_polygon")
                                                                                    (("5"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "vertex_neq_prev")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "Am"
                                                                                     "tli")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           (-3
                                                                            1))
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_prefix_contained_rotated_vertices_A_TCC1 0
  (merge_prefix_contained_rotated_vertices_A_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix_contained_rotated_vertices_A subtype "merge_props.B"
    "(injection_props.merge_pre_condition(merge_props.A))"))
  (merge_prefix_contained_rotated_vertices_A_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_prefix_contained_rotated_vertices_A subtype "merge_props.B"
    "(injection_props.merge_pre_condition(merge_props.A))")))
 (merge_prefix_contained_rotated_vertices_A_TCC2 0
  (merge_prefix_contained_rotated_vertices_A_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (use "first_vertex_AB") (("" (ground) nil nil)) nil)) nil)
   nil shostak
   (merge_prefix_contained_rotated_vertices_A subtype
    "merge_props.first_vtx"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))"))
  (merge_prefix_contained_rotated_vertices_A_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_prefix_contained_rotated_vertices_A subtype
    "merge_props.first_vtx"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))")))
 (merge_prefix_contained_rotated_vertices_A_TCC3 0
  (merge_prefix_contained_rotated_vertices_A_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix_contained_rotated_vertices_A subtype "merge_props.i"
    "naturalnumbers.below(merge_props.Am`num_vertices)"))
  (merge_prefix_contained_rotated_vertices_A_TCC3-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_prefix_contained_rotated_vertices_A subtype "merge_props.i"
    "naturalnumbers.below(merge_props.Am`num_vertices)")))
 (merge_prefix_contained_rotated_vertices_A_TCC4 0
  (merge_prefix_contained_rotated_vertices_A_TCC4-2 nil 3874129020
   ("" (skeep*) (("" (assert) (("" (ground) nil nil)) nil)) nil) nil
   shostak
   (merge_prefix_contained_rotated_vertices_A subtype
    "LAMBDA (i: naturalnumbers.upto(merge_props.k)): vertex_list.rotated_vertices(merge_props.Am`num_vertices)(merge_props.Am`vertices, topleft_vertex.topleft_vertex_idx(merge_props.Am))(i)"
    "[below[merge_prefix(Am, Bm, first_vtx, k)`length] -> point_2d]"))
  (merge_prefix_contained_rotated_vertices_A_TCC4-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_prefix_contained_rotated_vertices_A subtype
    "LAMBDA (i: naturalnumbers.upto(merge_props.k)): vertex_list.rotated_vertices(merge_props.Am`num_vertices)(merge_props.Am`vertices, topleft_vertex.topleft_vertex_idx(merge_props.Am))(i)"
    "[below[merge_prefix(Am, Bm, first_vtx, k)`length] -> point_2d]")))
 (merge_prefix_contained_rotated_vertices_A 0
  (merge_prefix_contained_rotated_vertices_A-1 nil 3874129020
   ("" (skeep)
    (("" (induct "k")
      (("1" (skeep)
        (("1" (expand "merge_prefix")
          (("1" (expand "singleton_seq")
            (("1" (apply-extensionality :hide? t)
              (("1" (equate "x!1" "0" (assert))
                (("1" (expand "rotated_vertices")
                  (("1" (rewrite "rem_mod")
                    (("1" (use "contains_imp_topleft_first_vtx")
                      (("1" (use "injected_topleft_vertex_same")
                        (("1" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2" (inst?)
          (("2" (inst?)
            (("2" (ground)
              (("2" (apply-extensionality :hide? t)
                (("1" (typepred "x!1")
                  (("1" (assert)
                    (("1" (expand "merge_prefix" +)
                      (("1" (expand "o")
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (replace -3)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (equate "x!1 - j - 1" "0" (assert))
                                (("2"
                                  (expand "singleton_seq")
                                  (("2"
                                    (expand "seq_prev_vtx")
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (replace -2 :hide? t)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "rotated_vertices")
                                            (("2"
                                              (ground)
                                              (("1"
                                                (use
                                                 "contained_next_merge_vtx_eq_next_Am_vtx")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (equate
                                                     "x!1"
                                                     "1 + j"
                                                     (assert))
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (rewrite
                                                         "rem_plus_1_eq_next_index"
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "rem_minus_1_eq_prev_index"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "rem_sum2")
                                                            (("1"
                                                              (rewrite
                                                               "rem_diff1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "injected_polygons_contained")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (equate
                                                 "x!1"
                                                 "1 + j"
                                                 (assert))
                                                (("2"
                                                  (equate
                                                   "j"
                                                   "0"
                                                   (assert))
                                                  (("2"
                                                    (rewrite "rem_mod")
                                                    (("2"
                                                      (use
                                                       "contained_next_merge_vtx_eq_next_Am_topleft")
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (rewrite
                                                           "rem_plus_1_eq_next_index"
                                                           :dir
                                                           rl)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "injected_polygons_contained")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (skeep*)
          (("3" (assert)
            (("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (skeep)
          (("4" (hide-all-but (-1 1)) (("4" (grind) nil nil)) nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skeep)
          (("5" (use "first_vertex_AB") (("5" (ground) nil nil)) nil))
          nil))
        nil)
       ("6" (hide 2)
        (("6" (typepred "B")
          (("6" (expand "ccw_merge_pre_condition")
            (("6" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contained_next_merge_vtx_is_first_TCC1 0
  (contained_next_merge_vtx_is_first_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (expand "point_AB_vtx?")
      (("" (flatten)
        (("" (expand "vertex?") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (contained_next_merge_vtx_is_first subtype
    "merge_props.Am`vertices(modulo_arithmetic.rem(merge_props.Am`num_vertices)((number_fields.-)(topleft_vertex.topleft_vertex_idx(merge_props.Am), 1)))"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))"))
  (contained_next_merge_vtx_is_first_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (contained_next_merge_vtx_is_first subtype
    "merge_props.Am`vertices(modulo_arithmetic.rem(merge_props.Am`num_vertices)((number_fields.-)(topleft_vertex.topleft_vertex_idx(merge_props.Am), 1)))"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))")))
 (contained_next_merge_vtx_is_first 0
  (contained_next_merge_vtx_is_first-1 nil 3874129020
   ("" (skeep*)
    (("" (use "contained_next_merge_vtx_eq_next_Am_vtx")
      (("" (assert)
        (("" (assert)
          (("" (inst?)
            (("" (rewrite "rem_minus_1_eq_prev_index" :dir rl)
              (("" (rewrite "rem_diff1")
                (("" (replace -1 :hide? t)
                  (("" (rewrite "rem_plus_1_eq_next_index" :dir rl)
                    (("" (rewrite "rem_sum2")
                      (("" (rewrite "rem_mod")
                        (("" (use "contains_imp_topleft_first_vtx_Am")
                          (("" (ground)
                            (("" (use "injected_polygons_contained")
                              (("" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contained_next_merge_vtx_neq_first_TCC1 0
  (contained_next_merge_vtx_neq_first_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (contained_next_merge_vtx_neq_first subtype
    "(number_fields.-)(merge_props.L, 1)"
    "below[merge_seq(A, B)`length]"))
  (contained_next_merge_vtx_neq_first_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (contained_next_merge_vtx_neq_first subtype
    "(number_fields.-)(merge_props.L, 1)"
    "below[merge_seq(A, B)`length]")))
 (contained_next_merge_vtx_neq_first_TCC2 0
  (contained_next_merge_vtx_neq_first_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (use "merge_vertex_AB")
      (("" (ground)
        (("" (inst?)
          (("" (use "merge_seq_has_min_length") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (contained_next_merge_vtx_neq_first subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)`seq((number_fields.-)(merge_props.L, 1))"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))"))
  (contained_next_merge_vtx_neq_first_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (contained_next_merge_vtx_neq_first subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)`seq((number_fields.-)(merge_props.L, 1))"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))")))
 (contained_next_merge_vtx_neq_first_TCC3 0
  (contained_next_merge_vtx_neq_first_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (contained_next_merge_vtx_neq_first subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}"))
  (contained_next_merge_vtx_neq_first_TCC3-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (contained_next_merge_vtx_neq_first subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}")))
 (contained_next_merge_vtx_neq_first_TCC4 0
  (contained_next_merge_vtx_neq_first_TCC4-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (contained_next_merge_vtx_neq_first subtype
    "(number_fields.-)(merge_props.L, 1)" "nat"))
  (contained_next_merge_vtx_neq_first_TCC4-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (contained_next_merge_vtx_neq_first subtype
    "(number_fields.-)(merge_props.L, 1)" "nat")))
 (contained_next_merge_vtx_neq_first 0
  (contained_next_merge_vtx_neq_first-1 nil 3874129020
   ("" (skeep*)
    (("" (use "merge_seq_has_min_length")
      (("" (expand "seq_prev_vtx")
        (("" (assert)
          (("" (lemma "extend_merge_prefix_merge_seq")
            (("" (inst?)
              (("" (inst - "L - 1")
                (("" (assert)
                  (("" (inst-cp - "L - 1")
                    (("" (inst - "L - 2")
                      ((""
                        (lemma
                         "merge_prefix_contained_rotated_vertices_A")
                        ((""
                          (inst - "A" "B" "Am" "Bm"
                           "first_vertex_merge(A, B)" "L - 1")
                          (("" (ground)
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "rotated_vertices")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (use
                                         "contained_next_merge_vtx_eq_next_Am_vtx")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -
                                             "rem(Am`num_vertices)(topleft_vertex_idx(Am) - 1 + L)")
                                            (("1"
                                              (lemma
                                               "rem_minus_1_eq_prev_index")
                                              (("1"
                                                (inst
                                                 -
                                                 "Am"
                                                 "rem(Am`num_vertices)(topleft_vertex_idx(Am) - 1 + L)")
                                                (("1"
                                                  (rewrite "rem_diff1")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (rewrite
                                                         "rem_plus_1_eq_next_index"
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "rem_sum2")
                                                          (("1"
                                                            (use
                                                             "contains_imp_topleft_first_vtx")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (use
                                                                 "injected_topleft_vertex_same")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -13)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (typepred
                                                                         "Am`vertices")
                                                                        (("1"
                                                                          (expand
                                                                           "uniq_vertex_list?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "rem(Am`num_vertices)(topleft_vertex_idx(Am) + L)"
                                                                             "topleft_vertex_idx(Am)")
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (ground)
                                                                              (("2"
                                                                                (hide
                                                                                 -5
                                                                                 -6)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "rem_sum_elim1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "Am`num_vertices"
                                                                                     "topleft_vertex_idx(Am)"
                                                                                     "0"
                                                                                     "L")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "rem_mod")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "rem_zero")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "rem_mod")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "injected_polygons_contained")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "injected_polygons_contained")
                              (("2" (ground) nil nil)) nil)
                             ("3"
                              (use "injected_only_vertex_intersections")
                              (("3" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_contained_rotated_vertices_A_TCC1 0
  (merge_seq_contained_rotated_vertices_A_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_contained_rotated_vertices_A subtype "merge_props.B"
    "(injection_props.merge_pre_condition(merge_props.A))"))
  (merge_seq_contained_rotated_vertices_A_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_contained_rotated_vertices_A subtype "merge_props.B"
    "(injection_props.merge_pre_condition(merge_props.A))")))
 (merge_seq_contained_rotated_vertices_A_TCC2 0
  (merge_seq_contained_rotated_vertices_A_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_contained_rotated_vertices_A subtype
    "vertex_list.rotated_vertices(merge_props.Am`num_vertices)(merge_props.Am`vertices, topleft_vertex.topleft_vertex_idx(merge_props.Am))"
    "[below[merge_seq(A, B)`length] -> point_2d]"))
  (merge_seq_contained_rotated_vertices_A_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_contained_rotated_vertices_A subtype
    "vertex_list.rotated_vertices(merge_props.Am`num_vertices)(merge_props.Am`vertices, topleft_vertex.topleft_vertex_idx(merge_props.Am))"
    "[below[merge_seq(A, B)`length] -> point_2d]")))
 (merge_seq_contained_rotated_vertices_A 0
  (merge_seq_contained_rotated_vertices_A-1 nil 3874129020
   ("" (skeep*)
    (("" (use "injected_polygons_contained")
      (("" (replace -2 :dir rl)
        (("" (flatten)
          (("" (hide -1)
            (("" (assert)
              (("" (use "injected_only_vertex_intersections")
                (("" (assert)
                  (("" (flatten)
                    ((""
                      (lemma
                       "merge_prefix_contained_rotated_vertices_A")
                      ((""
                        (inst - "A" "B" "Am" "Bm"
                         "first_vertex_merge(A, B)"
                         "Am`num_vertices - 1")
                        (("" (assert)
                          (("" (split -1)
                            (("1" (case "merge_seq(A, B)`length > 0")
                              (("1"
                                (use "merge_helper_seq")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "Am`num_vertices <= merge_seq(A, B)`length")
                                    (("1"
                                      (inst - "Am`num_vertices - 1")
                                      (("1"
                                        (invoke
                                         (name-replace
                                          "mh"
                                          "%1"
                                          :hide?
                                          nil)
                                         (! -2 r 2))
                                        (("1"
                                          (case-replace
                                           "mh = empty_seq")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (rewrite
                                               "concat_empty_seq")
                                              (("1"
                                                (replace -3 +)
                                                (("1"
                                                  (replace -5 +)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "seq_prev_vtx")
                                            (("2"
                                              (replace -5)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "rotated_vertices"
                                                   -1)
                                                  (("2"
                                                    (expand
                                                     "merge_helper")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (equate
                                                               "rem(Am`num_vertices)
                                (Am`num_vertices + topleft_vertex_idx(Am) - 1)"
                                                               "rem(Am`num_vertices)(topleft_vertex_idx(Am) - 1)")
                                                              (("1"
                                                                (equate
                                                                 "rem(Am`num_vertices)
                                  (Am`num_vertices + topleft_vertex_idx(Am) - 2)"
                                                                 "rem(Am`num_vertices)(topleft_vertex_idx(Am) - 2)")
                                                                (("1"
                                                                  (use
                                                                   "contained_next_merge_vtx_is_first")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "rem_sum1")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "Am`num_vertices"
                                                                       "Am`num_vertices"
                                                                       "topleft_vertex_idx(Am) - 2")
                                                                      (("2"
                                                                        (rewrite
                                                                         "rem_self")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "rem_sum1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "Am`num_vertices"
                                                                     "Am`num_vertices"
                                                                     "topleft_vertex_idx(Am) - 1")
                                                                    (("2"
                                                                      (rewrite
                                                                       "rem_self")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (name-replace
                                         "L"
                                         "merge_seq(A, B)`length"
                                         :hide?
                                         nil)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (use
                                             "merge_seq_vertices_wrap")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skoletin)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (use
                                                     "contained_next_merge_vtx_neq_first")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "merge_seq")
                                  (("2"
                                    (expand "o")
                                    (("2"
                                      (expand "singleton_seq")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_contained_rotated_vertices_B_TCC1 0
  (merge_seq_contained_rotated_vertices_B_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_contained_rotated_vertices_B subtype
    "vertex_list.rotated_vertices(merge_props.Bm`num_vertices)(merge_props.Bm`vertices, topleft_vertex.topleft_vertex_idx(merge_props.Bm))"
    "[below[merge_seq(A, B)`length] -> point_2d]"))
  (merge_seq_contained_rotated_vertices_B_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_contained_rotated_vertices_B subtype
    "vertex_list.rotated_vertices(merge_props.Bm`num_vertices)(merge_props.Bm`vertices, topleft_vertex.topleft_vertex_idx(merge_props.Bm))"
    "[below[merge_seq(A, B)`length] -> point_2d]")))
 (merge_seq_contained_rotated_vertices_B 0
  (merge_seq_contained_rotated_vertices_B-1 nil 3874129020
   ("" (skeep*)
    (("" (lemma "merge_seq_contained_rotated_vertices_A")
      (("" (inst - "B" "A" "Bm" "Am")
        (("1" (lemma "merge_pre_condition_symmetric")
          (("1" (inst - "A" "B")
            (("1" (use "inject_vertices_into_polygon_comm")
              (("1" (assert)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (use "merge_seq_commutative")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "Bm")
          (("2" (expand "ccw_merge_pre_condition")
            (("2" (use "merge_pre_condition_symmetric")
              (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (expand "ccw_merge_pre_condition")
          (("3" (use "merge_pre_condition_symmetric")
            (("3" (assert)
              (("3" (typepred "B")
                (("3" (expand "ccw_merge_pre_condition")
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_not_contained_has_uniq_vertex_list_TCC1 0
  (merge_seq_not_contained_has_uniq_vertex_list_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_not_contained_has_uniq_vertex_list subtype
    "merge_props.B"
    "(injection_props.merge_pre_condition(merge_props.A))"))
  (merge_seq_not_contained_has_uniq_vertex_list_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_not_contained_has_uniq_vertex_list subtype
    "merge_props.B"
    "(injection_props.merge_pre_condition(merge_props.A))")))
 (merge_seq_not_contained_has_uniq_vertex_list 0
  (merge_seq_not_contained_has_uniq_vertex_list-1 nil 3874129020
   ("" (auto-rewrite "sets.member")
    (("" (skeep)
      (("" (skoletin)
        (("" (expand "uniq_vertex_list?")
          (("" (flatten)
            (("" (skeep + t)
              ((""
                (name-replace*
                 ("Am" "inject_vertices_into_polygon(A, B)`1" "Bm"
                  "inject_vertices_into_polygon(A, B)`2"))
                ((""
                  (name-replace*
                   ("IVA" "injected_vertices(A, B, A`num_vertices)"
                    "IVB" "injected_vertices(B, A, B`num_vertices)"))
                  ((""
                    (case "Am = (# num_vertices := IVA`length, vertices := IVA`seq #) and
                                                                                                                                                                         Bm = (# num_vertices := IVB`length, vertices := IVB`seq #)")
                    (("1"
                      (case "ccw_vertex_order?(Am) and ccw_merge_pre_condition(Am)(Bm)")
                      (("1" (flatten)
                        (("1" (lemma "merge_path_props")
                          (("1" (inst - "A" "B" "Am" "Bm" "M")
                            (("1"
                              (lemma
                               "merge_seq_only_vertex_intersections")
                              (("1"
                                (inst - "A" "B" "Am" "Bm")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (name-replace
                                       "j0"
                                       "min[below(M`length)]({j: below(M`length) | exists (l: nat): l < j and M`seq(j) = M`seq(l)})"
                                       :hide?
                                       nil)
                                      (("1"
                                        (name-replace
                                         "i0"
                                         "choose[below(M`length)]({i: below(M`length) | i < j0 and M`seq(i) = M`seq(j0)})"
                                         :hide?
                                         nil)
                                        (("1"
                                          (name-replace
                                           "C"
                                           "(# num_vertices := j0 - i0,
                                                                                                                                                                                                                                                                     vertices := lambda (k: below(j0 - i0)): M`seq(i0 + k) #)")
                                          (("1"
                                            (case
                                             "uniq_vertex_list?(j0 - i0)(C`vertices)")
                                            (("1"
                                              (case
                                               "forall (k: below(j0 - i0)): C`vertices(k) = M`seq(i0 + k)")
                                              (("1"
                                                (case "j0 - i0 > 2")
                                                (("1"
                                                  (case
                                                   "simple_polygon_2d?(C)")
                                                  (("1"
                                                    (case
                                                     "forall (k: below(j0 - i0)): edges_of_polygon(C)(k) = (# p1 := M`seq(i0 + k), p2 := M`seq(i0 + 1 + k) #)")
                                                    (("1"
                                                      (case "i0 = 0")
                                                      (("1"
                                                        (lemma
                                                         "merge_helper_seq")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "A"
                                                           "B"
                                                           "Am"
                                                           "Bm")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "j0 - 1")
                                                              (("1"
                                                                (typepred
                                                                 "i0")
                                                                (("1"
                                                                  (replace
                                                                   -28
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (typepred
                                                                     "j0")
                                                                    (("1"
                                                                      (replace
                                                                       -7
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "merge_helper"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "empty_seq")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6
                                                                                       -5
                                                                                       :hide?
                                                                                       t)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "o")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "merge_helper")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "o")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton_seq")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -6)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "merge_prefix_initial_element")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "point_on_polygon_perimeter?(C)(M`seq(0))")
                                                        (("1"
                                                          (expand
                                                           "point_on_polygon_perimeter?")
                                                          (("1"
                                                            (skeep - t)
                                                            (("1"
                                                              (expand
                                                               "edge_of_polygon?")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     -6
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       -6
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "next_index")
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lemma
                                                                             "merge_seq_vertices_always_endpoints")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "A"
                                                                               "B"
                                                                               "Am"
                                                                               "Bm"
                                                                               "M"
                                                                               "e"
                                                                               "i!1 + i0"
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "i0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "j0")
                                                                                          (("1"
                                                                                            (split
                                                                                             -9)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "i!1 + i0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -
                                                                                               "i0")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "j0")
                                                                                        (("2"
                                                                                          (split
                                                                                           -5)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "i!1 + i0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -
                                                                                             "i!1 + i0 + 1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "next_index")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "point_outside_polygon?(M`seq(0), C)")
                                                          (("1"
                                                            (case
                                                             "point_outside_polygon?(M`seq(i0 - 1), C)")
                                                            (("1"
                                                              (inst-cp
                                                               -13
                                                               "i0 - 1")
                                                              (("1"
                                                                (split
                                                                 -14)
                                                                (("1"
                                                                  (lemma
                                                                   "merge_seq_uniq_case_Am")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "A"
                                                                     "B"
                                                                     "Am"
                                                                     "Bm"
                                                                     "M"
                                                                     "i0"
                                                                     "j0"
                                                                     "C")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "merge_seq_uniq_case_Am")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "B"
                                                                     "A"
                                                                     "Bm"
                                                                     "Am"
                                                                     "M"
                                                                     "i0"
                                                                     "j0"
                                                                     "C")
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (use
                                                                         "inject_vertices_into_polygon_comm")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "merge_seq_commutative")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (use
                                                                         "merge_seq_commutative")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (use
                                                                         "merge_seq_commutative")
                                                                        (("4"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "ccw_merge_pre_condition")
                                                                      (("3"
                                                                        (use
                                                                         "merge_pre_condition_symmetric")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (expand
                                                                       "ccw_merge_pre_condition")
                                                                      (("4"
                                                                        (use
                                                                         "merge_pre_condition_symmetric")
                                                                        (("4"
                                                                          (typepred
                                                                           "B")
                                                                          (("4"
                                                                            (expand
                                                                             "ccw_merge_pre_condition")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "point_out_not_in")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "M`seq(i0 - 1)"
                                                                 "C")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "point_on_polygon_perimeter?")
                                                                    (("1"
                                                                      (skeep
                                                                       -
                                                                       t)
                                                                      (("1"
                                                                        (lemma
                                                                         "merge_seq_vertices_always_endpoints")
                                                                        (("1"
                                                                          (expand
                                                                           "edge_of_polygon?"
                                                                           -2)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (rewrite
                                                                               -5)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "A"
                                                                                 "B"
                                                                                 "Am"
                                                                                 "Bm"
                                                                                 "M"
                                                                                 "e"
                                                                                 "i!1 + i0"
                                                                                 "i0 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "j0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i!1 + i0")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "i0 - 1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "j0")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "1 + i!1 + i0")
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (equate
                                                                                             "1 + i!1 + i0"
                                                                                             "j0"
                                                                                             (assert))
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "adj_merge_seq_vertices_distinct")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "A"
                                                                                                 "B"
                                                                                                 "Am"
                                                                                                 "Bm"
                                                                                                 "M")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "i0 - 1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             +
                                                                                             "i0 - 1")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "seq_in_out_intersection_vertex_exists")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "M"
                                                                       "C"
                                                                       "i0 - 1"
                                                                       "0")
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (skeep
                                                                           -
                                                                           t)
                                                                          (("1"
                                                                            (expand
                                                                             "vertex?")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (rewrite
                                                                                 -9)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "j0")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "i!1 + i0")
                                                                                    (("1"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "k")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep
                                                                           +
                                                                           t)
                                                                          (("2"
                                                                            (expand
                                                                             "seq_only_vertex_intersections?")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (inst
                                                                                 -14
                                                                                 "i!1")
                                                                                (("2"
                                                                                  (split
                                                                                   -14)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -13
                                                                                     "(# p1 := M`seq(i!1), p2 := M`seq(1 + i!1) #)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "edge_of_polygon?")
                                                                                      (("1"
                                                                                        (skeep
                                                                                         -2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -13
                                                                                           "i0 + i!2")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "edges_of_polygon")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-8
                                                                                                  -13
                                                                                                  -26
                                                                                                  1))
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -3
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (equate
                                                                                                         "M`seq(next_index(C, i!2) + i0)"
                                                                                                         "M`seq(1 + (i0 + i!2))")
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "same_edge_or_vertex_intersection_symm")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "adj_merge_seq_vertices_distinct")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "A"
                                                                                                               "B"
                                                                                                               "Am"
                                                                                                               "Bm"
                                                                                                               "M")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "i!2 + i0")
                                                                                                                  (("2"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (lemma
                                                                                                             "adj_merge_seq_vertices_distinct")
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "A"
                                                                                                               "B"
                                                                                                               "Am"
                                                                                                               "Bm"
                                                                                                               "M")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "i!1")
                                                                                                                  (("3"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "adj_merge_seq_vertices_distinct")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "A"
                                                                                         "B"
                                                                                         "Am"
                                                                                         "Bm"
                                                                                         "M")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -14
                                                                                     "(# p1 := M`seq(i!1), p2 := M`seq(1 + i!1) #)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "edge_of_polygon?")
                                                                                      (("1"
                                                                                        (skeep
                                                                                         -2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -14
                                                                                           "i0 + i!2")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "edges_of_polygon")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 (-8
                                                                                                  -14
                                                                                                  -26
                                                                                                  1))
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -3
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (equate
                                                                                                         "M`seq(next_index(C, i!2) + i0)"
                                                                                                         "M`seq(1 + (i0 + i!2))")
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "same_edge_or_vertex_intersection_symm")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "adj_merge_seq_vertices_distinct")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "A"
                                                                                                               "B"
                                                                                                               "Am"
                                                                                                               "Bm"
                                                                                                               "M")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "i!2 + i0")
                                                                                                                  (("2"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (lemma
                                                                                                             "adj_merge_seq_vertices_distinct")
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "A"
                                                                                                               "B"
                                                                                                               "Am"
                                                                                                               "Bm"
                                                                                                               "M")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "i!1")
                                                                                                                  (("3"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "adj_merge_seq_vertices_distinct")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "A"
                                                                                         "B"
                                                                                         "Am"
                                                                                         "Bm"
                                                                                         "M")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case-replace
                                                                           "i0 = 1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (equate
                                                                             "i0"
                                                                             "2"
                                                                             (assert))
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "in_out_have_crossing_on_subsegment")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "C"
                                                                                   "M`seq(1)"
                                                                                   "M`seq(0)")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "point_on_polygon_perimeter?")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "point_on_reverse_segment")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "v"
                                                                                               "(# p1 := M`seq(1), p2 := M`seq(0) #)")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "reverse_segment")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -16
                                                                                                     "0")
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -16)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -15
                                                                                                         "(# p1 := M`seq(0), p2 := M`seq(1) #)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "seq_only_vertex_intersections?"
                                                                                                           -15)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "e")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "edge_of_polygon?"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -16
                                                                                                                   "i0 + i!1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "same_edge_or_vertex_intersection?")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "j0")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "i!1 + i0")
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "0")
                                                                                                                              (("1"
                                                                                                                                (ground)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "reverse_segment")
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "j0")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "i!1 + i0")
                                                                                                                            (("2"
                                                                                                                              (ground)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "1")
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "v")
                                                                                                                        (("3"
                                                                                                                          (ground)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "segment_endpoint?")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "e")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "e")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   -10)
                                                                                                                                  (("1"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (rewrite
                                                                                                                             -8)
                                                                                                                            (("2"
                                                                                                                              (ground)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -16
                                                                                                         "(# p1 := M`seq(0), p2 := M`seq(1 + 0) #)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "seq_only_vertex_intersections?"
                                                                                                           -16)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "e")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "edge_of_polygon?"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -17
                                                                                                                   "i0 + i!1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "same_edge_or_vertex_intersection?")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "j0")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "i!1 + i0")
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "0")
                                                                                                                              (("1"
                                                                                                                                (ground)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "reverse_segment")
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "j0")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "i!1 + i0")
                                                                                                                            (("2"
                                                                                                                              (ground)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "1")
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "v")
                                                                                                                        (("3"
                                                                                                                          (ground)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "segment_endpoint?")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "e")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "e")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   -10)
                                                                                                                                  (("1"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (rewrite
                                                                                                                             -8)
                                                                                                                            (("2"
                                                                                                                              (ground)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (lemma
                                                                         "ccw_shared_edges_imp_ccw")
                                                                        (("3"
                                                                          (inst
                                                                           -
                                                                           "A"
                                                                           "B"
                                                                           "C"
                                                                           "M"
                                                                           "i0")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (rewrite
                                                                                 -6)
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "adj_merge_seq_vertices_distinct")
                                                                                    (("3"
                                                                                      (inst
                                                                                       -
                                                                                       "A"
                                                                                       "B"
                                                                                       "Am"
                                                                                       "Bm"
                                                                                       "M")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -
                                                                   "i0 - 1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "point_outside_polygon?")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "(# body := (# length := 1, seq := lambda (i: below(1)): M`seq(0) #), tail := (-1, 0) #)")
                                                              (("1"
                                                                (expand
                                                                 "serp_ray_outside?")
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (skeep)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (case-replace
                                                                       "d = 0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "forall (k: below(C`num_vertices)): M`seq(0)`x <= C`vertices(k)`x")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "topleft_vertex_idx(C)")
                                                                          (("1"
                                                                            (lemma
                                                                             "topleft_vertex_bounds_all_points")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "C"
                                                                               "C`vertices(topleft_vertex_idx(C))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "M`seq(0) + d * (# x := -1, y := 0 #)")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      1))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "vertex?")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "M`seq(0) = first_vertex_merge(A, B)")
                                                                          (("1"
                                                                            (skeep
                                                                             +
                                                                             t)
                                                                            (("1"
                                                                              (rewrite
                                                                               -7
                                                                               1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "merge_vertex_AB")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "A"
                                                                                   "B"
                                                                                   "Am"
                                                                                   "Bm"
                                                                                   "M")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -
                                                                                       "0")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i0 + k")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "point_AB_vtx?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "first_vertex_merge")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4
                                                                                               1
                                                                                               :hide?
                                                                                               t)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (lift-if)))
                                                                                                (("1"
                                                                                                  (rewrite*
                                                                                                   "leftmost_is_topleft_x")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "injected_topleft_vertex_same")
                                                                                                    (("1"
                                                                                                      (inst-cp
                                                                                                       -
                                                                                                       "A"
                                                                                                       "B"
                                                                                                       "Am"
                                                                                                       "Bm")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "B"
                                                                                                         "A"
                                                                                                         "Bm"
                                                                                                         "Am")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "leftmost_has_min_x")
                                                                                                              (("1"
                                                                                                                (inst-cp
                                                                                                                 -
                                                                                                                 "Am"
                                                                                                                 "Am`vertices(topleft_vertex_idx(Am))")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "Bm"
                                                                                                                   "Bm`vertices(topleft_vertex_idx(Bm))")
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -5)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "vertex?")
                                                                                                                      (("1"
                                                                                                                        (skeep)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -3
                                                                                                                           "i!1")
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "vertex?")
                                                                                                                      (("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -2
                                                                                                                           "i!1")
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "inject_vertices_into_polygon_comm")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (rewrite
                                                                                                           "merge_pre_condition_symmetric")
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "B")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "ccw_merge_pre_condition")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -24
                                                                             1)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "merge_seq")
                                                                                (("2"
                                                                                  (expand
                                                                                   "singleton_seq")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "o")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite*
                                                             -3
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "next_index")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "next_index"
                                                               1)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "simple_polygon_2d?")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "merge_subseq_edges_do_not_cross")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "A"
                                                           "B"
                                                           "i0"
                                                           "j0 - 1")
                                                          (("2"
                                                            (skoletin)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "(# num_vertices := M_1`length,
                                                                                                                                                                                                                                                                                                                                                                                                                             vertices := M_1`seq #) = C")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "min")
                                                                        (("1"
                                                                          (expand
                                                                           "uniq_vertex_list?")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -6
                                                                               "i!1"
                                                                               "j!1")
                                                                              (("1"
                                                                                (rewrite
                                                                                 -5
                                                                                 -6)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   -5
                                                                                   -6)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "^")
                                                                      (("1"
                                                                        (expand
                                                                         "min")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("2"
                                                                      (replace
                                                                       -6
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "^"
                                                                           1)
                                                                          (("2"
                                                                            (apply-extensionality
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (expand
                                                                                 "min")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep
                                                                               +
                                                                               t)
                                                                              (("2"
                                                                                (expand
                                                                                 "min")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "min")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("3"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("3"
                                                                        (expand
                                                                         "min")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (split 1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "j0 = i0 + 2")
                                                  (("1"
                                                    (inst-cp -9 "i0")
                                                    (("1"
                                                      (inst
                                                       -9
                                                       "i0 + 1")
                                                      (("1"
                                                        (typepred "i0")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "edge_of_polygon?")
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (expand
                                                                 "edges_of_polygon")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (case
                                                                     "next_index(Am, i!1) = i!2")
                                                                    (("1"
                                                                      (typepred
                                                                       "Am`vertices")
                                                                      (("1"
                                                                        (expand
                                                                         "uniq_vertex_list?")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "i!1"
                                                                           "next_index(Am, i!2)")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (ground)
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (lemma
                                                                                 "prev_vertex_neq_next_vertex")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "Am"
                                                                                   "next_index(Am, i!1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "Am")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "simple_polygon_2d?")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "Am`vertices")
                                                                      (("2"
                                                                        (expand
                                                                         "uniq_vertex_list?")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "next_index(Am, i!1)"
                                                                           "i!2")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "merge_vertex_seq")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "A"
                                                               "B"
                                                               "Am"
                                                               "Bm"
                                                               "merge_seq(A, B)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "1 + i0")
                                                                  (("2"
                                                                    (expand
                                                                     "seq_prev_vtx")
                                                                    (("2"
                                                                      (use
                                                                       "next_merge_vertex_neq_prev_vertex")
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (lemma
                                                                           "adj_merge_seq_vertices_distinct")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "A"
                                                                             "B"
                                                                             "Am"
                                                                             "Bm"
                                                                             "merge_seq(A, B)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "i0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -26
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "merge_vertex_AB")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (lemma
                                                             "merge_vertex_seq")
                                                            (("3"
                                                              (inst
                                                               -
                                                               "A"
                                                               "B"
                                                               "Am"
                                                               "Bm"
                                                               "merge_seq(A, B)")
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "1 + i0")
                                                                  (("3"
                                                                    (expand
                                                                     "seq_prev_vtx")
                                                                    (("3"
                                                                      (use
                                                                       "next_merge_vertex_neq_prev_vertex")
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (lemma
                                                                           "adj_merge_seq_vertices_distinct")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "A"
                                                                             "B"
                                                                             "Am"
                                                                             "Bm"
                                                                             "merge_seq(A, B)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "i0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -26
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "merge_vertex_AB")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (lemma
                                                             "merge_vertex_seq")
                                                            (("4"
                                                              (inst
                                                               -
                                                               "A"
                                                               "B"
                                                               "Am"
                                                               "Bm"
                                                               "merge_seq(A, B)")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (inst
                                                                   -
                                                                   "1 + i0")
                                                                  (("4"
                                                                    (expand
                                                                     "seq_prev_vtx")
                                                                    (("4"
                                                                      (use
                                                                       "next_merge_vertex_neq_prev_vertex")
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (lemma
                                                                           "adj_merge_seq_vertices_distinct")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "A"
                                                                             "B"
                                                                             "Am"
                                                                             "Bm"
                                                                             "merge_seq(A, B)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "i0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -26
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "merge_vertex_AB")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "i0")
                                                    (("2"
                                                      (lemma
                                                       "adj_merge_seq_vertices_distinct")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "A"
                                                         "B"
                                                         "Am"
                                                         "Bm"
                                                         "M")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "i0")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (rewrite
                                                   -2
                                                   1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "uniq_vertex_list?")
                                              (("2"
                                                (skeep + t)
                                                (("2"
                                                  (typepred "j0")
                                                  (("2"
                                                    (replace
                                                     -7
                                                     -6
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "i!1 < j!1")
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "i0 + j!1")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "i!1 + i0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -3
                                                           "i0 + i!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "j!1 + i0")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (typepred "j0")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (inst -5 "l")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (case "i < j")
                                            (("1"
                                              (inst - "j")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst - "i")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "injected_polygons_have_ccw_order")
                        (("2" (inst - "A" "B" "Am" "Bm")
                          (("2" (assert)
                            (("2" (ground)
                              (("2"
                                (expand "ccw_merge_pre_condition")
                                (("2"
                                  (assert)
                                  (("2"
                                    (use
                                     "injected_polygon_has_merge_precondition")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3"
                          (lemma "injected_polygons_have_ccw_order")
                          (("3" (inst - "A" "B" "Am" "Bm")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground)
                      (("1"
                        (typepred
                         "inject_vertices_into_polygon(A, B)`1")
                        (("1" (expand "inject_post_condition?")
                          (("1" (replace -4)
                            (("1" (replace -2)
                              (("1"
                                (replace -6)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (typepred
                         "inject_vertices_into_polygon(A, B)`2")
                        (("2" (expand "inject_post_condition?")
                          (("2" (replace -3)
                            (("2" (replace -2)
                              (("2"
                                (assert)
                                (("2"
                                  (replace -5)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_has_uniq_vertex_list 0
  (merge_seq_has_uniq_vertex_list-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin)
      ((""
        (name-replace*
         ("Am" "inject_vertices_into_polygon(A, B)`1" "Bm"
          "inject_vertices_into_polygon(A, B)`2"))
        (("" (case "(Am, Bm) = inject_vertices_into_polygon(A, B)")
          (("1" (use "injected_polygons_have_ccw_order")
            (("1" (ground)
              (("1" (case "polygon_contained?(A, B)")
                (("1" (lemma "merge_seq_contained_rotated_vertices_B")
                  (("1" (inst - "A" "B" "Am" "Bm")
                    (("1" (ground) nil nil)
                     ("2" (expand "ccw_merge_pre_condition")
                      (("2"
                        (use "injected_polygon_has_merge_precondition")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "polygon_contained?(B, A)")
                  (("1"
                    (lemma "merge_seq_contained_rotated_vertices_A")
                    (("1" (inst - "A" "B" "Am" "Bm")
                      (("1" (ground) nil nil)
                       ("2" (expand "ccw_merge_pre_condition")
                        (("2"
                          (use "injected_polygon_has_merge_precondition")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (use "merge_seq_not_contained_has_uniq_vertex_list")
                    (("2" (ground) (("2" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (apply-extensionality :hide? t) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merged_polygon_is_closed_TCC1 0
  (merged_polygon_is_closed_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merged_polygon_is_closed subtype
    "(number_fields.-)(merge_props.L`length, 1)" "below[L`length]"))
  (merged_polygon_is_closed_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merged_polygon_is_closed subtype
    "(number_fields.-)(merge_props.L`length, 1)" "below[L`length]")))
 (merged_polygon_is_closed_TCC2 0
  (merged_polygon_is_closed_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("" (use "merge_seq_has_min_length")
        (("1" (ground) nil nil)
         ("2" (ground)
          (("1" (typepred "B") (("1" (postpone) nil nil)) nil)
           ("2" (postpone) nil nil))
          nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (merged_polygon_is_closed subtype
    "(number_fields.-)(merge_props.L`length, 2)" "below[L`length]"))
  (merged_polygon_is_closed_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merged_polygon_is_closed subtype
    "(number_fields.-)(merge_props.L`length, 2)" "below[L`length]")))
 (merged_polygon_is_closed_TCC3 0
  (merged_polygon_is_closed_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merged_polygon_is_closed subtype "0" "below[L`length]"))
  (merged_polygon_is_closed_TCC3-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merged_polygon_is_closed subtype "0" "below[L`length]")))
 (merged_polygon_is_closed_TCC4 0
  (merged_polygon_is_closed_TCC4-2 nil 3874129020
   ("" (skeep*)
    (("" (use "merge_vertex_AB")
      (("" (ground)
        (("" (inst?)
          (("1" (assert) nil nil)
           ("2" (expand "merge_seq")
            (("2" (replace -2 1)
              (("2" (expand "o")
                (("2" (expand "singleton_seq") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merged_polygon_is_closed subtype "merge_props.last_vtx"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))"))
  (merged_polygon_is_closed_TCC4-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merged_polygon_is_closed subtype "merge_props.last_vtx"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))")))
 (merged_polygon_is_closed 0
  (merged_polygon_is_closed-1 nil 3874129020
   ("" (auto-rewrite "sets.member")
    (("" (skeep*)
      (("" (ground)
        (("" (use "merge_seq_has_min_length")
          (("" (replace -3 :dir rl)
            (("" (use "merge_helper_seq")
              (("" (assert)
                (("" (inst - "L`length - 1")
                  ((""
                    (name-replace "P"
                     "merge_prefix(Am, Bm, first_vertex_merge(A, B),
                                        L`length - 1)" :hide? nil)
                    (("" (case "P`length = L`length")
                      (("1" (expand "merge_helper")
                        (("1" (lift-if)
                          (("1" (rewrite "concat_empty_seq")
                            (("1" (split -3)
                              (("1"
                                (flatten)
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "seq_prev_vtx")
                                    (("1"
                                      (equate
                                       "L`seq(0)"
                                       "first_vertex_merge(A, B)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -7 1)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "merge_seq")
                                            (("2"
                                              (expand "o")
                                              (("2"
                                                (expand
                                                 "singleton_seq")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name-replace
                                     "V_Am"
                                     "{v: point_2d | exists (i: below(Am`num_vertices)): v = Am`vertices(i)}")
                                    (("2"
                                      (name-replace
                                       "V_Bm"
                                       "{v: point_2d | exists (i: below(Bm`num_vertices)): v = Bm`vertices(i)}")
                                      (("2"
                                        (name-replace
                                         "U"
                                         "union(V_Am, V_Bm)")
                                        (("2"
                                          (case
                                           "exists (S: finseq[(U)]): L`length = S`length and
                                        forall (i: below(L`length)): L`seq(i) = S`seq(i)")
                                          (("1"
                                            (skeep - t)
                                            (("1"
                                              (use
                                               "merge_seq_has_uniq_vertex_list")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace
                                                   -13
                                                   -1
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand
                                                     "uniq_vertex_list?")
                                                    (("1"
                                                      (lemma
                                                       "seq_pigeon_hole[point_2d, (U)]")
                                                      (("1"
                                                        (inst - "S")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (skeep - t)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "i"
                                                               "j")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "finseq_appl")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "i")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -1
                                                             -3
                                                             2)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (rewrite
                                                                 "card_union")
                                                                (("2"
                                                                  (case
                                                                   "card(V_Am) = Am`num_vertices and card(V_Bm) = Bm`num_vertices")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (lemma
                                                                       "card_bij[point_2d]")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "Am`num_vertices"
                                                                         "V_Am")
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "lambda (p: (V_Am)): find_index(Am, p)")
                                                                            (("1"
                                                                              (expand
                                                                               "bijective?")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (expand
                                                                                   "injective?")
                                                                                  (("1"
                                                                                    (skeep
                                                                                     +
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -7
                                                                                       (-1
                                                                                        -2)
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skeep*)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "Am`vertices")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "uniq_vertex_list?")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "find_index(Am, x1)")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "Am`vertices(i)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "vertex?")
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "find_index(Am, x2)")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "surjective?")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "Am`vertices(y)")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "find_index_self")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "Am"
                                                                                           "Am`vertices(y)")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "Am`vertices")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "uniq_vertex_list?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "find_index(Am, Am`vertices(y))"
                                                                                                   "y")
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "vertex_find_index")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "vertex?")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "y")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "vertex_find_index")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "vertex?")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "y")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -4
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep
                                                                               +
                                                                               t)
                                                                              (("2"
                                                                                (replace
                                                                                 -5
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (use
                                                                                       "vertex_find_index")
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "find_index(Am, p)")
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "vertex?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "i")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "card_bij[point_2d]")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "Bm`num_vertices"
                                                                         "V_Bm")
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "lambda (p: (V_Bm)): find_index(Bm, p)")
                                                                            (("1"
                                                                              (expand
                                                                               "bijective?")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (expand
                                                                                   "injective?")
                                                                                  (("1"
                                                                                    (skeep
                                                                                     +
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -6
                                                                                       (-1
                                                                                        -2)
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skeep*)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "Bm`vertices")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "uniq_vertex_list?")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "find_index(Bm, x1)")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "Bm`vertices(i)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "vertex?")
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "find_index(Bm, x2)")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "surjective?")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "Bm`vertices(y)")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "find_index_self")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "Bm"
                                                                                           "Bm`vertices(y)")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "Bm`vertices")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "uniq_vertex_list?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "find_index(Bm, Bm`vertices(y))"
                                                                                                   "y")
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "vertex_find_index")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "vertex?")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "y")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "vertex_find_index")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "vertex?")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "y")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -3
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep
                                                                               +
                                                                               t)
                                                                              (("2"
                                                                                (replace
                                                                                 -4
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (use
                                                                                       "vertex_find_index")
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "find_index(Bm, p)")
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "vertex?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "i")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             +
                                             "(# length := L`length, seq := lambda (i: below(L`length)): L`seq(i) #)")
                                            (("1" (skeep) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (use
                                                 "merge_path_props")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     -2
                                                     1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand
                                                       "union"
                                                       1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (case
                                                           "i < L`length - 1")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "i")
                                                            (("1"
                                                              (expand
                                                               "edge_of_polygon?")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (expand
                                                                     "edges_of_polygon")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -6
                                                                         1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "i_1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "edges_of_polygon")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replace
                                                                         -5
                                                                         2
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "i_1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "L`length - 2")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "edge_of_polygon?")
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (expand
                                                                       "edges_of_polygon")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           2
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "next_index(Am, i!1)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "edges_of_polygon")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -4
                                                                           3
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "next_index(Bm, i!1)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep*)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "o")
                                  (("2"
                                    (expand "singleton_seq")
                                    (("2"
                                      (decompose-equality -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 1 :dir rl)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_path_props_edges_TCC1 0
  (merge_path_props_edges_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_path_props_edges subtype "merge_props.next"
    "below[L`length]"))
  (merge_path_props_edges_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_path_props_edges subtype "merge_props.next"
    "below[L`length]")))
 (merge_path_props_edges_TCC2 0
  (merge_path_props_edges_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (use "merge_seq_has_uniq_vertex_list")
      (("" (ground)
        (("" (expand "uniq_vertex_list?")
          (("" (lift-if)
            (("" (ground)
              (("1" (inst - "i" "next")
                (("1" (ground) nil nil)
                 ("2" (use "merge_seq_has_min_length")
                  (("2" (ground) nil nil)) nil))
                nil)
               ("2" (inst - "next" "i") (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_path_props_edges subtype
    "merge_props.L`seq(merge_props.next)"
    "{p: vectors_cross_2d.point_2d | p /= merge_props.L`seq(merge_props.i)}"))
  (merge_path_props_edges_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_path_props_edges subtype
    "merge_props.L`seq(merge_props.next)"
    "{p: vectors_cross_2d.point_2d | p /= merge_props.L`seq(merge_props.i)}")))
 (merge_path_props_edges 0
  (merge_path_props_edges-1 nil 3874129020
   ("" (skeep*)
    (("" (lemma "vertex_find_index")
      (("" (inst -1 "Am" "L`seq(i)")
        (("" (lemma "vertex_find_index")
          (("" (inst -1 "Bm" "L`seq(i)")
            (("" (use "merge_vertex_seq")
              (("" (assert)
                (("" (assert)
                  (("" (lift-if)
                    (("" (split 1)
                      (("1" (flatten)
                        (("1" (use "merged_polygon_is_closed")
                          (("1" (assert)
                            (("1" (hide -3)
                              (("1"
                                (lemma "segment_in_edges")
                                (("1"
                                  (inst -1 "L`seq(i)" "L`seq(0)" "Bm")
                                  (("1"
                                    (lemma "segment_in_edges")
                                    (("1"
                                      (inst
                                       -1
                                       "L`seq(i)"
                                       "L`seq(0)"
                                       "Am")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "next_merge_vertex")
                                          (("1"
                                            (apply (repeat (lift-if)))
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "merge_vertex_AB")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand
                                                           "point_AB_vtx?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lemma "segment_in_edges")
                          (("2"
                            (inst -1 "L`seq(i)" "L`seq(i + 1)" "Bm")
                            (("1" (lemma "segment_in_edges")
                              (("1"
                                (inst
                                 -1
                                 "L`seq(i)"
                                 "L`seq(i + 1)"
                                 "Am")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "next_merge_vertex")
                                      (("1"
                                        (apply (repeat (lift-if)))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use "merge_vertex_AB")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (expand
                                                       "point_AB_vtx?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_edges_do_not_cross_TCC1 0
  (merge_seq_edges_do_not_cross_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "merge_seq_has_min_length") (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (merge_seq_edges_do_not_cross subtype "merge_props.M`length"
    "integers.upfrom(3)"))
  (merge_seq_edges_do_not_cross_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_edges_do_not_cross subtype "merge_props.M`length"
    "integers.upfrom(3)")))
 (merge_seq_edges_do_not_cross_TCC2 0
  (merge_seq_edges_do_not_cross_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (use "merge_seq_has_uniq_vertex_list") (("" (ground) nil nil))
      nil))
    nil)
   nil shostak
   (merge_seq_edges_do_not_cross subtype "merge_props.M`seq"
    "vertex_list.uniq_vertex_list(merge_props.M`length)"))
  (merge_seq_edges_do_not_cross_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_edges_do_not_cross subtype "merge_props.M`seq"
    "vertex_list.uniq_vertex_list(merge_props.M`length)")))
 (merge_seq_edges_do_not_cross 0
  (merge_seq_edges_do_not_cross-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin)
      ((""
        (name-replace*
         ("Am" "inject_vertices_into_polygon(A, B)`1" "Bm"
          "inject_vertices_into_polygon(A, B)`2"))
        (("" (case "(Am, Bm) = inject_vertices_into_polygon(A, B)")
          (("1"
            (case "ccw_vertex_order?(Am) AND ccw_vertex_order?(Bm) AND merge_pre_condition(Am)(Bm)")
            (("1" (flatten)
              (("1"
                (name-replace*
                 ("IVA" "injected_vertices(A, B, A`num_vertices)" "IVB"
                  "injected_vertices(B, A, B`num_vertices)"))
                (("1"
                  (case "Am = (# num_vertices := IVA`length, vertices := IVA`seq #) and
                                              Bm = (# num_vertices := IVB`length, vertices := IVB`seq #)")
                  (("1" (flatten)
                    (("1" (expand "polygon_edges_do_not_cross?")
                      (("1" (skeep* + t)
                        (("1"
                          (name-replace "C"
                           "(# num_vertices := M`length, vertices := M`seq #)"
                           :hide? nil)
                          (("1" (use "merge_path_props_edges")
                            (("1" (split -1)
                              (("1"
                                (inst-cp - "i")
                                (("1"
                                  (inst - "j")
                                  (("1"
                                    (skoletin*)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "edges_of_polygon(C)(i) = S_1")
                                        (("1"
                                          (case-replace
                                           "edges_of_polygon(C)(j) = S")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "injected_vertex_edges_do_not_cross")
                                              (("1"
                                                (inst - "A" "B")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -17)
                                                    (("1"
                                                      (replace
                                                       -14
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand
                                                         "polygon_edges_do_not_cross?")
                                                        (("1"
                                                          (expand
                                                           "edge_of_polygon?")
                                                          (("1"
                                                            (skeep*
                                                             -
                                                             t)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "i!2"
                                                               "i!1")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "q")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "M`seq(i) = M`seq(j)")
                                                                    (("1"
                                                                      (use
                                                                       "merge_seq_has_uniq_vertex_list")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "uniq_vertex_list?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i"
                                                                             "j")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -3
                                                                       -5)
                                                                      (("2"
                                                                        (replace
                                                                         -4
                                                                         -5)
                                                                        (("2"
                                                                          (replace
                                                                           -5
                                                                           -10)
                                                                          (("2"
                                                                            (replace
                                                                             -8
                                                                             -10)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               -10)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "edge_of_polygon?")
                                              (("2"
                                                (skeep* - t)
                                                (("2"
                                                  (case
                                                   "are_segments_overlapping?(S_1)(S)")
                                                  (("1"
                                                    (lemma
                                                     "injected_overlaps_equal")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "A"
                                                       "B"
                                                       "Am"
                                                       "Bm"
                                                       "S_1"
                                                       "S")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (replace
                                                             -9
                                                             -11)
                                                            (("1"
                                                              (decompose-equality
                                                               -11)
                                                              (("1"
                                                                (use
                                                                 "merge_seq_has_uniq_vertex_list")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "uniq_vertex_list?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "i"
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "same_edge_equiv_same_points")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "C"
                                                             "i"
                                                             "j")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -7)
                                                                  (("1"
                                                                    (replace
                                                                     -8)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (expand
                                                                           "reverse_segment")
                                                                          (("1"
                                                                            (expand
                                                                             "point_on_segment?")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "1-t")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "1-t")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "merge_seq_has_min_length")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "injected_intersections_only_at_endpoints")
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (expand
                                                         "segment_endpoint?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "edge_of_polygon?")
                                              (("3"
                                                (skeep* - t)
                                                (("3"
                                                  (case
                                                   "are_segments_overlapping?(S)(S_1)")
                                                  (("1"
                                                    (lemma
                                                     "injected_overlaps_equal")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "A"
                                                       "B"
                                                       "Am"
                                                       "Bm"
                                                       "S"
                                                       "S_1")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (replace
                                                             -9
                                                             -11)
                                                            (("1"
                                                              (decompose-equality
                                                               -11)
                                                              (("1"
                                                                (use
                                                                 "merge_seq_has_uniq_vertex_list")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "uniq_vertex_list?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "i"
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "same_edge_equiv_same_points")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "C"
                                                             "i"
                                                             "j")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -7)
                                                                  (("1"
                                                                    (replace
                                                                     -8)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (expand
                                                                           "reverse_segment")
                                                                          (("1"
                                                                            (expand
                                                                             "point_on_segment?")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "1-t")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "1-t")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "merge_seq_has_min_length")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "injected_intersections_only_at_endpoints")
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (expand
                                                         "segment_endpoint?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (lemma
                                               "injected_vertex_edges_do_not_cross")
                                              (("4"
                                                (inst - "B" "A")
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (replace -16)
                                                    (("4"
                                                      (replace
                                                       -15
                                                       :dir
                                                       rl)
                                                      (("4"
                                                        (expand
                                                         "polygon_edges_do_not_cross?")
                                                        (("4"
                                                          (expand
                                                           "edge_of_polygon?")
                                                          (("4"
                                                            (skeep*
                                                             -
                                                             t)
                                                            (("4"
                                                              (inst
                                                               -
                                                               "i!2"
                                                               "i!1")
                                                              (("4"
                                                                (inst
                                                                 -
                                                                 "q")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "M`seq(i) = M`seq(j)")
                                                                    (("1"
                                                                      (use
                                                                       "merge_seq_has_uniq_vertex_list")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "uniq_vertex_list?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "i"
                                                                             "j")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -3
                                                                       -5)
                                                                      (("2"
                                                                        (replace
                                                                         -4
                                                                         -5)
                                                                        (("2"
                                                                          (replace
                                                                           -5
                                                                           -10)
                                                                          (("2"
                                                                            (replace
                                                                             -8
                                                                             -10)
                                                                            (("2"
                                                                              (decompose-equality
                                                                               -10)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-6 -7 -8 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-2 -3 -7 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3" (propax) nil nil))
                              nil)
                             ("2" (expand "ccw_merge_pre_condition")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (typepred "inject_vertices_into_polygon(A, B)`1")
                    (("2"
                      (typepred "inject_vertices_into_polygon(A, B)`2")
                      (("2" (expand "inject_post_condition?")
                        (("2" (replace -5)
                          (("2" (replace -6)
                            (("2" (replace -2 :dir rl)
                              (("2"
                                (replace -4 :dir rl)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "ccw_merge_pre_condition")
              (("2" (use "injected_polygons_have_ccw_order")
                (("2" (use "injected_polygon_has_merge_precondition")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (-1 -2 1)) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (simple_merged_polygon_TCC1 0
  (simple_merged_polygon_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (expand "simple_polygon_2d?")
      (("" (ground)
        (("" (use "merge_seq_edges_do_not_cross")
          (("" (ground) (("" (replace -2) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (simple_merged_polygon subtype
    "(# num_vertices := merge_props.M`length, vertices := merge_props.M`seq #)"
    "simple_polygon_2d"))
  (simple_merged_polygon_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (simple_merged_polygon subtype
    "(# num_vertices := merge_props.M`length, vertices := merge_props.M`seq #)"
    "simple_polygon_2d")))
 (merge_seq_topleft_index_is_0 0
  (merge_seq_topleft_index_is_0-1 nil 3874129020
   ("" (skeep)
    (("" (case "merge_seq(A, B)`length >= 3")
      (("1" (typepred "simple_merged_polygon(A, B)`vertices")
        (("1" (expand "simple_merged_polygon")
          (("1"
            (name-replace*
             ("Am" "inject_vertices_into_polygon(A, B)`1" "Bm"
              "inject_vertices_into_polygon(A, B)`2"))
            (("1" (typepred "B")
              (("1" (expand "ccw_merge_pre_condition")
                (("1" (use "merge_pre_condition_symmetric")
                  (("1" (assert)
                    (("1" (lemma "inject_vertices_into_polygon_comm")
                      (("1" (inst - "A" "B" "Am" "Bm")
                        (("1" (assert)
                          (("1" (lemma "merge_vertex_AB")
                            (("1"
                              (inst - "A" "B" "Am" "Bm"
                               "merge_seq(A,B)")
                              (("1"
                                (ground)
                                (("1"
                                  (expand "uniq_vertex_list?")
                                  (("1"
                                    (inst
                                     -9
                                     "topleft_vertex_idx((# num_vertices := merge_seq(A, B)`length,
                                        vertices := merge_seq(A, B)`seq #))"
                                     "0")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand "merge_seq" 1 4)
                                        (("1"
                                          (expand "o")
                                          (("1"
                                            (expand "singleton_seq")
                                            (("1"
                                              (lemma
                                               "topleft_vertex_bounds_vertices")
                                              (("1"
                                                (inst
                                                 -
                                                 "simple_merged_polygon(A,B)"
                                                 "first_vertex_merge(A, B)")
                                                (("1"
                                                  (expand
                                                   "simple_merged_polygon")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep + t)
                                                      (("1"
                                                        (hide 3 4)
                                                        (("1"
                                                          (expand
                                                           "vertex?")
                                                          (("1"
                                                            (skeep - t)
                                                            (("1"
                                                              (expand
                                                               "simple_merged_polygon")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (expand
                                                                   "point_AB_vtx?")
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (case
                                                                       "(Am,Bm) = inject_vertices_into_polygon(A,B)")
                                                                      (("1"
                                                                        (case
                                                                         "vertex?(Am)(u) implies point_on_polygon_perimeter?(A)(u)")
                                                                        (("1"
                                                                          (case
                                                                           "vertex?(Bm)(u) implies point_on_polygon_perimeter?(B)(u)")
                                                                          (("1"
                                                                            (lemma
                                                                             "topleft_vertex_bounds_all_points")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -
                                                                               "A"
                                                                               "A`vertices(topleft_vertex_idx(A))")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "B"
                                                                                 "B`vertices(topleft_vertex_idx(B))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "first_vertex_merge")
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (lift-if)))
                                                                                      (("1"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -5
                                                                                                       "u")
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst
                                                                                                       -4
                                                                                                       "u")
                                                                                                      (("1"
                                                                                                        (rewrite*
                                                                                                         "leftmost_is_topleft_x")
                                                                                                        (("1"
                                                                                                          (rewrite*
                                                                                                           "topmost_is_topleft_y")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -4
                                                                                                       "u")
                                                                                                      (("1"
                                                                                                        (rewrite*
                                                                                                         "leftmost_is_topleft_x")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -5
                                                                                                           -6)
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite*
                                                                                                         "topmost_is_topleft_y")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -3
                                                                                                         "u")
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (rewrite*
                                                                                                       "leftmost_is_topleft_x")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -9)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -4
                                                                                                           "u")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           -3
                                                                                                           "u")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -3
                                                                                                         "u")
                                                                                                        (("1"
                                                                                                          (rewrite*
                                                                                                           "leftmost_is_topleft_x")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "u")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "vertex?")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "vertex?")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "injected_perimeter_points_same")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "B"
                                                                               "A"
                                                                               "Bm"
                                                                               "Am"
                                                                               "u")
                                                                              (("2"
                                                                                (lemma
                                                                                 "vertex_on_perimeter")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "u"
                                                                                   "Bm")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "injected_perimeter_points_same")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "A"
                                                                             "B"
                                                                             "Am"
                                                                             "Bm"
                                                                             "u")
                                                                            (("2"
                                                                              (lemma
                                                                               "vertex_on_perimeter")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "u"
                                                                                 "Am")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply-extensionality
                                                                         :hide?
                                                                         t)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (hide -1 2 3)
                                                    (("2"
                                                      (inst + "0")
                                                      (("1"
                                                        (expand
                                                         "simple_merged_polygon")
                                                        (("1"
                                                          (expand
                                                           "merge_seq")
                                                          (("1"
                                                            (expand
                                                             "o")
                                                            (("1"
                                                              (expand
                                                               "singleton_seq")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "merge_seq_has_min_length") (("2" (assert) nil nil))
        nil)
       ("3" (typepred "B")
        (("3" (expand "ccw_merge_pre_condition")
          (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_merge_vertex_in_one_injected_polygon 0
  (first_merge_vertex_in_one_injected_polygon-1 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "IV" "inject_vertices_into_polygon(A, B)")
        (("" (flatten)
          (("" (lemma "merge_path_props")
            (("" (inst - "A" "B" "IV`1" "IV`2" "merge_seq(A,B)")
              (("1" (ground)
                (("1" (inst - "0")
                  (("1" (expand "edge_of_polygon?")
                    (("1" (ground)
                      (("1" (skeep - t)
                        (("1" (expand "edges_of_polygon")
                          (("1" (flatten)
                            (("1" (hide -3)
                              (("1"
                                (expand "merge_seq")
                                (("1"
                                  (expand "o")
                                  (("1"
                                    (expand "singleton_seq")
                                    (("1"
                                      (use "vertex_find_index")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "vertex?")
                                          (("1" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep - t)
                        (("2" (expand "edges_of_polygon")
                          (("2" (flatten)
                            (("2" (hide -3)
                              (("2"
                                (expand "merge_seq")
                                (("2"
                                  (expand "o")
                                  (("2"
                                    (expand "singleton_seq")
                                    (("2"
                                      (lemma "vertex_find_index")
                                      (("2"
                                        (inst
                                         -
                                         "IV`2"
                                         "first_vertex_merge(A, B)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "vertex?")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (use "merge_seq_has_min_length")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (apply-extensionality :hide? t)
                  (("1" (expand "IV") (("1" (propax) nil nil)) nil)
                   ("2" (expand "IV") (("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (typepred "B")
                (("2" (expand "ccw_merge_pre_condition")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_two_merge_vertices_TCC1 0
  (first_two_merge_vertices_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (first_two_merge_vertices subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (first_two_merge_vertices_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (first_two_merge_vertices subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (first_two_merge_vertices_TCC2 0
  (first_two_merge_vertices_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (first_two_merge_vertices subtype "1"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (first_two_merge_vertices_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (first_two_merge_vertices subtype "1"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (first_two_merge_vertices_TCC3 0
  (first_two_merge_vertices_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (use "first_vertex_AB") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (first_two_merge_vertices subtype "merge_props.v0"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))"))
  (first_two_merge_vertices_TCC3-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (first_two_merge_vertices subtype "merge_props.v0"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))")))
 (first_two_merge_vertices 0
  (first_two_merge_vertices-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "simple_merged_polygon")
      (("" (use "merge_seq_has_min_length")
        (("" (replace -3 :hide? t)
          (("" (assert)
            (("" (expand "merge_seq")
              (("" (expand "o")
                (("" (expand "singleton_seq")
                  (("" (expand "merge_helper")
                    (("" (lift-if)
                      (("" (ground)
                        (("" (expand "empty_seq")
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_merged_edge_is_topleft_Am_or_Bm_TCC1 0
  (first_merged_edge_is_topleft_Am_or_Bm_TCC1-2 nil 3874129020
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (first_merged_edge_is_topleft_Am_or_Bm subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (first_merged_edge_is_topleft_Am_or_Bm_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (first_merged_edge_is_topleft_Am_or_Bm subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (first_merged_edge_is_topleft_Am_or_Bm 0
  (first_merged_edge_is_topleft_Am_or_Bm-1 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("" (lemma "merge_seq_has_min_length")
        (("" (inst - "A" "B")
          (("" (use "merge_path_props")
            (("" (assert)
              (("" (inst - "0")
                (("" (lemma "first_two_merge_vertices")
                  ((""
                    (inst - "A" "C" "B" "Am" "Bm"
                     "first_vertex_merge(A, B)")
                    (("" (assert)
                      (("" (flatten)
                        ((""
                          (equate "merge_seq(A, B)`seq(0)"
                           "C`vertices(0)")
                          (("1"
                            (equate "merge_seq(A, B)`seq(1)"
                             "C`vertices(1)")
                            (("1" (use "merge_seq_topleft_vertices")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -6 :dir rl)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "next_merge_vertex")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "find_index_self")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "Am"
                                                               "first_vertex_merge(A, B)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "edges_of_polygon"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "next_index"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -12))
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide 1 2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "find_index_self")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "Bm"
                                                               "first_vertex_merge(A, B)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "edges_of_polygon"
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "next_index"
                                                                       2
                                                                       2)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -12))
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "find_index_self")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "Am"
                                                         "first_vertex_merge(A, B)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "edges_of_polygon"
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "next_index"
                                                                 2
                                                                 2)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -11))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split -5)
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -5 -8 1))
                                                  (("1"
                                                    (expand
                                                     "edge_of_polygon?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "vertex_find_index")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "edge_of_polygon?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon"
                                                       -1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           "vertex_find_index")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "Bm"
                                                             "first_vertex_merge(A, B)")
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "find_index_self")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "Bm"
                                                                     "first_vertex_merge(A, B)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "edges_of_polygon"
                                                                           3)
                                                                          (("1"
                                                                            (expand
                                                                             "next_index"
                                                                             3
                                                                             2)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (split
                                                                                 3)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -12))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "vertex?")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-6 1))
                              (("2"
                                (replace -1)
                                (("2"
                                  (expand "simple_merged_polygon")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-6 1))
                            (("2" (replace -1)
                              (("2"
                                (expand "simple_merged_polygon")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_vertex_seq_full_TCC1 0
  (merge_vertex_seq_full_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (expand "merge_seq")
      (("" (expand "o")
        (("" (expand "singleton_seq") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_vertex_seq_full subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}"))
  (merge_vertex_seq_full_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_vertex_seq_full subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}")))
 (merge_vertex_seq_full_TCC2 0
  (merge_vertex_seq_full_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (expand "merged_polygon")
      (("" (expand "simple_merged_polygon")
        (("" (use "merge_vertex_AB")
          (("" (split -1)
            (("1" (typepred "i")
              (("1" (inst?)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_vertex_seq_full subtype
    "merge_props.C`vertices(merge_props.i)"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))"))
  (merge_vertex_seq_full_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_vertex_seq_full subtype
    "merge_props.C`vertices(merge_props.i)"
    "(polygon_merge.point_AB_vtx?(merge_props.Am, merge_props.Bm))")))
 (merge_vertex_seq_full 0
  (merge_vertex_seq_full-1 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("" (expand "next_index")
        (("" (lift-if)
          (("" (ground)
            (("1" (use "merged_polygon_is_closed")
              (("1" (assert)
                (("1" (expand "simple_merged_polygon")
                  (("1" (replace -4)
                    (("1" (assert)
                      (("1" (expand "seq_prev_vtx")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "merge_vertex_seq")
              (("2" (assert)
                (("2" (inst - "i")
                  (("1" (expand "simple_merged_polygon")
                    (("1" (replace -3) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (expand "simple_merged_polygon")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_path_edges_AB 0
  (merge_path_edges_AB-1 nil 3874129020
   ("" (skeep*)
    (("" (lemma "vertex_find_index")
      (("" (inst -1 "Am" "C`vertices(i)")
        (("" (lemma "vertex_find_index")
          (("" (inst -1 "Bm" "C`vertices(i)")
            (("" (use "merge_vertex_seq_full")
              (("" (assert)
                (("" (assert)
                  (("" (flatten)
                    (("" (lemma "segment_in_edges")
                      ((""
                        (inst - "C`vertices(i)"
                         "C`vertices(next_index(C,i))" "Bm")
                        (("" (lemma "segment_in_edges")
                          ((""
                            (inst - "C`vertices(i)"
                             "C`vertices(next_index(C,i))" "Am")
                            (("" (inst?)
                              ((""
                                (assert)
                                ((""
                                  (expand "next_merge_vertex")
                                  ((""
                                    (apply (repeat (lift-if)))
                                    ((""
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (-5 1))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (-5 4))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (-3 3))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (use "merge_vertex_AB")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (expand
                                                   "point_AB_vtx?")
                                                  (("1"
                                                    (expand
                                                     "simple_merged_polygon")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "find_index_self")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "Bm"
                                                           _)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  -3
                                                                  4))
                                                                (("1"
                                                                  (expand
                                                                   "edge_of_polygon?")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "find_index(Bm, C`vertices(i))")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "simple_merged_polygon")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (last_merged_edge_is_prev_topleft_Am_or_Bm_TCC1 0
  (last_merged_edge_is_prev_topleft_Am_or_Bm_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (last_merged_edge_is_prev_topleft_Am_or_Bm subtype
    "merge_props.last_i_C"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (last_merged_edge_is_prev_topleft_Am_or_Bm_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (last_merged_edge_is_prev_topleft_Am_or_Bm subtype
    "merge_props.last_i_C"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (last_merged_edge_is_prev_topleft_Am_or_Bm 0
  (last_merged_edge_is_prev_topleft_Am_or_Bm-1 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("" (lemma "merge_seq_has_min_length")
        (("" (inst - "A" "B")
          (("" (lemma "merge_path_edges_AB")
            (("" (inst - "A" "C" "B" "Am" "Bm")
              (("" (assert)
                (("" (inst - "C`num_vertices - 1")
                  (("" (use "merge_seq_topleft_vertices")
                    (("" (assert)
                      (("" (replace -4 :dir rl)
                        ((""
                          (name-replace "v0" "first_vertex_merge(A, B)"
                           :hide? nil)
                          (("" (use "first_two_merge_vertices")
                            (("" (assert)
                              ((""
                                (flatten)
                                ((""
                                  (hide -2)
                                  ((""
                                    (case "find_index(Am, v0) >= 0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -6)
                                        (("1"
                                          (expand "edge_of_polygon?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (copy -1)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon"
                                                 -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "next_index"
                                                     -2
                                                     2)
                                                    (("1"
                                                      (lemma
                                                       "find_index_self")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "Am"
                                                         "v0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "Am`vertices")
                                                            (("1"
                                                              (expand
                                                               "uniq_vertex_list?")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "next_index(Am, i)"
                                                                 "topleft_vertex_idx(Am)")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "edges_of_polygon"
                                                                     +)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "next_index"
                                                                             1
                                                                             2)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "edge_of_polygon?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (copy -1)
                                              (("2"
                                                (expand
                                                 "edges_of_polygon"
                                                 -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "next_index"
                                                     -2
                                                     2)
                                                    (("2"
                                                      (case
                                                       "find_index(Bm, v0) >= 0")
                                                      (("1"
                                                        (lemma
                                                         "find_index_self")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "Bm"
                                                           "v0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "Bm`vertices")
                                                              (("1"
                                                                (expand
                                                                 "uniq_vertex_list?")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "next_index(Bm, i)"
                                                                   "topleft_vertex_idx(Bm)")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "edges_of_polygon"
                                                                       +)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "next_index"
                                                                               1
                                                                               3)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "vertex_find_index")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "vertex?")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "next_index(Bm,i)")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "find_index(Bm, v0) >= 0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -6)
                                          (("1"
                                            (expand "edge_of_polygon?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (copy -1)
                                                (("1"
                                                  (expand
                                                   "edges_of_polygon"
                                                   -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "next_index"
                                                       -2
                                                       2)
                                                      (("1"
                                                        (lemma
                                                         "vertex_find_index")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "Am"
                                                           "v0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "vertex?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "next_index(Am,i)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "edge_of_polygon?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (copy -1)
                                                (("2"
                                                  (expand
                                                   "edges_of_polygon"
                                                   -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "next_index"
                                                       -2
                                                       2)
                                                      (("2"
                                                        (case
                                                         "find_index(Bm, v0) >= 0")
                                                        (("1"
                                                          (lemma
                                                           "find_index_self")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "Bm"
                                                             "v0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "Bm`vertices")
                                                                (("1"
                                                                  (expand
                                                                   "uniq_vertex_list?")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "next_index(Bm, i)"
                                                                     "topleft_vertex_idx(Bm)")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "edges_of_polygon"
                                                                         +)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             +)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "next_index"
                                                                                 2
                                                                                 3)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "first_merge_vertex_in_one_injected_polygon")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_meets_ccw_condition_A_B_TCC1 0
  (merge_seq_meets_ccw_condition_A_B_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_meets_ccw_condition_A_B subtype "0" "below[M`length]"))
  (merge_seq_meets_ccw_condition_A_B_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_meets_ccw_condition_A_B subtype "0" "below[M`length]")))
 (merge_seq_meets_ccw_condition_A_B_TCC2 0
  (merge_seq_meets_ccw_condition_A_B_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (use "merge_seq_has_min_length") (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (merge_seq_meets_ccw_condition_A_B subtype "1" "below[M`length]"))
  (merge_seq_meets_ccw_condition_A_B_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_meets_ccw_condition_A_B subtype "1" "below[M`length]")))
 (merge_seq_meets_ccw_condition_A_B_TCC3 0
  (merge_seq_meets_ccw_condition_A_B_TCC3-2 nil 3874129020
   ("" (skeep*)
    (("" (use "adj_merge_seq_vertices_distinct")
      (("" (ground)
        (("" (inst?)
          (("1" (ground) nil nil)
           ("2" (use "merge_seq_has_min_length")
            (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_seq_meets_ccw_condition_A_B subtype "merge_props.M`seq(1)"
    "{p: vectors_cross_2d.point_2d | p /= merge_props.M`seq(0)}"))
  (merge_seq_meets_ccw_condition_A_B_TCC3-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_meets_ccw_condition_A_B subtype "merge_props.M`seq(1)"
    "{p: vectors_cross_2d.point_2d | p /= merge_props.M`seq(0)}")))
 (merge_seq_meets_ccw_condition_A_B_TCC4 0
  (merge_seq_meets_ccw_condition_A_B_TCC4-2 nil 3874129020
   ("" (skeep*)
    (("" (use "merge_seq_has_uniq_vertex_list")
      (("" (ground)
        (("" (expand "uniq_vertex_list?")
          (("" (inst - "0" "M`length - 1")
            (("1" (ground) nil nil)
             ("2" (ground)
              (("1" (use "merge_seq_has_min_length")
                (("1" (ground) nil nil)) nil)
               ("2" (use "merge_seq_has_min_length")
                (("2" (ground) nil nil)) nil))
              nil)
             ("3" (use "merge_seq_has_min_length")
              (("3" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_seq_meets_ccw_condition_A_B subtype "merge_props.M`seq(0)"
    "{p: vectors_cross_2d.point_2d | p /= merge_props.M`seq((number_fields.-)(merge_props.M`length, 1))}"))
  (merge_seq_meets_ccw_condition_A_B_TCC4-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_meets_ccw_condition_A_B subtype "merge_props.M`seq(0)"
    "{p: vectors_cross_2d.point_2d | p /= merge_props.M`seq((number_fields.-)(merge_props.M`length, 1))}")))
 (merge_seq_meets_ccw_condition_A_B_TCC5 0
  (merge_seq_meets_ccw_condition_A_B_TCC5-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_meets_ccw_condition_A_B subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (merge_seq_meets_ccw_condition_A_B_TCC5-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_meets_ccw_condition_A_B subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (merge_seq_meets_ccw_condition_A_B 0
  (merge_seq_meets_ccw_condition_A_B-1 nil 3874129020
   ("" (skeep)
    (("" (skeep + t)
      (("" (assert)
        (("" (flatten)
          (("" (expand "edge_of_polygon?")
            (("" (skeep*)
              (("" (expand "edges_of_polygon")
                (("" (flatten)
                  ((""
                    (case-replace
                     "merge_seq(A, B)`seq(0) = first_vertex_merge(A, B)")
                    (("1" (lemma "vertex_find_index")
                      (("1" (inst-cp - "Am" "first_vertex_merge(A, B)")
                        (("1" (inst - "Bm" "first_vertex_merge(A, B)")
                          (("1" (split -1)
                            (("1" (split -2)
                              (("1"
                                (use
                                 "injected_topleft_vertices_shared")
                                (("1"
                                  (ground)
                                  (("1"
                                    (case
                                     "find_index(Bm, first_vertex_merge(A, B)) = topleft_vertex_idx(Bm)")
                                    (("1"
                                      (case
                                       "find_index(Am, first_vertex_merge(A, B)) = topleft_vertex_idx(Am)")
                                      (("1"
                                        (expand "ccw_vertex_order?")
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (name-replace
                                               "r"
                                               "first_vertex_merge(A, B) - (# x := 1, y := 0 #)"
                                               :hide?
                                               nil)
                                              (("1"
                                                (lemma
                                                 "first_two_merge_vertices")
                                                (("1"
                                                  (inst
                                                   -
                                                   "A"
                                                   "simple_merged_polygon(A, B)"
                                                   "B"
                                                   "Am"
                                                   "Bm"
                                                   "first_vertex_merge(A, B)")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "point_between_edges?")
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "prev_0")
                                                              (("1"
                                                                (equate
                                                                 "first_vertex_merge(A, B) + (# x := -1, y := 0 #)"
                                                                 "first_vertex_merge(A, B) - (# x := 1, y := 0 #)")
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (replace
                                                                     -6)
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (expand
                                                                         "simple_merged_polygon"
                                                                         +)
                                                                        (("1"
                                                                          (expand
                                                                           "next_index"
                                                                           1)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "merge_seq_has_min_length")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "prev_index"
                                                                                   +)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -18
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -19
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "simple_merged_polygon")
                                                                                        (("2"
                                                                                          (case-replace
                                                                                           "i = topleft_vertex_idx(Am)")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "next_index(Bm, i!1) = topleft_vertex_idx(Bm)")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "i!1 = prev_index(Bm, topleft_vertex_idx(Bm))")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "next_merge_vertex")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -16
                                                                                                           -18
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "edges_of_polygon")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "prev_0_first_vtx_not_on_Am_or_Bm")
                                                                                                              (("1"
                                                                                                                (invoke
                                                                                                                 (inst
                                                                                                                  -
                                                                                                                  "A"
                                                                                                                  "B"
                                                                                                                  "Am"
                                                                                                                  "Bm"
                                                                                                                  "%1")
                                                                                                                 (!
                                                                                                                  -2
                                                                                                                  r))
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "prev_0")
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "r")
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "vertex_on_perimeter")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "vertex?")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "edges_of_polygon")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -8)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -9)
                                                                                                              (("2"
                                                                                                                (rewrite*
                                                                                                                 "between_rays_equiv")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "reverse_segment")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -10)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11)
                                                                                                                      (("1"
                                                                                                                        (name-replace*
                                                                                                                         ("pa"
                                                                                                                          "Am`vertices(prev_index(Am, topleft_vertex_idx(Am)))"
                                                                                                                          "na"
                                                                                                                          "Am`vertices(next_index(Am, topleft_vertex_idx(Am)))"
                                                                                                                          "pb"
                                                                                                                          "Bm`vertices(prev_index(Bm, topleft_vertex_idx(Bm)))"
                                                                                                                          "nb"
                                                                                                                          "Bm`vertices(next_index(Bm, topleft_vertex_idx(Bm)))"))
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "interpolate_point_between_rays_5")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "r"
                                                                                                                             "(# p1 := first_vertex_merge(A, B), p2 := pb #)"
                                                                                                                             "(# p1 := first_vertex_merge(A, B), p2 := nb #)"
                                                                                                                             "(# p1 := first_vertex_merge(A, B), p2 := na #)")
                                                                                                                            (("1"
                                                                                                                              (ground)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (use
                                                                                                                                   "comps_eq")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     :hide?
                                                                                                                                     t)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "r")
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (lemma
                                                                                                                               "vertex_neq_next")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "Am"
                                                                                                                                 "topleft_vertex_idx(Am)")
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (lemma
                                                                                                                               "vertex_neq_next")
                                                                                                                              (("3"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "Bm"
                                                                                                                                 "topleft_vertex_idx(Bm)")
                                                                                                                                (("3"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("4"
                                                                                                                              (lemma
                                                                                                                               "vertex_neq_prev")
                                                                                                                              (("4"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "Bm"
                                                                                                                                 "topleft_vertex_idx(Bm)")
                                                                                                                                (("4"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "vertex_neq_next")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "Bm"
                                                                                                                     "topleft_vertex_idx(Bm)")
                                                                                                                    (("2"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (lemma
                                                                                                                   "vertex_neq_prev")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "Bm"
                                                                                                                     "topleft_vertex_idx(Bm)")
                                                                                                                    (("3"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (lemma
                                                                                                                   "vertex_neq_next")
                                                                                                                  (("4"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "Am"
                                                                                                                     "topleft_vertex_idx(Am)")
                                                                                                                    (("4"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("5"
                                                                                                                  (lemma
                                                                                                                   "vertex_neq_prev")
                                                                                                                  (("5"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "Am"
                                                                                                                     "topleft_vertex_idx(Am)")
                                                                                                                    (("5"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("6"
                                                                                                                  (lemma
                                                                                                                   "vertex_neq_next")
                                                                                                                  (("6"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "Am"
                                                                                                                     "topleft_vertex_idx(Am)")
                                                                                                                    (("6"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("7"
                                                                                                                  (lemma
                                                                                                                   "vertex_neq_prev")
                                                                                                                  (("7"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "Bm"
                                                                                                                     "topleft_vertex_idx(Bm)")
                                                                                                                    (("7"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -21)
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "Bm`vertices")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "uniq_vertex_list?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "next_index(Bm, i!1)"
                                                                                                   "topleft_vertex_idx(Bm)")
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "Am`vertices")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "uniq_vertex_list?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "i"
                                                                                                 "topleft_vertex_idx(Am)")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "find_index_self")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "Am`vertices")
                                            (("2"
                                              (expand
                                               "uniq_vertex_list?")
                                              (("2"
                                                (invoke
                                                 (inst - "%1" "%2")
                                                 (! 1 *))
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "find_index_self")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "Bm`vertices")
                                          (("2"
                                            (expand
                                             "uniq_vertex_list?")
                                            (("2"
                                              (invoke
                                               (inst - "%1" "%2")
                                               (! 1 *))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "vertex?")
                                (("2" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (expand "vertex?")
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (expand "merge_seq")
                        (("2" (expand "o")
                          (("2" (expand "singleton_seq")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_meets_ccw_condition_TCC1 0
  (merge_seq_meets_ccw_condition_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_meets_ccw_condition subtype "0" "below[M`length]"))
  (merge_seq_meets_ccw_condition_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_meets_ccw_condition subtype "0" "below[M`length]")))
 (merge_seq_meets_ccw_condition_TCC2 0
  (merge_seq_meets_ccw_condition_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (skeep)
      (("" (replace -2)
        (("" (assert)
          (("" (expand "simple_polygon_2d?")
            (("" (use "merge_seq_has_min_length")
              (("" (assert)
                (("" (use "merge_seq_has_uniq_vertex_list")
                  (("" (use "merge_seq_edges_do_not_cross")
                    (("" (ground)
                      (("" (replace -4)
                        (("" (replace -1) (("" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_seq_meets_ccw_condition subtype "merge_props.C"
    "simple_polygon_2d"))
  (merge_seq_meets_ccw_condition_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_meets_ccw_condition subtype "merge_props.C"
    "simple_polygon_2d")))
 (merge_seq_meets_ccw_condition_TCC3 0
  (merge_seq_meets_ccw_condition_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_meets_ccw_condition subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (merge_seq_meets_ccw_condition_TCC3-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_meets_ccw_condition subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (merge_seq_meets_ccw_condition 0
  (merge_seq_meets_ccw_condition-1 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "M" "merge_seq(A,B)" :hide? nil)
        ((""
          (name-replace*
           ("Am" "inject_vertices_into_polygon(A, B)`1" "Bm"
            "inject_vertices_into_polygon(A, B)`2"))
          (("" (case "(Am, Bm) = inject_vertices_into_polygon(A, B)")
            (("1" (hide -2 -3)
              (("1" (use "merge_seq_has_min_length")
                (("1" (use "merge_seq_has_uniq_vertex_list")
                  (("1" (assert)
                    (("1" (expand "uniq_vertex_list?")
                      (("1" (case "M`seq(0) /= M`seq(1)")
                        (("1" (case "M`seq(0) /= M`seq(M`length - 1)")
                          (("1" (ground)
                            (("1"
                              (use "injected_polygons_have_ccw_order")
                              (("1"
                                (use
                                 "injected_polygon_has_merge_precondition")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use
                                     "merge_pre_condition_symmetric")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use
                                         "inject_vertices_into_polygon_comm")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "edge_of_polygon?(Am)((# p1 := M`seq(0), p2 := M`seq(1) #)) AND
                                  edge_of_polygon?(Am)((# p1 := M`seq(M`length - 1), p2 := M`seq(0) #))")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand
                                                 "edge_of_polygon?")
                                                (("1"
                                                  (skeep*)
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lemma
                                                         "first_two_merge_vertices")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "A"
                                                           "simple_merged_polygon(A, B)"
                                                           "B"
                                                           "Am"
                                                           "Bm"
                                                           "first_vertex_merge(A, B)")
                                                          (("1"
                                                            (expand
                                                             "ccw_vertex_order?"
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "simple_merged_polygon")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "point_between_edges?")
                                                                  (("1"
                                                                    (expand
                                                                     "edges_of_polygon"
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "prev_index"
                                                                       +)
                                                                      (("1"
                                                                        (expand
                                                                         "next_index"
                                                                         +)
                                                                        (("1"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "i = topleft_vertex_idx(Am) and i!1 = prev_index(Am, topleft_vertex_idx(Am))")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -2
                                                                                 -9
                                                                                 4)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "merge_seq_topleft_vertices")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "A"
                                                                                     "B")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -13
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "vertex_find_index")
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "find_index_self")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "Am`vertices")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "uniq_vertex_list?")
                                                                                                            (("1"
                                                                                                              (inst-cp
                                                                                                               -
                                                                                                               "i"
                                                                                                               "topleft_vertex_idx(Am)")
                                                                                                              (("1"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (ground)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (case-replace
                                                                                                                     "i = next_index(Am, i!1)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (typepred
                                                                                                                       "Am`vertices")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "uniq_vertex_list?")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "i"
                                                                                                                           "next_index(Am, i!1)")
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "vertex?")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "ccw_merge_pre_condition")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "edge_of_polygon?(Am)((# p1 := M`seq(0), p2 := M`seq(1) #)) AND
                                      edge_of_polygon?(Bm)((# p1 := M`seq(M`length - 1), p2 := M`seq(0) #))")
                                              (("1"
                                                (use
                                                 "merge_seq_meets_ccw_condition_A_B")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "simple_merged_polygon")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "ccw_merge_pre_condition")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "edge_of_polygon?(Bm)((# p1 := M`seq(0), p2 := M`seq(1) #)) AND
                                  edge_of_polygon?(Bm)((# p1 := M`seq(M`length - 1), p2 := M`seq(0) #))")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide 1 2)
                                                    (("1"
                                                      (expand
                                                       "edge_of_polygon?")
                                                      (("1"
                                                        (skeep*)
                                                        (("1"
                                                          (expand
                                                           "edges_of_polygon")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "first_vertex_merge_comm")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "A"
                                                                 "B")
                                                                (("1"
                                                                  (lemma
                                                                   "first_two_merge_vertices")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "B"
                                                                     "simple_merged_polygon(B, A)"
                                                                     "A"
                                                                     "Bm"
                                                                     "Am"
                                                                     "first_vertex_merge(B, A)")
                                                                    (("1"
                                                                      (expand
                                                                       "ccw_vertex_order?"
                                                                       -10)
                                                                      (("1"
                                                                        (expand
                                                                         "simple_merged_polygon")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "point_between_edges?")
                                                                            (("1"
                                                                              (expand
                                                                               "edges_of_polygon"
                                                                               +)
                                                                              (("1"
                                                                                (expand
                                                                                 "prev_index"
                                                                                 +)
                                                                                (("1"
                                                                                  (expand
                                                                                   "next_index"
                                                                                   +)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "edges_of_polygon")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "i = topleft_vertex_idx(Bm) and i!1 = prev_index(Bm, topleft_vertex_idx(Bm))")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -2
                                                                                           -11
                                                                                           4)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "merge_seq_topleft_vertices")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "B"
                                                                                               "A")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -8
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "vertex_find_index")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "merge_seq_commutative")
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "find_index_self")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "Bm`vertices")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "uniq_vertex_list?")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "i"
                                                                                                                           "topleft_vertex_idx(Bm)")
                                                                                                                          (("1"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (ground)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (case-replace
                                                                                                                                 "i = next_index(Bm, i!1)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (typepred
                                                                                                                                   "Bm`vertices")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "uniq_vertex_list?")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "i"
                                                                                                                                       "next_index(Bm, i!1)")
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "vertex?")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "ccw_merge_pre_condition")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "ccw_merge_pre_condition")
                                                                      (("3"
                                                                        (lemma
                                                                         "merge_pre_condition_symmetric")
                                                                        (("3"
                                                                          (inst
                                                                           -
                                                                           "A"
                                                                           "B")
                                                                          (("3"
                                                                            (typepred
                                                                             "B")
                                                                            (("3"
                                                                              (expand
                                                                               "ccw_merge_pre_condition")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "merge_seq_commutative")
                                                  (("2"
                                                    (case
                                                     "edge_of_polygon?(Bm)((# p1 := M`seq(0), p2 := M`seq(1) #)) AND
                                  edge_of_polygon?(Am)((# p1 := M`seq(M`length - 1), p2 := M`seq(0) #))")
                                                    (("1"
                                                      (hide 1 2 3)
                                                      (("1"
                                                        (lemma
                                                         "merge_seq_meets_ccw_condition_A_B")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "B"
                                                           "A"
                                                           "Bm"
                                                           "Am")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "simple_merged_polygon")
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -13)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "ccw_merge_pre_condition")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             "ccw_merge_pre_condition")
                                                            (("3"
                                                              (use
                                                               "merge_pre_condition_symmetric")
                                                              (("3"
                                                                (typepred
                                                                 "B")
                                                                (("3"
                                                                  (expand
                                                                   "ccw_merge_pre_condition")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "merge_path_edges_AB")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "A"
                                                         "simple_merged_polygon(A, B)"
                                                         "B"
                                                         "Am"
                                                         "Bm")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst-cp
                                                             -
                                                             "0")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "M`length - 1")
                                                              (("1"
                                                                (expand
                                                                 "edges_of_polygon")
                                                                (("1"
                                                                  (expand
                                                                   "simple_merged_polygon")
                                                                  (("1"
                                                                    (expand
                                                                     "next_index")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "simple_merged_polygon")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "simple_merged_polygon")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "ccw_merge_pre_condition")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "M`length - 1" "0")
                            (("2" (ground) nil nil)) nil))
                          nil)
                         ("2" (inst - "0" "1") (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (apply-extensionality :hide? t) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merged_polygon_TCC1 0
  (merged_polygon_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "merge_seq_topleft_index_is_0")
      (("" (expand "simple_merged_polygon")
        (("" (expand "ccw_vertex_order?")
          (("" (ground)
            (("" (replace -1)
              (("" (use "merge_seq_meets_ccw_condition")
                (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merged_polygon subtype
    "merge_props.simple_merged_polygon(merge_props.A, merge_props.B)"
    "ccw_simple_polygon"))
  (merged_polygon_TCC1-1 nil 3874128970 ("" (subtype-tcc) nil nil) nil
   nil
   (merged_polygon subtype
    "merge_props.simple_merged_polygon(merge_props.A, merge_props.B)"
    "ccw_simple_polygon")))
 (merged_polygon_has_finseq_prop 0
  (merged_polygon_has_finseq_prop-1 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (expand "merged_polygon")
        (("" (expand "simple_merged_polygon") (("" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_only_vertex_intersections 0
  (merge_only_vertex_intersections-1 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("1" (skeep + t)
        (("1" (expand "only_vertex_intersections?")
          (("1" (skeep + t)
            (("1" (inst - "s")
              (("1" (split -)
                (("1" (ground)
                  (("1" (use "same_polygon_edge_overlaps_equal")
                    (("1" (assert) nil nil)) nil)
                   ("2" (skeep)
                    (("2" (expand "edge_of_polygon?")
                      (("2" (skeep*)
                        (("2" (case "i=i!2")
                          (("1" (use "are_segments_overlapping_refl")
                            (("1" (assert) nil nil)) nil)
                           ("2" (typepred "Am")
                            (("2" (expand "simple_polygon_2d?")
                              (("2"
                                (flatten)
                                (("2"
                                  (expand
                                   "polygon_edges_do_not_cross?")
                                  (("2"
                                    (inst-cp - "i" "i!2")
                                    (("2"
                                      (inst - "i!2" "i")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst - "p")
                                          (("2"
                                            (inst - "p")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "segment_endpoint?")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground)
                  (("1" (lemma "injected_overlaps_equal")
                    (("1" (inst - "A" "B" "Am" "Bm" "e" "s")
                      (("1" (ground)
                        (("1" (use "reverse_reverse_segment")
                          (("1" (replace -2) (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (rewrite "are_segments_overlapping_symm")
                          nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2"
                      (lemma "injected_intersections_only_at_vertices")
                      (("2" (inst - "A" "B" "Am" "Bm" "e" "s" "p")
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (flatten)
                              (("1"
                                (ground)
                                (("1"
                                  (lemma "vertex_is_segment_endpoint")
                                  (("1"
                                    (inst - "p" "Bm" "s")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "segment_endpoint?")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "vertex_is_segment_endpoint")
                                  (("2"
                                    (inst - "p" "Am" "e")
                                    (("2"
                                      (expand "segment_endpoint?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (rewrite "are_segments_overlapping_symm")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep + t)
        (("2" (expand "only_vertex_intersections?")
          (("2" (skeep + t)
            (("2" (inst - "s")
              (("2" (split -)
                (("1" (ground)
                  (("1" (lemma "injected_overlaps_equal")
                    (("1" (inst - "A" "B" "Am" "Bm" "s" "e")
                      (("1" (ground) nil nil)) nil))
                    nil)
                   ("2" (skeep)
                    (("2"
                      (lemma "injected_intersections_only_at_vertices")
                      (("2" (inst - "A" "B" "Am" "Bm" "s" "e" "p")
                        (("2" (assert)
                          (("2" (ground)
                            (("1" (lemma "vertex_is_segment_endpoint")
                              (("1"
                                (inst - "p" "Am" "s")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "segment_endpoint?")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "vertex_is_segment_endpoint")
                              (("2"
                                (inst - "p" "Bm" "e")
                                (("2"
                                  (expand "segment_endpoint?")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground)
                  (("1" (use "same_polygon_edge_overlaps_equal")
                    (("1" (assert) nil nil)) nil)
                   ("2" (skeep)
                    (("2" (expand "edge_of_polygon?")
                      (("2" (skeep*)
                        (("2" (case "i = i!2")
                          (("1" (use "are_segments_overlapping_refl")
                            (("1" (assert) nil nil)) nil)
                           ("2" (typepred "Bm")
                            (("2" (expand "simple_polygon_2d?")
                              (("2"
                                (flatten)
                                (("2"
                                  (expand
                                   "polygon_edges_do_not_cross?")
                                  (("2"
                                    (inst-cp - "i" "i!2")
                                    (("2"
                                      (inst - "i!2" "i")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst - "p")
                                          (("2"
                                            (inst - "p")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "segment_endpoint?")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_outgoing_edges_in_noninitial_wedges 0
  (no_outgoing_edges_in_noninitial_wedges-1 nil 3874129020
   ("" (skeep*)
    (("" (ground)
      (("1" (skeep + t)
        (("1" (expand "merged_polygon")
          (("1" (expand "point_between_edges?")
            (("1" (expand "edge_of_polygon?")
              (("1" (skeep)
                (("1" (expand "edges_of_polygon" -2)
                  (("1" (use "merge_vertex_seq_full")
                    (("1" (assert)
                      (("1" (inst - "i")
                        (("1" (lemma "vertex_find_index")
                          (("1" (inst -1 "Am" "C`vertices(i)")
                            (("1" (ground)
                              (("1"
                                (case
                                 "find_index(Am, C`vertices(i)) = i!1")
                                (("1"
                                  (expand "next_merge_vertex")
                                  (("1"
                                    (apply (repeat (lift-if)))
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (expand "seq_prev_vtx")
                                                (("1"
                                                  (expand
                                                   "simple_merged_polygon")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (expand
                                                       "edges_of_polygon"
                                                       -1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (rewrite
                                                           "between_rays_equiv")
                                                          (("1"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("1"
                                                              (expand
                                                               "reverse_segment")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -8
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -9)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (rewrite
                                                                           "find_index_self_index")
                                                                          (("1"
                                                                            (use
                                                                             "point_between_rays_not_on_rays")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (hide
                                                                                 1
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "point_on_arb_ray?")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "norm(Am`vertices(next_index(Am, i!1)) - Am`vertices(i!1))")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^")
                                                                                      (("1"
                                                                                        (real-props)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "rem_plus_1_eq_next_index"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "u"
                                                                                               "Am`vertices(rem(Am`num_vertices)(1 + i!1))")
                                                                                              (("1"
                                                                                                (grind-with-ext)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "point_between_rays?")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "cross")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "on_segment_not_between_rays")
                                                (("2"
                                                  (ground)
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -4)
                                                    (("2"
                                                      (hide-all-but
                                                       (-2 -7 -8 2))
                                                      (("2"
                                                        (expand
                                                         "point_on_segment?")
                                                        (("2"
                                                          (inst + "1")
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (expand
                                                               "edges_of_polygon")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (rewrite
                                               "between_rays_equiv")
                                              (("1"
                                                (use
                                                 "point_between_rays_rotate_left")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (hide -1 -11)
                                                      (("1"
                                                        (expand
                                                         "reverse_segment")
                                                        (("1"
                                                          (expand
                                                           "edges_of_polygon"
                                                           -1
                                                           (2 3))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (case
                                                                 "edges_of_polygon(C)(i) = edges_of_polygon(Bm)
                                                                                                                                                                                                                                                                                                                  (find_index(Bm, C`vertices(i))) and
                                                                                                                                                                                                                                                                                     (# p1 := C`vertices(i), p2 := e`p2 #) = edges_of_polygon(Am)(i!1)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "seq_prev_vtx")
                                                                    (("1"
                                                                      (expand
                                                                       "prev_index")
                                                                      (("1"
                                                                        (expand
                                                                         "simple_merged_polygon")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (equate
                                                                             "merge_seq(A, B)`seq(i - 1)"
                                                                             "C`vertices(i - 1)"
                                                                             (assert))
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (lemma
                                                                       "find_index_segment_is_edge")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "C`vertices(i)"
                                                                         "C`vertices(next_index(C,i))"
                                                                         "Bm")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-6
                                                                        -7
                                                                        1))
                                                                      (("2"
                                                                        (grind-with-ext)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (-1 -7 -8))
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "on_segment_not_between_rays")
                                          (("2"
                                            (ground)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (replace -2)
                                              (("2"
                                                (hide-all-but
                                                 (-1 -5 -6 2))
                                                (("2"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("2"
                                                    (expand
                                                     "point_on_segment?")
                                                    (("2"
                                                      (inst + "1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "Am`vertices")
                                  (("2"
                                    (expand "uniq_vertex_list?")
                                    (("2"
                                      (inst
                                       -
                                       "find_index(Am, C`vertices(i))"
                                       "i!1")
                                      (("1"
                                        (use "find_index_self")
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (typepred
                                           "find_index(Am, C`vertices(i))")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "vertex?")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (hide-all-but (-3 -4 1))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep + t)
        (("2" (expand "point_between_edges?")
          (("2" (expand "edge_of_polygon?")
            (("2" (skeep)
              (("2" (expand "edges_of_polygon" -2)
                (("2" (use "merge_vertex_seq_full")
                  (("2" (expand "merged_polygon")
                    (("2" (assert)
                      (("2" (inst - "i")
                        (("2" (lemma "vertex_find_index")
                          (("2" (inst -1 "Bm" "C`vertices(i)")
                            (("2" (ground)
                              (("1"
                                (case
                                 "find_index(Bm, C`vertices(i)) = i!1")
                                (("1"
                                  (expand "next_merge_vertex")
                                  (("1"
                                    (apply (repeat (lift-if)))
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (expand "seq_prev_vtx")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "simple_merged_polygon")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (rewrite
                                                           "between_rays_equiv")
                                                          (("1"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("1"
                                                              (expand
                                                               "reverse_segment")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -8
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -9)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (rewrite*
                                                                           "find_index_self_index")
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (equate
                                                                                 "C`vertices"
                                                                                 "merge_seq(A, B)`seq")
                                                                                (("1"
                                                                                  (use
                                                                                   "point_between_rays_not_on_rays")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2
                                                                                         3)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "rem_minus_1_eq_prev_index"
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "rem_mod")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "point_on_arb_ray?")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "norm(merge_seq(A, B)`seq(i - 1) - Bm`vertices(i!1))")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("1"
                                                                                                    (real-props)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "u"
                                                                                                         "merge_seq(A, B)`seq(i - 1)")
                                                                                                        (("1"
                                                                                                          (grind-with-ext)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -9
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (use
                                                                                         "adj_merge_seq_vertices_distinct")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "i")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "next_index"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "merge_seq_has_uniq_vertex_list")
                                                                                                    (("1"
                                                                                                      (beta)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "uniq_vertex_list?")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "i"
                                                                                                           "0")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "next_index"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "merge_seq_has_uniq_vertex_list")
                                                                                                  (("2"
                                                                                                    (beta)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "uniq_vertex_list?")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "i"
                                                                                                         "0")
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (replace
                                                                                       -9
                                                                                       :dir
                                                                                       rl)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "prev_index"
                                                                                         -1)
                                                                                        (("3"
                                                                                          (use
                                                                                           "merge_seq_has_uniq_vertex_list")
                                                                                          (("3"
                                                                                            (beta)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "uniq_vertex_list?")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -
                                                                                                 "i"
                                                                                                 "i-1")
                                                                                                (("3"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -12
                                                                                   +)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (replace
                                                                                   -12
                                                                                   +)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "between_rays_equiv")
                                                (("1"
                                                  (use
                                                   "point_between_rays_rotate_left")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "reverse_segment")
                                                          (("1"
                                                            (use
                                                             "point_between_rays_antisymmetric")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -10)
                                                                (("2"
                                                                  (equate
                                                                   (!
                                                                    -1
                                                                    0
                                                                    1)
                                                                   (!
                                                                    1
                                                                    0
                                                                    1))
                                                                  (("1"
                                                                    (equate
                                                                     (!
                                                                      -1
                                                                      0
                                                                      2)
                                                                     (!
                                                                      1
                                                                      0
                                                                      2))
                                                                    (("1"
                                                                      (equate
                                                                       (!
                                                                        -1
                                                                        1)
                                                                       (!
                                                                        1
                                                                        1))
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("1"
                                                                            (expand
                                                                             "seq_prev_vtx")
                                                                            (("1"
                                                                              (expand
                                                                               "prev_index")
                                                                              (("1"
                                                                                (expand
                                                                                 "simple_merged_polygon")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "find_index_self")
                                                                      (("2"
                                                                        (expand
                                                                         "edges_of_polygon"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-7
                                                                      -8
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "edges_of_polygon")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-8 1))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (-8 1))
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (use
                                               "on_segment_not_between_rays")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -3)
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 -6 -7 2))
                                                    (("2"
                                                      (expand
                                                       "point_on_segment?")
                                                      (("2"
                                                        (inst + "1")
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (use
                                           "on_segment_not_between_rays")
                                          (("2"
                                            (ground)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (replace -2)
                                              (("2"
                                                (hide-all-but
                                                 (-1 -5 -6 2))
                                                (("2"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("2"
                                                    (expand
                                                     "point_on_segment?")
                                                    (("2"
                                                      (inst + "1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "Bm`vertices")
                                  (("2"
                                    (expand "uniq_vertex_list?")
                                    (("2"
                                      (inst
                                       -
                                       "find_index(Bm, C`vertices(i))"
                                       "i!1")
                                      (("1"
                                        (use "find_index_self")
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (typepred
                                           "find_index(Bm, C`vertices(i))")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "vertex?")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (hide-all-but (-3 -4 1))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (last_edge_is_leftmost_subcase_0_TCC1 0
  (last_edge_is_leftmost_subcase_0_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (last_edge_is_leftmost_subcase_0 subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (last_edge_is_leftmost_subcase_0_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (last_edge_is_leftmost_subcase_0 subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (last_edge_is_leftmost_subcase_0 0
  (last_edge_is_leftmost_subcase_0-1 nil 3874129020
   ("" (skeep*)
    (("" (lemma "merge_only_vertex_intersections")
      (("" (inst - "A" "C" "B" "Am" "Bm")
        (("" (expand "merged_polygon")
          (("" (ground)
            (("1" (lemma "endpoint_outside_or_on_perimeter")
              (("1" (inst - "Bm" "C" "e" "r" "e`p1")
                (("1" (ground)
                  (("1"
                    (case "exists (j: below(C`num_vertices), (q: (vertex?(Bm)))):
                                                         q = C`vertices(j) and j > 0")
                    (("1" (skeep - t)
                      (("1"
                        (lemma
                         "first_path_to_exit_B_from_vertex_exists")
                        (("1" (inst - "Bm" "C" "q!1" "e`p1")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (copy -5)
                                (("1"
                                  (expand "vertex?" -1)
                                  (("1"
                                    (skeep - t)
                                    (("1"
                                      (case-replace
                                       "find_index(Bm, q!1) = i")
                                      (("1"
                                        (case-replace "k = 0")
                                        (("1"
                                          (hide -5)
                                          (("1"
                                            (rewrite "rem_mod")
                                            (("1"
                                              (lemma
                                               "no_outgoing_edges_in_noninitial_wedges")
                                              (("1"
                                                (inst
                                                 -
                                                 "A"
                                                 "C"
                                                 "B"
                                                 "Am"
                                                 "Bm")
                                                (("1"
                                                  (expand
                                                   "merged_polygon")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "j"
                                                       "edges_of_polygon(Bm)(i)")
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon"
                                                         +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "segment_exits_polygon?")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (lemma
                                                                 "outside_point_on_segment_between_rays")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "Bm"
                                                                   "C"
                                                                   "pt"
                                                                   "Bm`vertices(next_index(Bm, i))"
                                                                   "j"
                                                                   "edges_of_polygon(Bm)(i)")
                                                                  (("1"
                                                                    (expand
                                                                     "point_between_edges?")
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "edges_of_polygon"
                                                                         -1)
                                                                        (("1"
                                                                          (use
                                                                           "perimeter_not_outside")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "vertex_on_perimeter")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("2"
                                                                            (lemma
                                                                             "vertex_neq_next")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "Bm"
                                                                               "i")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "edges_of_polygon"
                                                                         1)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst - "k - 1")
                                          (("1"
                                            (expand "edge_of_polygon?")
                                            (("1"
                                              (skeep*)
                                              (("1"
                                                (expand
                                                 "edges_of_polygon"
                                                 -15)
                                                (("1"
                                                  (replace
                                                   -15
                                                   -18
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case-replace
                                                       "rem(Bm`num_vertices)(i + k) = i!2")
                                                      (("1"
                                                        (equate
                                                         "rem(Bm`num_vertices)(i - 1 + k)"
                                                         "prev_index(Bm, i!2)")
                                                        (("1"
                                                          (lemma
                                                           "shared_endpoints_imp_same_edge")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "Bm"
                                                             "e"
                                                             "edges_of_polygon(Bm)(prev_index(Bm, i!2))")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -12)
                                                                (("1"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   -12)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "edges_of_polygon"
                                                                 2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "rem_minus_1_eq_prev_index")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "Bm"
                                                             "i!2")
                                                            (("2"
                                                              (replace
                                                               -2
                                                               (-1 1)
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  1))
                                                                (("2"
                                                                  (rewrite
                                                                   "rem_diff1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "no_outgoing_edges_in_noninitial_wedges")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "A"
                                                           "C"
                                                           "B"
                                                           "Am"
                                                           "Bm")
                                                          (("2"
                                                            (expand
                                                             "merged_polygon")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "vertex?"
                                                                 -6)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "i_1"
                                                                     "edges_of_polygon(Bm)(rem(Bm`num_vertices)(i + k))")
                                                                    (("2"
                                                                      (expand
                                                                       "edges_of_polygon"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (equate
                                                                             "i_1"
                                                                             "0"
                                                                             (assert))
                                                                            (("1"
                                                                              (typepred
                                                                               "Bm`vertices")
                                                                              (("1"
                                                                                (expand
                                                                                 "uniq_vertex_list?")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "rem(Bm`num_vertices)(i + k)"
                                                                                   "i!2")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "segment_exits_polygon?")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "point_between_edges?")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "outside_point_on_segment_between_rays")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "Bm"
                                                                                       "C"
                                                                                       "pt"
                                                                                       "Bm`vertices(next_index(Bm, rem(Bm`num_vertices)(i + k)))"
                                                                                       "i_1"
                                                                                       "edges_of_polygon(Bm)(rem(Bm`num_vertices)(i + k))")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "edges_of_polygon"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "perimeter_not_outside")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "pt"
                                                                                               "C")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "vertex_on_perimeter")
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "edges_of_polygon")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "vertex_neq_next")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "Bm"
                                                                                                 "rem(Bm`num_vertices)(i + k)")
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (expand
                                                                                           "edges_of_polygon"
                                                                                           1)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -2 1 :dir rl)
                                        (("2"
                                          (rewrite
                                           "find_index_self_index")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "vertex?")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "edge_of_polygon?")
                            (("2" (skeep)
                              (("2"
                                (expand "vertex?")
                                (("2"
                                  (inst + "i")
                                  (("2"
                                    (expand "edges_of_polygon")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "forall (s: (edge_of_polygon?(C))): edge_of_polygon?(Am)(s)")
                      (("1" (typepred "Bm")
                        (("1" (expand "ccw_merge_pre_condition")
                          (("1" (expand "merge_pre_condition")
                            (("1" (skeep)
                              (("1"
                                (lemma
                                 "edges_included_imp_edge_sets_eq")
                                (("1"
                                  (inst - "C" "Am")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "in_out_for_overlapping_polygons")
                                      (("1"
                                        (inst - "Bm" "Am" "p" "e`p1")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst-cp
                                               -9
                                               "edges_of_polygon(Am)(j)")
                                              (("1"
                                                (inst
                                                 -9
                                                 "edges_of_polygon(Am)(i)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "edge_of_polygon?"
                                                     (-9 -10))
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon"
                                                         (-9 -10))
                                                        (("1"
                                                          (case
                                                           "i_1 = 0")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "i!1"
                                                             "v")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "i_1"
                                                             "u")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use
                                             "injected_only_vertex_intersections")
                                            (("2" (ground) nil nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "polygon_contained?")
                                            (("3"
                                              (name-replace*
                                               ("s"
                                                "edges_of_polygon(C)(0)"
                                                "w"
                                                "s`p1 + min(length(s), vertex_wedge_radius(Bm)) * ^(s`p2 - s`p1)"))
                                              (("3"
                                                (case
                                                 "point_outside_polygon?(w, Bm)")
                                                (("1"
                                                  (inst - "w")
                                                  (("1"
                                                    (split -4 :depth 1)
                                                    (("1"
                                                      (lemma
                                                       "point_out_not_in")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "w"
                                                         "Bm")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (use
                                                             "perimeter_not_outside")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "point_on_polygon_perimeter?")
                                                      (("2"
                                                        (inst -10 "s")
                                                        (("1"
                                                          (expand
                                                           "edge_of_polygon?"
                                                           -10)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "edges_of_polygon(Am)(i)")
                                                              (("1"
                                                                (replace
                                                                 -10
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "point_on_segment_has_norm_offset")
                                                                  (("1"
                                                                    (inst?
                                                                     +)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -3
                                                           1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (copy -16)
                                                  (("2"
                                                    (expand
                                                     "edge_of_polygon?"
                                                     -1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (use
                                                         "all_wedge_points_outside")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "point_in_vertex_wedge?")
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (lemma
                                                                 "extend_points_between_edges")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "r"
                                                                   "reverse_segment(e)"
                                                                   "true"
                                                                   "C"
                                                                   "0")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "q"
                                                                     "h"
                                                                     "true"
                                                                     "C"
                                                                     "0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "reverse_segment"
                                                                         -2
                                                                         (1
                                                                          2))
                                                                        (("1"
                                                                          (rewrite
                                                                           "point_on_reverse_segment")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "h`p2")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "e`p1")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "point_on_reverse_segment")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "reverse_segment")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "C")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "ccw_vertex_order?")
                                                                                          (("1"
                                                                                            (use
                                                                                             "merge_seq_topleft_index_is_0")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -23
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "merge_seq_topleft_vertices")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -21
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "first_two_merge_vertices")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "Bm`vertices(i) = C`vertices(0)")
                                                                                                                    (("1"
                                                                                                                      (equate
                                                                                                                       "find_index(Bm, C`vertices(0))"
                                                                                                                       "i")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -5
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (name-replace
                                                                                                                               "L"
                                                                                                                               "C`vertices(0) - (# x := 1, y := 0 #)"
                                                                                                                               :hide?
                                                                                                                               nil)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "point_between_edges?")
                                                                                                                                (("1"
                                                                                                                                  (rewrite*
                                                                                                                                   "between_rays_equiv")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "edges_of_polygon")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "reverse_segment")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "interpolate_point_between_rays_8")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "L"
                                                                                                                                             "(# p1 := C`vertices(0),
                                                                                              p2 := C`vertices(prev_index(C, 0)) #)"
                                                                                                                                             "(# p1 := Bm`vertices(i),
                                                                                  p2 := Bm`vertices(prev_index(Bm, i)) #)"
                                                                                                                                             "(# p1 := C`vertices(0),
                                                                                  p2 := C`vertices(next_index(C, 0)) #)"
                                                                                                                                             "(# p1 := Bm`vertices(i),
                                                                                  p2 := Bm`vertices(next_index(Bm, i)) #)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -10
                                                                                                                                                   -11
                                                                                                                                                   -12
                                                                                                                                                   -20
                                                                                                                                                   -34
                                                                                                                                                   -38)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "extend_points_between_edges")
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -7)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "C`vertices(next_index(C, 0))"
                                                                                                                                                         "edges_of_polygon(C)(0)"
                                                                                                                                                         "true"
                                                                                                                                                         "Bm"
                                                                                                                                                         "i")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "edges_of_polygon"
                                                                                                                                                           -1
                                                                                                                                                           (1
                                                                                                                                                            2))
                                                                                                                                                          (("1"
                                                                                                                                                            (ground)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "w")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "point_between_edges?")
                                                                                                                                                                (("1"
                                                                                                                                                                  (ground)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "edges_of_polygon"
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "between_rays_equiv")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "reverse_segment")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     (-10
                                                                                                                                                                      -11
                                                                                                                                                                      1))
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "edges_of_polygon")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -2)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "point_on_segment_has_norm_offset")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst?)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     (-1
                                                                                                                                                                      -11
                                                                                                                                                                      -12))
                                                                                                                                                                    (("3"
                                                                                                                                                                      (expand
                                                                                                                                                                       "edges_of_polygon")
                                                                                                                                                                      (("3"
                                                                                                                                                                        (equate
                                                                                                                                                                         "w"
                                                                                                                                                                         "s`p1"
                                                                                                                                                                         (grind))
                                                                                                                                                                        (("3"
                                                                                                                                                                          (invoke
                                                                                                                                                                           (name-replace
                                                                                                                                                                            "V"
                                                                                                                                                                            "%1")
                                                                                                                                                                           (!
                                                                                                                                                                            -2
                                                                                                                                                                            l
                                                                                                                                                                            2))
                                                                                                                                                                          (("3"
                                                                                                                                                                            (cancel-add
                                                                                                                                                                             -2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "V")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (ground)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "add_move_left")
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (expand
                                                                                                                                                               "point_between_edges?")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "edges_of_polygon")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "between_rays_equiv")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "reverse_segment")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   -6
                                                                                                                                                   -16
                                                                                                                                                   -34
                                                                                                                                                   -38)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "prev_0")
                                                                                                                                                    (("2"
                                                                                                                                                      (equate
                                                                                                                                                       "C`vertices(0) + (# x := -1, y := 0 #)"
                                                                                                                                                       "L")
                                                                                                                                                      (("1"
                                                                                                                                                        (equate
                                                                                                                                                         "next_index(C, 0)"
                                                                                                                                                         "1")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "next_merge_vertex")
                                                                                                                                                          (("1"
                                                                                                                                                            (equate
                                                                                                                                                             "find_index(Bm, C`vertices(0))"
                                                                                                                                                             "i")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -21
                                                                                                                                                               "edges_of_polygon(C)(0)")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "edge_of_polygon?"
                                                                                                                                                                 -21)
                                                                                                                                                                (("1"
                                                                                                                                                                  (skeep)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "edges_of_polygon"
                                                                                                                                                                     -21)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (equate
                                                                                                                                                                       "find_index(Am, C`vertices(0))"
                                                                                                                                                                       "i!1")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (ground)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lift-if)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (split
                                                                                                                                                                             -5)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (ground)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "leftmost_has_min_x")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -
                                                                                                                                                                                   "Bm"
                                                                                                                                                                                   "C`vertices(0)")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -
                                                                                                                                                                                       "next_index(Bm, i)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                         (-1
                                                                                                                                                                                          -2
                                                                                                                                                                                          -5))
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (grind)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -13
                                                                                                                                                                                 -11
                                                                                                                                                                                 :dir
                                                                                                                                                                                 rl)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "point_between_rays_rotate_left")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -
                                                                                                                                                                                       "Bm`vertices(next_index(Bm, i))"
                                                                                                                                                                                       "(# p1 := Bm`vertices(i), p2 := L #)"
                                                                                                                                                                                       "(# p1 := C`vertices(0), p2 := C`vertices(1) #)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (equate
                                                                                                                                                                                           "(# p1 := C`vertices(0), p2 := C`vertices(1) #)"
                                                                                                                                                                                           "edges_of_polygon(Am)(i!1)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "edges_of_polygon"
                                                                                                                                                                                             -2
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (use
                                                                                                                                                                                               "point_between_rays_antisymmetric")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "edges_of_polygon"
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (ground)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "leftmost_has_min_x")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -
                                                                                                                                                                                             "Bm"
                                                                                                                                                                                             "C`vertices(0)")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "next_index(Bm, i)")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                   (-1
                                                                                                                                                                                                    -2
                                                                                                                                                                                                    -6
                                                                                                                                                                                                    -7))
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (decompose-equality
                                                                                                                                                                                                       -4)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (decompose-equality
                                                                                                                                                                                                       -3)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -12
                                                                                                                                                                                 -10
                                                                                                                                                                                 :dir
                                                                                                                                                                                 rl)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1
                                                                                                                                                                                     -10
                                                                                                                                                                                     :dir
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                       -10)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (use
                                                                                                                                                                                         "point_between_rays_not_on_rays")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (ground)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "point_on_arb_ray?")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "^")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   +
                                                                                                                                                                                                   "norm(C`vertices(1) - C`vertices(0))")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (real-props)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (grind-with-ext)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -21
                                                                                                                                                                           :dir
                                                                                                                                                                           rl)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "find_index_self_index")
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (replace
                                                                                                                                                               -3
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "find_index_self_index")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (-2
                                                                                                                                                          1))
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   (-2
                                                                                                                                                    1))
                                                                                                                                                  (("3"
                                                                                                                                                    (expand
                                                                                                                                                     "L")
                                                                                                                                                    (("3"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("3"
                                                                                                                                                        (replace
                                                                                                                                                         -2
                                                                                                                                                         :hide?
                                                                                                                                                         t)
                                                                                                                                                        (("3"
                                                                                                                                                          (use
                                                                                                                                                           "comps_eq")
                                                                                                                                                          (("3"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             :hide?
                                                                                                                                                             t)
                                                                                                                                                            (("3"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("4"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("5"
                                                                                                                                                  (replace
                                                                                                                                                   -12
                                                                                                                                                   -10
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("5"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("6"
                                                                                                                                                  (expand
                                                                                                                                                   "edge_of_polygon?"
                                                                                                                                                   -27)
                                                                                                                                                  (("6"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("6"
                                                                                                                                                      (expand
                                                                                                                                                       "edges_of_polygon"
                                                                                                                                                       -27)
                                                                                                                                                      (("6"
                                                                                                                                                        (replace
                                                                                                                                                         -27
                                                                                                                                                         -30
                                                                                                                                                         :dir
                                                                                                                                                         rl)
                                                                                                                                                        (("6"
                                                                                                                                                          (assert)
                                                                                                                                                          (("6"
                                                                                                                                                            (replace
                                                                                                                                                             -12
                                                                                                                                                             -31
                                                                                                                                                             :dir
                                                                                                                                                             rl)
                                                                                                                                                            (("6"
                                                                                                                                                              (assert)
                                                                                                                                                              (("6"
                                                                                                                                                                (replace
                                                                                                                                                                 -27
                                                                                                                                                                 -11
                                                                                                                                                                 :dir
                                                                                                                                                                 rl)
                                                                                                                                                                (("6"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("6"
                                                                                                                                                                    (equate
                                                                                                                                                                     "i!1"
                                                                                                                                                                     "prev_index(Bm, i)")
                                                                                                                                                                    (("6"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "Bm`vertices")
                                                                                                                                                                      (("6"
                                                                                                                                                                        (expand
                                                                                                                                                                         "uniq_vertex_list?")
                                                                                                                                                                        (("6"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "i"
                                                                                                                                                                           "next_index(Bm, i!1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (ground)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1
                                                                                                                                                                               1
                                                                                                                                                                               :dir
                                                                                                                                                                               rl)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("7"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("3"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("4"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("4"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("5"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("5"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("6"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("6"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("7"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("7"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("8"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("8"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "find_index_self_index")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       (-10
                                                                                                                        -29
                                                                                                                        1))
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -2
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "length")
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (real-props)
                                                                      (("2"
                                                                        (expand
                                                                         "min")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (real-props)
                                                                            (("2"
                                                                              (case-replace
                                                                               "Bm`vertices(i) = s`p1")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "norm_scal")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs")
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (real-props)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "edges_of_polygon")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4" (propax) nil nil)
                                           ("5" (propax) nil nil)
                                           ("6"
                                            (hide-all-but (-12 1))
                                            (("6"
                                              (expand
                                               "edge_of_polygon?")
                                              (("6"
                                                (skeep)
                                                (("6"
                                                  (expand "vertex?")
                                                  (("6"
                                                    (inst?)
                                                    (("6"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("7"
                                            (lemma
                                             "same_perim_pts_imp_same_exterior_pts")
                                            (("7"
                                              (inst - "C" "Am")
                                              (("7"
                                                (ground)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "point_on_polygon_perimeter?")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           -8
                                                           "e!1")
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "point_on_polygon_perimeter?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "e!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-5 1))
                                      (("2"
                                        (skeep)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep + t)
                        (("2" (use "merge_path_edges_AB")
                          (("2" (assert)
                            (("2" (expand "edge_of_polygon?" -2)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst - "i")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (expand "edge_of_polygon?" -1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "edges_of_polygon")
                                            (("2"
                                              (case-replace "i = 0")
                                              (("1"
                                                (inst
                                                 +
                                                 "1"
                                                 "Bm`vertices(next_index(Bm, i!1))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "next_index"
                                                     -3)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 +
                                                 "i"
                                                 "Bm`vertices(i!1)")
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (lemma "no_outgoing_edges_in_noninitial_wedges")
                    (("2" (inst - "A" "C" "B" "Am" "Bm")
                      (("2" (expand "merged_polygon")
                        (("2" (flatten)
                          (("2" (expand "vertex?")
                            (("2" (skeep)
                              (("2"
                                (inst -2 "i" "e")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "point_between_edges?")
                                    (("2"
                                      (lemma
                                       "outside_point_on_segment_between_rays")
                                      (("2"
                                        (inst
                                         -
                                         "Bm"
                                         "C"
                                         "r"
                                         "e`p2"
                                         "i"
                                         "e")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (hide-all-but (-1 -3 -14))
                                            (("2"
                                              (use
                                               "perimeter_not_outside")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "vertex_on_perimeter")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "segment_endpoint?")
                    (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (use "merge_path_edges_AB")
                (("2" (ground)
                  (("2" (typepred "s")
                    (("2" (expand "edge_of_polygon?" -1)
                      (("2" (skeep)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (last_edge_is_leftmost_incoming_edge_TCC1 0
  (last_edge_is_leftmost_incoming_edge_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (last_edge_is_leftmost_incoming_edge subtype
    "(number_fields.-)(merge_props.C`num_vertices, 1)"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (last_edge_is_leftmost_incoming_edge_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (last_edge_is_leftmost_incoming_edge subtype
    "(number_fields.-)(merge_props.C`num_vertices, 1)"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (last_edge_is_leftmost_incoming_edge_TCC2 0
  (last_edge_is_leftmost_incoming_edge_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (last_edge_is_leftmost_incoming_edge subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (last_edge_is_leftmost_incoming_edge_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (last_edge_is_leftmost_incoming_edge subtype "0"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (last_edge_is_leftmost_incoming_edge 0
  (last_edge_is_leftmost_incoming_edge-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "merged_polygon")
      (("" (use "merge_path_edges_AB")
        (("" (assert)
          (("" (assert)
            (("" (lemma "merge_only_vertex_intersections")
              (("" (inst - "A" "C" "B" "Am" "Bm")
                (("" (expand "merged_polygon")
                  (("" (split -1)
                    (("1" (flatten)
                      (("1" (case "e`p2 = C`vertices(0)")
                        (("1"
                          (name-replace "r"
                           "e`p2 - min(length(e)/2, vertex_wedge_radius(C)) * ^(e`p2 - e`p1)")
                          (("1"
                            (case "r /= e`p2 and point_on_segment?(r, e)")
                            (("1" (flatten)
                              (("1"
                                (case
                                 "point_between_rays?(reverse_segment(s), edges_of_polygon(C)(0))(e`p1)")
                                (("1"
                                  (lemma "extend_points_between_edges")
                                  (("1"
                                    (inst
                                     -
                                     "e`p1"
                                     "reverse_segment(e)"
                                     "true"
                                     "C"
                                     "0")
                                    (("1"
                                      (case
                                       "point_between_edges?(TRUE, C, 0)(e`p1)")
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (inst - "r")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (lemma
                                               "incoming_edge_imp_outgoing_edge")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (inst
                                                   -
                                                   "Bm"
                                                   "C"
                                                   "e"
                                                   "0")
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (use
                                                         "no_outgoing_edges_in_noninitial_wedges")
                                                        (("1"
                                                          (expand
                                                           "merged_polygon")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "j"
                                                               "e!1")
                                                              (("1"
                                                                (expand
                                                                 "point_in_vertex_wedge?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (typepred
                                                                         "e!1")
                                                                        (("1"
                                                                          (typepred
                                                                           "Bm")
                                                                          (("1"
                                                                            (equate
                                                                             "j"
                                                                             "0"
                                                                             (assert))
                                                                            (("1"
                                                                              (lemma
                                                                               "last_edge_is_leftmost_subcase_0")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "A"
                                                                                 "C"
                                                                                 "B"
                                                                                 "Am"
                                                                                 "Bm"
                                                                                 "e"
                                                                                 "e!1"
                                                                                 "r"
                                                                                 "q")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "norm(r - C`vertices(0)) <= vertex_wedge_radius(C)")
                                                                                    (("1"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "all_wedge_points_outside")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "r"
                                                                                           "C"
                                                                                           "0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "point_in_vertex_wedge?")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "all_wedge_points_outside")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "q"
                                                                                           "C"
                                                                                           "0")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "point_in_vertex_wedge?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -16
                                                                                       1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -17
                                                                                         1)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "abs")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "extend_points_between_edges")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "q"
                                                                           "e!1"
                                                                           "true"
                                                                           "C"
                                                                           "j")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (inst + "r")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "point_in_vertex_wedge?")
                                                          (("3"
                                                            (replace
                                                             -7
                                                             1
                                                             :dir
                                                             rl)
                                                            (("3"
                                                              (replace
                                                               -8
                                                               1
                                                               :dir
                                                               rl)
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (expand
                                                                   "abs")
                                                                  (("3"
                                                                    (expand
                                                                     "min")
                                                                    (("3"
                                                                      (lift-if)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   -
                                                   "Am"
                                                   "C"
                                                   "e"
                                                   "0")
                                                  (("2"
                                                    (split -3)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (use
                                                         "no_outgoing_edges_in_noninitial_wedges")
                                                        (("1"
                                                          (expand
                                                           "merged_polygon")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "j"
                                                               "e!1")
                                                              (("1"
                                                                (expand
                                                                 "point_in_vertex_wedge?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (typepred
                                                                         "e!1")
                                                                        (("1"
                                                                          (typepred
                                                                           "Bm")
                                                                          (("1"
                                                                            (equate
                                                                             "j"
                                                                             "0"
                                                                             (assert))
                                                                            (("1"
                                                                              (lemma
                                                                               "last_edge_is_leftmost_subcase_0")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "B"
                                                                                 "C"
                                                                                 "A"
                                                                                 "Bm"
                                                                                 "Am"
                                                                                 "e"
                                                                                 "e!1"
                                                                                 "r"
                                                                                 "q")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "inject_vertices_into_polygon_comm")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "norm(r - C`vertices(0)) <= vertex_wedge_radius(C)")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "simple_merged_polygon")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "merge_seq_commutative")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ccw_merge_pre_condition")
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "merge_pre_condition_symmetric")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "B")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "ccw_merge_pre_condition")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "all_wedge_points_outside")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "r"
                                                                                               "C"
                                                                                               "0")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "point_in_vertex_wedge?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lemma
                                                                                             "all_wedge_points_outside")
                                                                                            (("3"
                                                                                              (inst
                                                                                               -
                                                                                               "q"
                                                                                               "C"
                                                                                               "0")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "point_in_vertex_wedge?")
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -17
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -18
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "abs")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "ccw_merge_pre_condition")
                                                                                  (("2"
                                                                                    (use
                                                                                     "merge_pre_condition_symmetric")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (expand
                                                                                   "ccw_merge_pre_condition")
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "B")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "ccw_merge_pre_condition")
                                                                                      (("3"
                                                                                        (use
                                                                                         "merge_pre_condition_symmetric")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "extend_points_between_edges")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "q"
                                                                           "e!1"
                                                                           "true"
                                                                           "C"
                                                                           "j")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (inst + "r")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "point_in_vertex_wedge?")
                                                          (("3"
                                                            (replace
                                                             -7
                                                             1
                                                             :dir
                                                             rl)
                                                            (("3"
                                                              (replace
                                                               -8
                                                               1
                                                               :dir
                                                               rl)
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (expand
                                                                   "abs")
                                                                  (("3"
                                                                    (expand
                                                                     "min")
                                                                    (("3"
                                                                      (lift-if)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "point_on_reverse_segment")
                                              nil
                                              nil)
                                             ("3"
                                              (expand
                                               "reverse_segment")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "reverse_segment")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (expand "reverse_segment")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4" (propax) nil nil)
                                         ("5"
                                          (rewrite
                                           "point_on_reverse_segment")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "point_between_edges?")
                                        (("2"
                                          (expand "prev_index")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite
                                               "between_rays_equiv")
                                              (("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "C")
                                  (("2"
                                    (expand "ccw_vertex_order?")
                                    (("2"
                                      (use
                                       "merge_seq_topleft_index_is_0")
                                      (("2"
                                        (replace -11 -1 :dir rl)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (expand
                                             "point_between_edges?")
                                            (("2"
                                              (expand "prev_index")
                                              (("2"
                                                (rewrite
                                                 "between_rays_equiv")
                                                (("1"
                                                  (replace -14 :dir rl)
                                                  (("1"
                                                    (lemma
                                                     "interpolate_point_between_rays_3")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "C`vertices(0) - (# x := 1, y := 0 #)"
                                                       "reverse_segment(s)"
                                                       "edges_of_polygon(C)(0)"
                                                       "reverse_segment(e)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "reverse_segment"
                                                           (-1 1))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "edges_of_polygon"
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -7
                                                                 -1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1 1 :dir rl)
                              (("2"
                                (hide-all-but 1)
                                (("2"
                                  (ground)
                                  (("1"
                                    (name-replace
                                     "V"
                                     "min(length(e) / 2, vertex_wedge_radius(C)) * ^(e`p2 - e`p1)")
                                    (("1"
                                      (move-terms -1 l 2)
                                      (("1"
                                        (cancel-add -1)
                                        (("1"
                                          (expand "V")
                                          (("1"
                                            (use "scal_eq_zero")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "segment_far_endpoint_length")
                                    (("2"
                                      (name-replace
                                       "N"
                                       "^(e`p2 - e`p1)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (equate
                                           "e`p1 + length(e) * N -
                                                                                                                   min(length(e) / 2, vertex_wedge_radius(C)) * N"
                                           "e`p1 + (length(e) - min(length(e) / 2, vertex_wedge_radius(C))) * N")
                                          (("1"
                                            (rewrite
                                             "point_on_segment_has_norm_offset")
                                            (("1"
                                              (inst
                                               +
                                               "length(e) - min(length(e) / 2, vertex_wedge_radius(C))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "N")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite "scal_sub_left")
                                              (("2"
                                                (grind-with-ext)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-7 -8 1))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skeep + t)
                      (("2" (expand "edge_of_polygon?" -1)
                        (("2" (skeep)
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_outgoing_edges_case_i_eq_0_A_TCC1 0
  (no_outgoing_edges_case_i_eq_0_A_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (typepred "find_index(Bm, C`vertices(i))")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (no_outgoing_edges_case_i_eq_0_A subtype
    "polygons_2d.find_index(merge_props.Bm, merge_props.C`vertices(merge_props.i))"
    "naturalnumbers.below(merge_props.Bm`num_vertices)"))
  (no_outgoing_edges_case_i_eq_0_A_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_case_i_eq_0_A subtype
    "polygons_2d.find_index(merge_props.Bm, merge_props.C`vertices(merge_props.i))"
    "naturalnumbers.below(merge_props.Bm`num_vertices)")))
 (no_outgoing_edges_case_i_eq_0_A_TCC2 0
  (no_outgoing_edges_case_i_eq_0_A_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (typepred "find_index(Am, C`vertices(i))")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (no_outgoing_edges_case_i_eq_0_A subtype "merge_props.j"
    "naturalnumbers.below(merge_props.Am`num_vertices)"))
  (no_outgoing_edges_case_i_eq_0_A_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_case_i_eq_0_A subtype "merge_props.j"
    "naturalnumbers.below(merge_props.Am`num_vertices)")))
 (no_outgoing_edges_case_i_eq_0_A_TCC3 0
  (no_outgoing_edges_case_i_eq_0_A_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (expand "merge_seq")
      (("" (expand "o")
        (("" (expand "singleton_seq") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (no_outgoing_edges_case_i_eq_0_A subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}"))
  (no_outgoing_edges_case_i_eq_0_A_TCC3-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_case_i_eq_0_A subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}")))
 (no_outgoing_edges_case_i_eq_0_A 0
  (no_outgoing_edges_case_i_eq_0_A-1 nil 3874129020
   ("" (skeep*)
    (("" (replace -3)
      (("" (expand "prev_index")
        (("" (expand "next_index" -8 1)
          (("" (expand "seq_prev_vtx")
            (("" (assert)
              ((""
                (equate
                 "edges_of_polygon(Bm)(find_index(Bm, C`vertices(0)))"
                 "edges_of_polygon(C)(0)")
                (("1" (use "point_between_rays_rotate_right")
                  (("1" (ground)
                    (("1" (split -1)
                      (("1" (replace -1 :hide? t)
                        (("1" (expand "edges_of_polygon" 1 (1 3))
                          (("1"
                            (case-replace
                             "Am`vertices(next_index(Am, j)) = e`p2")
                            (("1"
                              (case-replace
                               "merge_seq(A, B)`seq = C`vertices")
                              (("1"
                                (use "merge_path_edges_AB")
                                (("1"
                                  (expand "merged_polygon")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "point_between_rays?(reverse_segment(edges_of_polygon
                                                                                                                     (C)(C`num_vertices - 1)),
                                                                                                     e)
                                                                                                    (prev_0(C`vertices(0)))")
                                      (("1"
                                        (lemma
                                         "interpolate_point_between_rays")
                                        (("1"
                                          (inst
                                           -
                                           "prev_0(C`vertices(0))"
                                           "reverse_segment(edges_of_polygon
                                                                                                                                                      (C)(C`num_vertices - 1))"
                                           "e"
                                           "edges_of_polygon(C)(0)")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand
                                               "edges_of_polygon"
                                               -1
                                               1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-13 1))
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil nil))
                                              nil)
                                             ("4"
                                              (hide-all-but -1)
                                              (("4" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "Am")
                                        (("2"
                                          (expand "ccw_vertex_order?")
                                          (("2"
                                            (expand
                                             "point_between_edges?")
                                            (("2"
                                              (case-replace
                                               "topleft_vertex_idx(Am) = j")
                                              (("1"
                                                (rewrite
                                                 "between_rays_equiv")
                                                (("1"
                                                  (equate
                                                   "Am`vertices(j)"
                                                   "C`vertices(0)"
                                                   (assert))
                                                  (("1"
                                                    (case-replace
                                                     "edges_of_polygon(Am)(j) = e")
                                                    (("1"
                                                      (equate
                                                       "C`vertices(0) - (# x := 1, y := 0 #)"
                                                       "prev_0(C`vertices(0))")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "C`num_vertices - 1")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (equate
                                                             "edges_of_polygon(Am)(prev_index(Am, j))"
                                                             "edges_of_polygon(C)(C`num_vertices - 1)")
                                                            (("1"
                                                              (hide
                                                               -5
                                                               -18
                                                               2
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 "edges_of_polygon"
                                                                 +)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "next_index"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "edge_of_polygon?")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (expand
                                                                                 "next_index"
                                                                                 -2
                                                                                 2)
                                                                                (("1"
                                                                                  (case
                                                                                   "Am`vertices(next_index(Am, i!1)) = Am`vertices(j)")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "Am`vertices")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "uniq_vertex_list?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "next_index(Am, i!1)"
                                                                                         "j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (ground)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "last_edge_is_leftmost_incoming_edge")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "A"
                                                               "C"
                                                               "B"
                                                               "Am"
                                                               "Bm"
                                                               _
                                                               _)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "edges_of_polygon(C)(C`num_vertices - 1)"
                                                                 "edges_of_polygon(Am)(prev_index(Am, find_index(Am, C`vertices(0))))")
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (replace
                                                                     -12)
                                                                    (("1"
                                                                      (lemma
                                                                       "interpolate_point_between_rays_2")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "prev_0(C`vertices(0))"
                                                                         "reverse_segment(edges_of_polygon
                                                                                                                                                                  (Am)(prev_index(Am, j)))"
                                                                         "reverse_segment(edges_of_polygon
                                                                                                                                                                  (C)(C`num_vertices - 1))"
                                                                         "e")
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (hide
                                                                             -5
                                                                             -18
                                                                             2
                                                                             3
                                                                             4)
                                                                            (("1"
                                                                              (expand
                                                                               "edges_of_polygon"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "reverse_segment")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "next_index")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -5
                                                                             -18
                                                                             2
                                                                             3
                                                                             4)
                                                                            (("2"
                                                                              (expand
                                                                               "edges_of_polygon"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "reverse_segment")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1))
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (expand
                                                                             "edges_of_polygon"
                                                                             -1)
                                                                            (("4"
                                                                              (expand
                                                                               "reverse_segment"
                                                                               -1)
                                                                              (("4"
                                                                                (expand
                                                                                 "next_index"
                                                                                 -1)
                                                                                (("4"
                                                                                  (hide
                                                                                   +)
                                                                                  (("4"
                                                                                    (typepred
                                                                                     "Bm")
                                                                                    (("4"
                                                                                      (expand
                                                                                       "ccw_vertex_order?")
                                                                                      (("4"
                                                                                        (expand
                                                                                         "point_between_edges?")
                                                                                        (("4"
                                                                                          (case-replace
                                                                                           "topleft_vertex_idx(Bm) = find_index(Bm, C`vertices(0))")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "between_rays_equiv")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "edges_of_polygon(Bm)(find_index(Bm, C`vertices(0))) =
                                                                                                                                                                           edges_of_polygon(C)(0)")
                                                                                              (("1"
                                                                                                (equate
                                                                                                 "edges_of_polygon(Bm)(prev_index(Bm, find_index(Bm, C`vertices(0))))"
                                                                                                 "edges_of_polygon(C)(C`num_vertices - 1)")
                                                                                                (("1"
                                                                                                  (equate
                                                                                                   "Bm`vertices(find_index(Bm, C`vertices(0))) -
                                                                                                                                                                                                     (# x := 1, y := 0 #)"
                                                                                                   "prev_0(C`vertices(0))")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "point_between_rays_not_on_rays")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "prev_0(C`vertices(0))"
                                                                                                       "reverse_segment(edges_of_polygon
                                                                                                                                                                                                                              (C)(C`num_vertices - 1))"
                                                                                                       "edges_of_polygon(C)(0)")
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "edges_of_polygon"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "reverse_segment"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "next_index"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-20
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "find_index_self")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -4
                                                                                                   -11
                                                                                                   -24)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "edge_of_polygon?"
                                                                                                     -6)
                                                                                                    (("2"
                                                                                                      (skeep)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "edges_of_polygon"
                                                                                                         (-1
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "next_index"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "edges_of_polygon"
                                                                                                                   -7)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "next_index"
                                                                                                                       -8
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "Bm`vertices")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "uniq_vertex_list?")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "find_index(Bm, C`vertices(0))"
                                                                                                                             "next_index(Bm, i!1)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (ground)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-19
                                                                                                  -20
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "find_index_segment_is_edge")
                                                                                                  (("2"
                                                                                                    (grind-with-ext)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -2
                                                                                             -4
                                                                                             -9
                                                                                             -22)
                                                                                            (("2"
                                                                                              (use
                                                                                               "injected_topleft_vertices_shared")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "Bm`vertices")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "uniq_vertex_list?")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "topleft_vertex_idx(Bm)"
                                                                                                       "find_index(Bm, C`vertices(0))")
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "find_index_self")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "Bm"
                                                                                                             "C`vertices(0)")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "edges_of_polygon"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "next_index"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "edges_of_polygon"
                                                       1)
                                                      (("2"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2 -16 2 3)
                                                (("2"
                                                  (use
                                                   "injected_topleft_vertices_shared")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (typepred
                                                       "Am`vertices")
                                                      (("2"
                                                        (expand
                                                         "uniq_vertex_list?")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "topleft_vertex_idx(Am)"
                                                           "j")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "merged_polygon")
                                (("2"
                                  (expand "simple_merged_polygon")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (expand "merged_polygon")
                                  (("3"
                                    (expand "simple_merged_polygon")
                                    (("3"
                                      (replace -3 1)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-9 -10 1))
                        (("2" (grind) nil nil)) nil)
                       ("3" (hide-all-but (-2 1))
                        (("3" (expand "merged_polygon")
                          (("3" (expand "simple_merged_polygon")
                            (("3" (replace -1 :hide? t)
                              (("3"
                                (expand "edges_of_polygon")
                                (("3"
                                  (expand "prev_0")
                                  (("3"
                                    (name-replace
                                     "M"
                                     "merge_seq(A, B)`seq(0)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-7 -8 1))
                  (("2" (use "find_index_segment_is_edge")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_outgoing_edges_case_i_eq_0_B_TCC1 0
  (no_outgoing_edges_case_i_eq_0_B_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (expand "merged_polygon")
      (("" (replace -3) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (no_outgoing_edges_case_i_eq_0_B subtype "merge_props.i"
    "naturalnumbers.below(merge_props.C`num_vertices)"))
  (no_outgoing_edges_case_i_eq_0_B_TCC1-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_case_i_eq_0_B subtype "merge_props.i"
    "naturalnumbers.below(merge_props.C`num_vertices)")))
 (no_outgoing_edges_case_i_eq_0_B_TCC2 0
  (no_outgoing_edges_case_i_eq_0_B_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (expand "merge_seq")
      (("" (expand "o")
        (("" (expand "singleton_seq") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (no_outgoing_edges_case_i_eq_0_B subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}"))
  (no_outgoing_edges_case_i_eq_0_B_TCC2-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_case_i_eq_0_B subtype
    "polygon_merge.merge_seq(merge_props.A, merge_props.B)"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}")))
 (no_outgoing_edges_case_i_eq_0_B_TCC3 0
  (no_outgoing_edges_case_i_eq_0_B_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (typepred "find_index(Bm, C`vertices(i))")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (no_outgoing_edges_case_i_eq_0_B subtype "merge_props.j"
    "naturalnumbers.below(merge_props.Bm`num_vertices)"))
  (no_outgoing_edges_case_i_eq_0_B_TCC3-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_case_i_eq_0_B subtype "merge_props.j"
    "naturalnumbers.below(merge_props.Bm`num_vertices)")))
 (no_outgoing_edges_case_i_eq_0_B_TCC4 0
  (no_outgoing_edges_case_i_eq_0_B_TCC4-2 nil 3874129020
   ("" (skeep)
    (("" (typepred "find_index(Am, C`vertices(i))")
      (("1" (ground) (("1" (postpone) nil nil)) nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak
   (no_outgoing_edges_case_i_eq_0_B subtype
    "polygons_2d.find_index(merge_props.Am, merge_props.C`vertices(merge_props.i))"
    "naturalnumbers.below(merge_props.Am`num_vertices)"))
  (no_outgoing_edges_case_i_eq_0_B_TCC4-1 nil 3874128970
   ("" (subtype-tcc) nil nil) nil nil
   (no_outgoing_edges_case_i_eq_0_B subtype
    "polygons_2d.find_index(merge_props.Am, merge_props.C`vertices(merge_props.i))"
    "naturalnumbers.below(merge_props.Am`num_vertices)")))
 (no_outgoing_edges_case_i_eq_0_B 0
  (no_outgoing_edges_case_i_eq_0_B-1 nil 3874129020
   ("" (skeep*)
    (("" (replace -3)
      (("" (expand "prev_index")
        (("" (expand "next_index" -8 1)
          (("" (expand "seq_prev_vtx")
            (("" (assert)
              ((""
                (equate
                 "edges_of_polygon(Am)(find_index(Am, C`vertices(0)))"
                 "edges_of_polygon(C)(0)")
                (("1" (use "point_between_rays_rotate_right")
                  (("1" (ground)
                    (("1" (split -1)
                      (("1" (replace -1 :hide? t)
                        (("1" (expand "edges_of_polygon" -7 (1 3))
                          (("1"
                            (case-replace
                             "Bm`vertices(next_index(Bm, j)) = e`p2")
                            (("1"
                              (case-replace
                               "merge_seq(A, B)`seq = C`vertices")
                              (("1"
                                (expand "merged_polygon")
                                (("1"
                                  (lemma "merge_path_edges_AB")
                                  (("1"
                                    (inst - "A" "C" "B" "Am" "Bm")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "point_between_rays?(reverse_segment(edges_of_polygon
                                                                                                                                                                                 (C)(C`num_vertices - 1)),
                                                                                                                                                                 e)
                                                                                                                                                                (prev_0(C`vertices(0)))")
                                        (("1"
                                          (lemma
                                           "interpolate_point_between_rays")
                                          (("1"
                                            (inst
                                             -
                                             "prev_0(C`vertices(0))"
                                             "reverse_segment(edges_of_polygon
                                                                                                                                                                                                      (C)(C`num_vertices - 1))"
                                             "e"
                                             "edges_of_polygon(C)(0)")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (equate
                                                 "Bm`vertices(j)"
                                                 "C`vertices(0)"
                                                 (assert))
                                                (("1"
                                                  (case-replace
                                                   "edges_of_polygon(Bm)(j) = e")
                                                  (("1"
                                                    (hide-all-but
                                                     (-2
                                                      -3
                                                      -13
                                                      -15
                                                      -17))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-5 -14 1))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil)
                                               ("4"
                                                (hide-all-but -1)
                                                (("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "Bm")
                                          (("2"
                                            (expand
                                             "ccw_vertex_order?")
                                            (("2"
                                              (expand
                                               "point_between_edges?")
                                              (("2"
                                                (case-replace
                                                 "topleft_vertex_idx(Bm) = j")
                                                (("1"
                                                  (rewrite
                                                   "between_rays_equiv")
                                                  (("1"
                                                    (equate
                                                     "Bm`vertices(j)"
                                                     "C`vertices(0)"
                                                     (assert))
                                                    (("1"
                                                      (case-replace
                                                       "edges_of_polygon(Bm)(j) = e")
                                                      (("1"
                                                        (equate
                                                         "C`vertices(0) - (# x := 1, y := 0 #)"
                                                         "prev_0(C`vertices(0))")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "C`num_vertices - 1")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (lemma
                                                               "last_edge_is_leftmost_incoming_edge")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "A"
                                                                 "C"
                                                                 "B"
                                                                 "Am"
                                                                 "Bm"
                                                                 _
                                                                 _)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "edges_of_polygon(C)(C`num_vertices - 1)"
                                                                   "edges_of_polygon(Bm)(prev_index(Bm, find_index(Bm, C`vertices(0))))")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (replace
                                                                       -14)
                                                                      (("1"
                                                                        (lemma
                                                                         "interpolate_point_between_rays_2")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "prev_0(C`vertices(0))"
                                                                           "reverse_segment(edges_of_polygon
                                                                                                                                                                                                                                                                  (Bm)(prev_index(Bm, j)))"
                                                                           "reverse_segment(edges_of_polygon
                                                                                                                                                                                                                                                                  (C)(C`num_vertices - 1))"
                                                                           "e")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (hide
                                                                               -5
                                                                               -15
                                                                               -19
                                                                               2
                                                                               3)
                                                                              (("1"
                                                                                (expand
                                                                                 "edges_of_polygon"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "reverse_segment")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "next_index")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -5
                                                                               -15
                                                                               -19
                                                                               2
                                                                               3)
                                                                              (("2"
                                                                                (expand
                                                                                 "edges_of_polygon"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "reverse_segment")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (expand
                                                                               "edges_of_polygon"
                                                                               -1)
                                                                              (("4"
                                                                                (expand
                                                                                 "reverse_segment"
                                                                                 -1)
                                                                                (("4"
                                                                                  (expand
                                                                                   "next_index"
                                                                                   -1)
                                                                                  (("4"
                                                                                    (hide
                                                                                     +)
                                                                                    (("4"
                                                                                      (typepred
                                                                                       "Am")
                                                                                      (("4"
                                                                                        (expand
                                                                                         "ccw_vertex_order?")
                                                                                        (("4"
                                                                                          (expand
                                                                                           "point_between_edges?")
                                                                                          (("4"
                                                                                            (case-replace
                                                                                             "topleft_vertex_idx(Am) = find_index(Am, C`vertices(0))")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "between_rays_equiv")
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "edges_of_polygon(Am)(find_index(Am, C`vertices(0))) =
                                                                                                                                                                                                                                                                                                   edges_of_polygon(C)(0)")
                                                                                                (("1"
                                                                                                  (equate
                                                                                                   "edges_of_polygon(Am)(prev_index(Am, find_index(Am, C`vertices(0))))"
                                                                                                   "edges_of_polygon(C)(C`num_vertices - 1)")
                                                                                                  (("1"
                                                                                                    (equate
                                                                                                     "Am`vertices(find_index(Am, C`vertices(0))) -
                                                                                                                                                                                                                                                                                                                                             (# x := 1, y := 0 #)"
                                                                                                     "prev_0(C`vertices(0))")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "point_between_rays_not_on_rays")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "prev_0(C`vertices(0))"
                                                                                                         "reverse_segment(edges_of_polygon
                                                                                                                                                                                                                                                                                                                                                                              (C)(C`num_vertices - 1))"
                                                                                                         "edges_of_polygon(C)(0)")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "edges_of_polygon"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "reverse_segment"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "next_index"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       (-18
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (use
                                                                                                         "find_index_self")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     -10
                                                                                                     -20
                                                                                                     -24)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "edge_of_polygon?"
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "edges_of_polygon"
                                                                                                           (-1
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "next_index"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "edges_of_polygon"
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "next_index"
                                                                                                                         -6
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "Am`vertices")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "uniq_vertex_list?")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "find_index(Am, C`vertices(0))"
                                                                                                                               "next_index(Am, i!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (ground)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-17
                                                                                                    -20
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "find_index_segment_is_edge")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (grind-with-ext)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -2
                                                                                               -3
                                                                                               -8
                                                                                               -18
                                                                                               -22)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "injected_topleft_vertices_shared")
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "Am`vertices")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "uniq_vertex_list?")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "topleft_vertex_idx(Am)"
                                                                                                         "find_index(Am, C`vertices(0))")
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "find_index_self")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "Am"
                                                                                                               "C`vertices(0)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "edges_of_polygon"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "next_index"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (equate
                                                               "edges_of_polygon(Bm)(prev_index(Bm, j))"
                                                               "edges_of_polygon(C)(C`num_vertices - 1)")
                                                              (("2"
                                                                (hide
                                                                 -5
                                                                 -15
                                                                 -19
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   +)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "next_index"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "edge_of_polygon?")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (expand
                                                                                   "next_index"
                                                                                   -2
                                                                                   2)
                                                                                  (("2"
                                                                                    (case
                                                                                     "Bm`vertices(next_index(Bm, i!1)) = Bm`vertices(j)")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "Bm`vertices")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "uniq_vertex_list?")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "next_index(Bm, i!1)"
                                                                                           "j")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (ground)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "edges_of_polygon"
                                                         1)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2 -13 -17 2)
                                                  (("2"
                                                    (use
                                                     "injected_topleft_vertices_shared")
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (typepred
                                                         "Bm`vertices")
                                                        (("2"
                                                          (expand
                                                           "uniq_vertex_list?")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "topleft_vertex_idx(Bm)"
                                                             "j")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "merged_polygon")
                                (("2"
                                  (expand "simple_merged_polygon")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (expand "merged_polygon")
                                  (("3"
                                    (expand "simple_merged_polygon")
                                    (("3"
                                      (replace -3 1)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-9 -10 1))
                        (("2" (grind) nil nil)) nil)
                       ("3" (expand "merged_polygon")
                        (("3" (expand "simple_merged_polygon")
                          (("3" (replace -2 -10)
                            (("3" (hide-all-but (-9 -10 1))
                              (("3"
                                (expand "edges_of_polygon")
                                (("3"
                                  (replace -2)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "prev_0")
                                      (("3"
                                        (name-replace
                                         "M"
                                         "merge_seq(A, B)`seq(0)")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-5 -8 1))
                  (("2" (use "find_index_segment_is_edge")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_outgoing_edges_in_outward_wedges 0
  (no_outgoing_edges_in_outward_wedges-1 nil 3874129020
   ("" (skeep*)
    (("" (copy -2)
      (("" (expand "merged_polygon" -1)
        (("" (ground)
          (("1" (skeep + t)
            (("1" (expand "point_between_edges?")
              (("1" (expand "edge_of_polygon?")
                (("1" (skeep)
                  (("1" (expand "edges_of_polygon" -2)
                    (("1" (use "merge_vertex_seq_full")
                      (("1" (assert)
                        (("1" (case "i=0")
                          (("1" (inst - "i")
                            (("1" (lemma "vertex_find_index")
                              (("1"
                                (inst -1 "Am" "C`vertices(i)")
                                (("1"
                                  (ground)
                                  (("1"
                                    (case
                                     "find_index(Am, C`vertices(i)) = i!1")
                                    (("1"
                                      (expand "next_merge_vertex")
                                      (("1"
                                        (apply (repeat (lift-if)))
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "seq_prev_vtx")
                                                      (("1"
                                                        (lemma
                                                         "prev_0_first_vtx_not_on_Am_or_Bm")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "A"
                                                           "B"
                                                           "Am"
                                                           "Bm"
                                                           "Bm`vertices(next_index(Bm, find_index(Bm, C`vertices(i))))")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (expand
                                                                 "merge_seq")
                                                                (("1"
                                                                  (expand
                                                                   "o")
                                                                  (("1"
                                                                    (expand
                                                                     "singleton_seq")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 1)
                                                              (("2"
                                                                (use
                                                                 "vertex_on_perimeter")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "vertex?")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "on_segment_not_between_rays")
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -4)
                                                        (("2"
                                                          (hide-all-but
                                                           (-2
                                                            -8
                                                            -9
                                                            2))
                                                          (("2"
                                                            (expand
                                                             "point_on_segment?")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "1")
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (expand
                                                                   "edges_of_polygon")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite
                                                   "between_rays_equiv")
                                                  (("1"
                                                    (use
                                                     "point_between_rays_rotate_left")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (hide -1 -11)
                                                          (("1"
                                                            (expand
                                                             "reverse_segment")
                                                            (("1"
                                                              (expand
                                                               "edges_of_polygon"
                                                               -1
                                                               (2 3))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -4)
                                                                  (("1"
                                                                    (case
                                                                     "edges_of_polygon(C)(i) = edges_of_polygon(Bm)
                                                                                                                                                                                                                                                         (find_index(Bm, C`vertices(i))) and
                                                                                                                                                                                                                            (# p1 := C`vertices(i), p2 := e`p2 #) = edges_of_polygon(Am)(i!1)")
                                                                    (("1"
                                                                      (use
                                                                       "no_outgoing_edges_case_i_eq_0_A")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (lemma
                                                                           "find_index_segment_is_edge")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "C`vertices(i)"
                                                                             "C`vertices(next_index(C,i))"
                                                                             "Bm")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-7
                                                                            -8
                                                                            1))
                                                                          (("2"
                                                                            (grind-with-ext)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (-1 -7 -8))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (use
                                               "on_segment_not_between_rays")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -2)
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 -6 -7 2))
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("2"
                                                        (expand
                                                         "point_on_segment?")
                                                        (("2"
                                                          (inst + "1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "Am`vertices")
                                      (("2"
                                        (expand "uniq_vertex_list?")
                                        (("2"
                                          (inst
                                           -
                                           "find_index(Am, C`vertices(i))"
                                           "i!1")
                                          (("1"
                                            (use "find_index_self")
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (typepred
                                               "find_index(Am, C`vertices(i))")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "vertex?")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (hide-all-but (-4 -5 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (use "no_outgoing_edges_in_noninitial_wedges")
                            (("2" (ground)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "point_between_edges?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep + t)
            (("2" (expand "point_between_edges?")
              (("2" (expand "edge_of_polygon?")
                (("2" (skeep)
                  (("2" (expand "edges_of_polygon" -2)
                    (("2" (use "merge_vertex_seq_full")
                      (("2" (assert)
                        (("2" (case "i=0")
                          (("1" (inst - "i")
                            (("1" (lemma "vertex_find_index")
                              (("1"
                                (inst -1 "Bm" "C`vertices(i)")
                                (("1"
                                  (ground)
                                  (("1"
                                    (case
                                     "find_index(Bm, C`vertices(i)) = i!1")
                                    (("1"
                                      (expand "next_merge_vertex")
                                      (("1"
                                        (apply (repeat (lift-if)))
                                        (("1"
                                          (split -4)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "seq_prev_vtx")
                                                      (("1"
                                                        (lemma
                                                         "prev_0_first_vtx_not_on_Am_or_Bm")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "A"
                                                           "B"
                                                           "Am"
                                                           "Bm"
                                                           "Bm`vertices(next_index(Bm, find_index(Bm, C`vertices(i))))")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (expand
                                                                 "merge_seq")
                                                                (("1"
                                                                  (expand
                                                                   "o")
                                                                  (("1"
                                                                    (expand
                                                                     "singleton_seq")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 1)
                                                              (("2"
                                                                (use
                                                                 "vertex_on_perimeter")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "vertex?")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "between_rays_equiv")
                                                    (("1"
                                                      (use
                                                       "no_outgoing_edges_case_i_eq_0_B")
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (use
                                                   "on_segment_not_between_rays")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -3)
                                                      (("2"
                                                        (hide-all-but
                                                         (-1 -7 -8 2))
                                                        (("2"
                                                          (expand
                                                           "point_on_segment?")
                                                          (("2"
                                                            (inst
                                                             +
                                                             "1")
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (expand
                                                                 "edges_of_polygon")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (use
                                               "on_segment_not_between_rays")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -2)
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 -6 -7 2))
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("2"
                                                        (expand
                                                         "point_on_segment?")
                                                        (("2"
                                                          (inst + "1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "Bm`vertices")
                                      (("2"
                                        (expand "uniq_vertex_list?")
                                        (("2"
                                          (inst
                                           -
                                           "find_index(Bm, C`vertices(i))"
                                           "i!1")
                                          (("1"
                                            (use "find_index_self")
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (typepred
                                               "find_index(Bm, C`vertices(i))")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "vertex?")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (hide-all-but (-4 -5 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (use "no_outgoing_edges_in_noninitial_wedges")
                            (("2" (ground)
                              (("2"
                                (inst? -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "point_between_edges?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_incoming_edges_in_outward_wedges 0
  (no_incoming_edges_in_outward_wedges-1 nil 3874129020
   ("" (skeep*)
    (("" (use "merge_only_vertex_intersections")
      (("" (split -1)
        (("1" (flatten)
          (("1" (ground)
            (("1" (hide -2)
              (("1" (skeep* + t)
                (("1" (use "incoming_edge_imp_outgoing_edge")
                  (("1" (ground)
                    (("1" (skeep - t)
                      (("1" (use "no_outgoing_edges_in_outward_wedges")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide -2)
                              (("1"
                                (inst - "j" "e!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "point_in_vertex_wedge?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma
                                         "extend_points_between_edges")
                                        (("1"
                                          (inst
                                           -
                                           "q"
                                           "e!1"
                                           "true"
                                           "C"
                                           "j")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst?)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -5)
                      (("2"
                        (case "length(e) <= vertex_wedge_radius(C)")
                        (("1" (inst + "e`p1")
                          (("1" (assert)
                            (("1" (expand "point_in_vertex_wedge?")
                              (("1"
                                (expand "length")
                                (("1"
                                  (rewrite "norm_sym")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst +
                           "e`p2 - vertex_wedge_radius(C) * ^(e`p2-e`p1)")
                          (("2" (ground)
                            (("1"
                              (rewrite
                               "point_on_segment_has_norm_offset")
                              (("1"
                                (inst
                                 +
                                 "length(e) - vertex_wedge_radius(C)")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "segment_far_endpoint_length")
                                    (("1" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but -1)
                              (("2"
                                (name-replace
                                 "V"
                                 "vertex_wedge_radius(C) * ^(e`p2 - e`p1)")
                                (("2"
                                  (move-terms -1 l 2)
                                  (("2"
                                    (cancel-add -1)
                                    (("2"
                                      (expand "V")
                                      (("2"
                                        (use "scal_eq_zero")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "point_in_vertex_wedge?")
                              (("3"
                                (ground)
                                (("1"
                                  (lemma "same_line_between_rays")
                                  (("1"
                                    (expand "point_between_edges?")
                                    (("1"
                                      (expand "edges_of_polygon")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst
                                             -
                                             "^(e`p1 - e`p2)"
                                             "length(e)"
                                             "vertex_wedge_radius(C)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (equate
                                                 "e`p2 - vertex_wedge_radius(C) * ^(e`p2 - e`p1)"
                                                 "e`p2 + vertex_wedge_radius(C) * ^(e`p1 - e`p2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "e`p2 + length(e) * ^(e`p1 - e`p2) = e`p1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand
                                                           "length")
                                                          (("2"
                                                            (rewrite
                                                             "norm_sym")
                                                            (("2"
                                                              (real-props)
                                                              (("2"
                                                                (grind-with-ext)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (rewrite
                                                     "normalized_diffs_anti_comm")
                                                    (("2"
                                                      (rewrite
                                                       "scal_neg")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "abs")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (skeep* + t)
                (("2" (use "incoming_edge_imp_outgoing_edge")
                  (("2" (ground)
                    (("1" (skeep - t)
                      (("1" (use "no_outgoing_edges_in_outward_wedges")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (inst - "j" "e!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "point_in_vertex_wedge?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma
                                         "extend_points_between_edges")
                                        (("1"
                                          (inst
                                           -
                                           "q"
                                           "e!1"
                                           "true"
                                           "C"
                                           "j")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst?)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -5)
                      (("2"
                        (case "length(e) <= vertex_wedge_radius(C)")
                        (("1" (inst + "e`p1")
                          (("1" (assert)
                            (("1" (expand "point_in_vertex_wedge?")
                              (("1"
                                (expand "length")
                                (("1"
                                  (rewrite "norm_sym")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (inst +
                           "e`p2 - vertex_wedge_radius(C) * ^(e`p2-e`p1)")
                          (("2" (ground)
                            (("1"
                              (rewrite
                               "point_on_segment_has_norm_offset")
                              (("1"
                                (inst
                                 +
                                 "length(e) - vertex_wedge_radius(C)")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "segment_far_endpoint_length")
                                    (("1" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but -1)
                              (("2"
                                (name-replace
                                 "V"
                                 "vertex_wedge_radius(C) * ^(e`p2 - e`p1)")
                                (("2"
                                  (move-terms -1 l 2)
                                  (("2"
                                    (cancel-add -1)
                                    (("2"
                                      (expand "V")
                                      (("2"
                                        (use "scal_eq_zero")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "point_in_vertex_wedge?")
                              (("3"
                                (ground)
                                (("1"
                                  (lemma "same_line_between_rays")
                                  (("1"
                                    (expand "point_between_edges?")
                                    (("1"
                                      (expand "edges_of_polygon")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst
                                             -
                                             "^(e`p1 - e`p2)"
                                             "length(e)"
                                             "vertex_wedge_radius(C)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (equate
                                                 "e`p2 - vertex_wedge_radius(C) * ^(e`p2 - e`p1)"
                                                 "e`p2 + vertex_wedge_radius(C) * ^(e`p1 - e`p2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "e`p2 + length(e) * ^(e`p1 - e`p2) = e`p1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand
                                                           "length")
                                                          (("2"
                                                            (rewrite
                                                             "norm_sym")
                                                            (("2"
                                                              (real-props)
                                                              (("2"
                                                                (grind-with-ext)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (rewrite
                                                     "normalized_diffs_anti_comm")
                                                    (("2"
                                                      (rewrite
                                                       "scal_neg")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "abs")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil) ("3" (propax) nil nil)
         ("4" (hide 2)
          (("4" (use "merge_path_props_edges")
            (("4" (split -1)
              (("1" (skeep + t)
                (("1" (expand "edge_of_polygon?" -1)
                  (("1" (skeep)
                    (("1" (inst?)
                      (("1" (skoletin*)
                        (("1" (case-replace "S=s")
                          (("1" (ground) nil nil)
                           ("2" (replace -2 1)
                            (("2" (replace -4 1 :dir rl)
                              (("2"
                                (expand "merged_polygon")
                                (("2"
                                  (expand "simple_merged_polygon")
                                  (("2"
                                    (replace -6 1)
                                    (("2"
                                      (hide-all-but (-3 1))
                                      (("2"
                                        (expand "edges_of_polygon")
                                        (("2"
                                          (expand "next_index")
                                          (("2"
                                            (lift-if)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "merged_polygon")
                        (("2" (expand "simple_merged_polygon")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_no_edges_in_outward_wedges 0
  (merge_no_edges_in_outward_wedges-1 nil 3874129020
   ("" (skeep*)
    (("" (use "no_outgoing_edges_in_outward_wedges")
      (("" (use "no_incoming_edges_in_outward_wedges")
        (("" (ground)
          (("1" (expand "no_edges_in_outward_wedges?")
            (("1" (skeep* + t)
              (("1" (ground)
                (("1" (inst? -5) (("1" (assert) nil nil)) nil)
                 ("2" (inst? -7) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "no_edges_in_outward_wedges?")
            (("2" (skeep* + t)
              (("2" (ground)
                (("1" (inst? -6) (("1" (assert) nil nil)) nil)
                 ("2" (inst? -8) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_intersecting_polygons 0
  (merge_intersecting_polygons-1 nil 3874129020
   ("" (skeep*)
    (("" (use "inject_vertices_into_polygon_comm")
      (("" (assert)
        (("" (assert)
          (("" (expand "merged_polygon")
            (("" (expand "simple_merged_polygon")
              (("" (ground)
                (("1"
                  (case "exists (s: (edge_of_polygon?(C))): edge_of_polygon?(Am)(s)")
                  (("1" (skeep)
                    (("1" (inst + "s`p1")
                      (("1" (expand "point_on_polygon_perimeter?")
                        (("1" (ground)
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (case "forall (p: point_2d): point_on_polygon_perimeter?(C)(p) iff
                                                                                                     point_on_polygon_perimeter?(Bm)(p)")
                    (("1"
                      (lemma "same_perim_pts_imp_same_interior_pts")
                      (("1" (inst - "C" "Bm")
                        (("1" (split -1)
                          (("1"
                            (case "EXISTS (q: point_2d): point_on_polygon_perimeter?(Am)(q) AND
                                                                                                                                              point_on_polygon_perimeter?(C)(q)")
                            (("1" (skeep)
                              (("1"
                                (inst? 2)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (case "forall (q: point_2d): point_on_polygon_perimeter?(Am)(q)
                                                                                                                                                               implies point_outside_polygon?(q, C)")
                              (("1"
                                (hide 1)
                                (("1"
                                  (lemma
                                   "outer_polygon_has_pt_left_of_inner_perim")
                                  (("1"
                                    (inst - "Am" "C")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst-cp
                                           -
                                           "first_vertex_merge(A, B)")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (use
                                               "injected_topleft_vertex_same")
                                              (("1"
                                                (lemma
                                                 "injected_topleft_vertex_same")
                                                (("1"
                                                  (inst
                                                   -
                                                   "A"
                                                   "B"
                                                   "Am"
                                                   "Bm")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "first_vertex_merge")
                                                      (("1"
                                                        (case
                                                         "leftmost_vertex_val(A) < leftmost_vertex_val(B)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (rewrite*
                                                               "leftmost_is_topleft_x"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (lemma
                                                                 "leftmost_vertex_val_is_min")
                                                                (("1"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "Am"
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -3 2 3)
                                                          (("2"
                                                            (rewrite*
                                                             "leftmost_is_topleft_x")
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "Bm`vertices(topleft_vertex_idx(Bm))")
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (rewrite*
                                                                       "leftmost_is_topleft_x"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "leftmost_vertex_val_is_min")
                                                                        (("1"
                                                                          (expand
                                                                           "vertex?")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "Am"
                                                                               "i")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst?
                                                                   -6)
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "point_on_polygon_perimeter?")
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "edges_of_polygon(Bm)(topleft_vertex_idx(Bm))")
                                                                          (("2"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("2"
                                                                              (expand
                                                                               "point_on_segment?")
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "0")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "point_on_polygon_perimeter?"
                                               1)
                                              (("2"
                                                (inst
                                                 +
                                                 "edges_of_polygon(C)(0)")
                                                (("1"
                                                  (expand
                                                   "edges_of_polygon"
                                                   1)
                                                  (("1"
                                                    (replace -8 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "merge_seq"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand "o")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "injected_polygon_has_merge_precondition")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "merge_pre_condition")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst? 1)
                                                (("2"
                                                  (inst -4 "p")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst? 4)
                                  (("2"
                                    (ground)
                                    (("2"
                                      (lemma "point_out_not_in")
                                      (("2"
                                        (inst - "q" "C")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (expand "point_on_polygon_perimeter?")
                        (("2" (ground)
                          (("1" (skeep - t)
                            (("1" (inst? -)
                              (("1"
                                (inst 1 "e")
                                (("1"
                                  (inst 2 "e")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep - t)
                            (("2"
                              (case "FORALL (s: (edge_of_polygon?(C))): edge_of_polygon?(Bm)(s)")
                              (("1"
                                (hide -6 3)
                                (("1"
                                  (lemma
                                   "edges_included_imp_edge_sets_eq")
                                  (("1"
                                    (inst - "C" "Bm")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (inst - "e")
                                        (("1"
                                          (inst? 1)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2" (inst? -) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst - "s")
                                  (("2"
                                    (inst 3 "s")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (case "exists (s: (edge_of_polygon?(C))): edge_of_polygon?(Bm)(s)")
                  (("1" (skeep)
                    (("1" (inst + "s`p1")
                      (("1" (expand "point_on_polygon_perimeter?")
                        (("1" (ground)
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (case "forall (p: point_2d): point_on_polygon_perimeter?(C)(p) iff
                                                                                                     point_on_polygon_perimeter?(Am)(p)")
                    (("1"
                      (lemma "same_perim_pts_imp_same_interior_pts")
                      (("1" (inst - "C" "Am")
                        (("1" (split -1)
                          (("1"
                            (case "EXISTS (q: point_2d): point_on_polygon_perimeter?(Bm)(q) AND
                                                                                                                                              point_on_polygon_perimeter?(C)(q)")
                            (("1" (skeep)
                              (("1"
                                (inst? 2)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (case "forall (q: point_2d): point_on_polygon_perimeter?(Bm)(q)
                                                                                                                                                               implies point_outside_polygon?(q, C)")
                              (("1"
                                (hide 1)
                                (("1"
                                  (lemma
                                   "outer_polygon_has_pt_left_of_inner_perim")
                                  (("1"
                                    (inst - "Bm" "C")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst-cp
                                           -
                                           "first_vertex_merge(A, B)")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (use
                                               "injected_topleft_vertex_same")
                                              (("1"
                                                (lemma
                                                 "injected_topleft_vertex_same")
                                                (("1"
                                                  (inst
                                                   -
                                                   "A"
                                                   "B"
                                                   "Am"
                                                   "Bm")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "first_vertex_merge")
                                                      (("1"
                                                        (case
                                                         "leftmost_vertex_val(B) < leftmost_vertex_val(A)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (rewrite*
                                                               "leftmost_is_topleft_x"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (lemma
                                                                 "leftmost_vertex_val_is_min")
                                                                (("1"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "Bm"
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -3 2 3)
                                                          (("2"
                                                            (rewrite*
                                                             "leftmost_is_topleft_x")
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "Am`vertices(topleft_vertex_idx(Am))")
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (rewrite*
                                                                       "leftmost_is_topleft_x"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "leftmost_vertex_val_is_min")
                                                                        (("1"
                                                                          (expand
                                                                           "vertex?")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "Bm"
                                                                               "i")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst?
                                                                   -6)
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "point_on_polygon_perimeter?")
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "edges_of_polygon(Am)(topleft_vertex_idx(Am))")
                                                                          (("2"
                                                                            (expand
                                                                             "edges_of_polygon")
                                                                            (("2"
                                                                              (expand
                                                                               "point_on_segment?")
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "0")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "point_on_polygon_perimeter?"
                                               1)
                                              (("2"
                                                (inst
                                                 +
                                                 "edges_of_polygon(C)(0)")
                                                (("1"
                                                  (expand
                                                   "edges_of_polygon"
                                                   1)
                                                  (("1"
                                                    (replace -8 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "merge_seq"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand "o")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "injected_polygon_has_merge_precondition")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "merge_pre_condition")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -4 "p")
                                                (("2"
                                                  (inst? 1)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst? 4)
                                  (("2"
                                    (ground)
                                    (("2"
                                      (lemma "point_out_not_in")
                                      (("2"
                                        (inst - "q" "C")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (expand "point_on_polygon_perimeter?")
                        (("2" (ground)
                          (("1" (skeep - t)
                            (("1" (inst? -)
                              (("1"
                                (inst 1 "e")
                                (("1"
                                  (inst 2 "e")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep - t)
                            (("2"
                              (case "FORALL (s: (edge_of_polygon?(C))): edge_of_polygon?(Am)(s)")
                              (("1"
                                (hide -6 3)
                                (("1"
                                  (lemma
                                   "edges_included_imp_edge_sets_eq")
                                  (("1"
                                    (inst - "C" "Am")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (inst - "e")
                                        (("1"
                                          (inst? 1)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2" (inst? -) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst - "s")
                                  (("2"
                                    (inst 3 "s")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

