(polygon_merge
 (seq_AB_singleton 0
  (seq_AB_singleton-1 nil 3874129021 ("" (grind) nil nil) nil shostak))
 (seq_AB_concat 0
  (seq_AB_concat-1 nil 3874129021
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "point_seq_AB_vtx?")
          (("1" (skeep)
            (("1" (expand "o ")
              (("1" (ground)
                (("1" (inst? -2) nil nil) ("2" (inst? -2) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "o ")
          (("2" (expand "point_seq_AB_vtx?")
            (("2" (ground)
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
                nil)
               ("2" (skeep)
                (("2" (inst - "i + x`length") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_merge_vertex_TCC1 0
  (next_merge_vertex_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_merge_vertex subtype "polygon_merge.idx_A"
    "naturalnumbers.below(polygon_merge.Am`num_vertices)"))
  (next_merge_vertex_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vertex subtype "polygon_merge.idx_A"
    "naturalnumbers.below(polygon_merge.Am`num_vertices)")))
 (next_merge_vertex_TCC2 0
  (next_merge_vertex_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_merge_vertex subtype "polygon_merge.idx_B"
    "naturalnumbers.below(polygon_merge.Bm`num_vertices)"))
  (next_merge_vertex_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vertex subtype "polygon_merge.idx_B"
    "naturalnumbers.below(polygon_merge.Bm`num_vertices)")))
 (next_merge_vertex_TCC3 0
  (next_merge_vertex_TCC3-2 nil 3874129021
   ("" (skosimp*)
    (("" (expand "point_AB_vtx?")
      (("" (expand "vertex?")
        (("" (flatten) (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (next_merge_vertex subtype
    "polygon_merge.Am`vertices(polygons_2d.next_index(polygon_merge.Am, polygon_merge.idx_A))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (next_merge_vertex_TCC3-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vertex subtype
    "polygon_merge.Am`vertices(polygons_2d.next_index(polygon_merge.Am, polygon_merge.idx_A))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (next_merge_vertex_TCC4 0
  (next_merge_vertex_TCC4-2 nil 3874129021
   ("" (skosimp*)
    (("" (expand "point_AB_vtx?")
      (("" (expand "vertex?")
        (("" (flatten) (("" (hide 3) (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (next_merge_vertex subtype
    "polygon_merge.Bm`vertices(polygons_2d.next_index(polygon_merge.Bm, polygon_merge.idx_B))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (next_merge_vertex_TCC4-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vertex subtype
    "polygon_merge.Bm`vertices(polygons_2d.next_index(polygon_merge.Bm, polygon_merge.idx_B))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (next_merge_vertex_TCC5 0
  (next_merge_vertex_TCC5-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_merge_vertex subtype "polygon_merge.idx_A"
    "naturalnumbers.below(polygon_merge.Am`num_vertices)"))
  (next_merge_vertex_TCC5-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vertex subtype "polygon_merge.idx_A"
    "naturalnumbers.below(polygon_merge.Am`num_vertices)")))
 (next_merge_vertex_TCC6 0
  (next_merge_vertex_TCC6-2 nil 3874129021
   ("" (skosimp*)
    (("" (expand "point_AB_vtx?")
      (("" (expand "vertex?")
        (("" (ground)
          (("" (inst?)
            (("" (assert)
              (("" (typepred "find_index(Am!1, vertex!1)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (next_merge_vertex subtype
    "polygon_merge.Am`vertices(polygons_2d.next_index(polygon_merge.Am, polygon_merge.idx_A))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (next_merge_vertex_TCC6-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vertex subtype
    "polygon_merge.Am`vertices(polygons_2d.next_index(polygon_merge.Am, polygon_merge.idx_A))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (next_merge_vertex_TCC7 0
  (next_merge_vertex_TCC7-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "vertex")
      (("" (expand "point_AB_vtx?")
        (("" (use "vertex_find_index")
          (("" (assert)
            (("" (lemma "vertex_find_index")
              (("" (inst - "Bm" "vertex")
                (("" (assert)
                  (("" (typepred "find_index(Bm, vertex)")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (next_merge_vertex subtype "polygon_merge.idx_B"
    "naturalnumbers.below(polygon_merge.Bm`num_vertices)"))
  (next_merge_vertex_TCC7-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vertex subtype "polygon_merge.idx_B"
    "naturalnumbers.below(polygon_merge.Bm`num_vertices)")))
 (next_merge_vertex_TCC8 0
  (next_merge_vertex_TCC8-2 nil 3874129021
   ("" (skeep*)
    (("" (expand "point_AB_vtx?")
      (("" (ground)
        (("" (expand "vertex?" 3)
          (("" (inst?)
            (("" (typepred "vertex")
              (("" (expand "point_AB_vtx?")
                (("" (use "vertex_find_index")
                  (("" (assert)
                    (("" (lemma "vertex_find_index")
                      (("" (inst - "Bm" "vertex")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (next_merge_vertex subtype
    "polygon_merge.Bm`vertices(polygons_2d.next_index(polygon_merge.Bm, polygon_merge.idx_B))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (next_merge_vertex_TCC8-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vertex subtype
    "polygon_merge.Bm`vertices(polygons_2d.next_index(polygon_merge.Bm, polygon_merge.idx_B))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (seq_prev_vtx_TCC1 0
  (seq_prev_vtx_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (seq_prev_vtx subtype
    "(number_fields.-)(polygon_merge.i, polygon_merge.k)"
    "below[S`length]"))
  (seq_prev_vtx_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (seq_prev_vtx subtype
    "(number_fields.-)(polygon_merge.i, polygon_merge.k)"
    "below[S`length]")))
 (seq_prev_vtx_TCC2 0
  (seq_prev_vtx_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (seq_prev_vtx subtype "0" "below[S`length]"))
  (seq_prev_vtx_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil (seq_prev_vtx subtype "0" "below[S`length]")))
 (next_vertex_distinct 0
  (next_vertex_distinct-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "Am`vertices")
      (("" (typepred "Bm`vertices")
        (("" (expand "uniq_vertex_list?")
          (("" (expand "next_merge_vertex")
            (("" (apply (repeat (lift-if)))
              (("" (split -3)
                (("1" (flatten)
                  (("1" (typepred "find_index(Am, vertex)")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (use "next_index_distinct")
                          (("1" (inst? -7)
                            (("1"
                              (inst -7
                               "next_index(Am, find_index(Am, vertex))")
                              (("1"
                                (ground)
                                (("1"
                                  (inst? -)
                                  (("1"
                                    (use "next_index_distinct")
                                    (("1"
                                      (inst
                                       -7
                                       "find_index(Bm, vertex)")
                                      (("1"
                                        (typepred
                                         "find_index(Bm, vertex)")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "vertex")
                    (("2" (expand "point_AB_vtx?")
                      (("2" (use "vertex_find_index")
                        (("2" (assert)
                          (("2" (lemma "vertex_find_index")
                            (("2" (inst -1 "Bm" "vertex")
                              (("2"
                                (assert)
                                (("2"
                                  (hide -5)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst - "find_index(Bm, vertex)")
                                      (("1"
                                        (typepred
                                         "find_index(Bm, vertex)")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (use "next_index_distinct")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_merge_vertex_on_edge_TCC1 0
  (next_merge_vertex_on_edge_TCC1-2 nil 3874129021
   ("" (skeep*)
    (("" (use "next_vertex_distinct") (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (next_merge_vertex_on_edge subtype "polygon_merge.edge"
    "segment_2d"))
  (next_merge_vertex_on_edge_TCC1-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (next_merge_vertex_on_edge subtype "polygon_merge.edge"
    "segment_2d")))
 (next_merge_vertex_on_edge 0
  (next_merge_vertex_on_edge-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (use "next_vertex_distinct")
        (("" (flatten)
          (("" (replace -2 :dir rl)
            (("" (typepred "next")
              (("" (expand "point_AB_vtx?")
                (("" (expand "next_merge_vertex")
                  (("" (lift-if)
                    (("" (lemma "find_index_self")
                      (("" (inst-cp - "Am" "vertex")
                        (("" (inst - "Bm" "vertex")
                          (("" (split -5)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand
                                               "edge_of_polygon?")
                                              (("1"
                                                (inst
                                                 +
                                                 "find_index(Am, vertex)")
                                                (("1"
                                                  (inst
                                                   +
                                                   "find_index(Bm, vertex)")
                                                  (("1"
                                                    (expand
                                                     "edges_of_polygon")
                                                    (("1"
                                                      (apply-extensionality
                                                       2
                                                       :hide?
                                                       t)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "edge_of_polygon?")
                                            (("2"
                                              (expand "vertex?")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (inst
                                                       +
                                                       "prev_index(Am, i)")
                                                      (("1"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -7)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "Am`vertices")
                                                                (("1"
                                                                  (expand
                                                                   "uniq_vertex_list?")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i"
                                                                     "next_index(Am, find_index(Am, vertex))")
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (hide 1 2)
                                                    (("2"
                                                      (inst
                                                       3
                                                       "prev_index(Bm, i)")
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -7)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "Bm`vertices")
                                                                (("2"
                                                                  (expand
                                                                   "uniq_vertex_list?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i"
                                                                     "next_index(Bm, find_index(Bm, vertex))")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "edge_of_polygon?")
                                      (("2"
                                        (inst
                                         +
                                         "find_index(Am, vertex)")
                                        (("2"
                                          (expand "edges_of_polygon")
                                          (("2"
                                            (apply-extensionality
                                             3
                                             :hide?
                                             t)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (typepred "vertex")
                                (("2"
                                  (expand "point_AB_vtx?")
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (use "vertex_find_index")
                                      (("1" (ground) nil nil))
                                      nil)
                                     ("2"
                                      (expand "edge_of_polygon?")
                                      (("2"
                                        (lemma "vertex_find_index")
                                        (("2"
                                          (inst - "Bm" "vertex")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "vertex?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (typepred
                                                   "Bm`vertices")
                                                  (("2"
                                                    (expand
                                                     "uniq_vertex_list?")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "i"
                                                       "find_index(Bm, vertex)")
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst 4 "i")
                                                          (("2"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("2"
                                                              (apply-extensionality
                                                               4
                                                               :hide?
                                                               t)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_helper_TCC1 0
  (merge_helper_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_helper subtype
    "(number_fields.-)((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices), polygon_merge.vtx_num)"
    "naturalnumber"))
  (merge_helper_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_helper subtype
    "(number_fields.-)((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices), polygon_merge.vtx_num)"
    "naturalnumber")))
 (merge_helper_TCC2 0
  (merge_helper_TCC2-2 nil 3874129021 ("" (grind) nil nil) nil shostak
   (merge_helper subtype "finite_sequences[point_2d].empty_seq"
    "{s: (polygon_merge.point_seq_AB_vtx?(polygon_merge.Am, polygon_merge.Bm)) | reals.<=(s`length, (number_fields.-)((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices), polygon_merge.vtx_num))}"))
  (merge_helper_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_helper subtype "finite_sequences[point_2d].empty_seq"
    "{s: (polygon_merge.point_seq_AB_vtx?(polygon_merge.Am, polygon_merge.Bm)) | reals.<=(s`length, (number_fields.-)((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices), polygon_merge.vtx_num))}")))
 (merge_helper_TCC3 0
  (merge_helper_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "next_merge_vertex(Am, Bm, vertex, prev_vtx)")
      (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (merge_helper subtype "polygon_merge.next_vtx"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (merge_helper_TCC3-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_helper subtype "polygon_merge.next_vtx"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (merge_helper_TCC4 0
  (merge_helper_TCC4-2 nil 3874129021
   ("" (skeep)
    (("" (expand "o")
      (("" (assert)
        (("" (expand "point_seq_AB_vtx?")
          (("" (skeep)
            (("" (ground)
              (("1" (typepred "next_merge_vertex(Am, Bm, vertex)")
                (("1" (replace -3 :dir rl :hide? t)
                  (("1" (grind) nil nil)) nil))
                nil)
               ("2"
                (typepred
                 "v(Am, Bm, first_vtx, next_vtx, 1 + vtx_num)")
                (("2" (expand "point_seq_AB_vtx?")
                  (("2" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_helper subtype "(number_fields.+)(polygon_merge.vtx_num, 1)"
    "naturalnumbers.upto((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices))"))
  (merge_helper_TCC4-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_helper subtype "(number_fields.+)(polygon_merge.vtx_num, 1)"
    "naturalnumbers.upto((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices))")))
 (merge_helper_TCC5 0
  (merge_helper_TCC5-2 nil 3874129021 ("" (termination-tcc) nil nil)
   nil shostak
   (merge_helper termination
    "polygon_merge.merge_helper(polygon_merge.Am, polygon_merge.Bm, polygon_merge.first_vtx, polygon_merge.next_vtx, polygon_merge.vertex, (number_fields.+)(polygon_merge.vtx_num, 1))"
    "nil"))
  (merge_helper_TCC5-1 nil 3874128958 ("" (termination-tcc) nil nil)
   nil nil
   (merge_helper termination
    "polygon_merge.merge_helper(polygon_merge.Am, polygon_merge.Bm, polygon_merge.first_vtx, polygon_merge.next_vtx, polygon_merge.vertex, (number_fields.+)(polygon_merge.vtx_num, 1))"
    "nil")))
 (merge_helper_TCC6 0
  (merge_helper_TCC6-2 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (ground)
        (("" (rewrite "seq_AB_concat" :dir rl)
          (("" (hide -) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_helper subtype
    "finite_sequences[point_2d].o(vertex_list.singleton_seq(polygon_merge.next_vtx), polygon_merge.merge_helper(polygon_merge.Am, polygon_merge.Bm, polygon_merge.first_vtx, polygon_merge.next_vtx, polygon_merge.vertex, (number_fields.+)(polygon_merge.vtx_num, 1)))"
    "{s: (polygon_merge.point_seq_AB_vtx?(polygon_merge.Am, polygon_merge.Bm)) | reals.<=(s`length, (number_fields.-)((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices), polygon_merge.vtx_num))}"))
  (merge_helper_TCC6-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_helper subtype
    "finite_sequences[point_2d].o(vertex_list.singleton_seq(polygon_merge.next_vtx), polygon_merge.merge_helper(polygon_merge.Am, polygon_merge.Bm, polygon_merge.first_vtx, polygon_merge.next_vtx, polygon_merge.vertex, (number_fields.+)(polygon_merge.vtx_num, 1)))"
    "{s: (polygon_merge.point_seq_AB_vtx?(polygon_merge.Am, polygon_merge.Bm)) | reals.<=(s`length, (number_fields.-)((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices), polygon_merge.vtx_num))}")))
 (first_vertex_AB 0
  (first_vertex_AB-1 nil 3874129021
   ("" (skeep*)
    (("" (typepred "inject_vertices_into_polygon(A, B)`1")
      (("" (typepred "inject_vertices_into_polygon(A, B)`2")
        (("" (replace -5 :dir rl)
          (("" (assert)
            (("" (expand "point_AB_vtx?")
              (("" (flatten)
                (("" (use "A_vertex_is_Am_vertex")
                  (("" (ground)
                    (("" (lemma "A_vertex_is_Am_vertex")
                      ((""
                        (inst - "B" "A" "Bm" "Am"
                         "first_vertex_merge(A, B)")
                        (("1" (assert)
                          (("1" (ground)
                            (("1"
                              (use "inject_vertices_into_polygon_comm")
                              (("1" (ground) nil nil)) nil)
                             ("2" (hide 3 4)
                              (("2"
                                (expand "vertex?")
                                (("2"
                                  (expand "first_vertex_merge")
                                  (("2"
                                    (inst 1 "topleft_vertex_idx(B)")
                                    (("2"
                                      (inst 2 "topleft_vertex_idx(A)")
                                      (("2"
                                        (apply (repeat (lift-if)))
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "merge_pre_condition_symmetric")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_vertex_merge_comm 0
  (first_vertex_merge_comm-1 nil 3874129021
   ("" (skeep)
    (("" (expand "first_vertex_merge")
      (("" (apply (repeat (lift-if)))
        (("" (ground)
          (("" (rewrite* "leftmost_is_topleft_x")
            (("" (rewrite* "topmost_is_topleft_y")
              (("" (apply-extensionality :hide? t) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_TCC1 0
  (merge_seq_TCC1-2 nil 3874129021
   ("" (skeep*)
    (("" (replace -3 :hide? t)
      (("" (use "first_vertex_AB")
        (("" (ground) (("" (apply-extensionality :hide? t) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_seq subtype "polygon_merge.first_vtx"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (merge_seq_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil nil
   (merge_seq subtype "polygon_merge.first_vtx"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (merge_seq_TCC2 0
  (merge_seq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq subtype "0"
    "naturalnumbers.upto((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices))"))
  (merge_seq_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil nil
   (merge_seq subtype "0"
    "naturalnumbers.upto((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices))")))
 (merge_seq_length_gt_0 0
  (merge_seq_length_gt_0-1 nil 3874129021
   ("" (skeep)
    (("" (expand "merge_seq")
      (("" (expand "o")
        (("" (expand "singleton_seq") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_helper_max_length_TCC1 0
  (merge_helper_max_length_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_helper_max_length subtype
    "(number_fields.-)(polygon_merge.n, polygon_merge.k)"
    "naturalnumbers.upto((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices))"))
  (merge_helper_max_length_TCC1-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_helper_max_length subtype
    "(number_fields.-)(polygon_merge.n, polygon_merge.k)"
    "naturalnumbers.upto((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices))")))
 (merge_helper_max_length 0
  (merge_helper_max_length-1 nil 3874129021
   ("" (skeep)
    (("" (generalize "k" "k" "upto(Am`num_vertices + Bm`num_vertices)")
      (("1" (induct "k")
        (("1" (ground) nil nil)
         ("2" (expand "merge_helper")
          (("2" (expand "empty_seq") (("2" (assert) nil nil)) nil))
          nil)
         ("3" (skeep)
          (("3" (expand "merge_helper" +)
            (("3" (expand "empty_seq")
              (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (hide 2) (("4" (grind) nil nil)) nil))
        nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_max_length 0
  (merge_seq_max_length-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "merge_seq")
      (("" (expand "o")
        (("" (expand "singleton_seq")
          (("" (lemma "merge_helper_max_length")
            ((""
              (inst - "Am" "Bm" "first_vertex_merge(A, B)"
               "first_vertex_merge(A, B)"
               "prev_0(first_vertex_merge(A, B))"
               "Am`num_vertices + Bm`num_vertices")
              (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_prefix_TCC1 0
  (merge_prefix_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix subtype
    "vertex_list.singleton_seq(polygon_merge.first_vtx)"
    "{s: (polygon_merge.point_seq_AB_vtx?(polygon_merge.Am, polygon_merge.Bm)) | s`length = (number_fields.+)(1, polygon_merge.k)}"))
  (merge_prefix_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_prefix subtype
    "vertex_list.singleton_seq(polygon_merge.first_vtx)"
    "{s: (polygon_merge.point_seq_AB_vtx?(polygon_merge.Am, polygon_merge.Bm)) | s`length = (number_fields.+)(1, polygon_merge.k)}")))
 (merge_prefix_TCC2 0
  (merge_prefix_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix subtype "polygon_merge.S"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}"))
  (merge_prefix_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_prefix subtype "polygon_merge.S"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}")))
 (merge_prefix_TCC3 0
  (merge_prefix_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix subtype "(number_fields.-)(polygon_merge.k, 1)"
    "below[S`length]"))
  (merge_prefix_TCC3-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_prefix subtype "(number_fields.-)(polygon_merge.k, 1)"
    "below[S`length]")))
 (merge_prefix_TCC4 0
  (merge_prefix_TCC4-2 nil 3874129021
   ("" (skeep*)
    (("" (expand "point_AB_vtx?")
      (("" (typepred "v(Am, Bm, first_vtx, k - 1)")
        (("1" (expand "point_seq_AB_vtx?")
          (("1" (inst - "k-1")
            (("1" (expand "point_AB_vtx?") (("1" (ground) nil nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_prefix subtype
    "polygon_merge.S`seq((number_fields.-)(polygon_merge.k, 1))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (merge_prefix_TCC4-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_prefix subtype
    "polygon_merge.S`seq((number_fields.-)(polygon_merge.k, 1))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (merge_prefix_TCC5 0
  (merge_prefix_TCC5-2 nil 3874129021
   ("" (skeep*)
    (("" (ground)
      (("" (expand "point_seq_AB_vtx?")
        (("" (skeep)
          (("" (expand "o")
            (("" (ground)
              (("1" (typepred "S")
                (("1" (expand "point_seq_AB_vtx?")
                  (("1" (inst?) nil nil)) nil))
                nil)
               ("2" (expand "singleton_seq") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_prefix subtype
    "finite_sequences[point_2d].o(polygon_merge.S, vertex_list.singleton_seq(polygon_merge.next_merge_vertex(polygon_merge.Am, polygon_merge.Bm, polygon_merge.S`seq((number_fields.-)(polygon_merge.k, 1)), polygon_merge.prev_vtx)))"
    "{s: (polygon_merge.point_seq_AB_vtx?(polygon_merge.Am, polygon_merge.Bm)) | s`length = (number_fields.+)(1, polygon_merge.k)}"))
  (merge_prefix_TCC5-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_prefix subtype
    "finite_sequences[point_2d].o(polygon_merge.S, vertex_list.singleton_seq(polygon_merge.next_merge_vertex(polygon_merge.Am, polygon_merge.Bm, polygon_merge.S`seq((number_fields.-)(polygon_merge.k, 1)), polygon_merge.prev_vtx)))"
    "{s: (polygon_merge.point_seq_AB_vtx?(polygon_merge.Am, polygon_merge.Bm)) | s`length = (number_fields.+)(1, polygon_merge.k)}")))
 (merge_prefix_TCC6 0
  (merge_prefix_TCC6-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix subtype "(number_fields.-)(polygon_merge.k, 1)"
    "nat"))
  (merge_prefix_TCC6-1 nil 3874128958 ("" (subtype-tcc) nil nil) nil
   nil
   (merge_prefix subtype "(number_fields.-)(polygon_merge.k, 1)"
    "nat")))
 (merge_prefix_TCC7 0
  (merge_prefix_TCC7-2 nil 3874129021 ("" (termination-tcc) nil nil)
   nil shostak
   (merge_prefix termination
    "polygon_merge.merge_prefix(polygon_merge.Am, polygon_merge.Bm, polygon_merge.first_vtx, (number_fields.-)(polygon_merge.k, 1))"
    "nil"))
  (merge_prefix_TCC7-1 nil 3874128958 ("" (termination-tcc) nil nil)
   nil nil
   (merge_prefix termination
    "polygon_merge.merge_prefix(polygon_merge.Am, polygon_merge.Bm, polygon_merge.first_vtx, (number_fields.-)(polygon_merge.k, 1))"
    "nil")))
 (merge_prefix_initial_element_TCC1 0
  (merge_prefix_initial_element_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix_initial_element subtype "0"
    "below[merge_prefix(Am, Bm, first_vtx, k)`length]"))
  (merge_prefix_initial_element_TCC1-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_prefix_initial_element subtype "0"
    "below[merge_prefix(Am, Bm, first_vtx, k)`length]")))
 (merge_prefix_initial_element 0
  (merge_prefix_initial_element-1 nil 3874129021
   ("" (induct "k")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "merge_prefix" +)
        (("2" (inst?) (("2" (expand "o") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (assert) nil nil)) nil))
    nil)
   nil shostak))
 (merge_prefix_length 0
  (merge_prefix_length-1 nil 3874129021
   ("" (skosimp*)
    (("" (typepred "merge_prefix(Am!1, Bm!1, first_vtx!1, k!1)")
      (("" (assert) nil nil)) nil))
    nil)
   nil shostak))
 (merge_prefix_prev_TCC1 0
  (merge_prefix_prev_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix_prev subtype "polygon_merge.i"
    "below[merge_prefix(Am, Bm, first_vtx, k)`length]"))
  (merge_prefix_prev_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_prefix_prev subtype "polygon_merge.i"
    "below[merge_prefix(Am, Bm, first_vtx, k)`length]")))
 (merge_prefix_prev_TCC2 0
  (merge_prefix_prev_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix_prev subtype "polygon_merge.i"
    "below[merge_prefix(Am, Bm, first_vtx, 1 + k)`length]"))
  (merge_prefix_prev_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_prefix_prev subtype "polygon_merge.i"
    "below[merge_prefix(Am, Bm, first_vtx, 1 + k)`length]")))
 (merge_prefix_prev 0
  (merge_prefix_prev-1 nil 3874129021
   ("" (skeep)
    (("" (expand "merge_prefix" 1 2)
      (("" (expand "o") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (merge_prefix_prefix_TCC1 0
  (merge_prefix_prefix_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_prefix_prefix subtype "polygon_merge.i"
    "below[merge_prefix(Am, Bm, first_vtx, d + k)`length]"))
  (merge_prefix_prefix_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_prefix_prefix subtype "polygon_merge.i"
    "below[merge_prefix(Am, Bm, first_vtx, d + k)`length]")))
 (merge_prefix_prefix 0
  (merge_prefix_prefix-1 nil 3874129021
   ("" (induct "d")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (inst?)
        (("2" (lemma "merge_prefix_prev")
          (("2" (inst - "Am" "Bm" "first_vtx" "k + j" "i")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_prefix_AB 0
  (merge_prefix_AB-1 nil 3874129021
   ("" (induct "k")
    (("1" (skosimp*)
      (("1" (expand "merge_prefix")
        (("1" (expand "singleton_seq") (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "merge_prefix" +)
        (("2" (expand "o")
          (("2" (ground)
            (("1" (inst?) nil nil)
             ("2" (assert)
              (("2" (typepred "i!1")
                (("2" (expand "singleton_seq") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_vertex_AB 0
  (merge_vertex_AB-1 nil 3874129021
   ("" (skeep*)
    (("" (typepred "i")
      (("" (replace -3 +)
        (("" (expand "merge_seq" +)
          (("" (expand "o" +)
            (("" (ground)
              (("1" (expand "singleton_seq")
                (("1" (use "first_vertex_AB") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (invoke (typepred "%1") (! 2 1 0 0))
                (("2" (expand "point_seq_AB_vtx?")
                  (("2" (inst - "i-1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_helper_seq_TCC1 0
  (merge_helper_seq_TCC1-2 nil 3874129021
   ("" (skeep*)
    (("" (use "first_vertex_AB") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (merge_helper_seq subtype "polygon_merge.first_vtx"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (merge_helper_seq_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_helper_seq subtype "polygon_merge.first_vtx"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (merge_helper_seq_TCC2 0
  (merge_helper_seq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_helper_seq subtype "polygon_merge.P"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}"))
  (merge_helper_seq_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_helper_seq subtype "polygon_merge.P"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}")))
 (merge_helper_seq_TCC3 0
  (merge_helper_seq_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_helper_seq subtype "polygon_merge.i" "below[P`length]"))
  (merge_helper_seq_TCC3-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_helper_seq subtype "polygon_merge.i" "below[P`length]")))
 (merge_helper_seq_TCC4 0
  (merge_helper_seq_TCC4-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "merge_prefix(Am, Bm, first_vtx, i)")
      (("" (expand "point_seq_AB_vtx?")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (merge_helper_seq subtype "polygon_merge.P`seq(polygon_merge.i)"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (merge_helper_seq_TCC4-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_helper_seq subtype "polygon_merge.P`seq(polygon_merge.i)"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (merge_helper_seq_TCC5 0
  (merge_helper_seq_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "i")
      (("" (expand "merge_seq")
        (("" (replace -4) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (merge_helper_seq subtype "polygon_merge.i"
    "naturalnumbers.upto((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices))"))
  (merge_helper_seq_TCC5-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_helper_seq subtype "polygon_merge.i"
    "naturalnumbers.upto((number_fields.+)(polygon_merge.Am`num_vertices, polygon_merge.Bm`num_vertices))")))
 (merge_helper_seq 0
  (merge_helper_seq-1 nil 3874129021
   ("" (skeep*)
    (("" (assert)
      (("" (induct "i")
        (("1" (flatten)
          (("1" (expand "merge_prefix")
            (("1" (expand "singleton_seq" 1 2)
              (("1" (expand "seq_prev_vtx")
                (("1" (expand "singleton_seq" 1 2)
                  (("1" (expand "merge_seq" +) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep + t)
          (("2"
            (name-replace "P"
             "merge_prefix(Am, Bm, first_vertex_merge(A, B), jb + 1)"
             :hide? nil)
            (("2"
              (name-replace "mp"
               "merge_prefix(Am, Bm, first_vertex_merge(A, B), jb)"
               :hide? nil)
              (("2" (expand "merge_helper" -)
                (("2" (lift-if)
                  (("2" (split -5)
                    (("1" (flatten)
                      (("1" (rewrite "concat_empty_seq")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "merge_prefix" -3)
                        (("2" (replace -2)
                          (("2"
                            (equate "seq_prev_vtx(P, jb + 1, 1)"
                             "mp`seq(jb)")
                            (("1" (replace -3 + :dir rl)
                              (("1"
                                (expand "o" 3 3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "singleton_seq" 3 2)
                                    (("1"
                                      (equate
                                       "seq_prev_vtx(mp, 1 + jb, 2)"
                                       "seq_prev_vtx(mp, jb, 1)")
                                      (("1"
                                        (rewrite "o_assoc")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -3 1 :dir rl)
                              (("2"
                                (hide-all-but (-2 1))
                                (("2"
                                  (expand "seq_prev_vtx" 1 1)
                                  (("2"
                                    (expand "o")
                                    (("2"
                                      (expand "singleton_seq")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep + t)
            (("3" (expand "merge_seq" -)
              (("3" (replace -2 :dir rl)
                (("3" (expand "o")
                  (("3" (expand "singleton_seq")
                    (("3"
                      (typepred
                       "merge_helper(Am, Bm, first_vertex_merge(A, B),
                             first_vertex_merge(A, B),
                             prev_0(first_vertex_merge(A, B)), 0)")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2) (("4" (skeep) (("4" (assert) nil nil)) nil))
          nil)
         ("5" (hide 2)
          (("5" (skeep)
            (("5"
              (typepred
               "merge_prefix(Am, Bm, first_vertex_merge(A, B), i)")
              (("5" (expand "point_seq_AB_vtx?")
                (("5" (inst?) nil nil)) nil))
              nil))
            nil))
          nil)
         ("6" (hide 2) (("6" (skeep) (("6" (assert) nil nil)) nil))
          nil)
         ("7" (hide 2)
          (("7" (skeep)
            (("7" (use "first_vertex_AB") (("7" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (extend_merge_prefix_merge_seq_TCC1 0
  (extend_merge_prefix_merge_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (extend_merge_prefix_merge_seq subtype "polygon_merge.i"
    "below[merge_prefix(Am, Bm, first_vtx, n)`length]"))
  (extend_merge_prefix_merge_seq_TCC1-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (extend_merge_prefix_merge_seq subtype "polygon_merge.i"
    "below[merge_prefix(Am, Bm, first_vtx, n)`length]")))
 (extend_merge_prefix_merge_seq 0
  (extend_merge_prefix_merge_seq-1 nil 3874129021
   ("" (skeep*)
    (("" (assert)
      (("" (flatten)
        (("" (use "merge_helper_seq")
          (("" (assert)
            (("" (inst - "merge_seq(A,B)`length - 1")
              (("1" (invoke (name-replace "mh" "%1") (! -1 r 2))
                (("1" (skeep + t)
                  (("1" (replace -2 +)
                    (("1" (expand "o" +)
                      (("1" (assert)
                        (("1" (lemma "merge_prefix_prefix")
                          (("1"
                            (inst - "Am" "Bm"
                             "first_vertex_merge(A, B)"
                             "merge_seq(A, B)`length - 1"
                             "n - merge_seq(A, B)`length + 1" "i")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "merge_seq")
                    (("2" (expand "o")
                      (("2" (expand "singleton_seq")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "merge_seq")
                  (("2" (expand "o")
                    (("2" (expand "singleton_seq")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_eq_merge_prefix_TCC1 0
  (merge_seq_eq_merge_prefix_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (use "first_vertex_AB") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (merge_seq_eq_merge_prefix subtype
    "polygon_merge.first_vertex_merge(polygon_merge.A, polygon_merge.B)"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (merge_seq_eq_merge_prefix_TCC1-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_eq_merge_prefix subtype
    "polygon_merge.first_vertex_merge(polygon_merge.A, polygon_merge.B)"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (merge_seq_eq_merge_prefix_TCC2 0
  (merge_seq_eq_merge_prefix_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_eq_merge_prefix subtype
    "(number_fields.-)(polygon_merge.merge_seq(polygon_merge.A, polygon_merge.B)`length, 1)"
    "nat"))
  (merge_seq_eq_merge_prefix_TCC2-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_eq_merge_prefix subtype
    "(number_fields.-)(polygon_merge.merge_seq(polygon_merge.A, polygon_merge.B)`length, 1)"
    "nat")))
 (merge_seq_eq_merge_prefix 0
  (merge_seq_eq_merge_prefix-1 nil 3874129021
   ("" (skeep*)
    (("" (use "merge_seq_length_gt_0")
      (("" (lemma "extend_merge_prefix_merge_seq")
        (("" (inst - "A" "B" "Am" "Bm" "merge_seq(A, B)`length - 1")
          (("1" (ground)
            (("1" (apply-extensionality :hide? t)
              (("1" (apply-extensionality :hide? t) nil nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_merge_vtx_seq_TCC1 0
  (next_merge_vtx_seq_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (use "first_vertex_AB") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (next_merge_vtx_seq subtype "polygon_merge.L"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}"))
  (next_merge_vtx_seq_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vtx_seq subtype "polygon_merge.L"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}")))
 (next_merge_vtx_seq_TCC2 0
  (next_merge_vtx_seq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_merge_vtx_seq subtype "(number_fields.+)(polygon_merge.i, 1)"
    "below[L`length]"))
  (next_merge_vtx_seq_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vtx_seq subtype "(number_fields.+)(polygon_merge.i, 1)"
    "below[L`length]")))
 (next_merge_vtx_seq_TCC3 0
  (next_merge_vtx_seq_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_merge_vtx_seq subtype "polygon_merge.i" "below[L`length]"))
  (next_merge_vtx_seq_TCC3-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vtx_seq subtype "polygon_merge.i" "below[L`length]")))
 (next_merge_vtx_seq_TCC4 0
  (next_merge_vtx_seq_TCC4-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "merge_prefix(Am, Bm, first_vertex_merge(A, B), n)")
      (("" (replace -4 :dir rl)
        (("" (expand "point_seq_AB_vtx?") (("" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (next_merge_vtx_seq subtype "polygon_merge.L`seq(polygon_merge.i)"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (next_merge_vtx_seq_TCC4-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (next_merge_vtx_seq subtype "polygon_merge.L`seq(polygon_merge.i)"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (next_merge_vtx_seq 0
  (next_merge_vtx_seq-1 nil 3874129021
   ("" (skeep)
    (("" (induct "n")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (skeep + t)
          (("2" (expand "merge_prefix")
            (("2" (replace -3)
              (("2" (expand "singleton_seq") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep*)
        (("3" (expand "merge_prefix" -3)
          (("3"
            (name-replace "P"
             "merge_prefix(Am, Bm, first_vertex_merge(A, B), j)" :hide?
             nil)
            (("3" (inst - "Am" "Bm" "L ^ (0, j)")
              (("3" (case "L`length = j + 2")
                (("1" (ground)
                  (("1" (typepred "i")
                    (("1" (replace -3 -1)
                      (("1" (assert)
                        (("1" (case-replace "j=i")
                          (("1"
                            (equate "seq_prev_vtx(L, i, 1)"
                             "seq_prev_vtx(P, 1 + i, 2)")
                            (("1" (replace -7 1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "o" +)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "seq_prev_vtx" 1)
                              (("2"
                                (replace -7 1)
                                (("2"
                                  (expand "o" +)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "i")
                            (("1" (rewrite* "subseq_same_seq")
                              (("1"
                                (hide -6)
                                (("1"
                                  (expand "seq_prev_vtx")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand "^")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "^")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (expand "^")
                                        (("3"
                                          (expand "min")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "^")
                              (("2"
                                (expand "min")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (name-replace "N"
                     "singleton_seq(next_merge_vertex(Am,
                                        Bm,
                                        P`seq(j),
                                        seq_prev_vtx(P, 1 + j, 2)))")
                    (("1" (replace -2 -4 :dir rl)
                      (("1" (replace -4 1)
                        (("1" (hide-all-but 1)
                          (("1" (use "subseq_concat_left")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "P")
                      (("2" (expand "point_seq_AB_vtx?")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -4 1)
                  (("2" (replace -1 1 :dir rl)
                    (("2" (expand "o") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (skeep*)
          (("4" (lemma "merge_prefix_AB")
            (("4" (inst - "Am" "Bm" "first_vertex_merge(A, B)" "n" "i")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skeep)
          (("5" (use "first_vertex_AB") (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_vertex_seq_TCC1 0
  (merge_vertex_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_vertex_seq subtype "polygon_merge.L"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}"))
  (merge_vertex_seq_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_vertex_seq subtype "polygon_merge.L"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}")))
 (merge_vertex_seq_TCC2 0
  (merge_vertex_seq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_vertex_seq subtype "(number_fields.+)(polygon_merge.i, 1)"
    "below[L`length]"))
  (merge_vertex_seq_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_vertex_seq subtype "(number_fields.+)(polygon_merge.i, 1)"
    "below[L`length]")))
 (merge_vertex_seq_TCC3 0
  (merge_vertex_seq_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_vertex_seq subtype "polygon_merge.i" "below[L`length]"))
  (merge_vertex_seq_TCC3-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_vertex_seq subtype "polygon_merge.i" "below[L`length]")))
 (merge_vertex_seq_TCC4 0
  (merge_vertex_seq_TCC4-2 nil 3874129021
   ("" (skeep*)
    (("" (use "merge_vertex_AB")
      (("" (assert) (("" (assert) (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (merge_vertex_seq subtype "polygon_merge.L`seq(polygon_merge.i)"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (merge_vertex_seq_TCC4-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_vertex_seq subtype "polygon_merge.L`seq(polygon_merge.i)"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (merge_vertex_seq 0
  (merge_vertex_seq-1 nil 3874129021
   ("" (skeep*)
    (("" (use "merge_helper_seq")
      (("" (ground)
        (("" (inst - "L`length - 1")
          ((""
            (case "L = merge_prefix(Am, Bm, first_vertex_merge(A, B), L`length - 1)")
            (("1" (hide -2)
              (("1" (use "next_merge_vtx_seq")
                (("1" (ground) (("1" (inst?) nil nil)) nil)) nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (use "length_concat_left") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_vertices_wrap_TCC1 0
  (merge_seq_vertices_wrap_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_vertices_wrap subtype "polygon_merge.L"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}"))
  (merge_seq_vertices_wrap_TCC1-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_vertices_wrap subtype "polygon_merge.L"
    "{S: finite_sequences[point_2d].finseq | reals.>(S`length, 0)}")))
 (merge_seq_vertices_wrap_TCC2 0
  (merge_seq_vertices_wrap_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_vertices_wrap subtype
    "(number_fields.-)(polygon_merge.L`length, 1)" "nat"))
  (merge_seq_vertices_wrap_TCC2-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_vertices_wrap subtype
    "(number_fields.-)(polygon_merge.L`length, 1)" "nat")))
 (merge_seq_vertices_wrap_TCC3 0
  (merge_seq_vertices_wrap_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_seq_vertices_wrap subtype
    "(number_fields.-)(polygon_merge.L`length, 1)" "below[L`length]"))
  (merge_seq_vertices_wrap_TCC3-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_vertices_wrap subtype
    "(number_fields.-)(polygon_merge.L`length, 1)" "below[L`length]")))
 (merge_seq_vertices_wrap_TCC4 0
  (merge_seq_vertices_wrap_TCC4-2 nil 3874129021
   ("" (skeep*)
    (("" (use "merge_vertex_AB")
      (("" (ground)
        (("" (inst?)
          (("" (replace -2)
            (("" (hide-all-but 1)
              (("" (expand "merge_seq")
                (("" (expand "o")
                  (("" (expand "singleton_seq") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_seq_vertices_wrap subtype
    "polygon_merge.L`seq((number_fields.-)(polygon_merge.L`length, 1))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))"))
  (merge_seq_vertices_wrap_TCC4-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_vertices_wrap subtype
    "polygon_merge.L`seq((number_fields.-)(polygon_merge.L`length, 1))"
    "(polygon_merge.point_AB_vtx?(polygon_merge.Am, polygon_merge.Bm))")))
 (merge_seq_vertices_wrap 0
  (merge_seq_vertices_wrap-1 nil 3874129021
   ("" (skeep*)
    (("" (skoletin)
      (("" (use "merge_helper_seq")
        (("" (assert)
          (("" (assert)
            (("" (case "L`length > 0")
              (("1" (inst - "L`length - 1")
                (("1" (lemma "extend_merge_prefix_merge_seq")
                  (("1" (inst - "A" "B" "Am" "Bm" "L`length - 1")
                    (("1" (assert)
                      (("1" (expand "merge_helper")
                        (("1" (inst-cp - "L`length - 1")
                          (("1" (replace -2 :dir rl)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (expand "seq_prev_vtx")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (inst - "L`length - 2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "forall (x, y, z: finseq[point_2d]): x = y o z => x`length = (y o z)`length")
                                  (("1"
                                    (forward-chain -1)
                                    (("1"
                                      (hide -2 1)
                                      (("1"
                                        (expand "o")
                                        (("1"
                                          (expand "singleton_seq")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (replace -4)
                (("2" (hide-all-but 1)
                  (("2" (expand "merge_seq")
                    (("2" (expand "o")
                      (("2" (expand "singleton_seq")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_path_props_TCC1 0
  (merge_path_props_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_path_props subtype "polygon_merge.i" "below[L`length]"))
  (merge_path_props_TCC1-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_path_props subtype "polygon_merge.i" "below[L`length]")))
 (merge_path_props_TCC2 0
  (merge_path_props_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (merge_path_props subtype "(number_fields.+)(polygon_merge.i, 1)"
    "below[L`length]"))
  (merge_path_props_TCC2-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_path_props subtype "(number_fields.+)(polygon_merge.i, 1)"
    "below[L`length]")))
 (merge_path_props_TCC3 0
  (merge_path_props_TCC3-2 nil 3874129021
   ("" (skeep*)
    (("" (use "merge_vertex_seq")
      (("" (assert)
        (("" (assert)
          (("" (inst?)
            (("" (replace -1 :hide? t)
              (("" (lift-if)
                (("" (ground)
                  (("1" (use "next_vertex_distinct")
                    (("1" (assert) nil nil)) nil)
                   ("2" (use "next_vertex_distinct")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_path_props subtype
    "polygon_merge.L`seq((number_fields.+)(polygon_merge.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= polygon_merge.L`seq(polygon_merge.i)}"))
  (merge_path_props_TCC3-1 nil 3874128958 ("" (subtype-tcc) nil nil)
   nil nil
   (merge_path_props subtype
    "polygon_merge.L`seq((number_fields.+)(polygon_merge.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= polygon_merge.L`seq(polygon_merge.i)}")))
 (merge_path_props 0
  (merge_path_props-1 nil 3874129021
   ("" (skeep*)
    (("" (lemma "vertex_find_index")
      (("" (inst -1 "Am" "L`seq(i)")
        (("" (lemma "vertex_find_index")
          (("" (inst -1 "Bm" "L`seq(i)")
            (("" (use "segment_in_edges")
              (("" (lemma "segment_in_edges")
                (("" (inst -1 "L`seq(i)" "L`seq(i + 1)" "Bm")
                  (("" (use "merge_vertex_seq")
                    (("" (assert)
                      (("" (assert)
                        (("" (inst?)
                          (("" (flatten)
                            (("" (assert)
                              ((""
                                (expand "next_merge_vertex")
                                ((""
                                  (apply (repeat (lift-if)))
                                  ((""
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use "merge_vertex_AB")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand
                                                 "point_AB_vtx?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (adj_merge_seq_vertices_distinct 0
  (adj_merge_seq_vertices_distinct-1 nil 3874129021
   ("" (skeep*)
    (("" (use "merge_vertex_seq")
      (("" (ground)
        (("" (inst?)
          (("" (use "next_vertex_distinct") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_is_first_merge_seq_length_TCC1 0
  (next_is_first_merge_seq_length_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_is_first_merge_seq_length subtype "polygon_merge.k"
    "below[merge_prefix(Am, Bm, first_vtx, k)`length]"))
  (next_is_first_merge_seq_length_TCC1-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (next_is_first_merge_seq_length subtype "polygon_merge.k"
    "below[merge_prefix(Am, Bm, first_vtx, k)`length]")))
 (next_is_first_merge_seq_length_TCC2 0
  (next_is_first_merge_seq_length_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_is_first_merge_seq_length subtype
    "(number_fields.-)(polygon_merge.k, 1)"
    "below[merge_prefix(Am, Bm, first_vtx, k)`length]"))
  (next_is_first_merge_seq_length_TCC2-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (next_is_first_merge_seq_length subtype
    "(number_fields.-)(polygon_merge.k, 1)"
    "below[merge_prefix(Am, Bm, first_vtx, k)`length]")))
 (next_is_first_merge_seq_length 0
  (next_is_first_merge_seq_length-1 nil 3874129021
   ("" (skeep*)
    (("" (use "merge_helper_seq")
      (("" (ground)
        (("" (inst - "k")
          (("" (expand "seq_prev_vtx")
            (("" (expand "merge_helper")
              (("" (rewrite "concat_empty_seq")
                (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_only_vertex_intersections_TCC1 0
  (merge_seq_only_vertex_intersections_TCC1-2 nil 3874129021
   ("" (skeep*)
    (("" (use "adj_merge_seq_vertices_distinct")
      (("" (ground) (("" (inst?) nil nil)) nil)) nil))
    nil)
   nil shostak
   (merge_seq_only_vertex_intersections subtype
    "polygon_merge.merge_seq(polygon_merge.A, polygon_merge.B)"
    "{V: finite_sequences[point_2d].finseq | FORALL (i: naturalnumbers.below((number_fields.-)(V`length, 1))): (booleans.NOT)(V`seq(i) = V`seq((number_fields.+)(1, i)))}"))
  (merge_seq_only_vertex_intersections_TCC1-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_only_vertex_intersections subtype
    "polygon_merge.merge_seq(polygon_merge.A, polygon_merge.B)"
    "{V: finite_sequences[point_2d].finseq | FORALL (i: naturalnumbers.below((number_fields.-)(V`length, 1))): (booleans.NOT)(V`seq(i) = V`seq((number_fields.+)(1, i)))}")))
 (merge_seq_only_vertex_intersections_TCC2 0
  (merge_seq_only_vertex_intersections_TCC2-2 nil 3874129021
   ("" (skeep*)
    (("" (use "adj_merge_seq_vertices_distinct")
      (("" (ground) (("" (inst?) nil nil)) nil)) nil))
    nil)
   nil shostak
   (merge_seq_only_vertex_intersections subtype
    "polygon_merge.merge_seq(polygon_merge.A, polygon_merge.B)"
    "{V: finite_sequences[point_2d].finseq | FORALL (i: naturalnumbers.below((number_fields.-)(V`length, 1))): (booleans.NOT)(V`seq(i) = V`seq((number_fields.+)(1, i)))}"))
  (merge_seq_only_vertex_intersections_TCC2-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_only_vertex_intersections subtype
    "polygon_merge.merge_seq(polygon_merge.A, polygon_merge.B)"
    "{V: finite_sequences[point_2d].finseq | FORALL (i: naturalnumbers.below((number_fields.-)(V`length, 1))): (booleans.NOT)(V`seq(i) = V`seq((number_fields.+)(1, i)))}")))
 (merge_seq_only_vertex_intersections 0
  (merge_seq_only_vertex_intersections-1 nil 3874129021
   ("" (skeep*)
    (("" (lemma "injected_overlaps_equal")
      (("" (inst - "A" "B" "Am" "Bm" _ _)
        (("" (lemma "injected_intersections_only_at_endpoints")
          (("" (inst - "A" "B" "Am" "Bm" _ _ _)
            (("" (lemma "merge_path_props")
              (("" (inst - "A" "B" "Am" "Bm" "merge_seq(A,B)")
                (("" (replace -4 :dir rl)
                  (("" (split 1)
                    (("1" (skeep + t)
                      (("1" (expand "edge_of_polygon?" -1)
                        (("1" (skeep - t)
                          (("1"
                            (name-replace "M" "merge_seq(A, B)" :hide?
                             nil)
                            (("1"
                              (expand "seq_only_vertex_intersections?")
                              (("1"
                                (skeep + t)
                                (("1"
                                  (expand
                                   "same_edge_or_vertex_intersection?")
                                  (("1"
                                    (inst - "i!1")
                                    (("1"
                                      (skoletin)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2 :dir rl)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (hide -7 -8)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (use
                                                   "same_polygon_edge_overlaps_equal")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "edge_of_polygon?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (lemma
                                                         "only_adjacent_edges_intersect")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "Am"
                                                           "i"
                                                           "i!2")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "equal_or_adjacent_edge?")
                                                                  (("2"
                                                                    (case-replace
                                                                     "i!2 = i")
                                                                    (("1"
                                                                      (expand
                                                                       "edges_of_polygon")
                                                                      (("1"
                                                                        (expand
                                                                         "segment_endpoint?")
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           2
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "are_segments_overlapping_refl")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "adjacent_edges_share_only_vertex")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "Am"
                                                                         "i"
                                                                         "i!2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "p")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "segment_endpoint?")
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "adjacent_edge?")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -9 "e" "S")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (rewrite
                                                         "reverse_reverse_segment")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "are_segments_overlapping_symm")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "e"
                                                     "S"
                                                     "p")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "are_segments_overlapping_symm")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (replace -1 :dir rl)
                                          (("2"
                                            (use "merge_path_props")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (inst - "i!1")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep + t)
                      (("2" (expand "edge_of_polygon?" -1)
                        (("2" (skeep - t)
                          (("2"
                            (name-replace "M" "merge_seq(A, B)" :hide?
                             nil)
                            (("2"
                              (expand "seq_only_vertex_intersections?")
                              (("2"
                                (skeep + t)
                                (("2"
                                  (expand
                                   "same_edge_or_vertex_intersection?")
                                  (("2"
                                    (inst - "i!1")
                                    (("1"
                                      (skoletin)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2 :dir rl)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -9 "S" "e")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "S"
                                                     "e"
                                                     "p")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -7 -8)
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (use
                                                   "same_polygon_edge_overlaps_equal")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "edge_of_polygon?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (lemma
                                                         "only_adjacent_edges_intersect")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "Bm"
                                                           "i"
                                                           "i!2")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "equal_or_adjacent_edge?")
                                                                  (("2"
                                                                    (case-replace
                                                                     "i!2 = i")
                                                                    (("1"
                                                                      (use
                                                                       "are_segments_overlapping_refl")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "adjacent_edges_share_only_vertex")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "Bm"
                                                                         "i"
                                                                         "i!2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "p")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "segment_endpoint?")
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "adjacent_edge?")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (replace -1 :dir rl)
                                          (("2"
                                            (use "merge_path_props")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (inst - "i!1")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_seq_only_vertex_int_subseq_TCC1 0
  (merge_seq_only_vertex_int_subseq_TCC1-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "i!1")
      (("" (lemma "adj_merge_seq_vertices_distinct")
        (("" (inst - "A" "B" "Am" "Bm" "merge_seq(A, B)")
          (("" (ground)
            (("" (inst - "i + i!1")
              (("1" (replace -3)
                (("1" (expand "^")
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (expand "empty_seq")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -3 :hide? t)
                (("2" (hide -3)
                  (("2" (expand "^")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (expand "empty_seq")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_seq_only_vertex_int_subseq subtype "polygon_merge.S"
    "{V: finite_sequences[point_2d].finseq | FORALL (i: naturalnumbers.below((number_fields.-)(V`length, 1))): (booleans.NOT)(V`seq(i) = V`seq((number_fields.+)(1, i)))}"))
  (merge_seq_only_vertex_int_subseq_TCC1-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_only_vertex_int_subseq subtype "polygon_merge.S"
    "{V: finite_sequences[point_2d].finseq | FORALL (i: naturalnumbers.below((number_fields.-)(V`length, 1))): (booleans.NOT)(V`seq(i) = V`seq((number_fields.+)(1, i)))}")))
 (merge_seq_only_vertex_int_subseq_TCC2 0
  (merge_seq_only_vertex_int_subseq_TCC2-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "i!1")
      (("" (lemma "adj_merge_seq_vertices_distinct")
        (("" (inst - "A" "B" "Am" "Bm" "merge_seq(A, B)")
          (("" (ground)
            (("" (inst - "i + i!1")
              (("1" (replace -3 :hide? t)
                (("1" (hide -2)
                  (("1" (expand "^")
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (expand "empty_seq")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -3 :hide? t)
                (("2" (hide -2 -4)
                  (("2" (expand "^")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (expand "empty_seq")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (merge_seq_only_vertex_int_subseq subtype "polygon_merge.S"
    "{V: finite_sequences[point_2d].finseq | FORALL (i: naturalnumbers.below((number_fields.-)(V`length, 1))): (booleans.NOT)(V`seq(i) = V`seq((number_fields.+)(1, i)))}"))
  (merge_seq_only_vertex_int_subseq_TCC2-1 nil 3874128958
   ("" (subtype-tcc) nil nil) nil nil
   (merge_seq_only_vertex_int_subseq subtype "polygon_merge.S"
    "{V: finite_sequences[point_2d].finseq | FORALL (i: naturalnumbers.below((number_fields.-)(V`length, 1))): (booleans.NOT)(V`seq(i) = V`seq((number_fields.+)(1, i)))}")))
 (merge_seq_only_vertex_int_subseq 0
  (merge_seq_only_vertex_int_subseq-1 nil 3874129021
   ("" (skeep*)
    (("" (use "merge_seq_only_vertex_intersections")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst? -)
            (("1" (hide -2)
              (("1" (expand "seq_only_vertex_intersections?")
                (("1" (skeep + t)
                  (("1" (replace -4)
                    (("1" (expand "^" -1)
                      (("1" (lift-if)
                        (("1" (split -1)
                          (("1" (expand "empty_seq")
                            (("1" (propax) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (inst - "i + i!1")
                              (("1"
                                (expand "^" +)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (hide -1)
            (("2" (inst? -)
              (("2" (expand "seq_only_vertex_intersections?")
                (("2" (skeep + t)
                  (("2" (replace -4)
                    (("2" (expand "^" -1)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (expand "empty_seq")
                            (("1" (propax) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (inst - "i + i!1")
                              (("1"
                                (expand "^" +)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_vertex_merge_is_topleft_Am_or_Bm 0
  (first_vertex_merge_is_topleft_Am_or_Bm-1 nil 3874129021
   ("" (skeep*)
    (("" (skoletin)
      (("" (flatten)
        (("" (use "inject_vertices_into_polygon_comm")
          (("" (replace -2 :dir rl)
            (("" (lemma "injected_topleft_vertex_same")
              (("" (inst-cp - "A" "B" "Am" "Bm")
                (("" (inst - "B" "A" "Bm" "Am")
                  (("" (assert)
                    (("" (assert)
                      (("" (expand "first_vertex_merge")
                        (("" (apply (repeat (lift-if)))
                          (("" (rewrite* "leftmost_is_topleft_x")
                            (("" (rewrite* "topmost_is_topleft_y")
                              ((""
                                (replace -1)
                                ((""
                                  (replace -2)
                                  ((""
                                    (split -5)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (case
                                               "Am`vertices(topleft_vertex_idx(Am))`y =
       Bm`vertices(topleft_vertex_idx(Bm))`y")
                                              (("1"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                nil
                                                nil)
                                               ("2"
                                                (lemma
                                                 "topleft_vertex_bounds_vertices")
                                                (("2"
                                                  (inst
                                                   -
                                                   "Bm"
                                                   " Bm`vertices(topleft_vertex_idx(Bm))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "first_vtx")
                                                      (("1"
                                                        (apply-extensionality
                                                         2
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "vertex?")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (ground)
                                          (("2"
                                            (lemma
                                             "topleft_vertex_bounds_vertices")
                                            (("2"
                                              (inst
                                               -
                                               "Am"
                                               "Am`vertices(topleft_vertex_idx(Am))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst - "first_vtx")
                                                  (("1"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "vertex?")
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "topleft_vertex_bounds_vertices")
                                              (("1"
                                                (inst - "Bm" _)
                                                (("1"
                                                  (inst
                                                   -
                                                   "Bm`vertices(topleft_vertex_idx(Bm))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "first_vtx")
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "vertex?")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (ground)
                                          (("2"
                                            (lemma
                                             "topleft_vertex_bounds_vertices")
                                            (("2"
                                              (inst - "Am" _)
                                              (("2"
                                                (inst
                                                 -
                                                 "Am`vertices(topleft_vertex_idx(Am))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "first_vtx")
                                                    (("1"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "vertex?")
                                                  (("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (first_vertex_x_le_vertices 0
  (first_vertex_x_le_vertices-1 nil 3874129021
   ("" (skeep*)
    (("" (skoletin)
      (("" (use "inject_vertices_into_polygon_comm")
        (("" (lemma "injected_topleft_vertex_same")
          (("" (inst-cp - "A" "B" "Am" "Bm")
            (("" (inst - "B" "A" "Bm" "Am")
              (("1" (assert)
                (("1" (assert)
                  (("1" (assert)
                    (("1"
                      (case "vertex?(Am)(Am`vertices(topleft_vertex_idx(Am))) and
 vertex?(Bm)(Bm`vertices(topleft_vertex_idx(Bm)))")
                      (("1" (flatten)
                        (("1" (expand "first_vertex_merge")
                          (("1" (apply (repeat (lift-if)))
                            (("1" (rewrite* "leftmost_is_topleft_x")
                              (("1"
                                (rewrite* "topmost_is_topleft_y")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (replace -4)
                                    (("1"
                                      (split -6)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma
                                               "topleft_vertex_bounds_vertices")
                                              (("1"
                                                (inst-cp
                                                 -
                                                 "Am"
                                                 "Am`vertices(topleft_vertex_idx(Am))")
                                                (("1"
                                                  (inst
                                                   -
                                                   "Bm"
                                                   " Bm`vertices(topleft_vertex_idx(Bm))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "Am`vertices(i)")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "vertex?")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "Bm`vertices(i)")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "vertex?")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "topleft_vertex_bounds_vertices")
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "Am"
                                                 "Am`vertices(topleft_vertex_idx(Am))")
                                                (("2"
                                                  (inst
                                                   -
                                                   "Bm"
                                                   " Bm`vertices(topleft_vertex_idx(Bm))")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "Am`vertices(i)")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "vertex?")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "Bm`vertices(i)")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "vertex?")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma
                                               "topleft_vertex_bounds_vertices")
                                              (("1"
                                                (inst-cp
                                                 -
                                                 "Am"
                                                 "Am`vertices(topleft_vertex_idx(Am))")
                                                (("1"
                                                  (inst
                                                   -
                                                   "Bm"
                                                   " Bm`vertices(topleft_vertex_idx(Bm))")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "Am`vertices(i)")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "vertex?")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "Bm`vertices(i)")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "vertex?")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "topleft_vertex_bounds_vertices")
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "Am"
                                                 "Am`vertices(topleft_vertex_idx(Am))")
                                                (("2"
                                                  (inst
                                                   -
                                                   "Bm"
                                                   " Bm`vertices(topleft_vertex_idx(Bm))")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "Am`vertices(i)")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "vertex?")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "Bm`vertices(i)")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "vertex?")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "vertex?")
                          (("2" (ground)
                            (("1" (inst?) nil nil)
                             ("2" (inst?) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "merge_pre_condition_symmetric")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (prev_0_first_vtx_not_on_Am_or_Bm 0
  (prev_0_first_vtx_not_on_Am_or_Bm-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "prev_0")
      (("" (expand "point_on_polygon_perimeter?")
        (("" (use "first_vertex_x_le_vertices")
          (("" (assert)
            (("" (assert)
              (("" (flatten)
                (("" (ground)
                  (("1" (hide -3)
                    (("1" (skeep - t)
                      (("1" (expand "edge_of_polygon?")
                        (("1" (skeep)
                          (("1" (inst-cp - "i")
                            (("1" (inst - "next_index(Am, i)")
                              (("1"
                                (lemma
                                 "leftward_point_not_on_ray_of_edge")
                                (("1"
                                  (inst-cp - "p" "e")
                                  (("1"
                                    (inst - "p" "reverse_segment(e)")
                                    (("1"
                                      (expand "reverse_segment")
                                      (("1"
                                        (expand "edges_of_polygon")
                                        (("1"
                                          (replace -3 (-1 -2) :dir rl)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "Am`vertices(i)`x <= Am`vertices(next_index(Am, i))`x")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (rewrite
                                                   "point_on_segment_has_norm_offset")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "point_on_arb_ray?")
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -8
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (hide-all-but
                                                             (-6 1))
                                                            (("2"
                                                              (expand
                                                               "+"
                                                               +)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2)
                                                (("2"
                                                  (rewrite
                                                   "point_on_reverse_segment"
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (replace
                                                     -2
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand
                                                       "reverse_segment")
                                                      (("2"
                                                        (rewrite
                                                         "point_on_segment_has_norm_offset")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "point_on_arb_ray?")
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -7
                                                               1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (hide-all-but
                                                                 (-4
                                                                  1))
                                                                (("2"
                                                                  (expand
                                                                   "+"
                                                                   +)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep - t)
                    (("2" (expand "edge_of_polygon?")
                      (("2" (skeep)
                        (("2" (hide -3)
                          (("2" (inst-cp - "i")
                            (("2" (inst - "next_index(Bm, i)")
                              (("2"
                                (lemma
                                 "leftward_point_not_on_ray_of_edge")
                                (("2"
                                  (inst-cp - "p" "e")
                                  (("2"
                                    (inst - "p" "reverse_segment(e)")
                                    (("2"
                                      (expand "reverse_segment")
                                      (("2"
                                        (expand "edges_of_polygon")
                                        (("2"
                                          (replace -3 (-1 -2) :dir rl)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "Bm`vertices(i)`x <= Bm`vertices(next_index(Bm, i))`x")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (rewrite
                                                   "point_on_segment_has_norm_offset")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "point_on_arb_ray?")
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -8
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (hide-all-but
                                                             (-6 1))
                                                            (("2"
                                                              (expand
                                                               "+"
                                                               +)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "point_on_reverse_segment"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (replace
                                                       -2
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "reverse_segment")
                                                        (("2"
                                                          (rewrite
                                                           "point_on_segment_has_norm_offset")
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "point_on_arb_ray?")
                                                                (("1"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -7
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-4
                                                                    1))
                                                                  (("2"
                                                                    (expand
                                                                     "+"
                                                                     +)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

